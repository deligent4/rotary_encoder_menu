
rotary_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1e0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d20  0800b2f0  0800b2f0  0000c2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c010  0800c010  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c010  0800c010  0000d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c018  0800c018  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c018  0800c018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c01c  0800c01c  0000d01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c020  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200001e8  0800c208  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  0800c208  0000e8c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001191d  00000000  00000000  0000e211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca6  00000000  00000000  0001fb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  000227d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da2  00000000  00000000  00023950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d044  00000000  00000000  000246f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d6d  00000000  00000000  00041736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900a4  00000000  00000000  000574a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e7547  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef4  00000000  00000000  000e75d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000ed4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b2d8 	.word	0x0800b2d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b2d8 	.word	0x0800b2d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bba:	2afd      	cmp	r2, #253	@ 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	@ 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	@ 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	@ 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_f2iz>:
 8000ef4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000efc:	d30f      	bcc.n	8000f1e <__aeabi_f2iz+0x2a>
 8000efe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f06:	d90d      	bls.n	8000f24 <__aeabi_f2iz+0x30>
 8000f08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f10:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	bf18      	it	ne
 8000f1a:	4240      	negne	r0, r0
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr
 8000f24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f28:	d101      	bne.n	8000f2e <__aeabi_f2iz+0x3a>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d105      	bne.n	8000f3a <__aeabi_f2iz+0x46>
 8000f2e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f32:	bf08      	it	eq
 8000f34:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <__aeabi_d2lz>:
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2300      	movs	r3, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	460d      	mov	r5, r1
 8000f4a:	f7ff fd37 	bl	80009bc <__aeabi_dcmplt>
 8000f4e:	b928      	cbnz	r0, 8000f5c <__aeabi_d2lz+0x1c>
 8000f50:	4620      	mov	r0, r4
 8000f52:	4629      	mov	r1, r5
 8000f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f58:	f000 b80a 	b.w	8000f70 <__aeabi_d2ulz>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f62:	f000 f805 	bl	8000f70 <__aeabi_d2ulz>
 8000f66:	4240      	negs	r0, r0
 8000f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f6c:	bd38      	pop	{r3, r4, r5, pc}
 8000f6e:	bf00      	nop

08000f70 <__aeabi_d2ulz>:
 8000f70:	b5d0      	push	{r4, r6, r7, lr}
 8000f72:	2200      	movs	r2, #0
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <__aeabi_d2ulz+0x34>)
 8000f76:	4606      	mov	r6, r0
 8000f78:	460f      	mov	r7, r1
 8000f7a:	f7ff faad 	bl	80004d8 <__aeabi_dmul>
 8000f7e:	f7ff fd83 	bl	8000a88 <__aeabi_d2uiz>
 8000f82:	4604      	mov	r4, r0
 8000f84:	f7ff fa2e 	bl	80003e4 <__aeabi_ui2d>
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <__aeabi_d2ulz+0x38>)
 8000f8c:	f7ff faa4 	bl	80004d8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4630      	mov	r0, r6
 8000f96:	4639      	mov	r1, r7
 8000f98:	f7ff f8e6 	bl	8000168 <__aeabi_dsub>
 8000f9c:	f7ff fd74 	bl	8000a88 <__aeabi_d2uiz>
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	bdd0      	pop	{r4, r6, r7, pc}
 8000fa4:	3df00000 	.word	0x3df00000
 8000fa8:	41f00000 	.word	0x41f00000

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_DMA_Init+0x38>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <MX_DMA_Init+0x38>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_DMA_Init+0x38>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2010      	movs	r0, #16
 8000fd0:	f001 fead 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fd4:	2010      	movs	r0, #16
 8000fd6:	f001 fec6 	bl	8002d66 <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a39      	ldr	r2, [pc, #228]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b37      	ldr	r3, [pc, #220]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001014:	4b34      	ldr	r3, [pc, #208]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a33      	ldr	r2, [pc, #204]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a2d      	ldr	r2, [pc, #180]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a27      	ldr	r2, [pc, #156]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001062:	4822      	ldr	r0, [pc, #136]	@ (80010ec <MX_GPIO_Init+0x104>)
 8001064:	f002 faa7 	bl	80035b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLU_Pin;
 8001068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BLU_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	481a      	ldr	r0, [pc, #104]	@ (80010ec <MX_GPIO_Init+0x104>)
 8001082:	f002 f8fd 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_SW_Pin|B_SW_Pin|C_SW_Pin|ROT_SW_Pin;
 8001086:	2333      	movs	r3, #51	@ 0x33
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <MX_GPIO_Init+0x108>)
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	4816      	ldr	r0, [pc, #88]	@ (80010f4 <MX_GPIO_Init+0x10c>)
 800109a:	f002 f8f1 	bl	8003280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2006      	movs	r0, #6
 80010a4:	f001 fe43 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010a8:	2006      	movs	r0, #6
 80010aa:	f001 fe5c 	bl	8002d66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2007      	movs	r0, #7
 80010b4:	f001 fe3b 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010b8:	2007      	movs	r0, #7
 80010ba:	f001 fe54 	bl	8002d66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200a      	movs	r0, #10
 80010c4:	f001 fe33 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010c8:	200a      	movs	r0, #10
 80010ca:	f001 fe4c 	bl	8002d66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2017      	movs	r0, #23
 80010d4:	f001 fe2b 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010d8:	2017      	movs	r0, #23
 80010da:	f001 fe44 	bl	8002d66 <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40011000 	.word	0x40011000
 80010f0:	10210000 	.word	0x10210000
 80010f4:	40010800 	.word	0x40010800

080010f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f002 fa87 	bl	8003648 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 ff48 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000204 	.word	0x20000204
 800114c:	40005400 	.word	0x40005400
 8001150:	00061a80 	.word	0x00061a80

08001154 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a2c      	ldr	r2, [pc, #176]	@ (8001220 <HAL_I2C_MspInit+0xcc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d151      	bne.n	8001218 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a2a      	ldr	r2, [pc, #168]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800118c:	23c0      	movs	r3, #192	@ 0xc0
 800118e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001190:	2312      	movs	r3, #18
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4822      	ldr	r0, [pc, #136]	@ (8001228 <HAL_I2C_MspInit+0xd4>)
 80011a0:	f002 f86e 	bl	8003280 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 80011aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ae:	61d3      	str	r3, [r2, #28]
 80011b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <HAL_I2C_MspInit+0xdc>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011c4:	2210      	movs	r2, #16
 80011c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011ee:	f001 fdd5 	bl	8002d9c <HAL_DMA_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80011f8:	f000 feec 	bl	8001fd4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 8001200:	635a      	str	r2, [r3, #52]	@ 0x34
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	201f      	movs	r0, #31
 800120e:	f001 fd8e 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001212:	201f      	movs	r0, #31
 8001214:	f001 fda7 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40005400 	.word	0x40005400
 8001224:	40021000 	.word	0x40021000
 8001228:	40010c00 	.word	0x40010c00
 800122c:	20000258 	.word	0x20000258
 8001230:	4002006c 	.word	0x4002006c

08001234 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800123c:	1d39      	adds	r1, r7, #4
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2201      	movs	r2, #1
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <__io_putchar+0x20>)
 8001246:	f005 fb59 	bl	80068fc <HAL_UART_Transmit>
  return ch;
 800124a:	687b      	ldr	r3, [r7, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000072c 	.word	0x2000072c

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f001 fc0a 	bl	8002a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f866 	bl	8001330 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f7ff fec0 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001268:	f7ff fea0 	bl	8000fac <MX_DMA_Init>
  MX_TIM3_Init();
 800126c:	f001 face 	bl	800280c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001270:	f7ff ff42 	bl	80010f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001274:	f001 fb64 	bl	8002940 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001278:	213c      	movs	r1, #60	@ 0x3c
 800127a:	4821      	ldr	r0, [pc, #132]	@ (8001300 <main+0xa8>)
 800127c:	f005 f81e 	bl	80062bc <HAL_TIM_Encoder_Start_IT>
  ssd1306_Init();
 8001280:	f000 fef8 	bl	8002074 <ssd1306_Init>
  update_display(); // Ensure the initial display is updated
 8001284:	f000 f9a2 	bl	80015cc <update_display>

  HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	@ 0x64
 800128a:	f001 fc55 	bl	8002b38 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tick = HAL_GetTick();
 800128e:	f001 fc49 	bl	8002b24 <HAL_GetTick>
 8001292:	4603      	mov	r3, r0
 8001294:	4a1b      	ldr	r2, [pc, #108]	@ (8001304 <main+0xac>)
 8001296:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8001298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129c:	481a      	ldr	r0, [pc, #104]	@ (8001308 <main+0xb0>)
 800129e:	f002 f9a2 	bl	80035e6 <HAL_GPIO_TogglePin>
//	  HAL_Delay(100);
	  if(HAL_GPIO_ReadPin(ROT_SW_GPIO_Port, ROT_SW_Pin) == 0){
 80012a2:	2120      	movs	r1, #32
 80012a4:	4819      	ldr	r0, [pc, #100]	@ (800130c <main+0xb4>)
 80012a6:	f002 f96f 	bl	8003588 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d105      	bne.n	80012bc <main+0x64>
		  HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b6:	4814      	ldr	r0, [pc, #80]	@ (8001308 <main+0xb0>)
 80012b8:	f002 f97d 	bl	80035b6 <HAL_GPIO_WritePin>
	  }

//      printf("Hello World\n\r\v");

      update_encoder_state();
 80012bc:	f000 fc38 	bl	8001b30 <update_encoder_state>
      handle_button_press();
 80012c0:	f000 fe32 	bl	8001f28 <handle_button_press>
      update_display();
 80012c4:	f000 f982 	bl	80015cc <update_display>
      printf("current_state %d\n\r", current_state);
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <main+0xb8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	@ (8001314 <main+0xbc>)
 80012d0:	f006 fbc2 	bl	8007a58 <iprintf>
      printf("digit_position %d\n\r", digit_position);
 80012d4:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <main+0xc0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	4810      	ldr	r0, [pc, #64]	@ (800131c <main+0xc4>)
 80012dc:	f006 fbbc 	bl	8007a58 <iprintf>
      printf("cursor_position %d\n\r", cursor_position);
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <main+0xc8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	480f      	ldr	r0, [pc, #60]	@ (8001324 <main+0xcc>)
 80012e8:	f006 fbb6 	bl	8007a58 <iprintf>
      printf("mode_index %d\n\r\v", mode_index);
 80012ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <main+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	480e      	ldr	r0, [pc, #56]	@ (800132c <main+0xd4>)
 80012f4:	f006 fbb0 	bl	8007a58 <iprintf>

	  HAL_Delay(0); // Adjust the delay as needed
 80012f8:	2000      	movs	r0, #0
 80012fa:	f001 fc1d 	bl	8002b38 <HAL_Delay>
	  tick = HAL_GetTick();
 80012fe:	e7c6      	b.n	800128e <main+0x36>
 8001300:	200006e4 	.word	0x200006e4
 8001304:	2000029c 	.word	0x2000029c
 8001308:	40011000 	.word	0x40011000
 800130c:	40010800 	.word	0x40010800
 8001310:	200002a8 	.word	0x200002a8
 8001314:	0800b2f0 	.word	0x0800b2f0
 8001318:	200002c4 	.word	0x200002c4
 800131c:	0800b304 	.word	0x0800b304
 8001320:	200002ac 	.word	0x200002ac
 8001324:	0800b318 	.word	0x0800b318
 8001328:	20000000 	.word	0x20000000
 800132c:	0800b330 	.word	0x0800b330

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	@ 0x40
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	2228      	movs	r2, #40	@ 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f006 fc19 	bl	8007b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800135a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800136c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800136e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4618      	mov	r0, r3
 800137a:	f004 faed 	bl	8005958 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001384:	f000 fe26 	bl	8001fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2302      	movs	r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2102      	movs	r1, #2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fd5a 	bl	8005e5c <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013ae:	f000 fe11 	bl	8001fd4 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3740      	adds	r7, #64	@ 0x40
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	rotary_out = __HAL_TIM_GET_COUNTER(htim);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	4a06      	ldr	r2, [pc, #24]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x28>)
 80013cc:	6013      	str	r3, [r2, #0]
	rot_cnt = rotary_out / 4;
 80013ce:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x28>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200002a0 	.word	0x200002a0
 80013e8:	200002a4 	.word	0x200002a4

080013ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	2b1f      	cmp	r3, #31
 80013fc:	d864      	bhi.n	80014c8 <HAL_GPIO_EXTI_Callback+0xdc>
 80013fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001404 <HAL_GPIO_EXTI_Callback+0x18>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	0800148d 	.word	0x0800148d
 8001408:	080014a1 	.word	0x080014a1
 800140c:	080014c9 	.word	0x080014c9
 8001410:	080014c9 	.word	0x080014c9
 8001414:	080014c9 	.word	0x080014c9
 8001418:	080014c9 	.word	0x080014c9
 800141c:	080014c9 	.word	0x080014c9
 8001420:	080014c9 	.word	0x080014c9
 8001424:	080014c9 	.word	0x080014c9
 8001428:	080014c9 	.word	0x080014c9
 800142c:	080014c9 	.word	0x080014c9
 8001430:	080014c9 	.word	0x080014c9
 8001434:	080014c9 	.word	0x080014c9
 8001438:	080014c9 	.word	0x080014c9
 800143c:	080014c9 	.word	0x080014c9
 8001440:	080014b5 	.word	0x080014b5
 8001444:	080014c9 	.word	0x080014c9
 8001448:	080014c9 	.word	0x080014c9
 800144c:	080014c9 	.word	0x080014c9
 8001450:	080014c9 	.word	0x080014c9
 8001454:	080014c9 	.word	0x080014c9
 8001458:	080014c9 	.word	0x080014c9
 800145c:	080014c9 	.word	0x080014c9
 8001460:	080014c9 	.word	0x080014c9
 8001464:	080014c9 	.word	0x080014c9
 8001468:	080014c9 	.word	0x080014c9
 800146c:	080014c9 	.word	0x080014c9
 8001470:	080014c9 	.word	0x080014c9
 8001474:	080014c9 	.word	0x080014c9
 8001478:	080014c9 	.word	0x080014c9
 800147c:	080014c9 	.word	0x080014c9
 8001480:	08001485 	.word	0x08001485
	case ROT_SW_Pin:
		rot_sw_state = true;
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
		break;
 800148a:	e01e      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xde>
	case A_SW_Pin:
		a_sw_state = true;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_GPIO_EXTI_Callback+0xec>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
		current_a_cnt++;
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <HAL_GPIO_EXTI_Callback+0xf0>)
 800149c:	801a      	strh	r2, [r3, #0]
		break;
 800149e:	e014      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xde>
	case B_SW_Pin:
		b_sw_state = true;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
		current_b_cnt++;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80014b0:	801a      	strh	r2, [r3, #0]
		break;
 80014b2:	e00a      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xde>
	case C_SW_Pin:
		c_sw_state = true;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0xfc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
		current_c_cnt++;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_GPIO_EXTI_Callback+0x100>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_GPIO_EXTI_Callback+0x100>)
 80014c4:	801a      	strh	r2, [r3, #0]
		break;
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xde>
	default:
//		a_sw_state = b_sw_state = c_sw_state = false;
		break;
 80014c8:	bf00      	nop
	}
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	200002ce 	.word	0x200002ce
 80014d8:	200002cf 	.word	0x200002cf
 80014dc:	200002c8 	.word	0x200002c8
 80014e0:	200002d0 	.word	0x200002d0
 80014e4:	200002ca 	.word	0x200002ca
 80014e8:	200002d1 	.word	0x200002d1
 80014ec:	200002cc 	.word	0x200002cc

080014f0 <myOLED_char>:

void myOLED_char(uint16_t cursorX, uint16_t cursorY, char* data){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	80fb      	strh	r3, [r7, #6]
 80014fc:	460b      	mov	r3, r1
 80014fe:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	88ba      	ldrh	r2, [r7, #4]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 ff66 	bl	80023dc <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_7x10, White);
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <myOLED_char+0x34>)
 8001512:	2301      	movs	r3, #1
 8001514:	ca06      	ldmia	r2, {r1, r2}
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f000 ff3a 	bl	8002390 <ssd1306_WriteString>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000000c 	.word	0x2000000c

08001528 <myOLED_float>:

void myOLED_float(uint16_t cursorX, uint16_t cursorY, float data){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	603a      	str	r2, [r7, #0]
 8001532:	80fb      	strh	r3, [r7, #6]
 8001534:	460b      	mov	r3, r1
 8001536:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7fe ff75 	bl	8000428 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	f107 000c 	add.w	r0, r7, #12
 8001546:	490b      	ldr	r1, [pc, #44]	@ (8001574 <myOLED_float+0x4c>)
 8001548:	f006 fa98 	bl	8007a7c <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f000 ff40 	bl	80023dc <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <myOLED_float+0x50>)
 800155e:	f107 000c 	add.w	r0, r7, #12
 8001562:	2301      	movs	r3, #1
 8001564:	ca06      	ldmia	r2, {r1, r2}
 8001566:	f000 ff13 	bl	8002390 <ssd1306_WriteString>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0800b344 	.word	0x0800b344
 8001578:	2000000c 	.word	0x2000000c

0800157c <myOLED_int>:

void myOLED_int(uint16_t cursorX, uint16_t cursorY, uint16_t data){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	460b      	mov	r3, r1
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	807b      	strh	r3, [r7, #2]
	char str_data[10];

	sprintf(str_data, "%u", data);
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	490b      	ldr	r1, [pc, #44]	@ (80015c4 <myOLED_int+0x48>)
 8001596:	4618      	mov	r0, r3
 8001598:	f006 fa70 	bl	8007a7c <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	88ba      	ldrh	r2, [r7, #4]
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 ff18 	bl	80023dc <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 80015ac:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <myOLED_int+0x4c>)
 80015ae:	f107 000c 	add.w	r0, r7, #12
 80015b2:	2301      	movs	r3, #1
 80015b4:	ca06      	ldmia	r2, {r1, r2}
 80015b6:	f000 feeb 	bl	8002390 <ssd1306_WriteString>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	0800b34c 	.word	0x0800b34c
 80015c8:	2000000c 	.word	0x2000000c

080015cc <update_display>:
	ssd1306_SetCursor(cursorX, cursorY);
	ssd1306_WriteString(str_data, Font_7x10, White);
}

// Update Display
void update_display() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
    static Menu_State_e last_state = HOME_SCREEN;
    static bool first_update = true;
    bool force_update = (current_state != last_state) || first_update;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <update_display+0xf4>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b3b      	ldr	r3, [pc, #236]	@ (80016c4 <update_display+0xf8>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d103      	bne.n	80015e6 <update_display+0x1a>
 80015de:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <update_display+0xfc>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <update_display+0x1e>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <update_display+0x20>
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	71fb      	strb	r3, [r7, #7]

    if (force_update) {
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <update_display+0x46>
        last_state = current_state;
 80015fc:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <update_display+0xf4>)
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <update_display+0xf8>)
 8001602:	701a      	strb	r2, [r3, #0]
        last_cursor_position = -1; // Force full update on state change
 8001604:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <update_display+0x100>)
 8001606:	f04f 32ff 	mov.w	r2, #4294967295
 800160a:	601a      	str	r2, [r3, #0]
        first_update = false;
 800160c:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <update_display+0xfc>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    }

    // Handle cursor position updates separately
    bool cursor_changed = (cursor_position != last_cursor_position);
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <update_display+0x104>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <update_display+0x100>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	bf14      	ite	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2300      	moveq	r3, #0
 8001622:	71bb      	strb	r3, [r7, #6]

    switch (current_state) {
 8001624:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <update_display+0xf4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d83f      	bhi.n	80016ac <update_display+0xe0>
 800162c:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <update_display+0x68>)
 800162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001632:	bf00      	nop
 8001634:	08001645 	.word	0x08001645
 8001638:	08001665 	.word	0x08001665
 800163c:	08001685 	.word	0x08001685
 8001640:	080016a5 	.word	0x080016a5
        case HOME_SCREEN:
            display_home_screen(force_update || cursor_changed);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <update_display+0x84>
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <update_display+0x88>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <update_display+0x8a>
 8001654:	2300      	movs	r3, #0
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f839 	bl	80016d4 <display_home_screen>
            break;
 8001662:	e024      	b.n	80016ae <update_display+0xe2>
        case MODE_SELECTION:
            display_mode_selection(force_update || cursor_changed);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <update_display+0xa4>
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <update_display+0xa8>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <update_display+0xaa>
 8001674:	2300      	movs	r3, #0
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f923 	bl	80018c8 <display_mode_selection>
            break;
 8001682:	e014      	b.n	80016ae <update_display+0xe2>
        case PARAMETER_SETTING:
            display_parameter_setting(force_update || cursor_changed);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <update_display+0xc4>
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <update_display+0xc8>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <update_display+0xca>
 8001694:	2300      	movs	r3, #0
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f97b 	bl	8001998 <display_parameter_setting>
            break;
 80016a2:	e004      	b.n	80016ae <update_display+0xe2>
        case RETURN_TO_HOME:
            current_state = HOME_SCREEN;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <update_display+0xf4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
            break;
 80016aa:	e000      	b.n	80016ae <update_display+0xe2>
        default:
        	break;
 80016ac:	bf00      	nop
    }

    last_cursor_position = cursor_position;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <update_display+0x104>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a06      	ldr	r2, [pc, #24]	@ (80016cc <update_display+0x100>)
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200002a8 	.word	0x200002a8
 80016c4:	200002d3 	.word	0x200002d3
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000004 	.word	0x20000004
 80016d0:	200002ac 	.word	0x200002ac

080016d4 <display_home_screen>:

// Display Home Screen
void display_home_screen(bool force_update) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
    if (force_update) {
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d04e      	beq.n	8001782 <display_home_screen+0xae>
        ssd1306_Fill(Black);			// Clear the display before printing
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 fd2f 	bl	8002148 <ssd1306_Fill>
        myOLED_char(0, 0, "VT:");
 80016ea:	4a61      	ldr	r2, [pc, #388]	@ (8001870 <display_home_screen+0x19c>)
 80016ec:	2100      	movs	r1, #0
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fefe 	bl	80014f0 <myOLED_char>
        myOLED_float(21, 0, volt);
 80016f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001874 <display_home_screen+0x1a0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	2015      	movs	r0, #21
 80016fe:	f7ff ff13 	bl	8001528 <myOLED_float>
        myOLED_char(0, 10, "CU:");
 8001702:	4a5d      	ldr	r2, [pc, #372]	@ (8001878 <display_home_screen+0x1a4>)
 8001704:	210a      	movs	r1, #10
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fef2 	bl	80014f0 <myOLED_char>
        myOLED_float(21, 10, curr);
 800170c:	4b5b      	ldr	r3, [pc, #364]	@ (800187c <display_home_screen+0x1a8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	210a      	movs	r1, #10
 8001714:	2015      	movs	r0, #21
 8001716:	f7ff ff07 	bl	8001528 <myOLED_float>
        myOLED_char(0, 20, "CH:");
 800171a:	4a59      	ldr	r2, [pc, #356]	@ (8001880 <display_home_screen+0x1ac>)
 800171c:	2114      	movs	r1, #20
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fee6 	bl	80014f0 <myOLED_char>
        myOLED_float(21, 20, chg);
 8001724:	4b57      	ldr	r3, [pc, #348]	@ (8001884 <display_home_screen+0x1b0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	2114      	movs	r1, #20
 800172c:	2015      	movs	r0, #21
 800172e:	f7ff fefb 	bl	8001528 <myOLED_float>
        myOLED_char(0, 30, "TP:");
 8001732:	4a55      	ldr	r2, [pc, #340]	@ (8001888 <display_home_screen+0x1b4>)
 8001734:	211e      	movs	r1, #30
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff feda 	bl	80014f0 <myOLED_char>
        myOLED_float(21, 30, temp);
 800173c:	4b53      	ldr	r3, [pc, #332]	@ (800188c <display_home_screen+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	211e      	movs	r1, #30
 8001744:	2015      	movs	r0, #21
 8001746:	f7ff feef 	bl	8001528 <myOLED_float>
        ssd1306_Line(70, 0, 70, 64, White);		// Draw line to separate the values and options
 800174a:	2301      	movs	r3, #1
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2340      	movs	r3, #64	@ 0x40
 8001750:	2246      	movs	r2, #70	@ 0x46
 8001752:	2100      	movs	r1, #0
 8001754:	2046      	movs	r0, #70	@ 0x46
 8001756:	f000 fe59 	bl	800240c <ssd1306_Line>
        myOLED_char(90, 0, "<SET>");			// SET MODE
 800175a:	4a4d      	ldr	r2, [pc, #308]	@ (8001890 <display_home_screen+0x1bc>)
 800175c:	2100      	movs	r1, #0
 800175e:	205a      	movs	r0, #90	@ 0x5a
 8001760:	f7ff fec6 	bl	80014f0 <myOLED_char>
        myOLED_char(90, 10, "<ON>");			// Turn ON LOAD TODO
 8001764:	4a4b      	ldr	r2, [pc, #300]	@ (8001894 <display_home_screen+0x1c0>)
 8001766:	210a      	movs	r1, #10
 8001768:	205a      	movs	r0, #90	@ 0x5a
 800176a:	f7ff fec1 	bl	80014f0 <myOLED_char>
        myOLED_char(90, 20, "<RST>");			// TODO
 800176e:	4a4a      	ldr	r2, [pc, #296]	@ (8001898 <display_home_screen+0x1c4>)
 8001770:	2114      	movs	r1, #20
 8001772:	205a      	movs	r0, #90	@ 0x5a
 8001774:	f7ff febc 	bl	80014f0 <myOLED_char>
        myOLED_char(90, 30, "<HLP>");			// TODO
 8001778:	4a48      	ldr	r2, [pc, #288]	@ (800189c <display_home_screen+0x1c8>)
 800177a:	211e      	movs	r1, #30
 800177c:	205a      	movs	r0, #90	@ 0x5a
 800177e:	f7ff feb7 	bl	80014f0 <myOLED_char>
    }

    // Update cursor only
    for (int i = 0; i < 4; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e020      	b.n	80017ca <display_home_screen+0xf6>
            if (i == cursor_position) {
 8001788:	4b45      	ldr	r3, [pc, #276]	@ (80018a0 <display_home_screen+0x1cc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	429a      	cmp	r2, r3
 8001790:	d10c      	bne.n	80017ac <display_home_screen+0xd8>
                myOLED_char(75, i* 10, "->");
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	b29b      	uxth	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4a40      	ldr	r2, [pc, #256]	@ (80018a4 <display_home_screen+0x1d0>)
 80017a2:	4619      	mov	r1, r3
 80017a4:	204b      	movs	r0, #75	@ 0x4b
 80017a6:	f7ff fea3 	bl	80014f0 <myOLED_char>
 80017aa:	e00b      	b.n	80017c4 <display_home_screen+0xf0>
            } else {
                myOLED_char(75, i* 10, "  ");
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4a3b      	ldr	r2, [pc, #236]	@ (80018a8 <display_home_screen+0x1d4>)
 80017bc:	4619      	mov	r1, r3
 80017be:	204b      	movs	r0, #75	@ 0x4b
 80017c0:	f7ff fe96 	bl	80014f0 <myOLED_char>
    for (int i = 0; i < 4; i++) {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	dddb      	ble.n	8001788 <display_home_screen+0xb4>
            }
        }

    // Display the param value and mode
    if(current_state == 0){
 80017d0:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <display_home_screen+0x1d8>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d144      	bne.n	8001862 <display_home_screen+0x18e>
    	switch (mode_index){
 80017d8:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <display_home_screen+0x1dc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d83f      	bhi.n	8001860 <display_home_screen+0x18c>
 80017e0:	a201      	add	r2, pc, #4	@ (adr r2, 80017e8 <display_home_screen+0x114>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	08001813 	.word	0x08001813
 80017f0:	0800182d 	.word	0x0800182d
 80017f4:	08001847 	.word	0x08001847
    	case 0:
    		myOLED_char(0, 50, "CC:");
 80017f8:	4a2e      	ldr	r2, [pc, #184]	@ (80018b4 <display_home_screen+0x1e0>)
 80017fa:	2132      	movs	r1, #50	@ 0x32
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fe77 	bl	80014f0 <myOLED_char>
			myOLED_float(21, 50, param_value);
 8001802:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <display_home_screen+0x1e4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	2132      	movs	r1, #50	@ 0x32
 800180a:	2015      	movs	r0, #21
 800180c:	f7ff fe8c 	bl	8001528 <myOLED_float>
    		break;
 8001810:	e027      	b.n	8001862 <display_home_screen+0x18e>
    	case 1:
			myOLED_char(0, 50, "CV:");
 8001812:	4a2a      	ldr	r2, [pc, #168]	@ (80018bc <display_home_screen+0x1e8>)
 8001814:	2132      	movs	r1, #50	@ 0x32
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fe6a 	bl	80014f0 <myOLED_char>
			myOLED_float(21, 50, param_value);
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <display_home_screen+0x1e4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	2132      	movs	r1, #50	@ 0x32
 8001824:	2015      	movs	r0, #21
 8001826:	f7ff fe7f 	bl	8001528 <myOLED_float>
    		break;
 800182a:	e01a      	b.n	8001862 <display_home_screen+0x18e>
    	case 2:
			myOLED_char(0, 50, "CP:");
 800182c:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <display_home_screen+0x1ec>)
 800182e:	2132      	movs	r1, #50	@ 0x32
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff fe5d 	bl	80014f0 <myOLED_char>
			myOLED_float(21, 50, param_value);
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <display_home_screen+0x1e4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	2132      	movs	r1, #50	@ 0x32
 800183e:	2015      	movs	r0, #21
 8001840:	f7ff fe72 	bl	8001528 <myOLED_float>
    		break;
 8001844:	e00d      	b.n	8001862 <display_home_screen+0x18e>
    	case 3:
			myOLED_char(0, 50, "CR:");
 8001846:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <display_home_screen+0x1f0>)
 8001848:	2132      	movs	r1, #50	@ 0x32
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fe50 	bl	80014f0 <myOLED_char>
			myOLED_float(21, 50, param_value);
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <display_home_screen+0x1e4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	2132      	movs	r1, #50	@ 0x32
 8001858:	2015      	movs	r0, #21
 800185a:	f7ff fe65 	bl	8001528 <myOLED_float>
    		break;
 800185e:	e000      	b.n	8001862 <display_home_screen+0x18e>
    	default:
    		break;
 8001860:	bf00      	nop
    	}

    }
    ssd1306_UpdateScreen();
 8001862:	f000 fc93 	bl	800218c <ssd1306_UpdateScreen>
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	0800b354 	.word	0x0800b354
 8001874:	200002b0 	.word	0x200002b0
 8001878:	0800b358 	.word	0x0800b358
 800187c:	200002b4 	.word	0x200002b4
 8001880:	0800b35c 	.word	0x0800b35c
 8001884:	200002b8 	.word	0x200002b8
 8001888:	0800b360 	.word	0x0800b360
 800188c:	200002bc 	.word	0x200002bc
 8001890:	0800b364 	.word	0x0800b364
 8001894:	0800b36c 	.word	0x0800b36c
 8001898:	0800b374 	.word	0x0800b374
 800189c:	0800b37c 	.word	0x0800b37c
 80018a0:	200002ac 	.word	0x200002ac
 80018a4:	0800b384 	.word	0x0800b384
 80018a8:	0800b388 	.word	0x0800b388
 80018ac:	200002a8 	.word	0x200002a8
 80018b0:	20000000 	.word	0x20000000
 80018b4:	0800b38c 	.word	0x0800b38c
 80018b8:	200002c0 	.word	0x200002c0
 80018bc:	0800b390 	.word	0x0800b390
 80018c0:	0800b394 	.word	0x0800b394
 80018c4:	0800b398 	.word	0x0800b398

080018c8 <display_mode_selection>:

// Display Mode Selection Screen
void display_mode_selection(bool force_update) {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    const char* modes[] = {"CC", "CV", "CP", "CR"};
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <display_mode_selection+0xbc>)
 80018d4:	f107 0408 	add.w	r4, r7, #8
 80018d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (force_update) {
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01c      	beq.n	800191e <display_mode_selection+0x56>
        ssd1306_Fill(Black); // Clear the screen
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 fc2f 	bl	8002148 <ssd1306_Fill>
        for (int i = 0; i < 4; i++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e013      	b.n	8001918 <display_mode_selection+0x50>
            myOLED_char(15, i * 10, (char*)modes[i]); // Print modes in column
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	b299      	uxth	r1, r3
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	3320      	adds	r3, #32
 8001904:	443b      	add	r3, r7
 8001906:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800190a:	461a      	mov	r2, r3
 800190c:	200f      	movs	r0, #15
 800190e:	f7ff fdef 	bl	80014f0 <myOLED_char>
        for (int i = 0; i < 4; i++) {
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b03      	cmp	r3, #3
 800191c:	dde8      	ble.n	80018f0 <display_mode_selection+0x28>
        }
    }

    // Update cursor only
    for (int i = 0; i < 4; i++) {
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	e020      	b.n	8001966 <display_mode_selection+0x9e>
        if (i == cursor_position) {
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <display_mode_selection+0xc0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	429a      	cmp	r2, r3
 800192c:	d10c      	bne.n	8001948 <display_mode_selection+0x80>
            myOLED_char(0, i* 10, "->");
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	b29b      	uxth	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4413      	add	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	4a13      	ldr	r2, [pc, #76]	@ (800198c <display_mode_selection+0xc4>)
 800193e:	4619      	mov	r1, r3
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fdd5 	bl	80014f0 <myOLED_char>
 8001946:	e00b      	b.n	8001960 <display_mode_selection+0x98>
        } else {
            myOLED_char(0, i* 10, "  ");
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	4a0e      	ldr	r2, [pc, #56]	@ (8001990 <display_mode_selection+0xc8>)
 8001958:	4619      	mov	r1, r3
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fdc8 	bl	80014f0 <myOLED_char>
    for (int i = 0; i < 4; i++) {
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	3301      	adds	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b03      	cmp	r3, #3
 800196a:	dddb      	ble.n	8001924 <display_mode_selection+0x5c>
        }
    }

    myOLED_char(5, 50, "<SELECT THE MODE>");
 800196c:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <display_mode_selection+0xcc>)
 800196e:	2132      	movs	r1, #50	@ 0x32
 8001970:	2005      	movs	r0, #5
 8001972:	f7ff fdbd 	bl	80014f0 <myOLED_char>
    ssd1306_UpdateScreen();
 8001976:	f000 fc09 	bl	800218c <ssd1306_UpdateScreen>
}
 800197a:	bf00      	nop
 800197c:	3724      	adds	r7, #36	@ 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	0800b3c0 	.word	0x0800b3c0
 8001988:	200002ac 	.word	0x200002ac
 800198c:	0800b384 	.word	0x0800b384
 8001990:	0800b388 	.word	0x0800b388
 8001994:	0800b39c 	.word	0x0800b39c

08001998 <display_parameter_setting>:


void display_parameter_setting(bool force_update) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
    if (force_update) {
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d04c      	beq.n	8001a42 <display_parameter_setting+0xaa>
        // Redraw entire screen if forced
        ssd1306_Fill(Black);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 fbcd 	bl	8002148 <ssd1306_Fill>
        myOLED_char(0, 0, "Set Value:");
 80019ae:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae0 <display_parameter_setting+0x148>)
 80019b0:	2100      	movs	r1, #0
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fd9c 	bl	80014f0 <myOLED_char>
        myOLED_char(20, 40, "RETURN");
 80019b8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae4 <display_parameter_setting+0x14c>)
 80019ba:	2128      	movs	r1, #40	@ 0x28
 80019bc:	2014      	movs	r0, #20
 80019be:	f7ff fd97 	bl	80014f0 <myOLED_char>

        // Check the state and print the mode in parameter setting screen
        // Also check the MIN and MAX value of each mode to set limits on the value.
        if(current_state == 2){
 80019c2:	4b49      	ldr	r3, [pc, #292]	@ (8001ae8 <display_parameter_setting+0x150>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d13b      	bne.n	8001a42 <display_parameter_setting+0xaa>
        	switch(mode_index) {
 80019ca:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <display_parameter_setting+0x154>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d836      	bhi.n	8001a40 <display_parameter_setting+0xa8>
 80019d2:	a201      	add	r2, pc, #4	@ (adr r2, 80019d8 <display_parameter_setting+0x40>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019e9 	.word	0x080019e9
 80019dc:	080019ff 	.word	0x080019ff
 80019e0:	08001a15 	.word	0x08001a15
 80019e4:	08001a2b 	.word	0x08001a2b
        		case 0:
                	myOLED_char(70, 0, "CC");
 80019e8:	4a41      	ldr	r2, [pc, #260]	@ (8001af0 <display_parameter_setting+0x158>)
 80019ea:	2100      	movs	r1, #0
 80019ec:	2046      	movs	r0, #70	@ 0x46
 80019ee:	f7ff fd7f 	bl	80014f0 <myOLED_char>
                	myOLED_char(70, 20, "Amp");
 80019f2:	4a40      	ldr	r2, [pc, #256]	@ (8001af4 <display_parameter_setting+0x15c>)
 80019f4:	2114      	movs	r1, #20
 80019f6:	2046      	movs	r0, #70	@ 0x46
 80019f8:	f7ff fd7a 	bl	80014f0 <myOLED_char>
                	break;
 80019fc:	e021      	b.n	8001a42 <display_parameter_setting+0xaa>
        		case 1:
        			myOLED_char(70, 0, "CV");
 80019fe:	4a3e      	ldr	r2, [pc, #248]	@ (8001af8 <display_parameter_setting+0x160>)
 8001a00:	2100      	movs	r1, #0
 8001a02:	2046      	movs	r0, #70	@ 0x46
 8001a04:	f7ff fd74 	bl	80014f0 <myOLED_char>
        			myOLED_char(70, 20, "Volt");
 8001a08:	4a3c      	ldr	r2, [pc, #240]	@ (8001afc <display_parameter_setting+0x164>)
 8001a0a:	2114      	movs	r1, #20
 8001a0c:	2046      	movs	r0, #70	@ 0x46
 8001a0e:	f7ff fd6f 	bl	80014f0 <myOLED_char>
        			break;
 8001a12:	e016      	b.n	8001a42 <display_parameter_setting+0xaa>
        		case 2:
        			myOLED_char(70, 0, "CP");
 8001a14:	4a3a      	ldr	r2, [pc, #232]	@ (8001b00 <display_parameter_setting+0x168>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	2046      	movs	r0, #70	@ 0x46
 8001a1a:	f7ff fd69 	bl	80014f0 <myOLED_char>
        			myOLED_char(70, 20, "Watt");
 8001a1e:	4a39      	ldr	r2, [pc, #228]	@ (8001b04 <display_parameter_setting+0x16c>)
 8001a20:	2114      	movs	r1, #20
 8001a22:	2046      	movs	r0, #70	@ 0x46
 8001a24:	f7ff fd64 	bl	80014f0 <myOLED_char>
        			break;
 8001a28:	e00b      	b.n	8001a42 <display_parameter_setting+0xaa>
        		case 3:
        			myOLED_char(70, 0, "CR");
 8001a2a:	4a37      	ldr	r2, [pc, #220]	@ (8001b08 <display_parameter_setting+0x170>)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2046      	movs	r0, #70	@ 0x46
 8001a30:	f7ff fd5e 	bl	80014f0 <myOLED_char>
        			myOLED_char(70, 20, "Ohm");
 8001a34:	4a35      	ldr	r2, [pc, #212]	@ (8001b0c <display_parameter_setting+0x174>)
 8001a36:	2114      	movs	r1, #20
 8001a38:	2046      	movs	r0, #70	@ 0x46
 8001a3a:	f7ff fd59 	bl	80014f0 <myOLED_char>
                	break;
 8001a3e:	e000      	b.n	8001a42 <display_parameter_setting+0xaa>
        		default:
        			break;
 8001a40:	bf00      	nop
        	}
        }
    }

    printf("mode_index %d\n\v\r", mode_index);
 8001a42:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <display_parameter_setting+0x154>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4831      	ldr	r0, [pc, #196]	@ (8001b10 <display_parameter_setting+0x178>)
 8001a4a:	f006 f805 	bl	8007a58 <iprintf>

    // Always update the current digit and value
    if(param_value >= 10.000){
 8001a4e:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <display_parameter_setting+0x17c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4931      	ldr	r1, [pc, #196]	@ (8001b18 <display_parameter_setting+0x180>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fa39 	bl	8000ecc <__aeabi_fcmpge>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <display_parameter_setting+0xd8>
    	myOLED_float(0, 20, param_value);
 8001a60:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <display_parameter_setting+0x17c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	2114      	movs	r1, #20
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fd5d 	bl	8001528 <myOLED_float>
 8001a6e:	e00b      	b.n	8001a88 <display_parameter_setting+0xf0>
    }else{
    	myOLED_float(7, 20, param_value);
 8001a70:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <display_parameter_setting+0x17c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	2114      	movs	r1, #20
 8001a78:	2007      	movs	r0, #7
 8001a7a:	f7ff fd55 	bl	8001528 <myOLED_float>
    	myOLED_int(0, 20, 0);				// Print "0" at fist location
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2114      	movs	r1, #20
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fd7a 	bl	800157c <myOLED_int>
    }

    // Clear previous cursor position by redrawing the entire line
    ssd1306_SetCursor(0, 30);
 8001a88:	211e      	movs	r1, #30
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 fca6 	bl	80023dc <ssd1306_SetCursor>
    ssd1306_WriteString("        ", Font_7x10, White);  // Assuming 7 characters wide space to clear
 8001a90:	4a22      	ldr	r2, [pc, #136]	@ (8001b1c <display_parameter_setting+0x184>)
 8001a92:	2301      	movs	r3, #1
 8001a94:	ca06      	ldmia	r2, {r1, r2}
 8001a96:	4822      	ldr	r0, [pc, #136]	@ (8001b20 <display_parameter_setting+0x188>)
 8001a98:	f000 fc7a 	bl	8002390 <ssd1306_WriteString>

    // Draw cursor under the digit
    int cursor_x = digit_position * 7;  // Assuming 7 pixels width per character
 8001a9c:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <display_parameter_setting+0x18c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
//    int cursot_y = 50;
    if(digit_position == MAX_DIGITS){
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <display_parameter_setting+0x18c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d105      	bne.n	8001abc <display_parameter_setting+0x124>
    	myOLED_char(40, 50, "^");  // Draw the cursor under "RETURN" text
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b28 <display_parameter_setting+0x190>)
 8001ab2:	2132      	movs	r1, #50	@ 0x32
 8001ab4:	2028      	movs	r0, #40	@ 0x28
 8001ab6:	f7ff fd1b 	bl	80014f0 <myOLED_char>
 8001aba:	e00b      	b.n	8001ad4 <display_parameter_setting+0x13c>
    }else{
    	myOLED_char(cursor_x, 30, "^");  	// Draw the cursor
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4a19      	ldr	r2, [pc, #100]	@ (8001b28 <display_parameter_setting+0x190>)
 8001ac2:	211e      	movs	r1, #30
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fd13 	bl	80014f0 <myOLED_char>
    	myOLED_char(40, 50, " ");			// Clears the cursor under "RETURN" label
 8001aca:	4a18      	ldr	r2, [pc, #96]	@ (8001b2c <display_parameter_setting+0x194>)
 8001acc:	2132      	movs	r1, #50	@ 0x32
 8001ace:	2028      	movs	r0, #40	@ 0x28
 8001ad0:	f7ff fd0e 	bl	80014f0 <myOLED_char>
    }

    // Refresh the display after updating
    ssd1306_UpdateScreen();
 8001ad4:	f000 fb5a 	bl	800218c <ssd1306_UpdateScreen>
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0800b3d0 	.word	0x0800b3d0
 8001ae4:	0800b3dc 	.word	0x0800b3dc
 8001ae8:	200002a8 	.word	0x200002a8
 8001aec:	20000000 	.word	0x20000000
 8001af0:	0800b3b0 	.word	0x0800b3b0
 8001af4:	0800b3e4 	.word	0x0800b3e4
 8001af8:	0800b3b4 	.word	0x0800b3b4
 8001afc:	0800b3e8 	.word	0x0800b3e8
 8001b00:	0800b3b8 	.word	0x0800b3b8
 8001b04:	0800b3f0 	.word	0x0800b3f0
 8001b08:	0800b3bc 	.word	0x0800b3bc
 8001b0c:	0800b3f8 	.word	0x0800b3f8
 8001b10:	0800b3fc 	.word	0x0800b3fc
 8001b14:	200002c0 	.word	0x200002c0
 8001b18:	41200000 	.word	0x41200000
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	0800b410 	.word	0x0800b410
 8001b24:	200002c4 	.word	0x200002c4
 8001b28:	0800b41c 	.word	0x0800b41c
 8001b2c:	0800b420 	.word	0x0800b420

08001b30 <update_encoder_state>:



// Update Encoder State
void update_encoder_state() {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
    int new_rot_pos = rot_cnt;
 8001b36:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <update_encoder_state+0xf0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	607b      	str	r3, [r7, #4]
    static int old_rot_pos = 0;

    if (new_rot_pos > old_rot_pos) {
 8001b3c:	4b39      	ldr	r3, [pc, #228]	@ (8001c24 <update_encoder_state+0xf4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dd17      	ble.n	8001b76 <update_encoder_state+0x46>
        if (current_state == PARAMETER_SETTING) {
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <update_encoder_state+0xf8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d10d      	bne.n	8001b6a <update_encoder_state+0x3a>
            if (adjusting_digit) {
 8001b4e:	4b37      	ldr	r3, [pc, #220]	@ (8001c2c <update_encoder_state+0xfc>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <update_encoder_state+0x2e>
                update_parameter_value(1); // Increment digit
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 f86e 	bl	8001c38 <update_parameter_value>
 8001b5c:	e028      	b.n	8001bb0 <update_encoder_state+0x80>
            } else {
                digit_position++;
 8001b5e:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <update_encoder_state+0x100>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	4a32      	ldr	r2, [pc, #200]	@ (8001c30 <update_encoder_state+0x100>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e022      	b.n	8001bb0 <update_encoder_state+0x80>
            }
        } else {
            cursor_position++;
 8001b6a:	4b32      	ldr	r3, [pc, #200]	@ (8001c34 <update_encoder_state+0x104>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a30      	ldr	r2, [pc, #192]	@ (8001c34 <update_encoder_state+0x104>)
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e01c      	b.n	8001bb0 <update_encoder_state+0x80>
        }
    } else if (new_rot_pos < old_rot_pos) {
 8001b76:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <update_encoder_state+0xf4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	da17      	bge.n	8001bb0 <update_encoder_state+0x80>
        if (current_state == PARAMETER_SETTING) {
 8001b80:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <update_encoder_state+0xf8>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d10e      	bne.n	8001ba6 <update_encoder_state+0x76>
            if (adjusting_digit) {
 8001b88:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <update_encoder_state+0xfc>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <update_encoder_state+0x6a>
                update_parameter_value(-1); // Decrement digit
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f850 	bl	8001c38 <update_parameter_value>
 8001b98:	e00a      	b.n	8001bb0 <update_encoder_state+0x80>
            } else {
                digit_position--;
 8001b9a:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <update_encoder_state+0x100>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	4a23      	ldr	r2, [pc, #140]	@ (8001c30 <update_encoder_state+0x100>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e004      	b.n	8001bb0 <update_encoder_state+0x80>
            }
        } else {
            cursor_position--;
 8001ba6:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <update_encoder_state+0x104>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <update_encoder_state+0x104>)
 8001bae:	6013      	str	r3, [r2, #0]
        }
    }
    old_rot_pos = new_rot_pos;
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <update_encoder_state+0xf4>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
    put_parameter_limit();		// put limit on parameter values based on mode
 8001bb6:	f000 f8ff 	bl	8001db8 <put_parameter_limit>
    // putting limits
    if (cursor_position < 0) cursor_position = 0;
 8001bba:	4b1e      	ldr	r3, [pc, #120]	@ (8001c34 <update_encoder_state+0x104>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	da02      	bge.n	8001bc8 <update_encoder_state+0x98>
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <update_encoder_state+0x104>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
    if (current_state == HOME_SCREEN && cursor_position > 3) cursor_position = 3;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <update_encoder_state+0xf8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d106      	bne.n	8001bde <update_encoder_state+0xae>
 8001bd0:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <update_encoder_state+0x104>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	dd02      	ble.n	8001bde <update_encoder_state+0xae>
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <update_encoder_state+0x104>)
 8001bda:	2203      	movs	r2, #3
 8001bdc:	601a      	str	r2, [r3, #0]
    if (current_state == MODE_SELECTION && cursor_position > 3) cursor_position = 3;
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <update_encoder_state+0xf8>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d106      	bne.n	8001bf4 <update_encoder_state+0xc4>
 8001be6:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <update_encoder_state+0x104>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	dd02      	ble.n	8001bf4 <update_encoder_state+0xc4>
 8001bee:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <update_encoder_state+0x104>)
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	601a      	str	r2, [r3, #0]
    if (current_state == PARAMETER_SETTING && digit_position > MAX_DIGITS) digit_position = MAX_DIGITS;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <update_encoder_state+0xf8>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d106      	bne.n	8001c0a <update_encoder_state+0xda>
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <update_encoder_state+0x100>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	dd02      	ble.n	8001c0a <update_encoder_state+0xda>
 8001c04:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <update_encoder_state+0x100>)
 8001c06:	2206      	movs	r2, #6
 8001c08:	601a      	str	r2, [r3, #0]
    if (digit_position < 0) digit_position = 0;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <update_encoder_state+0x100>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da02      	bge.n	8001c18 <update_encoder_state+0xe8>
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <update_encoder_state+0x100>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200002a4 	.word	0x200002a4
 8001c24:	200002d4 	.word	0x200002d4
 8001c28:	200002a8 	.word	0x200002a8
 8001c2c:	200002d2 	.word	0x200002d2
 8001c30:	200002c4 	.word	0x200002c4
 8001c34:	200002ac 	.word	0x200002ac

08001c38 <update_parameter_value>:

// Update parameter value
void update_parameter_value(int direction) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
    // Convert the whole value to an integer, treating it as 00.000 (in this case, a 5-digit number)
    int full_value = (int)(param_value * 1000);
 8001c40:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <update_parameter_value+0x160>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4955      	ldr	r1, [pc, #340]	@ (8001d9c <update_parameter_value+0x164>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe ff8e 	bl	8000b68 <__aeabi_fmul>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f950 	bl	8000ef4 <__aeabi_f2iz>
 8001c54:	4603      	mov	r3, r0
 8001c56:	617b      	str	r3, [r7, #20]

    // Determine the position and multiplier
    int multiplier = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]

    switch (digit_position) {
 8001c5c:	4b50      	ldr	r3, [pc, #320]	@ (8001da0 <update_parameter_value+0x168>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d820      	bhi.n	8001ca6 <update_parameter_value+0x6e>
 8001c64:	a201      	add	r2, pc, #4	@ (adr r2, 8001c6c <update_parameter_value+0x34>)
 8001c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6a:	bf00      	nop
 8001c6c:	08001c85 	.word	0x08001c85
 8001c70:	08001c8d 	.word	0x08001c8d
 8001c74:	08001d8f 	.word	0x08001d8f
 8001c78:	08001c95 	.word	0x08001c95
 8001c7c:	08001c9b 	.word	0x08001c9b
 8001c80:	08001ca1 	.word	0x08001ca1
        case 0:
            multiplier = 10000;  // Corresponds to the tens digit of the integer part
 8001c84:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c88:	613b      	str	r3, [r7, #16]
            break;
 8001c8a:	e00c      	b.n	8001ca6 <update_parameter_value+0x6e>
        case 1:
            multiplier = 1000;   // Corresponds to the units digit of the integer part
 8001c8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c90:	613b      	str	r3, [r7, #16]
            break;
 8001c92:	e008      	b.n	8001ca6 <update_parameter_value+0x6e>
        case 2:
            // Do nothing as this is the decimal point
            return;
        case 3:
            multiplier = 100;    // Corresponds to the first digit after the decimal point
 8001c94:	2364      	movs	r3, #100	@ 0x64
 8001c96:	613b      	str	r3, [r7, #16]
            break;
 8001c98:	e005      	b.n	8001ca6 <update_parameter_value+0x6e>
        case 4:
            multiplier = 10;     // Corresponds to the second digit after the decimal point
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	613b      	str	r3, [r7, #16]
            break;
 8001c9e:	e002      	b.n	8001ca6 <update_parameter_value+0x6e>
        case 5:
            multiplier = 1;      // Corresponds to the third digit after the decimal point
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
            break;
 8001ca4:	bf00      	nop
    }

    // Store the original integer part before updating
    int original_integer_part = full_value / 1000;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8001da4 <update_parameter_value+0x16c>)
 8001caa:	fb82 1203 	smull	r1, r2, r2, r3
 8001cae:	1192      	asrs	r2, r2, #6
 8001cb0:	17db      	asrs	r3, r3, #31
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	60bb      	str	r3, [r7, #8]

    // Update the selected digit
    full_value += direction * multiplier;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]

    // Wrap the relevant digit only
    if (digit_position <= 1) {  // If modifying the integer part
 8001cc4:	4b36      	ldr	r3, [pc, #216]	@ (8001da0 <update_parameter_value+0x168>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	dc12      	bgt.n	8001cf2 <update_parameter_value+0xba>
        if (full_value < 0) {
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da05      	bge.n	8001cde <update_parameter_value+0xa6>
            full_value += 100000;  // Wrap within the range of 00.000 to 99.999
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f503 33c3 	add.w	r3, r3, #99840	@ 0x18600
 8001cd8:	33a0      	adds	r3, #160	@ 0xa0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e02e      	b.n	8001d3c <update_parameter_value+0x104>
        } else if (full_value >= 100000) {
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	4a31      	ldr	r2, [pc, #196]	@ (8001da8 <update_parameter_value+0x170>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	dd2a      	ble.n	8001d3c <update_parameter_value+0x104>
            full_value -= 100000;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f5a3 33c3 	sub.w	r3, r3, #99840	@ 0x18600
 8001cec:	3ba0      	subs	r3, #160	@ 0xa0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e024      	b.n	8001d3c <update_parameter_value+0x104>
        }
    } else {  // If modifying the fractional part
        int fractional_int = full_value % 1000;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8001da4 <update_parameter_value+0x16c>)
 8001cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cfa:	1191      	asrs	r1, r2, #6
 8001cfc:	17da      	asrs	r2, r3, #31
 8001cfe:	1a8a      	subs	r2, r1, r2
 8001d00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d04:	fb01 f202 	mul.w	r2, r1, r2
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
        if (fractional_int < 0) {
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da04      	bge.n	8001d1c <update_parameter_value+0xe4>
            fractional_int += 1000;  // Wrap within the range of 000 to 999
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e007      	b.n	8001d2c <update_parameter_value+0xf4>
        } else if (fractional_int >= 1000) {
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d22:	db03      	blt.n	8001d2c <update_parameter_value+0xf4>
            fractional_int -= 1000;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d2a:	60fb      	str	r3, [r7, #12]
        }
        full_value = (original_integer_part * 1000) + fractional_int;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
    }

    // Convert back to floating-point value
    param_value = full_value / 1000.0;
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f7fe fb61 	bl	8000404 <__aeabi_i2d>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <update_parameter_value+0x174>)
 8001d48:	f7fe fcf0 	bl	800072c <__aeabi_ddiv>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7fe feb8 	bl	8000ac8 <__aeabi_d2f>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <update_parameter_value+0x160>)
 8001d5c:	6013      	str	r3, [r2, #0]

    // Debug: Print the updated param_value
    printf("Updated param_value: %05d.%03d\n\r", full_value / 1000, full_value % 1000);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4a10      	ldr	r2, [pc, #64]	@ (8001da4 <update_parameter_value+0x16c>)
 8001d62:	fb82 1203 	smull	r1, r2, r2, r3
 8001d66:	1192      	asrs	r2, r2, #6
 8001d68:	17db      	asrs	r3, r3, #31
 8001d6a:	1ad0      	subs	r0, r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <update_parameter_value+0x16c>)
 8001d70:	fb82 1203 	smull	r1, r2, r2, r3
 8001d74:	1191      	asrs	r1, r2, #6
 8001d76:	17da      	asrs	r2, r3, #31
 8001d78:	1a8a      	subs	r2, r1, r2
 8001d7a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d7e:	fb01 f202 	mul.w	r2, r1, r2
 8001d82:	1a9a      	subs	r2, r3, r2
 8001d84:	4601      	mov	r1, r0
 8001d86:	480a      	ldr	r0, [pc, #40]	@ (8001db0 <update_parameter_value+0x178>)
 8001d88:	f005 fe66 	bl	8007a58 <iprintf>
 8001d8c:	e000      	b.n	8001d90 <update_parameter_value+0x158>
            return;
 8001d8e:	bf00      	nop
}
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002c0 	.word	0x200002c0
 8001d9c:	447a0000 	.word	0x447a0000
 8001da0:	200002c4 	.word	0x200002c4
 8001da4:	10624dd3 	.word	0x10624dd3
 8001da8:	0001869f 	.word	0x0001869f
 8001dac:	408f4000 	.word	0x408f4000
 8001db0:	0800b424 	.word	0x0800b424
 8001db4:	00000000 	.word	0x00000000

08001db8 <put_parameter_limit>:

// Put limit on parameter value
void put_parameter_limit(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	// check the MIN and MAX value of each mode to set limits on the value.
	if(current_state == 2){
 8001dbc:	4b50      	ldr	r3, [pc, #320]	@ (8001f00 <put_parameter_limit+0x148>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	f040 808c 	bne.w	8001ede <put_parameter_limit+0x126>
		switch(mode_index) {
 8001dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001f04 <put_parameter_limit+0x14c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	f200 8086 	bhi.w	8001edc <put_parameter_limit+0x124>
 8001dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd8 <put_parameter_limit+0x20>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001e27 	.word	0x08001e27
 8001de0:	08001e5d 	.word	0x08001e5d
 8001de4:	08001e9f 	.word	0x08001e9f
			case 0:
				if(param_value >= MAX_CC_VALUE){
 8001de8:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <put_parameter_limit+0x150>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4947      	ldr	r1, [pc, #284]	@ (8001f0c <put_parameter_limit+0x154>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f86c 	bl	8000ecc <__aeabi_fcmpge>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <put_parameter_limit+0x4a>
					param_value = MAX_CC_VALUE;
 8001dfa:	4b43      	ldr	r3, [pc, #268]	@ (8001f08 <put_parameter_limit+0x150>)
 8001dfc:	4a43      	ldr	r2, [pc, #268]	@ (8001f0c <put_parameter_limit+0x154>)
 8001dfe:	601a      	str	r2, [r3, #0]
				}else if(param_value <= MIN_CC_VALUE){
					param_value = MIN_CC_VALUE;
				}
				break;
 8001e00:	e06d      	b.n	8001ede <put_parameter_limit+0x126>
				}else if(param_value <= MIN_CC_VALUE){
 8001e02:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb0e 	bl	8000428 <__aeabi_f2d>
 8001e0c:	a336      	add	r3, pc, #216	@ (adr r3, 8001ee8 <put_parameter_limit+0x130>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fddd 	bl	80009d0 <__aeabi_dcmple>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d100      	bne.n	8001e1e <put_parameter_limit+0x66>
				break;
 8001e1c:	e05f      	b.n	8001ede <put_parameter_limit+0x126>
					param_value = MIN_CC_VALUE;
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e20:	4a3b      	ldr	r2, [pc, #236]	@ (8001f10 <put_parameter_limit+0x158>)
 8001e22:	601a      	str	r2, [r3, #0]
				break;
 8001e24:	e05b      	b.n	8001ede <put_parameter_limit+0x126>
			case 1:
				if(param_value >= MAX_CV_VALUE){
 8001e26:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	493a      	ldr	r1, [pc, #232]	@ (8001f14 <put_parameter_limit+0x15c>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f84d 	bl	8000ecc <__aeabi_fcmpge>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <put_parameter_limit+0x88>
					param_value = MAX_CV_VALUE;
 8001e38:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e3a:	4a36      	ldr	r2, [pc, #216]	@ (8001f14 <put_parameter_limit+0x15c>)
 8001e3c:	601a      	str	r2, [r3, #0]
				}else if(param_value <= MIN_CV_VALUE){
					param_value = MIN_CV_VALUE;
				}
				break;
 8001e3e:	e04e      	b.n	8001ede <put_parameter_limit+0x126>
				}else if(param_value <= MIN_CV_VALUE){
 8001e40:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4934      	ldr	r1, [pc, #208]	@ (8001f18 <put_parameter_limit+0x160>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f836 	bl	8000eb8 <__aeabi_fcmple>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d100      	bne.n	8001e54 <put_parameter_limit+0x9c>
				break;
 8001e52:	e044      	b.n	8001ede <put_parameter_limit+0x126>
					param_value = MIN_CV_VALUE;
 8001e54:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e56:	4a30      	ldr	r2, [pc, #192]	@ (8001f18 <put_parameter_limit+0x160>)
 8001e58:	601a      	str	r2, [r3, #0]
				break;
 8001e5a:	e040      	b.n	8001ede <put_parameter_limit+0x126>
			case 2:
				if(param_value >= MAX_CP_VALUE){
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fae1 	bl	8000428 <__aeabi_f2d>
 8001e66:	a322      	add	r3, pc, #136	@ (adr r3, 8001ef0 <put_parameter_limit+0x138>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fdba 	bl	80009e4 <__aeabi_dcmpge>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <put_parameter_limit+0xc6>
					param_value = MAX_CP_VALUE;
 8001e76:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e78:	4a28      	ldr	r2, [pc, #160]	@ (8001f1c <put_parameter_limit+0x164>)
 8001e7a:	601a      	str	r2, [r3, #0]
				}else if(param_value <= MIN_CP_VALUE){
					param_value = MIN_CP_VALUE;
				}
				break;
 8001e7c:	e02f      	b.n	8001ede <put_parameter_limit+0x126>
				}else if(param_value <= MIN_CP_VALUE){
 8001e7e:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f816 	bl	8000eb8 <__aeabi_fcmple>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d100      	bne.n	8001e94 <put_parameter_limit+0xdc>
				break;
 8001e92:	e024      	b.n	8001ede <put_parameter_limit+0x126>
					param_value = MIN_CP_VALUE;
 8001e94:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <put_parameter_limit+0x150>)
 8001e96:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e9a:	601a      	str	r2, [r3, #0]
				break;
 8001e9c:	e01f      	b.n	8001ede <put_parameter_limit+0x126>
			case 3:
				if(param_value >= MAX_CR_VALUE){
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <put_parameter_limit+0x150>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	491f      	ldr	r1, [pc, #124]	@ (8001f20 <put_parameter_limit+0x168>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f811 	bl	8000ecc <__aeabi_fcmpge>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <put_parameter_limit+0x100>
					param_value = MAX_CR_VALUE;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <put_parameter_limit+0x150>)
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <put_parameter_limit+0x168>)
 8001eb4:	601a      	str	r2, [r3, #0]
				}else if(param_value <= MIN_CR_VALUE){
					param_value = MIN_CR_VALUE;
				}
				break;
 8001eb6:	e012      	b.n	8001ede <put_parameter_limit+0x126>
				}else if(param_value <= MIN_CR_VALUE){
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <put_parameter_limit+0x150>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fab3 	bl	8000428 <__aeabi_f2d>
 8001ec2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001ef8 <put_parameter_limit+0x140>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe fd82 	bl	80009d0 <__aeabi_dcmple>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d100      	bne.n	8001ed4 <put_parameter_limit+0x11c>
				break;
 8001ed2:	e004      	b.n	8001ede <put_parameter_limit+0x126>
					param_value = MIN_CR_VALUE;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <put_parameter_limit+0x150>)
 8001ed6:	4a13      	ldr	r2, [pc, #76]	@ (8001f24 <put_parameter_limit+0x16c>)
 8001ed8:	601a      	str	r2, [r3, #0]
				break;
 8001eda:	e000      	b.n	8001ede <put_parameter_limit+0x126>
			default:
				break;
 8001edc:	bf00      	nop
		}
	}
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001eec:	3f50624d 	.word	0x3f50624d
 8001ef0:	9db22d0e 	.word	0x9db22d0e
 8001ef4:	4058ffef 	.word	0x4058ffef
 8001ef8:	9999999a 	.word	0x9999999a
 8001efc:	3fb99999 	.word	0x3fb99999
 8001f00:	200002a8 	.word	0x200002a8
 8001f04:	20000000 	.word	0x20000000
 8001f08:	200002c0 	.word	0x200002c0
 8001f0c:	40a00000 	.word	0x40a00000
 8001f10:	3a83126f 	.word	0x3a83126f
 8001f14:	41f00000 	.word	0x41f00000
 8001f18:	40400000 	.word	0x40400000
 8001f1c:	42c7ff7d 	.word	0x42c7ff7d
 8001f20:	41200000 	.word	0x41200000
 8001f24:	3dcccccd 	.word	0x3dcccccd

08001f28 <handle_button_press>:




void handle_button_press() {
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
    if (rot_sw_state) {
 8001f2c:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <handle_button_press+0x94>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d03e      	beq.n	8001fb2 <handle_button_press+0x8a>
    	switch (current_state) {
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <handle_button_press+0x98>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d01c      	beq.n	8001f76 <handle_button_press+0x4e>
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	dc30      	bgt.n	8001fa2 <handle_button_press+0x7a>
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <handle_button_press+0x22>
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d008      	beq.n	8001f5a <handle_button_press+0x32>
					current_state = RETURN_TO_HOME;
					digit_position = 0;
				}
				break;
			default:
				break;
 8001f48:	e02b      	b.n	8001fa2 <handle_button_press+0x7a>
				if (cursor_position == 0) {
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <handle_button_press+0x9c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d129      	bne.n	8001fa6 <handle_button_press+0x7e>
					current_state = MODE_SELECTION;
 8001f52:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <handle_button_press+0x98>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
				break;
 8001f58:	e025      	b.n	8001fa6 <handle_button_press+0x7e>
				current_state = PARAMETER_SETTING;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <handle_button_press+0x98>)
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	701a      	strb	r2, [r3, #0]
				mode_index = cursor_position;
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <handle_button_press+0x9c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a18      	ldr	r2, [pc, #96]	@ (8001fc8 <handle_button_press+0xa0>)
 8001f66:	6013      	str	r3, [r2, #0]
				cursor_position = 0;
 8001f68:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <handle_button_press+0x9c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
				adjusting_digit = false;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <handle_button_press+0xa4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
				break;
 8001f74:	e01a      	b.n	8001fac <handle_button_press+0x84>
				if (adjusting_digit) {
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <handle_button_press+0xa4>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <handle_button_press+0x5e>
					adjusting_digit = false; // Stop adjusting the digit
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <handle_button_press+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e002      	b.n	8001f8c <handle_button_press+0x64>
					adjusting_digit = true; // Start adjusting the digit
 8001f86:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <handle_button_press+0xa4>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
				if (digit_position == MAX_DIGITS) {
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <handle_button_press+0xa8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d10a      	bne.n	8001faa <handle_button_press+0x82>
					current_state = RETURN_TO_HOME;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <handle_button_press+0x98>)
 8001f96:	2203      	movs	r2, #3
 8001f98:	701a      	strb	r2, [r3, #0]
					digit_position = 0;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <handle_button_press+0xa8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
				break;
 8001fa0:	e003      	b.n	8001faa <handle_button_press+0x82>
				break;
 8001fa2:	bf00      	nop
 8001fa4:	e002      	b.n	8001fac <handle_button_press+0x84>
				break;
 8001fa6:	bf00      	nop
 8001fa8:	e000      	b.n	8001fac <handle_button_press+0x84>
				break;
 8001faa:	bf00      	nop
        }
        rot_sw_state = false; // Reset button state
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <handle_button_press+0x94>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
    }
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	200002ce 	.word	0x200002ce
 8001fc0:	200002a8 	.word	0x200002a8
 8001fc4:	200002ac 	.word	0x200002ac
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	200002d2 	.word	0x200002d2
 8001fd0:	200002c4 	.word	0x200002c4

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <Error_Handler+0x8>

08001fe0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001ff6:	bf00      	nop
 8001ff8:	4809      	ldr	r0, [pc, #36]	@ (8002020 <ssd1306_WriteCommand+0x34>)
 8001ffa:	f001 ff7b 	bl	8003ef4 <HAL_I2C_GetState>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b20      	cmp	r3, #32
 8002002:	d1f9      	bne.n	8001ff8 <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
 8002004:	2301      	movs	r3, #1
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2301      	movs	r3, #1
 800200e:	2200      	movs	r2, #0
 8002010:	2178      	movs	r1, #120	@ 0x78
 8002012:	4803      	ldr	r0, [pc, #12]	@ (8002020 <ssd1306_WriteCommand+0x34>)
 8002014:	f001 fc70 	bl	80038f8 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
#endif
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000204 	.word	0x20000204

08002024 <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af02      	add	r7, sp, #8
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 800202e:	bf00      	nop
 8002030:	480a      	ldr	r0, [pc, #40]	@ (800205c <ssd1306_WriteData+0x38>)
 8002032:	f001 ff5f 	bl	8003ef4 <HAL_I2C_GetState>
 8002036:	4603      	mov	r3, r0
 8002038:	2b20      	cmp	r3, #32
 800203a:	d1f9      	bne.n	8002030 <ssd1306_WriteData+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2301      	movs	r3, #1
 8002048:	2240      	movs	r2, #64	@ 0x40
 800204a:	2178      	movs	r1, #120	@ 0x78
 800204c:	4803      	ldr	r0, [pc, #12]	@ (800205c <ssd1306_WriteData+0x38>)
 800204e:	f001 fc53 	bl	80038f8 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
#endif
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000204 	.word	0x20000204

08002060 <HAL_I2C_MemTxCpltCallback>:


#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
	...

08002074 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002078:	f7ff ffb2 	bl	8001fe0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800207c:	2064      	movs	r0, #100	@ 0x64
 800207e:	f000 fd5b 	bl	8002b38 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002082:	2000      	movs	r0, #0
 8002084:	f000 fa42 	bl	800250c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002088:	2020      	movs	r0, #32
 800208a:	f7ff ffaf 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff ffac 	bl	8001fec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002094:	20b0      	movs	r0, #176	@ 0xb0
 8002096:	f7ff ffa9 	bl	8001fec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800209a:	20c8      	movs	r0, #200	@ 0xc8
 800209c:	f7ff ffa6 	bl	8001fec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff ffa3 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80020a6:	2010      	movs	r0, #16
 80020a8:	f7ff ffa0 	bl	8001fec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80020ac:	2040      	movs	r0, #64	@ 0x40
 80020ae:	f7ff ff9d 	bl	8001fec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80020b2:	20ff      	movs	r0, #255	@ 0xff
 80020b4:	f000 fa16 	bl	80024e4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80020b8:	20a1      	movs	r0, #161	@ 0xa1
 80020ba:	f7ff ff97 	bl	8001fec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80020be:	20a6      	movs	r0, #166	@ 0xa6
 80020c0:	f7ff ff94 	bl	8001fec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80020c4:	20a8      	movs	r0, #168	@ 0xa8
 80020c6:	f7ff ff91 	bl	8001fec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80020ca:	203f      	movs	r0, #63	@ 0x3f
 80020cc:	f7ff ff8e 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020d0:	20a4      	movs	r0, #164	@ 0xa4
 80020d2:	f7ff ff8b 	bl	8001fec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80020d6:	20d3      	movs	r0, #211	@ 0xd3
 80020d8:	f7ff ff88 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff ff85 	bl	8001fec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80020e2:	20d5      	movs	r0, #213	@ 0xd5
 80020e4:	f7ff ff82 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80020e8:	20f0      	movs	r0, #240	@ 0xf0
 80020ea:	f7ff ff7f 	bl	8001fec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80020ee:	20d9      	movs	r0, #217	@ 0xd9
 80020f0:	f7ff ff7c 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80020f4:	2022      	movs	r0, #34	@ 0x22
 80020f6:	f7ff ff79 	bl	8001fec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80020fa:	20da      	movs	r0, #218	@ 0xda
 80020fc:	f7ff ff76 	bl	8001fec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002100:	2012      	movs	r0, #18
 8002102:	f7ff ff73 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002106:	20db      	movs	r0, #219	@ 0xdb
 8002108:	f7ff ff70 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800210c:	2020      	movs	r0, #32
 800210e:	f7ff ff6d 	bl	8001fec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002112:	208d      	movs	r0, #141	@ 0x8d
 8002114:	f7ff ff6a 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002118:	2014      	movs	r0, #20
 800211a:	f7ff ff67 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800211e:	2001      	movs	r0, #1
 8002120:	f000 f9f4 	bl	800250c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002124:	2000      	movs	r0, #0
 8002126:	f000 f80f 	bl	8002148 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800212a:	f000 f82f 	bl	800218c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800212e:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <ssd1306_Init+0xd0>)
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002134:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <ssd1306_Init+0xd0>)
 8002136:	2200      	movs	r2, #0
 8002138:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800213a:	4b02      	ldr	r3, [pc, #8]	@ (8002144 <ssd1306_Init+0xd0>)
 800213c:	2201      	movs	r2, #1
 800213e:	711a      	strb	r2, [r3, #4]
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200006d8 	.word	0x200006d8

08002148 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e00d      	b.n	8002174 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <ssd1306_Fill+0x1a>
 800215e:	2100      	movs	r1, #0
 8002160:	e000      	b.n	8002164 <ssd1306_Fill+0x1c>
 8002162:	21ff      	movs	r1, #255	@ 0xff
 8002164:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <ssd1306_Fill+0x40>)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	460a      	mov	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3301      	adds	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	d3ed      	bcc.n	8002158 <ssd1306_Fill+0x10>
    }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	200002d8 	.word	0x200002d8

0800218c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002192:	2300      	movs	r3, #0
 8002194:	71fb      	strb	r3, [r7, #7]
 8002196:	e016      	b.n	80021c6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	3b50      	subs	r3, #80	@ 0x50
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff24 	bl	8001fec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7ff ff21 	bl	8001fec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80021aa:	2010      	movs	r0, #16
 80021ac:	f7ff ff1e 	bl	8001fec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	01db      	lsls	r3, r3, #7
 80021b4:	4a08      	ldr	r2, [pc, #32]	@ (80021d8 <ssd1306_UpdateScreen+0x4c>)
 80021b6:	4413      	add	r3, r2
 80021b8:	2180      	movs	r1, #128	@ 0x80
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff32 	bl	8002024 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	3301      	adds	r3, #1
 80021c4:	71fb      	strb	r3, [r7, #7]
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	2b07      	cmp	r3, #7
 80021ca:	d9e5      	bls.n	8002198 <ssd1306_UpdateScreen+0xc>
    }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200002d8 	.word	0x200002d8

080021dc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
 80021e6:	460b      	mov	r3, r1
 80021e8:	71bb      	strb	r3, [r7, #6]
 80021ea:	4613      	mov	r3, r2
 80021ec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db3d      	blt.n	8002272 <ssd1306_DrawPixel+0x96>
 80021f6:	79bb      	ldrb	r3, [r7, #6]
 80021f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80021fa:	d83a      	bhi.n	8002272 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80021fc:	797b      	ldrb	r3, [r7, #5]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d11a      	bne.n	8002238 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002202:	79fa      	ldrb	r2, [r7, #7]
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	b2d8      	uxtb	r0, r3
 800220a:	4603      	mov	r3, r0
 800220c:	01db      	lsls	r3, r3, #7
 800220e:	4413      	add	r3, r2
 8002210:	4a1a      	ldr	r2, [pc, #104]	@ (800227c <ssd1306_DrawPixel+0xa0>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	b25a      	sxtb	r2, r3
 8002216:	79bb      	ldrb	r3, [r7, #6]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	b25b      	sxtb	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b259      	sxtb	r1, r3
 8002228:	79fa      	ldrb	r2, [r7, #7]
 800222a:	4603      	mov	r3, r0
 800222c:	01db      	lsls	r3, r3, #7
 800222e:	4413      	add	r3, r2
 8002230:	b2c9      	uxtb	r1, r1
 8002232:	4a12      	ldr	r2, [pc, #72]	@ (800227c <ssd1306_DrawPixel+0xa0>)
 8002234:	54d1      	strb	r1, [r2, r3]
 8002236:	e01d      	b.n	8002274 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	08db      	lsrs	r3, r3, #3
 800223e:	b2d8      	uxtb	r0, r3
 8002240:	4603      	mov	r3, r0
 8002242:	01db      	lsls	r3, r3, #7
 8002244:	4413      	add	r3, r2
 8002246:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <ssd1306_DrawPixel+0xa0>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	b25a      	sxtb	r2, r3
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	b25b      	sxtb	r3, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	b25b      	sxtb	r3, r3
 800225e:	4013      	ands	r3, r2
 8002260:	b259      	sxtb	r1, r3
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	4603      	mov	r3, r0
 8002266:	01db      	lsls	r3, r3, #7
 8002268:	4413      	add	r3, r2
 800226a:	b2c9      	uxtb	r1, r1
 800226c:	4a03      	ldr	r2, [pc, #12]	@ (800227c <ssd1306_DrawPixel+0xa0>)
 800226e:	54d1      	strb	r1, [r2, r3]
 8002270:	e000      	b.n	8002274 <ssd1306_DrawPixel+0x98>
        return;
 8002272:	bf00      	nop
    }
}
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	200002d8 	.word	0x200002d8

08002280 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b089      	sub	sp, #36	@ 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	4604      	mov	r4, r0
 8002288:	1d38      	adds	r0, r7, #4
 800228a:	e880 0006 	stmia.w	r0, {r1, r2}
 800228e:	461a      	mov	r2, r3
 8002290:	4623      	mov	r3, r4
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	4613      	mov	r3, r2
 8002296:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	2b1f      	cmp	r3, #31
 800229c:	d902      	bls.n	80022a4 <ssd1306_WriteChar+0x24>
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80022a2:	d901      	bls.n	80022a8 <ssd1306_WriteChar+0x28>
        return 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e06c      	b.n	8002382 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022a8:	4b38      	ldr	r3, [pc, #224]	@ (800238c <ssd1306_WriteChar+0x10c>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	793b      	ldrb	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	2b80      	cmp	r3, #128	@ 0x80
 80022b4:	dc06      	bgt.n	80022c4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80022b6:	4b35      	ldr	r3, [pc, #212]	@ (800238c <ssd1306_WriteChar+0x10c>)
 80022b8:	885b      	ldrh	r3, [r3, #2]
 80022ba:	461a      	mov	r2, r3
 80022bc:	797b      	ldrb	r3, [r7, #5]
 80022be:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022c0:	2b40      	cmp	r3, #64	@ 0x40
 80022c2:	dd01      	ble.n	80022c8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e05c      	b.n	8002382 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	e04c      	b.n	8002368 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	3b20      	subs	r3, #32
 80022d4:	7979      	ldrb	r1, [r7, #5]
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4619      	mov	r1, r3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	440b      	add	r3, r1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	e034      	b.n	8002358 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d012      	beq.n	8002324 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80022fe:	4b23      	ldr	r3, [pc, #140]	@ (800238c <ssd1306_WriteChar+0x10c>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4413      	add	r3, r2
 800230a:	b2d8      	uxtb	r0, r3
 800230c:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <ssd1306_WriteChar+0x10c>)
 800230e:	885b      	ldrh	r3, [r3, #2]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4413      	add	r3, r2
 8002318:	b2db      	uxtb	r3, r3
 800231a:	7bba      	ldrb	r2, [r7, #14]
 800231c:	4619      	mov	r1, r3
 800231e:	f7ff ff5d 	bl	80021dc <ssd1306_DrawPixel>
 8002322:	e016      	b.n	8002352 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <ssd1306_WriteChar+0x10c>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4413      	add	r3, r2
 8002330:	b2d8      	uxtb	r0, r3
 8002332:	4b16      	ldr	r3, [pc, #88]	@ (800238c <ssd1306_WriteChar+0x10c>)
 8002334:	885b      	ldrh	r3, [r3, #2]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4413      	add	r3, r2
 800233e:	b2d9      	uxtb	r1, r3
 8002340:	7bbb      	ldrb	r3, [r7, #14]
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	f7ff ff45 	bl	80021dc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	3301      	adds	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	793b      	ldrb	r3, [r7, #4]
 800235a:	461a      	mov	r2, r3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4293      	cmp	r3, r2
 8002360:	d3c5      	bcc.n	80022ee <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	797b      	ldrb	r3, [r7, #5]
 800236a:	461a      	mov	r2, r3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4293      	cmp	r3, r2
 8002370:	d3ad      	bcc.n	80022ce <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <ssd1306_WriteChar+0x10c>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	793a      	ldrb	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	b29a      	uxth	r2, r3
 800237c:	4b03      	ldr	r3, [pc, #12]	@ (800238c <ssd1306_WriteChar+0x10c>)
 800237e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	@ 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	200006d8 	.word	0x200006d8

08002390 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	1d38      	adds	r0, r7, #4
 800239a:	e880 0006 	stmia.w	r0, {r1, r2}
 800239e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80023a0:	e012      	b.n	80023c8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	7818      	ldrb	r0, [r3, #0]
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	1d3a      	adds	r2, r7, #4
 80023aa:	ca06      	ldmia	r2, {r1, r2}
 80023ac:	f7ff ff68 	bl	8002280 <ssd1306_WriteChar>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d002      	beq.n	80023c2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	e008      	b.n	80023d4 <ssd1306_WriteString+0x44>
        }
        str++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1e8      	bne.n	80023a2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	781b      	ldrb	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	460a      	mov	r2, r1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <ssd1306_SetCursor+0x2c>)
 80023f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80023f4:	79bb      	ldrb	r3, [r7, #6]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <ssd1306_SetCursor+0x2c>)
 80023fa:	805a      	strh	r2, [r3, #2]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200006d8 	.word	0x200006d8

0800240c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b089      	sub	sp, #36	@ 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	4604      	mov	r4, r0
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4623      	mov	r3, r4
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	4603      	mov	r3, r0
 8002420:	71bb      	strb	r3, [r7, #6]
 8002422:	460b      	mov	r3, r1
 8002424:	717b      	strb	r3, [r7, #5]
 8002426:	4613      	mov	r3, r2
 8002428:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800242a:	797a      	ldrb	r2, [r7, #5]
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	bfb8      	it	lt
 8002434:	425b      	neglt	r3, r3
 8002436:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002438:	793a      	ldrb	r2, [r7, #4]
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	bfb8      	it	lt
 8002442:	425b      	neglt	r3, r3
 8002444:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	797b      	ldrb	r3, [r7, #5]
 800244a:	429a      	cmp	r2, r3
 800244c:	d201      	bcs.n	8002452 <ssd1306_Line+0x46>
 800244e:	2301      	movs	r3, #1
 8002450:	e001      	b.n	8002456 <ssd1306_Line+0x4a>
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002458:	79ba      	ldrb	r2, [r7, #6]
 800245a:	793b      	ldrb	r3, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	d201      	bcs.n	8002464 <ssd1306_Line+0x58>
 8002460:	2301      	movs	r3, #1
 8002462:	e001      	b.n	8002468 <ssd1306_Line+0x5c>
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002472:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002476:	7939      	ldrb	r1, [r7, #4]
 8002478:	797b      	ldrb	r3, [r7, #5]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff feae 	bl	80021dc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002480:	e024      	b.n	80024cc <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002482:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002486:	79b9      	ldrb	r1, [r7, #6]
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fea6 	bl	80021dc <ssd1306_DrawPixel>
        error2 = error * 2;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	425b      	negs	r3, r3
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	dd08      	ble.n	80024b2 <ssd1306_Line+0xa6>
            error -= deltaY;
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	4413      	add	r3, r2
 80024b0:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	da08      	bge.n	80024cc <ssd1306_Line+0xc0>
            error += deltaX;
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4413      	add	r3, r2
 80024c0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	79bb      	ldrb	r3, [r7, #6]
 80024c8:	4413      	add	r3, r2
 80024ca:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80024cc:	79fa      	ldrb	r2, [r7, #7]
 80024ce:	797b      	ldrb	r3, [r7, #5]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1d6      	bne.n	8002482 <ssd1306_Line+0x76>
 80024d4:	79ba      	ldrb	r2, [r7, #6]
 80024d6:	793b      	ldrb	r3, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1d2      	bne.n	8002482 <ssd1306_Line+0x76>
        }
    }
    return;
 80024dc:	bf00      	nop
}
 80024de:	3724      	adds	r7, #36	@ 0x24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}

080024e4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80024ee:	2381      	movs	r3, #129	@ 0x81
 80024f0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fd79 	bl	8001fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fd75 	bl	8001fec <ssd1306_WriteCommand>
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800251c:	23af      	movs	r3, #175	@ 0xaf
 800251e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <ssd1306_SetDisplayOn+0x38>)
 8002522:	2201      	movs	r2, #1
 8002524:	715a      	strb	r2, [r3, #5]
 8002526:	e004      	b.n	8002532 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002528:	23ae      	movs	r3, #174	@ 0xae
 800252a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <ssd1306_SetDisplayOn+0x38>)
 800252e:	2200      	movs	r2, #0
 8002530:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fd59 	bl	8001fec <ssd1306_WriteCommand>
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200006d8 	.word	0x200006d8

08002548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_MspInit+0x5c>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4a14      	ldr	r2, [pc, #80]	@ (80025a4 <HAL_MspInit+0x5c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6193      	str	r3, [r2, #24]
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_MspInit+0x5c>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <HAL_MspInit+0x5c>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a0e      	ldr	r2, [pc, #56]	@ (80025a4 <HAL_MspInit+0x5c>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <HAL_MspInit+0x5c>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_MspInit+0x60>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_MspInit+0x60>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <NMI_Handler+0x4>

080025b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <MemManage_Handler+0x4>

080025c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025fc:	f000 fa80 	bl	8002b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}

08002604 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_SW_Pin);
 8002608:	2001      	movs	r0, #1
 800260a:	f001 f805 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}

08002612 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_SW_Pin);
 8002616:	2002      	movs	r0, #2
 8002618:	f000 fffe 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_SW_Pin);
 8002624:	2010      	movs	r0, #16
 8002626:	f000 fff7 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002634:	4802      	ldr	r0, [pc, #8]	@ (8002640 <DMA1_Channel6_IRQHandler+0x10>)
 8002636:	f000 fce3 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000258 	.word	0x20000258

08002644 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_SW_Pin);
 8002648:	2020      	movs	r0, #32
 800264a:	f000 ffe5 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <TIM3_IRQHandler+0x10>)
 800265a:	f003 fedd 	bl	8006418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200006e4 	.word	0x200006e4

08002668 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800266c:	4802      	ldr	r0, [pc, #8]	@ (8002678 <I2C1_EV_IRQHandler+0x10>)
 800266e:	f001 fa99 	bl	8003ba4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000204 	.word	0x20000204

0800267c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <_kill>:

int _kill(int pid, int sig)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002694:	f005 fac2 	bl	8007c1c <__errno>
 8002698:	4603      	mov	r3, r0
 800269a:	2216      	movs	r2, #22
 800269c:	601a      	str	r2, [r3, #0]
  return -1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_exit>:

void _exit (int status)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026b2:	f04f 31ff 	mov.w	r1, #4294967295
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffe7 	bl	800268a <_kill>
  while (1) {}    /* Make sure we hang here */
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <_exit+0x12>

080026c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e00a      	b.n	80026e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d2:	f3af 8000 	nop.w
 80026d6:	4601      	mov	r1, r0
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60ba      	str	r2, [r7, #8]
 80026de:	b2ca      	uxtb	r2, r1
 80026e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dbf0      	blt.n	80026d2 <_read+0x12>
  }

  return len;
 80026f0:	687b      	ldr	r3, [r7, #4]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e009      	b.n	8002720 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	60ba      	str	r2, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fd8d 	bl	8001234 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	dbf1      	blt.n	800270c <_write+0x12>
  }
  return len;
 8002728:	687b      	ldr	r3, [r7, #4]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <_close>:

int _close(int file)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002758:	605a      	str	r2, [r3, #4]
  return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <_isatty>:

int _isatty(int file)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
	...

08002794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800279c:	4a14      	ldr	r2, [pc, #80]	@ (80027f0 <_sbrk+0x5c>)
 800279e:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <_sbrk+0x60>)
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <_sbrk+0x64>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <_sbrk+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d207      	bcs.n	80027d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c4:	f005 fa2a 	bl	8007c1c <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	220c      	movs	r2, #12
 80027cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e009      	b.n	80027e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a05      	ldr	r2, [pc, #20]	@ (80027f8 <_sbrk+0x64>)
 80027e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20005000 	.word	0x20005000
 80027f4:	00000400 	.word	0x00000400
 80027f8:	200006e0 	.word	0x200006e0
 80027fc:	200008c8 	.word	0x200008c8

08002800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	@ 0x30
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	2224      	movs	r2, #36	@ 0x24
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f005 f9ab 	bl	8007b76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002828:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <MX_TIM3_Init+0xa0>)
 800282a:	4a21      	ldr	r2, [pc, #132]	@ (80028b0 <MX_TIM3_Init+0xa4>)
 800282c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800282e:	4b1f      	ldr	r3, [pc, #124]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800283a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ac <MX_TIM3_Init+0xa0>)
 800283c:	2263      	movs	r2, #99	@ 0x63
 800283e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002846:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800284c:	2303      	movs	r3, #3
 800284e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002854:	2301      	movs	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800285c:	230a      	movs	r3, #10
 800285e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	4619      	mov	r1, r3
 8002876:	480d      	ldr	r0, [pc, #52]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002878:	f003 fc7e 	bl	8006178 <HAL_TIM_Encoder_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002882:	f7ff fba7 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4806      	ldr	r0, [pc, #24]	@ (80028ac <MX_TIM3_Init+0xa0>)
 8002894:	f003 ff72 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800289e:	f7ff fb99 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	3730      	adds	r7, #48	@ 0x30
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200006e4 	.word	0x200006e4
 80028b0:	40000400 	.word	0x40000400

080028b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a19      	ldr	r2, [pc, #100]	@ (8002934 <HAL_TIM_Encoder_MspInit+0x80>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d12b      	bne.n	800292c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d4:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	4a17      	ldr	r2, [pc, #92]	@ (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	61d3      	str	r3, [r2, #28]
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <HAL_TIM_Encoder_MspInit+0x84>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ROT_A_Pin|ROT_B_Pin;
 8002904:	23c0      	movs	r3, #192	@ 0xc0
 8002906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4619      	mov	r1, r3
 8002916:	4809      	ldr	r0, [pc, #36]	@ (800293c <HAL_TIM_Encoder_MspInit+0x88>)
 8002918:	f000 fcb2 	bl	8003280 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2100      	movs	r1, #0
 8002920:	201d      	movs	r0, #29
 8002922:	f000 fa04 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002926:	201d      	movs	r0, #29
 8002928:	f000 fa1d 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800292c:	bf00      	nop
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40000400 	.word	0x40000400
 8002938:	40021000 	.word	0x40021000
 800293c:	40010800 	.word	0x40010800

08002940 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 8002946:	4a12      	ldr	r2, [pc, #72]	@ (8002990 <MX_USART2_UART_Init+0x50>)
 8002948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800294a:	4b10      	ldr	r3, [pc, #64]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 800294c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002952:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800295e:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 8002966:	220c      	movs	r2, #12
 8002968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002976:	4805      	ldr	r0, [pc, #20]	@ (800298c <MX_USART2_UART_Init+0x4c>)
 8002978:	f003 ff70 	bl	800685c <HAL_UART_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002982:	f7ff fb27 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000072c 	.word	0x2000072c
 8002990:	40004400 	.word	0x40004400

08002994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0310 	add.w	r3, r7, #16
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	@ (8002a1c <HAL_UART_MspInit+0x88>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d12f      	bne.n	8002a14 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a20 <HAL_UART_MspInit+0x8c>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4a19      	ldr	r2, [pc, #100]	@ (8002a20 <HAL_UART_MspInit+0x8c>)
 80029ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029be:	61d3      	str	r3, [r2, #28]
 80029c0:	4b17      	ldr	r3, [pc, #92]	@ (8002a20 <HAL_UART_MspInit+0x8c>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <HAL_UART_MspInit+0x8c>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <HAL_UART_MspInit+0x8c>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	6193      	str	r3, [r2, #24]
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_UART_MspInit+0x8c>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029e4:	2304      	movs	r3, #4
 80029e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	4619      	mov	r1, r3
 80029f6:	480b      	ldr	r0, [pc, #44]	@ (8002a24 <HAL_UART_MspInit+0x90>)
 80029f8:	f000 fc42 	bl	8003280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029fc:	2308      	movs	r3, #8
 80029fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0310 	add.w	r3, r7, #16
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4805      	ldr	r0, [pc, #20]	@ (8002a24 <HAL_UART_MspInit+0x90>)
 8002a10:	f000 fc36 	bl	8003280 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40004400 	.word	0x40004400
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010800 	.word	0x40010800

08002a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a28:	f7ff feea 	bl	8002800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a2c:	480b      	ldr	r0, [pc, #44]	@ (8002a5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a2e:	490c      	ldr	r1, [pc, #48]	@ (8002a60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a30:	4a0c      	ldr	r2, [pc, #48]	@ (8002a64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a34:	e002      	b.n	8002a3c <LoopCopyDataInit>

08002a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3a:	3304      	adds	r3, #4

08002a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a40:	d3f9      	bcc.n	8002a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a42:	4a09      	ldr	r2, [pc, #36]	@ (8002a68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a44:	4c09      	ldr	r4, [pc, #36]	@ (8002a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a48:	e001      	b.n	8002a4e <LoopFillZerobss>

08002a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a4c:	3204      	adds	r2, #4

08002a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a50:	d3fb      	bcc.n	8002a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a52:	f005 f8e9 	bl	8007c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a56:	f7fe fbff 	bl	8001258 <main>
  bx lr
 8002a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002a64:	0800c020 	.word	0x0800c020
  ldr r2, =_sbss
 8002a68:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002a6c:	200008c4 	.word	0x200008c4

08002a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC1_2_IRQHandler>
	...

08002a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_Init+0x28>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a07      	ldr	r2, [pc, #28]	@ (8002a9c <HAL_Init+0x28>)
 8002a7e:	f043 0310 	orr.w	r3, r3, #16
 8002a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f000 f947 	bl	8002d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8a:	200f      	movs	r0, #15
 8002a8c:	f000 f808 	bl	8002aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a90:	f7ff fd5a 	bl	8002548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa8:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <HAL_InitTick+0x54>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_InitTick+0x58>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f95f 	bl	8002d82 <HAL_SYSTICK_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00e      	b.n	8002aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b0f      	cmp	r3, #15
 8002ad2:	d80a      	bhi.n	8002aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f000 f927 	bl	8002d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae0:	4a06      	ldr	r2, [pc, #24]	@ (8002afc <HAL_InitTick+0x5c>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000014 	.word	0x20000014
 8002af8:	2000001c 	.word	0x2000001c
 8002afc:	20000018 	.word	0x20000018

08002b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_IncTick+0x1c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <HAL_IncTick+0x20>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	4a03      	ldr	r2, [pc, #12]	@ (8002b20 <HAL_IncTick+0x20>)
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	2000001c 	.word	0x2000001c
 8002b20:	20000774 	.word	0x20000774

08002b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b02      	ldr	r3, [pc, #8]	@ (8002b34 <HAL_GetTick+0x10>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	20000774 	.word	0x20000774

08002b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_GetTick>
 8002b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d005      	beq.n	8002b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <HAL_Delay+0x44>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b5e:	bf00      	nop
 8002b60:	f7ff ffe0 	bl	8002b24 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d8f7      	bhi.n	8002b60 <HAL_Delay+0x28>
  {
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000001c 	.word	0x2000001c

08002b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4906      	ldr	r1, [pc, #24]	@ (8002c18 <__NVIC_EnableIRQ+0x34>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	@ (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	@ 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce4:	d301      	bcc.n	8002cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00f      	b.n	8002d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cea:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <SysTick_Config+0x40>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f7ff ff90 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <SysTick_Config+0x40>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d02:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <SysTick_Config+0x40>)
 8002d04:	2207      	movs	r2, #7
 8002d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	e000e010 	.word	0xe000e010

08002d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff2d 	bl	8002b80 <__NVIC_SetPriorityGrouping>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d40:	f7ff ff42 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff90 	bl	8002c70 <NVIC_EncodePriority>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5f 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff35 	bl	8002be4 <__NVIC_EnableIRQ>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ffa2 	bl	8002cd4 <SysTick_Config>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e043      	b.n	8002e3a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b22      	ldr	r3, [pc, #136]	@ (8002e44 <HAL_DMA_Init+0xa8>)
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a22      	ldr	r2, [pc, #136]	@ (8002e48 <HAL_DMA_Init+0xac>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	009a      	lsls	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e4c <HAL_DMA_Init+0xb0>)
 8002dce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002de6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002dea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	bffdfff8 	.word	0xbffdfff8
 8002e48:	cccccccd 	.word	0xcccccccd
 8002e4c:	40020000 	.word	0x40020000

08002e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_DMA_Start_IT+0x20>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e04b      	b.n	8002f08 <HAL_DMA_Start_IT+0xb8>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d13a      	bne.n	8002efa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f9bc 	bl	8003226 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 020e 	orr.w	r2, r2, #14
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e00f      	b.n	8002ee8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0204 	bic.w	r2, r2, #4
 8002ed6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 020a 	orr.w	r2, r2, #10
 8002ee6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e005      	b.n	8002f06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d005      	beq.n	8002f34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
 8002f32:	e051      	b.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 020e 	bic.w	r2, r2, #14
 8002f42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_DMA_Abort_IT+0xd4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d029      	beq.n	8002fb2 <HAL_DMA_Abort_IT+0xa2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <HAL_DMA_Abort_IT+0xd8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <HAL_DMA_Abort_IT+0x9e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fec <HAL_DMA_Abort_IT+0xdc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01a      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x98>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff0 <HAL_DMA_Abort_IT+0xe0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d012      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x92>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_DMA_Abort_IT+0xe4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00a      	beq.n	8002f9c <HAL_DMA_Abort_IT+0x8c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff8 <HAL_DMA_Abort_IT+0xe8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d102      	bne.n	8002f96 <HAL_DMA_Abort_IT+0x86>
 8002f90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f94:	e00e      	b.n	8002fb4 <HAL_DMA_Abort_IT+0xa4>
 8002f96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f9a:	e00b      	b.n	8002fb4 <HAL_DMA_Abort_IT+0xa4>
 8002f9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fa0:	e008      	b.n	8002fb4 <HAL_DMA_Abort_IT+0xa4>
 8002fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fa6:	e005      	b.n	8002fb4 <HAL_DMA_Abort_IT+0xa4>
 8002fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fac:	e002      	b.n	8002fb4 <HAL_DMA_Abort_IT+0xa4>
 8002fae:	2310      	movs	r3, #16
 8002fb0:	e000      	b.n	8002fb4 <HAL_DMA_Abort_IT+0xa4>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	4a11      	ldr	r2, [pc, #68]	@ (8002ffc <HAL_DMA_Abort_IT+0xec>)
 8002fb6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
    } 
  }
  return status;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40020008 	.word	0x40020008
 8002fe8:	4002001c 	.word	0x4002001c
 8002fec:	40020030 	.word	0x40020030
 8002ff0:	40020044 	.word	0x40020044
 8002ff4:	40020058 	.word	0x40020058
 8002ff8:	4002006c 	.word	0x4002006c
 8002ffc:	40020000 	.word	0x40020000

08003000 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	2204      	movs	r2, #4
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d04f      	beq.n	80030c8 <HAL_DMA_IRQHandler+0xc8>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d04a      	beq.n	80030c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0204 	bic.w	r2, r2, #4
 800304e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a66      	ldr	r2, [pc, #408]	@ (80031f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d029      	beq.n	80030ae <HAL_DMA_IRQHandler+0xae>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a65      	ldr	r2, [pc, #404]	@ (80031f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_DMA_IRQHandler+0xaa>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a63      	ldr	r2, [pc, #396]	@ (80031f8 <HAL_DMA_IRQHandler+0x1f8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01a      	beq.n	80030a4 <HAL_DMA_IRQHandler+0xa4>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a62      	ldr	r2, [pc, #392]	@ (80031fc <HAL_DMA_IRQHandler+0x1fc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d012      	beq.n	800309e <HAL_DMA_IRQHandler+0x9e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a60      	ldr	r2, [pc, #384]	@ (8003200 <HAL_DMA_IRQHandler+0x200>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00a      	beq.n	8003098 <HAL_DMA_IRQHandler+0x98>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5f      	ldr	r2, [pc, #380]	@ (8003204 <HAL_DMA_IRQHandler+0x204>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d102      	bne.n	8003092 <HAL_DMA_IRQHandler+0x92>
 800308c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003090:	e00e      	b.n	80030b0 <HAL_DMA_IRQHandler+0xb0>
 8003092:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003096:	e00b      	b.n	80030b0 <HAL_DMA_IRQHandler+0xb0>
 8003098:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800309c:	e008      	b.n	80030b0 <HAL_DMA_IRQHandler+0xb0>
 800309e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030a2:	e005      	b.n	80030b0 <HAL_DMA_IRQHandler+0xb0>
 80030a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030a8:	e002      	b.n	80030b0 <HAL_DMA_IRQHandler+0xb0>
 80030aa:	2340      	movs	r3, #64	@ 0x40
 80030ac:	e000      	b.n	80030b0 <HAL_DMA_IRQHandler+0xb0>
 80030ae:	2304      	movs	r3, #4
 80030b0:	4a55      	ldr	r2, [pc, #340]	@ (8003208 <HAL_DMA_IRQHandler+0x208>)
 80030b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8094 	beq.w	80031e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030c6:	e08e      	b.n	80031e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	2202      	movs	r2, #2
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d056      	beq.n	8003186 <HAL_DMA_IRQHandler+0x186>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d051      	beq.n	8003186 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020a 	bic.w	r2, r2, #10
 80030fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a38      	ldr	r2, [pc, #224]	@ (80031f0 <HAL_DMA_IRQHandler+0x1f0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d029      	beq.n	8003166 <HAL_DMA_IRQHandler+0x166>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a37      	ldr	r2, [pc, #220]	@ (80031f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d022      	beq.n	8003162 <HAL_DMA_IRQHandler+0x162>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a35      	ldr	r2, [pc, #212]	@ (80031f8 <HAL_DMA_IRQHandler+0x1f8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01a      	beq.n	800315c <HAL_DMA_IRQHandler+0x15c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a34      	ldr	r2, [pc, #208]	@ (80031fc <HAL_DMA_IRQHandler+0x1fc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d012      	beq.n	8003156 <HAL_DMA_IRQHandler+0x156>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a32      	ldr	r2, [pc, #200]	@ (8003200 <HAL_DMA_IRQHandler+0x200>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00a      	beq.n	8003150 <HAL_DMA_IRQHandler+0x150>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a31      	ldr	r2, [pc, #196]	@ (8003204 <HAL_DMA_IRQHandler+0x204>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d102      	bne.n	800314a <HAL_DMA_IRQHandler+0x14a>
 8003144:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003148:	e00e      	b.n	8003168 <HAL_DMA_IRQHandler+0x168>
 800314a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800314e:	e00b      	b.n	8003168 <HAL_DMA_IRQHandler+0x168>
 8003150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003154:	e008      	b.n	8003168 <HAL_DMA_IRQHandler+0x168>
 8003156:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800315a:	e005      	b.n	8003168 <HAL_DMA_IRQHandler+0x168>
 800315c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003160:	e002      	b.n	8003168 <HAL_DMA_IRQHandler+0x168>
 8003162:	2320      	movs	r3, #32
 8003164:	e000      	b.n	8003168 <HAL_DMA_IRQHandler+0x168>
 8003166:	2302      	movs	r3, #2
 8003168:	4a27      	ldr	r2, [pc, #156]	@ (8003208 <HAL_DMA_IRQHandler+0x208>)
 800316a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d034      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003184:	e02f      	b.n	80031e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	2208      	movs	r2, #8
 800318c:	409a      	lsls	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d028      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x1e8>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d023      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 020e 	bic.w	r2, r2, #14
 80031ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
    }
  }
  return;
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
}
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40020008 	.word	0x40020008
 80031f4:	4002001c 	.word	0x4002001c
 80031f8:	40020030 	.word	0x40020030
 80031fc:	40020044 	.word	0x40020044
 8003200:	40020058 	.word	0x40020058
 8003204:	4002006c 	.word	0x4002006c
 8003208:	40020000 	.word	0x40020000

0800320c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800321a:	b2db      	uxtb	r3, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b10      	cmp	r3, #16
 8003252:	d108      	bne.n	8003266 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003264:	e007      	b.n	8003276 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	60da      	str	r2, [r3, #12]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003280:	b480      	push	{r7}
 8003282:	b08b      	sub	sp, #44	@ 0x2c
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003292:	e169      	b.n	8003568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003294:	2201      	movs	r2, #1
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	f040 8158 	bne.w	8003562 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4a9a      	ldr	r2, [pc, #616]	@ (8003520 <HAL_GPIO_Init+0x2a0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d05e      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032bc:	4a98      	ldr	r2, [pc, #608]	@ (8003520 <HAL_GPIO_Init+0x2a0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d875      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032c2:	4a98      	ldr	r2, [pc, #608]	@ (8003524 <HAL_GPIO_Init+0x2a4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d058      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032c8:	4a96      	ldr	r2, [pc, #600]	@ (8003524 <HAL_GPIO_Init+0x2a4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d86f      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032ce:	4a96      	ldr	r2, [pc, #600]	@ (8003528 <HAL_GPIO_Init+0x2a8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d052      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032d4:	4a94      	ldr	r2, [pc, #592]	@ (8003528 <HAL_GPIO_Init+0x2a8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d869      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032da:	4a94      	ldr	r2, [pc, #592]	@ (800352c <HAL_GPIO_Init+0x2ac>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d04c      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032e0:	4a92      	ldr	r2, [pc, #584]	@ (800352c <HAL_GPIO_Init+0x2ac>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d863      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032e6:	4a92      	ldr	r2, [pc, #584]	@ (8003530 <HAL_GPIO_Init+0x2b0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d046      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032ec:	4a90      	ldr	r2, [pc, #576]	@ (8003530 <HAL_GPIO_Init+0x2b0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d85d      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032f2:	2b12      	cmp	r3, #18
 80032f4:	d82a      	bhi.n	800334c <HAL_GPIO_Init+0xcc>
 80032f6:	2b12      	cmp	r3, #18
 80032f8:	d859      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003300 <HAL_GPIO_Init+0x80>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	0800337b 	.word	0x0800337b
 8003304:	08003355 	.word	0x08003355
 8003308:	08003367 	.word	0x08003367
 800330c:	080033a9 	.word	0x080033a9
 8003310:	080033af 	.word	0x080033af
 8003314:	080033af 	.word	0x080033af
 8003318:	080033af 	.word	0x080033af
 800331c:	080033af 	.word	0x080033af
 8003320:	080033af 	.word	0x080033af
 8003324:	080033af 	.word	0x080033af
 8003328:	080033af 	.word	0x080033af
 800332c:	080033af 	.word	0x080033af
 8003330:	080033af 	.word	0x080033af
 8003334:	080033af 	.word	0x080033af
 8003338:	080033af 	.word	0x080033af
 800333c:	080033af 	.word	0x080033af
 8003340:	080033af 	.word	0x080033af
 8003344:	0800335d 	.word	0x0800335d
 8003348:	08003371 	.word	0x08003371
 800334c:	4a79      	ldr	r2, [pc, #484]	@ (8003534 <HAL_GPIO_Init+0x2b4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003352:	e02c      	b.n	80033ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	623b      	str	r3, [r7, #32]
          break;
 800335a:	e029      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	3304      	adds	r3, #4
 8003362:	623b      	str	r3, [r7, #32]
          break;
 8003364:	e024      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	3308      	adds	r3, #8
 800336c:	623b      	str	r3, [r7, #32]
          break;
 800336e:	e01f      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	330c      	adds	r3, #12
 8003376:	623b      	str	r3, [r7, #32]
          break;
 8003378:	e01a      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003382:	2304      	movs	r3, #4
 8003384:	623b      	str	r3, [r7, #32]
          break;
 8003386:	e013      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003390:	2308      	movs	r3, #8
 8003392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	611a      	str	r2, [r3, #16]
          break;
 800339a:	e009      	b.n	80033b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800339c:	2308      	movs	r3, #8
 800339e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	615a      	str	r2, [r3, #20]
          break;
 80033a6:	e003      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033a8:	2300      	movs	r3, #0
 80033aa:	623b      	str	r3, [r7, #32]
          break;
 80033ac:	e000      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          break;
 80033ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2bff      	cmp	r3, #255	@ 0xff
 80033b4:	d801      	bhi.n	80033ba <HAL_GPIO_Init+0x13a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	e001      	b.n	80033be <HAL_GPIO_Init+0x13e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2bff      	cmp	r3, #255	@ 0xff
 80033c4:	d802      	bhi.n	80033cc <HAL_GPIO_Init+0x14c>
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	e002      	b.n	80033d2 <HAL_GPIO_Init+0x152>
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	3b08      	subs	r3, #8
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	210f      	movs	r1, #15
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	6a39      	ldr	r1, [r7, #32]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	431a      	orrs	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80b1 	beq.w	8003562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003400:	4b4d      	ldr	r3, [pc, #308]	@ (8003538 <HAL_GPIO_Init+0x2b8>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a4c      	ldr	r2, [pc, #304]	@ (8003538 <HAL_GPIO_Init+0x2b8>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <HAL_GPIO_Init+0x2b8>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003418:	4a48      	ldr	r2, [pc, #288]	@ (800353c <HAL_GPIO_Init+0x2bc>)
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a40      	ldr	r2, [pc, #256]	@ (8003540 <HAL_GPIO_Init+0x2c0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_GPIO_Init+0x1ec>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3f      	ldr	r2, [pc, #252]	@ (8003544 <HAL_GPIO_Init+0x2c4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00d      	beq.n	8003468 <HAL_GPIO_Init+0x1e8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3e      	ldr	r2, [pc, #248]	@ (8003548 <HAL_GPIO_Init+0x2c8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <HAL_GPIO_Init+0x1e4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3d      	ldr	r2, [pc, #244]	@ (800354c <HAL_GPIO_Init+0x2cc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_GPIO_Init+0x1e0>
 800345c:	2303      	movs	r3, #3
 800345e:	e006      	b.n	800346e <HAL_GPIO_Init+0x1ee>
 8003460:	2304      	movs	r3, #4
 8003462:	e004      	b.n	800346e <HAL_GPIO_Init+0x1ee>
 8003464:	2302      	movs	r3, #2
 8003466:	e002      	b.n	800346e <HAL_GPIO_Init+0x1ee>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_GPIO_Init+0x1ee>
 800346c:	2300      	movs	r3, #0
 800346e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003470:	f002 0203 	and.w	r2, r2, #3
 8003474:	0092      	lsls	r2, r2, #2
 8003476:	4093      	lsls	r3, r2
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800347e:	492f      	ldr	r1, [pc, #188]	@ (800353c <HAL_GPIO_Init+0x2bc>)
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	3302      	adds	r3, #2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003498:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	492c      	ldr	r1, [pc, #176]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	608b      	str	r3, [r1, #8]
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	4928      	ldr	r1, [pc, #160]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034c0:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	4922      	ldr	r1, [pc, #136]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60cb      	str	r3, [r1, #12]
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	491e      	ldr	r1, [pc, #120]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034d8:	4013      	ands	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d006      	beq.n	80034f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034e8:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4918      	ldr	r1, [pc, #96]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
 80034f4:	e006      	b.n	8003504 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034f6:	4b16      	ldr	r3, [pc, #88]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	4914      	ldr	r1, [pc, #80]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 8003500:	4013      	ands	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d021      	beq.n	8003554 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	490e      	ldr	r1, [pc, #56]	@ (8003550 <HAL_GPIO_Init+0x2d0>)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
 800351c:	e021      	b.n	8003562 <HAL_GPIO_Init+0x2e2>
 800351e:	bf00      	nop
 8003520:	10320000 	.word	0x10320000
 8003524:	10310000 	.word	0x10310000
 8003528:	10220000 	.word	0x10220000
 800352c:	10210000 	.word	0x10210000
 8003530:	10120000 	.word	0x10120000
 8003534:	10110000 	.word	0x10110000
 8003538:	40021000 	.word	0x40021000
 800353c:	40010000 	.word	0x40010000
 8003540:	40010800 	.word	0x40010800
 8003544:	40010c00 	.word	0x40010c00
 8003548:	40011000 	.word	0x40011000
 800354c:	40011400 	.word	0x40011400
 8003550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003554:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <HAL_GPIO_Init+0x304>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	43db      	mvns	r3, r3
 800355c:	4909      	ldr	r1, [pc, #36]	@ (8003584 <HAL_GPIO_Init+0x304>)
 800355e:	4013      	ands	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	3301      	adds	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	f47f ae8e 	bne.w	8003294 <HAL_GPIO_Init+0x14>
  }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	372c      	adds	r7, #44	@ 0x2c
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40010400 	.word	0x40010400

08003588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e001      	b.n	80035aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	807b      	strh	r3, [r7, #2]
 80035c2:	4613      	mov	r3, r2
 80035c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c6:	787b      	ldrb	r3, [r7, #1]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035cc:	887a      	ldrh	r2, [r7, #2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035d2:	e003      	b.n	80035dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	041a      	lsls	r2, r3, #16
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	611a      	str	r2, [r3, #16]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035f8:	887a      	ldrh	r2, [r7, #2]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4013      	ands	r3, r2
 80035fe:	041a      	lsls	r2, r3, #16
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	43d9      	mvns	r1, r3
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	400b      	ands	r3, r1
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	611a      	str	r2, [r3, #16]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003622:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800362e:	4a05      	ldr	r2, [pc, #20]	@ (8003644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fed8 	bl	80013ec <HAL_GPIO_EXTI_Callback>
  }
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40010400 	.word	0x40010400

08003648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e12b      	b.n	80038b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fd70 	bl	8001154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	@ 0x24
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800369a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036ac:	f002 fd1e 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 80036b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4a81      	ldr	r2, [pc, #516]	@ (80038bc <HAL_I2C_Init+0x274>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d807      	bhi.n	80036cc <HAL_I2C_Init+0x84>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a80      	ldr	r2, [pc, #512]	@ (80038c0 <HAL_I2C_Init+0x278>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bf94      	ite	ls
 80036c4:	2301      	movls	r3, #1
 80036c6:	2300      	movhi	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e006      	b.n	80036da <HAL_I2C_Init+0x92>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a7d      	ldr	r2, [pc, #500]	@ (80038c4 <HAL_I2C_Init+0x27c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bf94      	ite	ls
 80036d4:	2301      	movls	r3, #1
 80036d6:	2300      	movhi	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0e7      	b.n	80038b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a78      	ldr	r2, [pc, #480]	@ (80038c8 <HAL_I2C_Init+0x280>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9b      	lsrs	r3, r3, #18
 80036ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a6a      	ldr	r2, [pc, #424]	@ (80038bc <HAL_I2C_Init+0x274>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d802      	bhi.n	800371c <HAL_I2C_Init+0xd4>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3301      	adds	r3, #1
 800371a:	e009      	b.n	8003730 <HAL_I2C_Init+0xe8>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a69      	ldr	r2, [pc, #420]	@ (80038cc <HAL_I2C_Init+0x284>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	3301      	adds	r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003742:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	495c      	ldr	r1, [pc, #368]	@ (80038bc <HAL_I2C_Init+0x274>)
 800374c:	428b      	cmp	r3, r1
 800374e:	d819      	bhi.n	8003784 <HAL_I2C_Init+0x13c>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e59      	subs	r1, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fbb1 f3f3 	udiv	r3, r1, r3
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003764:	400b      	ands	r3, r1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_I2C_Init+0x138>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1e59      	subs	r1, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fbb1 f3f3 	udiv	r3, r1, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377e:	e051      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003780:	2304      	movs	r3, #4
 8003782:	e04f      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <HAL_I2C_Init+0x168>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	440b      	add	r3, r1
 800379a:	fbb0 f3f3 	udiv	r3, r0, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e012      	b.n	80037d6 <HAL_I2C_Init+0x18e>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	0099      	lsls	r1, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x196>
 80037da:	2301      	movs	r3, #1
 80037dc:	e022      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10e      	bne.n	8003804 <HAL_I2C_Init+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e58      	subs	r0, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	440b      	add	r3, r1
 80037f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003802:	e00f      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	0099      	lsls	r1, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003820:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	6809      	ldr	r1, [r1, #0]
 8003828:	4313      	orrs	r3, r2
 800382a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003852:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6911      	ldr	r1, [r2, #16]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68d2      	ldr	r2, [r2, #12]
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	000186a0 	.word	0x000186a0
 80038c0:	001e847f 	.word	0x001e847f
 80038c4:	003d08ff 	.word	0x003d08ff
 80038c8:	431bde83 	.word	0x431bde83
 80038cc:	10624dd3 	.word	0x10624dd3

080038d0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e2:	2b80      	cmp	r3, #128	@ 0x80
 80038e4:	d103      	bne.n	80038ee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]
  }
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	@ 0x28
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	460b      	mov	r3, r1
 800390c:	813b      	strh	r3, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003916:	f7ff f905 	bl	8002b24 <HAL_GetTick>
 800391a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b20      	cmp	r3, #32
 8003926:	f040 812e 	bne.w	8003b86 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800392a:	4b99      	ldr	r3, [pc, #612]	@ (8003b90 <HAL_I2C_Mem_Write_DMA+0x298>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	4a98      	ldr	r2, [pc, #608]	@ (8003b94 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0a1a      	lsrs	r2, r3, #8
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009a      	lsls	r2, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3b01      	subs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d112      	bne.n	8003976 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
 8003974:	e108      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d0df      	beq.n	8003944 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Mem_Write_DMA+0x9a>
 800398e:	2302      	movs	r3, #2
 8003990:	e0fa      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x290>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d007      	beq.n	80039b8 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2221      	movs	r2, #33	@ 0x21
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2240      	movs	r2, #64	@ 0x40
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80039e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a68      	ldr	r2, [pc, #416]	@ (8003b98 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 80039f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80039fa:	897a      	ldrh	r2, [r7, #10]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003a00:	893a      	ldrh	r2, [r7, #8]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a1 	beq.w	8003b5e <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d022      	beq.n	8003a6a <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	4a5c      	ldr	r2, [pc, #368]	@ (8003b9c <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8003a2a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	4a5b      	ldr	r2, [pc, #364]	@ (8003ba0 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a38:	2200      	movs	r2, #0
 8003a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a40:	2200      	movs	r2, #0
 8003a42:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3310      	adds	r3, #16
 8003a54:	461a      	mov	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5a:	f7ff f9f9 	bl	8002e50 <HAL_DMA_Start_IT>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003a62:	7efb      	ldrb	r3, [r7, #27]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d166      	bne.n	8003b36 <HAL_I2C_Mem_Write_DMA+0x23e>
 8003a68:	e013      	b.n	8003a92 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07a      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003a92:	88f8      	ldrh	r0, [r7, #6]
 8003a94:	893a      	ldrh	r2, [r7, #8]
 8003a96:	8979      	ldrh	r1, [r7, #10]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	2323      	movs	r3, #35	@ 0x23
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f001 fb32 	bl	800510c <I2C_RequestMemoryWrite>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d022      	beq.n	8003af4 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fa2c 	bl	8002f10 <HAL_DMA_Abort_IT>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e049      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b20:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b30:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e028      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e014      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000014 	.word	0x20000014
 8003b94:	14f8b589 	.word	0x14f8b589
 8003b98:	ffff0000 	.word	0xffff0000
 8003b9c:	08005239 	.word	0x08005239
 8003ba0:	080053e3 	.word	0x080053e3

08003ba4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d003      	beq.n	8003bdc <HAL_I2C_EV_IRQHandler+0x38>
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b40      	cmp	r3, #64	@ 0x40
 8003bd8:	f040 80b1 	bne.w	8003d3e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_I2C_EV_IRQHandler+0x6e>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003bfc:	d003      	beq.n	8003c06 <HAL_I2C_EV_IRQHandler+0x62>
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c04:	d101      	bne.n	8003c0a <HAL_I2C_EV_IRQHandler+0x66>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x68>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f000 8114 	beq.w	8003e3a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <HAL_I2C_EV_IRQHandler+0x90>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f001 fe7c 	bl	8005924 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fcbd 	bl	80045ac <I2C_Master_SB>
 8003c32:	e083      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_I2C_EV_IRQHandler+0xac>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fd34 	bl	80046b6 <I2C_Master_ADD10>
 8003c4e:	e075      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <HAL_I2C_EV_IRQHandler+0xc8>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fd4f 	bl	8004708 <I2C_Master_ADDR>
 8003c6a:	e067      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d036      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c84:	f000 80db 	beq.w	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <HAL_I2C_EV_IRQHandler+0x10a>
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_I2C_EV_IRQHandler+0x10a>
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f931 	bl	8003f0e <I2C_MasterTransmit_TXE>
 8003cac:	e046      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80c2 	beq.w	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80bc 	beq.w	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cc6:	7bbb      	ldrb	r3, [r7, #14]
 8003cc8:	2b21      	cmp	r3, #33	@ 0x21
 8003cca:	d103      	bne.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f9ba 	bl	8004046 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd2:	e0b4      	b.n	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b40      	cmp	r3, #64	@ 0x40
 8003cd8:	f040 80b1 	bne.w	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fa28 	bl	8004132 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce2:	e0ac      	b.n	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf2:	f000 80a4 	beq.w	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00d      	beq.n	8003d1c <HAL_I2C_EV_IRQHandler+0x178>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_I2C_EV_IRQHandler+0x178>
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 faa4 	bl	8004262 <I2C_MasterReceive_RXNE>
 8003d1a:	e00f      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 808b 	beq.w	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 8085 	beq.w	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fb4f 	bl	80043d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d3a:	e080      	b.n	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
 8003d3c:	e07f      	b.n	8003e3e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e007      	b.n	8003d60 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d011      	beq.n	8003d8e <HAL_I2C_EV_IRQHandler+0x1ea>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00c      	beq.n	8003d8e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d84:	69b9      	ldr	r1, [r7, #24]
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 ff15 	bl	8004bb6 <I2C_Slave_ADDR>
 8003d8c:	e05a      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_I2C_EV_IRQHandler+0x206>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 ff50 	bl	8004c48 <I2C_Slave_STOPF>
 8003da8:	e04c      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003daa:	7bbb      	ldrb	r3, [r7, #14]
 8003dac:	2b21      	cmp	r3, #33	@ 0x21
 8003dae:	d002      	beq.n	8003db6 <HAL_I2C_EV_IRQHandler+0x212>
 8003db0:	7bbb      	ldrb	r3, [r7, #14]
 8003db2:	2b29      	cmp	r3, #41	@ 0x29
 8003db4:	d120      	bne.n	8003df8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <HAL_I2C_EV_IRQHandler+0x238>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_I2C_EV_IRQHandler+0x238>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fe32 	bl	8004a3e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dda:	e032      	b.n	8003e42 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02d      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x29e>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d028      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fe61 	bl	8004ab8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df6:	e024      	b.n	8003e42 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_I2C_EV_IRQHandler+0x27a>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_I2C_EV_IRQHandler+0x27a>
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fe6e 	bl	8004af8 <I2C_SlaveReceive_RXNE>
 8003e1c:	e012      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fe9e 	bl	8004b74 <I2C_SlaveReceive_BTF>
 8003e38:	e004      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e42:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f02:	b2db      	uxtb	r3, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f24:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d150      	bne.n	8003fd6 <I2C_MasterTransmit_TXE+0xc8>
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b21      	cmp	r3, #33	@ 0x21
 8003f38:	d14d      	bne.n	8003fd6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d01d      	beq.n	8003f7c <I2C_MasterTransmit_TXE+0x6e>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d01a      	beq.n	8003f7c <I2C_MasterTransmit_TXE+0x6e>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f4c:	d016      	beq.n	8003f7c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f5c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2211      	movs	r2, #17
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ff68 	bl	8003e4a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f7a:	e060      	b.n	800403e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f8a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b40      	cmp	r3, #64	@ 0x40
 8003fb4:	d107      	bne.n	8003fc6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fe f84e 	bl	8002060 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fc4:	e03b      	b.n	800403e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ff3b 	bl	8003e4a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fd4:	e033      	b.n	800403e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b21      	cmp	r3, #33	@ 0x21
 8003fda:	d005      	beq.n	8003fe8 <I2C_MasterTransmit_TXE+0xda>
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	d12d      	bne.n	800403e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b22      	cmp	r3, #34	@ 0x22
 8003fe6:	d12a      	bne.n	800403e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d108      	bne.n	8004004 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004000:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004002:	e01c      	b.n	800403e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b40      	cmp	r3, #64	@ 0x40
 800400e:	d103      	bne.n	8004018 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f88e 	bl	8004132 <I2C_MemoryTransmit_TXE_BTF>
}
 8004016:	e012      	b.n	800403e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800403c:	e7ff      	b.n	800403e <I2C_MasterTransmit_TXE+0x130>
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b21      	cmp	r3, #33	@ 0x21
 800405e:	d164      	bne.n	800412a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d012      	beq.n	8004090 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800408e:	e04c      	b.n	800412a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b08      	cmp	r3, #8
 8004094:	d01d      	beq.n	80040d2 <I2C_MasterTransmit_BTF+0x8c>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b20      	cmp	r3, #32
 800409a:	d01a      	beq.n	80040d2 <I2C_MasterTransmit_BTF+0x8c>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040a2:	d016      	beq.n	80040d2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040b2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2211      	movs	r2, #17
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff febd 	bl	8003e4a <HAL_I2C_MasterTxCpltCallback>
}
 80040d0:	e02b      	b.n	800412a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040e0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b40      	cmp	r3, #64	@ 0x40
 800410a:	d107      	bne.n	800411c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fd ffa3 	bl	8002060 <HAL_I2C_MemTxCpltCallback>
}
 800411a:	e006      	b.n	800412a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fe90 	bl	8003e4a <HAL_I2C_MasterTxCpltCallback>
}
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004140:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11d      	bne.n	8004186 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d10b      	bne.n	800416a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004156:	b2da      	uxtb	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004168:	e077      	b.n	800425a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416e:	b29b      	uxth	r3, r3
 8004170:	121b      	asrs	r3, r3, #8
 8004172:	b2da      	uxtb	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004184:	e069      	b.n	800425a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10b      	bne.n	80041a6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004192:	b2da      	uxtb	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041a4:	e059      	b.n	800425a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d152      	bne.n	8004254 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	2b22      	cmp	r3, #34	@ 0x22
 80041b2:	d10d      	bne.n	80041d0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041ce:	e044      	b.n	800425a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d015      	beq.n	8004206 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2b21      	cmp	r3, #33	@ 0x21
 80041de:	d112      	bne.n	8004206 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004204:	e029      	b.n	800425a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d124      	bne.n	800425a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b21      	cmp	r3, #33	@ 0x21
 8004214:	d121      	bne.n	800425a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004224:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004234:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fd ff07 	bl	8002060 <HAL_I2C_MemTxCpltCallback>
}
 8004252:	e002      	b.n	800425a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fb3b 	bl	80038d0 <I2C_Flush_DR>
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b22      	cmp	r3, #34	@ 0x22
 8004274:	f040 80ac 	bne.w	80043d0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d921      	bls.n	80042ca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	f040 808c 	bne.w	80043d0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80042c8:	e082      	b.n	80043d0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d075      	beq.n	80043be <I2C_MasterReceive_RXNE+0x15c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d002      	beq.n	80042de <I2C_MasterReceive_RXNE+0x7c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d16f      	bne.n	80043be <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 fac0 	bl	8005864 <I2C_WaitOnSTOPRequestThroughIT>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d142      	bne.n	8004370 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004308:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b40      	cmp	r3, #64	@ 0x40
 8004342:	d10a      	bne.n	800435a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fdb3 	bl	8003ebe <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004358:	e03a      	b.n	80043d0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2212      	movs	r2, #18
 8004366:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff fd77 	bl	8003e5c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800436e:	e02f      	b.n	80043d0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800437e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fd8a 	bl	8003ed0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043bc:	e008      	b.n	80043d0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043cc:	605a      	str	r2, [r3, #4]
}
 80043ce:	e7ff      	b.n	80043d0 <I2C_MasterReceive_RXNE+0x16e>
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d11b      	bne.n	8004428 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004426:	e0bd      	b.n	80045a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b03      	cmp	r3, #3
 8004430:	d129      	bne.n	8004486 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004440:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d00a      	beq.n	800445e <I2C_MasterReceive_BTF+0x86>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d007      	beq.n	800445e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004484:	e08e      	b.n	80045a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d176      	bne.n	800457e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d002      	beq.n	800449c <I2C_MasterReceive_BTF+0xc4>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b10      	cmp	r3, #16
 800449a:	d108      	bne.n	80044ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e019      	b.n	80044e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d002      	beq.n	80044ba <I2C_MasterReceive_BTF+0xe2>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d108      	bne.n	80044cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e00a      	b.n	80044e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d007      	beq.n	80044e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800453c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b40      	cmp	r3, #64	@ 0x40
 8004550:	d10a      	bne.n	8004568 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fcac 	bl	8003ebe <HAL_I2C_MemRxCpltCallback>
}
 8004566:	e01d      	b.n	80045a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2212      	movs	r2, #18
 8004574:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fc70 	bl	8003e5c <HAL_I2C_MasterRxCpltCallback>
}
 800457c:	e012      	b.n	80045a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b40      	cmp	r3, #64	@ 0x40
 80045be:	d117      	bne.n	80045f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80045da:	e067      	b.n	80046ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]
}
 80045ee:	e05d      	b.n	80046ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045f8:	d133      	bne.n	8004662 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b21      	cmp	r3, #33	@ 0x21
 8004604:	d109      	bne.n	800461a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004616:	611a      	str	r2, [r3, #16]
 8004618:	e008      	b.n	800462c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	b2da      	uxtb	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <I2C_Master_SB+0x92>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d108      	bne.n	8004650 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	2b00      	cmp	r3, #0
 8004644:	d032      	beq.n	80046ac <I2C_Master_SB+0x100>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02d      	beq.n	80046ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800465e:	605a      	str	r2, [r3, #4]
}
 8004660:	e024      	b.n	80046ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10e      	bne.n	8004688 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	b29b      	uxth	r3, r3
 8004670:	11db      	asrs	r3, r3, #7
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f003 0306 	and.w	r3, r3, #6
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f063 030f 	orn	r3, r3, #15
 800467e:	b2da      	uxtb	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	611a      	str	r2, [r3, #16]
}
 8004686:	e011      	b.n	80046ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10d      	bne.n	80046ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	b29b      	uxth	r3, r3
 8004696:	11db      	asrs	r3, r3, #7
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f003 0306 	and.w	r3, r3, #6
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f063 030e 	orn	r3, r3, #14
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	611a      	str	r2, [r3, #16]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <I2C_Master_ADD10+0x26>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d108      	bne.n	80046ee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00c      	beq.n	80046fe <I2C_Master_ADD10+0x48>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046fc:	605a      	str	r2, [r3, #4]
  }
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004708:	b480      	push	{r7}
 800470a:	b091      	sub	sp, #68	@ 0x44
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004716:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004724:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b22      	cmp	r3, #34	@ 0x22
 8004730:	f040 8174 	bne.w	8004a1c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <I2C_Master_ADDR+0x54>
 800473c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004740:	2b40      	cmp	r3, #64	@ 0x40
 8004742:	d10b      	bne.n	800475c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004744:	2300      	movs	r3, #0
 8004746:	633b      	str	r3, [r7, #48]	@ 0x30
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	633b      	str	r3, [r7, #48]	@ 0x30
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475a:	e16b      	b.n	8004a34 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11d      	bne.n	80047a0 <I2C_Master_ADDR+0x98>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800476c:	d118      	bne.n	80047a0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004792:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	651a      	str	r2, [r3, #80]	@ 0x50
 800479e:	e149      	b.n	8004a34 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d113      	bne.n	80047d2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e120      	b.n	8004a14 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 808a 	bne.w	80048f2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80047de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047e4:	d137      	bne.n	8004856 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004804:	d113      	bne.n	800482e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004814:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	e0f2      	b.n	8004a14 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482e:	2300      	movs	r3, #0
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e0de      	b.n	8004a14 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004858:	2b08      	cmp	r3, #8
 800485a:	d02e      	beq.n	80048ba <I2C_Master_ADDR+0x1b2>
 800485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485e:	2b20      	cmp	r3, #32
 8004860:	d02b      	beq.n	80048ba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004864:	2b12      	cmp	r3, #18
 8004866:	d102      	bne.n	800486e <I2C_Master_ADDR+0x166>
 8004868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486a:	2b01      	cmp	r3, #1
 800486c:	d125      	bne.n	80048ba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	2b04      	cmp	r3, #4
 8004872:	d00e      	beq.n	8004892 <I2C_Master_ADDR+0x18a>
 8004874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004876:	2b02      	cmp	r3, #2
 8004878:	d00b      	beq.n	8004892 <I2C_Master_ADDR+0x18a>
 800487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487c:	2b10      	cmp	r3, #16
 800487e:	d008      	beq.n	8004892 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e007      	b.n	80048a2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	e0ac      	b.n	8004a14 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e090      	b.n	8004a14 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d158      	bne.n	80049ae <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d021      	beq.n	8004946 <I2C_Master_ADDR+0x23e>
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	2b02      	cmp	r3, #2
 8004906:	d01e      	beq.n	8004946 <I2C_Master_ADDR+0x23e>
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	2b10      	cmp	r3, #16
 800490c:	d01b      	beq.n	8004946 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800491c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e012      	b.n	800496c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004954:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800497a:	d14b      	bne.n	8004a14 <I2C_Master_ADDR+0x30c>
 800497c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004982:	d00b      	beq.n	800499c <I2C_Master_ADDR+0x294>
 8004984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004986:	2b01      	cmp	r3, #1
 8004988:	d008      	beq.n	800499c <I2C_Master_ADDR+0x294>
 800498a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498c:	2b08      	cmp	r3, #8
 800498e:	d005      	beq.n	800499c <I2C_Master_ADDR+0x294>
 8004990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004992:	2b10      	cmp	r3, #16
 8004994:	d002      	beq.n	800499c <I2C_Master_ADDR+0x294>
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	2b20      	cmp	r3, #32
 800499a:	d13b      	bne.n	8004a14 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	e032      	b.n	8004a14 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049bc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049cc:	d117      	bne.n	80049fe <I2C_Master_ADDR+0x2f6>
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049d4:	d00b      	beq.n	80049ee <I2C_Master_ADDR+0x2e6>
 80049d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d008      	beq.n	80049ee <I2C_Master_ADDR+0x2e6>
 80049dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d005      	beq.n	80049ee <I2C_Master_ADDR+0x2e6>
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d002      	beq.n	80049ee <I2C_Master_ADDR+0x2e6>
 80049e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d107      	bne.n	80049fe <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a1a:	e00b      	b.n	8004a34 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
}
 8004a32:	e7ff      	b.n	8004a34 <I2C_Master_ADDR+0x32c>
 8004a34:	bf00      	nop
 8004a36:	3744      	adds	r7, #68	@ 0x44
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02b      	beq.n	8004ab0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	781a      	ldrb	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d114      	bne.n	8004ab0 <I2C_SlaveTransmit_TXE+0x72>
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	2b29      	cmp	r3, #41	@ 0x29
 8004a8a:	d111      	bne.n	8004ab0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a9a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2221      	movs	r2, #33	@ 0x21
 8004aa0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2228      	movs	r2, #40	@ 0x28
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff f9df 	bl	8003e6e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d011      	beq.n	8004aee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d02c      	beq.n	8004b6c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d114      	bne.n	8004b6c <I2C_SlaveReceive_RXNE+0x74>
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b46:	d111      	bne.n	8004b6c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b56:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2222      	movs	r2, #34	@ 0x22
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2228      	movs	r2, #40	@ 0x28
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff f98a 	bl	8003e80 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d012      	beq.n	8004bac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bd0:	2b28      	cmp	r3, #40	@ 0x28
 8004bd2:	d125      	bne.n	8004c20 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	81bb      	strh	r3, [r7, #12]
 8004c02:	e002      	b.n	8004c0a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c12:	89ba      	ldrh	r2, [r7, #12]
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff f93a 	bl	8003e92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c1e:	e00e      	b.n	8004c3e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c20:	2300      	movs	r3, #0
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca4:	d172      	bne.n	8004d8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	2b22      	cmp	r3, #34	@ 0x22
 8004caa:	d002      	beq.n	8004cb2 <I2C_Slave_STOPF+0x6a>
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cb0:	d135      	bne.n	8004d1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ce4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fa8e 	bl	800320c <HAL_DMA_GetState>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d049      	beq.n	8004d8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfa:	4a69      	ldr	r2, [pc, #420]	@ (8004ea0 <I2C_Slave_STOPF+0x258>)
 8004cfc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe f904 	bl	8002f10 <HAL_DMA_Abort_IT>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d03d      	beq.n	8004d8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d1c:	e035      	b.n	8004d8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f043 0204 	orr.w	r2, r3, #4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fa58 	bl	800320c <HAL_DMA_GetState>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d014      	beq.n	8004d8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea0 <I2C_Slave_STOPF+0x258>)
 8004d68:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe f8ce 	bl	8002f10 <HAL_DMA_Abort_IT>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d84:	4610      	mov	r0, r2
 8004d86:	4798      	blx	r3
 8004d88:	e000      	b.n	8004d8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d03e      	beq.n	8004e14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d112      	bne.n	8004dca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	d112      	bne.n	8004dfe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f843 	bl	8004ea8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e22:	e039      	b.n	8004e98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e28:	d109      	bne.n	8004e3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2228      	movs	r2, #40	@ 0x28
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff f821 	bl	8003e80 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b28      	cmp	r3, #40	@ 0x28
 8004e48:	d111      	bne.n	8004e6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	@ (8004ea4 <I2C_Slave_STOPF+0x25c>)
 8004e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff f820 	bl	8003eac <HAL_I2C_ListenCpltCallback>
}
 8004e6c:	e014      	b.n	8004e98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e72:	2b22      	cmp	r3, #34	@ 0x22
 8004e74:	d002      	beq.n	8004e7c <I2C_Slave_STOPF+0x234>
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b22      	cmp	r3, #34	@ 0x22
 8004e7a:	d10d      	bne.n	8004e98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe fff4 	bl	8003e80 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	08005451 	.word	0x08005451
 8004ea4:	ffff0000 	.word	0xffff0000

08004ea8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ebe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d002      	beq.n	8004ecc <I2C_ITError+0x24>
 8004ec6:	7bbb      	ldrb	r3, [r7, #14]
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	d10a      	bne.n	8004ee2 <I2C_ITError+0x3a>
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b22      	cmp	r3, #34	@ 0x22
 8004ed0:	d107      	bne.n	8004ee2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ee8:	2b28      	cmp	r3, #40	@ 0x28
 8004eea:	d107      	bne.n	8004efc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2228      	movs	r2, #40	@ 0x28
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004efa:	e015      	b.n	8004f28 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f0a:	d00a      	beq.n	8004f22 <I2C_ITError+0x7a>
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b60      	cmp	r3, #96	@ 0x60
 8004f10:	d007      	beq.n	8004f22 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f36:	d162      	bne.n	8004ffe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d020      	beq.n	8004f98 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	4a6a      	ldr	r2, [pc, #424]	@ (8005104 <I2C_ITError+0x25c>)
 8004f5c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fd ffd4 	bl	8002f10 <HAL_DMA_Abort_IT>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8089 	beq.w	8005082 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f92:	4610      	mov	r0, r2
 8004f94:	4798      	blx	r3
 8004f96:	e074      	b.n	8005082 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	4a59      	ldr	r2, [pc, #356]	@ (8005104 <I2C_ITError+0x25c>)
 8004f9e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fd ffb3 	bl	8002f10 <HAL_DMA_Abort_IT>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d068      	beq.n	8005082 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d10b      	bne.n	8004fd6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4798      	blx	r3
 8004ffc:	e041      	b.n	8005082 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b60      	cmp	r3, #96	@ 0x60
 8005008:	d125      	bne.n	8005056 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005022:	2b40      	cmp	r3, #64	@ 0x40
 8005024:	d10b      	bne.n	800503e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0201 	bic.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fe ff47 	bl	8003ee2 <HAL_I2C_AbortCpltCallback>
 8005054:	e015      	b.n	8005082 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005060:	2b40      	cmp	r3, #64	@ 0x40
 8005062:	d10b      	bne.n	800507c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fe ff27 	bl	8003ed0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10e      	bne.n	80050b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d104      	bne.n	80050b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d113      	bne.n	80050fc <I2C_ITError+0x254>
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b28      	cmp	r3, #40	@ 0x28
 80050d8:	d110      	bne.n	80050fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005108 <I2C_ITError+0x260>)
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fe fed8 	bl	8003eac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	08005451 	.word	0x08005451
 8005108:	ffff0000 	.word	0xffff0000

0800510c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	4608      	mov	r0, r1
 8005116:	4611      	mov	r1, r2
 8005118:	461a      	mov	r2, r3
 800511a:	4603      	mov	r3, r0
 800511c:	817b      	strh	r3, [r7, #10]
 800511e:	460b      	mov	r3, r1
 8005120:	813b      	strh	r3, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2200      	movs	r2, #0
 800513e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fa2c 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800515c:	d103      	bne.n	8005166 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005164:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e05f      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800516a:	897b      	ldrh	r3, [r7, #10]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005178:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	6a3a      	ldr	r2, [r7, #32]
 800517e:	492d      	ldr	r1, [pc, #180]	@ (8005234 <I2C_RequestMemoryWrite+0x128>)
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fa87 	bl	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e04c      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	6a39      	ldr	r1, [r7, #32]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fb12 	bl	80057d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d107      	bne.n	80051ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e02b      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d105      	bne.n	80051e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051d8:	893b      	ldrh	r3, [r7, #8]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	611a      	str	r2, [r3, #16]
 80051e2:	e021      	b.n	8005228 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051e4:	893b      	ldrh	r3, [r7, #8]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f4:	6a39      	ldr	r1, [r7, #32]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 faec 	bl	80057d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	2b04      	cmp	r3, #4
 8005208:	d107      	bne.n	800521a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005218:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e005      	b.n	800522a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	00010002 	.word	0x00010002

08005238 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005254:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800526a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	2200      	movs	r2, #0
 800527a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	2200      	movs	r2, #0
 800528a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005292:	2b21      	cmp	r3, #33	@ 0x21
 8005294:	d007      	beq.n	80052a6 <I2C_DMAXferCplt+0x6e>
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800529c:	2b22      	cmp	r3, #34	@ 0x22
 800529e:	d131      	bne.n	8005304 <I2C_DMAXferCplt+0xcc>
 80052a0:	7cbb      	ldrb	r3, [r7, #18]
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d12e      	bne.n	8005304 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052b4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	2b29      	cmp	r3, #41	@ 0x29
 80052c0:	d10a      	bne.n	80052d8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2221      	movs	r2, #33	@ 0x21
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2228      	movs	r2, #40	@ 0x28
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052d0:	6978      	ldr	r0, [r7, #20]
 80052d2:	f7fe fdcc 	bl	8003e6e <HAL_I2C_SlaveTxCpltCallback>
 80052d6:	e00c      	b.n	80052f2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	2b2a      	cmp	r3, #42	@ 0x2a
 80052dc:	d109      	bne.n	80052f2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2222      	movs	r2, #34	@ 0x22
 80052e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2228      	movs	r2, #40	@ 0x28
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052ec:	6978      	ldr	r0, [r7, #20]
 80052ee:	f7fe fdc7 	bl	8003e80 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005300:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005302:	e06a      	b.n	80053da <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d064      	beq.n	80053da <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b01      	cmp	r3, #1
 8005318:	d107      	bne.n	800532a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005328:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005338:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005340:	d009      	beq.n	8005356 <I2C_DMAXferCplt+0x11e>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d006      	beq.n	8005356 <I2C_DMAXferCplt+0x11e>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800534e:	d002      	beq.n	8005356 <I2C_DMAXferCplt+0x11e>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b20      	cmp	r3, #32
 8005354:	d107      	bne.n	8005366 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005364:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005374:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005384:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2200      	movs	r2, #0
 800538a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005394:	6978      	ldr	r0, [r7, #20]
 8005396:	f7fe fd9b 	bl	8003ed0 <HAL_I2C_ErrorCallback>
}
 800539a:	e01e      	b.n	80053da <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	d10a      	bne.n	80053c6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2200      	movs	r2, #0
 80053bc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80053be:	6978      	ldr	r0, [r7, #20]
 80053c0:	f7fe fd7d 	bl	8003ebe <HAL_I2C_MemRxCpltCallback>
}
 80053c4:	e009      	b.n	80053da <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2212      	movs	r2, #18
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7fe fd41 	bl	8003e5c <HAL_I2C_MasterRxCpltCallback>
}
 80053da:	bf00      	nop
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fc:	2200      	movs	r2, #0
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540c:	2200      	movs	r2, #0
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800541e:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	f043 0210 	orr.w	r2, r3, #16
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7fe fd44 	bl	8003ed0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005468:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800546a:	4b4b      	ldr	r3, [pc, #300]	@ (8005598 <I2C_DMAAbort+0x148>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	08db      	lsrs	r3, r3, #3
 8005470:	4a4a      	ldr	r2, [pc, #296]	@ (800559c <I2C_DMAAbort+0x14c>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	0a1a      	lsrs	r2, r3, #8
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	00da      	lsls	r2, r3, #3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005496:	e00a      	b.n	80054ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ac:	d0ea      	beq.n	8005484 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	2200      	movs	r2, #0
 80054bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	2200      	movs	r2, #0
 80054cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f0:	2200      	movs	r2, #0
 80054f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005500:	2200      	movs	r2, #0
 8005502:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b60      	cmp	r3, #96	@ 0x60
 800551e:	d10e      	bne.n	800553e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2200      	movs	r2, #0
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005536:	6978      	ldr	r0, [r7, #20]
 8005538:	f7fe fcd3 	bl	8003ee2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800553c:	e027      	b.n	800558e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800553e:	7cfb      	ldrb	r3, [r7, #19]
 8005540:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005544:	2b28      	cmp	r3, #40	@ 0x28
 8005546:	d117      	bne.n	8005578 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005566:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2228      	movs	r2, #40	@ 0x28
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005576:	e007      	b.n	8005588 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005588:	6978      	ldr	r0, [r7, #20]
 800558a:	f7fe fca1 	bl	8003ed0 <HAL_I2C_ErrorCallback>
}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000014 	.word	0x20000014
 800559c:	14f8b589 	.word	0x14f8b589

080055a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b0:	e048      	b.n	8005644 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d044      	beq.n	8005644 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fd fab3 	bl	8002b24 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d139      	bne.n	8005644 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d10d      	bne.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	43da      	mvns	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4013      	ands	r3, r2
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	e00c      	b.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	43da      	mvns	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4013      	ands	r3, r2
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	bf0c      	ite	eq
 8005608:	2301      	moveq	r3, #1
 800560a:	2300      	movne	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	429a      	cmp	r2, r3
 8005614:	d116      	bne.n	8005644 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e023      	b.n	800568c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10d      	bne.n	800566a <I2C_WaitOnFlagUntilTimeout+0xca>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	43da      	mvns	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	e00c      	b.n	8005684 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	43da      	mvns	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4013      	ands	r3, r2
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	429a      	cmp	r2, r3
 8005688:	d093      	beq.n	80055b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056a2:	e071      	b.n	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b2:	d123      	bne.n	80056fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e067      	b.n	80057cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d041      	beq.n	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005704:	f7fd fa0e 	bl	8002b24 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d302      	bcc.n	800571a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d136      	bne.n	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10c      	bne.n	800573e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	43da      	mvns	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4013      	ands	r3, r2
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	bf14      	ite	ne
 8005736:	2301      	movne	r3, #1
 8005738:	2300      	moveq	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	e00b      	b.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	43da      	mvns	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e021      	b.n	80057cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	0c1b      	lsrs	r3, r3, #16
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10c      	bne.n	80057ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	43da      	mvns	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	e00b      	b.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	43da      	mvns	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4013      	ands	r3, r2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bf14      	ite	ne
 80057be:	2301      	movne	r3, #1
 80057c0:	2300      	moveq	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f47f af6d 	bne.w	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057e0:	e034      	b.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f870 	bl	80058c8 <I2C_IsAcknowledgeFailed>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e034      	b.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d028      	beq.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fa:	f7fd f993 	bl	8002b24 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	429a      	cmp	r2, r3
 8005808:	d302      	bcc.n	8005810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11d      	bne.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581a:	2b80      	cmp	r3, #128	@ 0x80
 800581c:	d016      	beq.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e007      	b.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005856:	2b80      	cmp	r3, #128	@ 0x80
 8005858:	d1c3      	bne.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005870:	4b13      	ldr	r3, [pc, #76]	@ (80058c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	08db      	lsrs	r3, r3, #3
 8005876:	4a13      	ldr	r2, [pc, #76]	@ (80058c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	0a1a      	lsrs	r2, r3, #8
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3b01      	subs	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d107      	bne.n	80058a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	f043 0220 	orr.w	r2, r3, #32
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e008      	b.n	80058b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b0:	d0e9      	beq.n	8005886 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000014 	.word	0x20000014
 80058c4:	14f8b589 	.word	0x14f8b589

080058c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058de:	d11b      	bne.n	8005918 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005904:	f043 0204 	orr.w	r2, r3, #4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr

08005924 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005934:	d103      	bne.n	800593e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800593c:	e007      	b.n	800594e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005946:	d102      	bne.n	800594e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2208      	movs	r2, #8
 800594c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e272      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8087 	beq.w	8005a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005978:	4b92      	ldr	r3, [pc, #584]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f003 030c 	and.w	r3, r3, #12
 8005980:	2b04      	cmp	r3, #4
 8005982:	d00c      	beq.n	800599e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005984:	4b8f      	ldr	r3, [pc, #572]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 030c 	and.w	r3, r3, #12
 800598c:	2b08      	cmp	r3, #8
 800598e:	d112      	bne.n	80059b6 <HAL_RCC_OscConfig+0x5e>
 8005990:	4b8c      	ldr	r3, [pc, #560]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800599c:	d10b      	bne.n	80059b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599e:	4b89      	ldr	r3, [pc, #548]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d06c      	beq.n	8005a84 <HAL_RCC_OscConfig+0x12c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d168      	bne.n	8005a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e24c      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059be:	d106      	bne.n	80059ce <HAL_RCC_OscConfig+0x76>
 80059c0:	4b80      	ldr	r3, [pc, #512]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a7f      	ldr	r2, [pc, #508]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 80059c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	e02e      	b.n	8005a2c <HAL_RCC_OscConfig+0xd4>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCC_OscConfig+0x98>
 80059d6:	4b7b      	ldr	r3, [pc, #492]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a7a      	ldr	r2, [pc, #488]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	4b78      	ldr	r3, [pc, #480]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a77      	ldr	r2, [pc, #476]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 80059e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e01d      	b.n	8005a2c <HAL_RCC_OscConfig+0xd4>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCC_OscConfig+0xbc>
 80059fa:	4b72      	ldr	r3, [pc, #456]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a71      	ldr	r2, [pc, #452]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e00b      	b.n	8005a2c <HAL_RCC_OscConfig+0xd4>
 8005a14:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	4b68      	ldr	r3, [pc, #416]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a67      	ldr	r2, [pc, #412]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d013      	beq.n	8005a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a34:	f7fd f876 	bl	8002b24 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a3c:	f7fd f872 	bl	8002b24 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b64      	cmp	r3, #100	@ 0x64
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e200      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0xe4>
 8005a5a:	e014      	b.n	8005a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fd f862 	bl	8002b24 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a64:	f7fd f85e 	bl	8002b24 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b64      	cmp	r3, #100	@ 0x64
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e1ec      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a76:	4b53      	ldr	r3, [pc, #332]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x10c>
 8005a82:	e000      	b.n	8005a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d063      	beq.n	8005b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a92:	4b4c      	ldr	r3, [pc, #304]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00b      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a9e:	4b49      	ldr	r3, [pc, #292]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d11c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x18c>
 8005aaa:	4b46      	ldr	r3, [pc, #280]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d116      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab6:	4b43      	ldr	r3, [pc, #268]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <HAL_RCC_OscConfig+0x176>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d001      	beq.n	8005ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e1c0      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ace:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	4939      	ldr	r1, [pc, #228]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ae2:	e03a      	b.n	8005b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d020      	beq.n	8005b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aec:	4b36      	ldr	r3, [pc, #216]	@ (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af2:	f7fd f817 	bl	8002b24 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005afa:	f7fd f813 	bl	8002b24 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e1a1      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b18:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4927      	ldr	r1, [pc, #156]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	600b      	str	r3, [r1, #0]
 8005b2c:	e015      	b.n	8005b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b2e:	4b26      	ldr	r3, [pc, #152]	@ (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fc fff6 	bl	8002b24 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b3c:	f7fc fff2 	bl	8002b24 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e180      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d03a      	beq.n	8005bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d019      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b6e:	4b17      	ldr	r3, [pc, #92]	@ (8005bcc <HAL_RCC_OscConfig+0x274>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b74:	f7fc ffd6 	bl	8002b24 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b7c:	f7fc ffd2 	bl	8002b24 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e160      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <HAL_RCC_OscConfig+0x26c>)
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f0      	beq.n	8005b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b9a:	2001      	movs	r0, #1
 8005b9c:	f000 face 	bl	800613c <RCC_Delay>
 8005ba0:	e01c      	b.n	8005bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <HAL_RCC_OscConfig+0x274>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba8:	f7fc ffbc 	bl	8002b24 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bae:	e00f      	b.n	8005bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fc ffb8 	bl	8002b24 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d908      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e146      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
 8005bc2:	bf00      	nop
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	42420000 	.word	0x42420000
 8005bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd0:	4b92      	ldr	r3, [pc, #584]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e9      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a6 	beq.w	8005d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bea:	2300      	movs	r3, #0
 8005bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bee:	4b8b      	ldr	r3, [pc, #556]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10d      	bne.n	8005c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfa:	4b88      	ldr	r3, [pc, #544]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	4a87      	ldr	r2, [pc, #540]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c04:	61d3      	str	r3, [r2, #28]
 8005c06:	4b85      	ldr	r3, [pc, #532]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c12:	2301      	movs	r3, #1
 8005c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c16:	4b82      	ldr	r3, [pc, #520]	@ (8005e20 <HAL_RCC_OscConfig+0x4c8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d118      	bne.n	8005c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c22:	4b7f      	ldr	r3, [pc, #508]	@ (8005e20 <HAL_RCC_OscConfig+0x4c8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a7e      	ldr	r2, [pc, #504]	@ (8005e20 <HAL_RCC_OscConfig+0x4c8>)
 8005c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c2e:	f7fc ff79 	bl	8002b24 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c36:	f7fc ff75 	bl	8002b24 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b64      	cmp	r3, #100	@ 0x64
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e103      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c48:	4b75      	ldr	r3, [pc, #468]	@ (8005e20 <HAL_RCC_OscConfig+0x4c8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCC_OscConfig+0x312>
 8005c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	4a6e      	ldr	r2, [pc, #440]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	6213      	str	r3, [r2, #32]
 8005c68:	e02d      	b.n	8005cc6 <HAL_RCC_OscConfig+0x36e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10c      	bne.n	8005c8c <HAL_RCC_OscConfig+0x334>
 8005c72:	4b6a      	ldr	r3, [pc, #424]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	4a69      	ldr	r2, [pc, #420]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	6213      	str	r3, [r2, #32]
 8005c7e:	4b67      	ldr	r3, [pc, #412]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	4a66      	ldr	r2, [pc, #408]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c84:	f023 0304 	bic.w	r3, r3, #4
 8005c88:	6213      	str	r3, [r2, #32]
 8005c8a:	e01c      	b.n	8005cc6 <HAL_RCC_OscConfig+0x36e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d10c      	bne.n	8005cae <HAL_RCC_OscConfig+0x356>
 8005c94:	4b61      	ldr	r3, [pc, #388]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	4a60      	ldr	r2, [pc, #384]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005c9a:	f043 0304 	orr.w	r3, r3, #4
 8005c9e:	6213      	str	r3, [r2, #32]
 8005ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	4a5d      	ldr	r2, [pc, #372]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	6213      	str	r3, [r2, #32]
 8005cac:	e00b      	b.n	8005cc6 <HAL_RCC_OscConfig+0x36e>
 8005cae:	4b5b      	ldr	r3, [pc, #364]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	4a5a      	ldr	r2, [pc, #360]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	6213      	str	r3, [r2, #32]
 8005cba:	4b58      	ldr	r3, [pc, #352]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	4a57      	ldr	r2, [pc, #348]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005cc0:	f023 0304 	bic.w	r3, r3, #4
 8005cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d015      	beq.n	8005cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cce:	f7fc ff29 	bl	8002b24 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd4:	e00a      	b.n	8005cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd6:	f7fc ff25 	bl	8002b24 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0b1      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cec:	4b4b      	ldr	r3, [pc, #300]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0ee      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x37e>
 8005cf8:	e014      	b.n	8005d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfa:	f7fc ff13 	bl	8002b24 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d00:	e00a      	b.n	8005d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fc ff0f 	bl	8002b24 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e09b      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d18:	4b40      	ldr	r3, [pc, #256]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ee      	bne.n	8005d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8087 	beq.w	8005e4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d40:	4b36      	ldr	r3, [pc, #216]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d061      	beq.n	8005e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d146      	bne.n	8005de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d54:	4b33      	ldr	r3, [pc, #204]	@ (8005e24 <HAL_RCC_OscConfig+0x4cc>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5a:	f7fc fee3 	bl	8002b24 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d62:	f7fc fedf 	bl	8002b24 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e06d      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d74:	4b29      	ldr	r3, [pc, #164]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f0      	bne.n	8005d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d88:	d108      	bne.n	8005d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d8a:	4b24      	ldr	r3, [pc, #144]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4921      	ldr	r1, [pc, #132]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a19      	ldr	r1, [r3, #32]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dac:	430b      	orrs	r3, r1
 8005dae:	491b      	ldr	r1, [pc, #108]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005db4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e24 <HAL_RCC_OscConfig+0x4cc>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dba:	f7fc feb3 	bl	8002b24 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc2:	f7fc feaf 	bl	8002b24 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e03d      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dd4:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x46a>
 8005de0:	e035      	b.n	8005e4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de2:	4b10      	ldr	r3, [pc, #64]	@ (8005e24 <HAL_RCC_OscConfig+0x4cc>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de8:	f7fc fe9c 	bl	8002b24 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df0:	f7fc fe98 	bl	8002b24 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e026      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e02:	4b06      	ldr	r3, [pc, #24]	@ (8005e1c <HAL_RCC_OscConfig+0x4c4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x498>
 8005e0e:	e01e      	b.n	8005e4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d107      	bne.n	8005e28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e019      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	40007000 	.word	0x40007000
 8005e24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <HAL_RCC_OscConfig+0x500>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d106      	bne.n	8005e4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d001      	beq.n	8005e4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40021000 	.word	0x40021000

08005e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0d0      	b.n	8006012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e70:	4b6a      	ldr	r3, [pc, #424]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d910      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4b67      	ldr	r3, [pc, #412]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f023 0207 	bic.w	r2, r3, #7
 8005e86:	4965      	ldr	r1, [pc, #404]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8e:	4b63      	ldr	r3, [pc, #396]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0b8      	b.n	8006012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d020      	beq.n	8005eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eb8:	4b59      	ldr	r3, [pc, #356]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4a58      	ldr	r2, [pc, #352]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005ebe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ed0:	4b53      	ldr	r3, [pc, #332]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4a52      	ldr	r2, [pc, #328]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005edc:	4b50      	ldr	r3, [pc, #320]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	494d      	ldr	r1, [pc, #308]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d040      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d107      	bne.n	8005f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	4b47      	ldr	r3, [pc, #284]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d115      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e07f      	b.n	8006012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d107      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1a:	4b41      	ldr	r3, [pc, #260]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e073      	b.n	8006012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e06b      	b.n	8006012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f3a:	4b39      	ldr	r3, [pc, #228]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f023 0203 	bic.w	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4936      	ldr	r1, [pc, #216]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f4c:	f7fc fdea 	bl	8002b24 <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f54:	f7fc fde6 	bl	8002b24 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e053      	b.n	8006012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 020c 	and.w	r2, r3, #12
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d1eb      	bne.n	8005f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7c:	4b27      	ldr	r3, [pc, #156]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d210      	bcs.n	8005fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8a:	4b24      	ldr	r3, [pc, #144]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f023 0207 	bic.w	r2, r3, #7
 8005f92:	4922      	ldr	r1, [pc, #136]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9a:	4b20      	ldr	r3, [pc, #128]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d001      	beq.n	8005fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e032      	b.n	8006012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fb8:	4b19      	ldr	r3, [pc, #100]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	4916      	ldr	r1, [pc, #88]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fd6:	4b12      	ldr	r3, [pc, #72]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	490e      	ldr	r1, [pc, #56]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fea:	f000 f821 	bl	8006030 <HAL_RCC_GetSysClockFreq>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	490a      	ldr	r1, [pc, #40]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffc:	5ccb      	ldrb	r3, [r1, r3]
 8005ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8006002:	4a09      	ldr	r2, [pc, #36]	@ (8006028 <HAL_RCC_ClockConfig+0x1cc>)
 8006004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006006:	4b09      	ldr	r3, [pc, #36]	@ (800602c <HAL_RCC_ClockConfig+0x1d0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fc fd48 	bl	8002aa0 <HAL_InitTick>

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40022000 	.word	0x40022000
 8006020:	40021000 	.word	0x40021000
 8006024:	0800bbb4 	.word	0x0800bbb4
 8006028:	20000014 	.word	0x20000014
 800602c:	20000018 	.word	0x20000018

08006030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	2300      	movs	r3, #0
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800604a:	4b1e      	ldr	r3, [pc, #120]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f003 030c 	and.w	r3, r3, #12
 8006056:	2b04      	cmp	r3, #4
 8006058:	d002      	beq.n	8006060 <HAL_RCC_GetSysClockFreq+0x30>
 800605a:	2b08      	cmp	r3, #8
 800605c:	d003      	beq.n	8006066 <HAL_RCC_GetSysClockFreq+0x36>
 800605e:	e027      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006060:	4b19      	ldr	r3, [pc, #100]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006062:	613b      	str	r3, [r7, #16]
      break;
 8006064:	e027      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	0c9b      	lsrs	r3, r3, #18
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006070:	5cd3      	ldrb	r3, [r2, r3]
 8006072:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d010      	beq.n	80060a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800607e:	4b11      	ldr	r3, [pc, #68]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	0c5b      	lsrs	r3, r3, #17
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	4a11      	ldr	r2, [pc, #68]	@ (80060d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800608a:	5cd3      	ldrb	r3, [r2, r3]
 800608c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a0d      	ldr	r2, [pc, #52]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006092:	fb03 f202 	mul.w	r2, r3, r2
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e004      	b.n	80060aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a0c      	ldr	r2, [pc, #48]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80060a4:	fb02 f303 	mul.w	r3, r2, r3
 80060a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	613b      	str	r3, [r7, #16]
      break;
 80060ae:	e002      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80060b0:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80060b2:	613b      	str	r3, [r7, #16]
      break;
 80060b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060b6:	693b      	ldr	r3, [r7, #16]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40021000 	.word	0x40021000
 80060c8:	007a1200 	.word	0x007a1200
 80060cc:	0800bbcc 	.word	0x0800bbcc
 80060d0:	0800bbdc 	.word	0x0800bbdc
 80060d4:	003d0900 	.word	0x003d0900

080060d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060dc:	4b02      	ldr	r3, [pc, #8]	@ (80060e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80060de:	681b      	ldr	r3, [r3, #0]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr
 80060e8:	20000014 	.word	0x20000014

080060ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060f0:	f7ff fff2 	bl	80060d8 <HAL_RCC_GetHCLKFreq>
 80060f4:	4602      	mov	r2, r0
 80060f6:	4b05      	ldr	r3, [pc, #20]	@ (800610c <HAL_RCC_GetPCLK1Freq+0x20>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	4903      	ldr	r1, [pc, #12]	@ (8006110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006102:	5ccb      	ldrb	r3, [r1, r3]
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40021000 	.word	0x40021000
 8006110:	0800bbc4 	.word	0x0800bbc4

08006114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006118:	f7ff ffde 	bl	80060d8 <HAL_RCC_GetHCLKFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	0adb      	lsrs	r3, r3, #11
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	4903      	ldr	r1, [pc, #12]	@ (8006138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006130:	4618      	mov	r0, r3
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40021000 	.word	0x40021000
 8006138:	0800bbc4 	.word	0x0800bbc4

0800613c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006144:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <RCC_Delay+0x34>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a0a      	ldr	r2, [pc, #40]	@ (8006174 <RCC_Delay+0x38>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	0a5b      	lsrs	r3, r3, #9
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	fb02 f303 	mul.w	r3, r2, r3
 8006156:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006158:	bf00      	nop
  }
  while (Delay --);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1e5a      	subs	r2, r3, #1
 800615e:	60fa      	str	r2, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f9      	bne.n	8006158 <RCC_Delay+0x1c>
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr
 8006170:	20000014 	.word	0x20000014
 8006174:	10624dd3 	.word	0x10624dd3

08006178 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e093      	b.n	80062b4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fc fb87 	bl	80028b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2202      	movs	r2, #2
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f000 fa4f 	bl	8006670 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	4313      	orrs	r3, r2
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006218:	f023 030c 	bic.w	r3, r3, #12
 800621c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	4313      	orrs	r3, r2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	011a      	lsls	r2, r3, #4
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	031b      	lsls	r3, r3, #12
 8006248:	4313      	orrs	r3, r2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	4313      	orrs	r3, r2
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d110      	bne.n	800630e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d102      	bne.n	80062f8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80062f2:	7b7b      	ldrb	r3, [r7, #13]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d001      	beq.n	80062fc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e089      	b.n	8006410 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800630c:	e031      	b.n	8006372 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d110      	bne.n	8006336 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d102      	bne.n	8006320 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800631a:	7b3b      	ldrb	r3, [r7, #12]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d001      	beq.n	8006324 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e075      	b.n	8006410 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006334:	e01d      	b.n	8006372 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d108      	bne.n	800634e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d105      	bne.n	800634e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006342:	7b7b      	ldrb	r3, [r7, #13]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d102      	bne.n	800634e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006348:	7b3b      	ldrb	r3, [r7, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e05e      	b.n	8006410 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b04      	cmp	r3, #4
 800637c:	d010      	beq.n	80063a0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800637e:	e01f      	b.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2201      	movs	r2, #1
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f000 f9d3 	bl	8006734 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0202 	orr.w	r2, r2, #2
 800639c:	60da      	str	r2, [r3, #12]
      break;
 800639e:	e02e      	b.n	80063fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	2104      	movs	r1, #4
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 f9c3 	bl	8006734 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0204 	orr.w	r2, r2, #4
 80063bc:	60da      	str	r2, [r3, #12]
      break;
 80063be:	e01e      	b.n	80063fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2201      	movs	r2, #1
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f9b3 	bl	8006734 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2201      	movs	r2, #1
 80063d4:	2104      	movs	r1, #4
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f9ac 	bl	8006734 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0202 	orr.w	r2, r2, #2
 80063ea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0204 	orr.w	r2, r2, #4
 80063fa:	60da      	str	r2, [r3, #12]
      break;
 80063fc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0201 	orr.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d122      	bne.n	8006474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b02      	cmp	r3, #2
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0202 	mvn.w	r2, #2
 8006444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fa ffae 	bl	80013bc <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8e9 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f8ef 	bl	800664c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b04      	cmp	r3, #4
 8006480:	d122      	bne.n	80064c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b04      	cmp	r3, #4
 800648e:	d11b      	bne.n	80064c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0204 	mvn.w	r2, #4
 8006498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fa ff84 	bl	80013bc <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f8bf 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8c5 	bl	800664c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d122      	bne.n	800651c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d11b      	bne.n	800651c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0208 	mvn.w	r2, #8
 80064ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2204      	movs	r2, #4
 80064f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fa ff5a 	bl	80013bc <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f895 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f89b 	bl	800664c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b10      	cmp	r3, #16
 8006528:	d122      	bne.n	8006570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b10      	cmp	r3, #16
 8006536:	d11b      	bne.n	8006570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0210 	mvn.w	r2, #16
 8006540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2208      	movs	r2, #8
 8006546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fa ff30 	bl	80013bc <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f86b 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f871 	bl	800664c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b01      	cmp	r3, #1
 800657c:	d10e      	bne.n	800659c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d107      	bne.n	800659c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0201 	mvn.w	r2, #1
 8006594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f846 	bl	8006628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a6:	2b80      	cmp	r3, #128	@ 0x80
 80065a8:	d10e      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b4:	2b80      	cmp	r3, #128	@ 0x80
 80065b6:	d107      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80065c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f941 	bl	800684a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d2:	2b40      	cmp	r3, #64	@ 0x40
 80065d4:	d10e      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f835 	bl	800665e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d10e      	bne.n	8006620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b20      	cmp	r3, #32
 800660e:	d107      	bne.n	8006620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0220 	mvn.w	r2, #32
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f90c 	bl	8006838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr

0800663a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr

0800665e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a29      	ldr	r2, [pc, #164]	@ (8006728 <TIM_Base_SetConfig+0xb8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00b      	beq.n	80066a0 <TIM_Base_SetConfig+0x30>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668e:	d007      	beq.n	80066a0 <TIM_Base_SetConfig+0x30>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a26      	ldr	r2, [pc, #152]	@ (800672c <TIM_Base_SetConfig+0xbc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_Base_SetConfig+0x30>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a25      	ldr	r2, [pc, #148]	@ (8006730 <TIM_Base_SetConfig+0xc0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d108      	bne.n	80066b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006728 <TIM_Base_SetConfig+0xb8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <TIM_Base_SetConfig+0x62>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c0:	d007      	beq.n	80066d2 <TIM_Base_SetConfig+0x62>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a19      	ldr	r2, [pc, #100]	@ (800672c <TIM_Base_SetConfig+0xbc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_Base_SetConfig+0x62>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a18      	ldr	r2, [pc, #96]	@ (8006730 <TIM_Base_SetConfig+0xc0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d108      	bne.n	80066e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a07      	ldr	r2, [pc, #28]	@ (8006728 <TIM_Base_SetConfig+0xb8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d103      	bne.n	8006718 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	615a      	str	r2, [r3, #20]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr
 8006728:	40012c00 	.word	0x40012c00
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800

08006734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2201      	movs	r2, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1a      	ldr	r2, [r3, #32]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	431a      	orrs	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr

0800677c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006790:	2302      	movs	r3, #2
 8006792:	e046      	b.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a16      	ldr	r2, [pc, #88]	@ (800682c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00e      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e0:	d009      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a12      	ldr	r2, [pc, #72]	@ (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a10      	ldr	r2, [pc, #64]	@ (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d10c      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4313      	orrs	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800

08006838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr

0800685c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e042      	b.n	80068f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fc f886 	bl	8002994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2224      	movs	r2, #36	@ 0x24
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800689e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f91d 	bl	8006ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695a      	ldr	r2, [r3, #20]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	@ 0x28
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	4613      	mov	r3, r2
 800690a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b20      	cmp	r3, #32
 800691a:	d16d      	bne.n	80069f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_UART_Transmit+0x2c>
 8006922:	88fb      	ldrh	r3, [r7, #6]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e066      	b.n	80069fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2221      	movs	r2, #33	@ 0x21
 8006936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800693a:	f7fc f8f3 	bl	8002b24 <HAL_GetTick>
 800693e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	88fa      	ldrh	r2, [r7, #6]
 8006944:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	88fa      	ldrh	r2, [r7, #6]
 800694a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006954:	d108      	bne.n	8006968 <HAL_UART_Transmit+0x6c>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e003      	b.n	8006970 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800696c:	2300      	movs	r3, #0
 800696e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006970:	e02a      	b.n	80069c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2200      	movs	r2, #0
 800697a:	2180      	movs	r1, #128	@ 0x80
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 f840 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e036      	b.n	80069fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10b      	bne.n	80069aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	3302      	adds	r3, #2
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	e007      	b.n	80069ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	781a      	ldrb	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	3301      	adds	r3, #1
 80069b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1cf      	bne.n	8006972 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2200      	movs	r2, #0
 80069da:	2140      	movs	r1, #64	@ 0x40
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f810 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e006      	b.n	80069fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b090      	sub	sp, #64	@ 0x40
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a12:	e050      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d04c      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a22:	f7fc f87f 	bl	8002b24 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d241      	bcs.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a52:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a54:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e5      	bne.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	613b      	str	r3, [r7, #16]
   return(result);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3314      	adds	r3, #20
 8006a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a86:	623a      	str	r2, [r7, #32]
 8006a88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	69f9      	ldr	r1, [r7, #28]
 8006a8c:	6a3a      	ldr	r2, [r7, #32]
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e00f      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d09f      	beq.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3740      	adds	r7, #64	@ 0x40
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006b1a:	f023 030c 	bic.w	r3, r3, #12
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	430b      	orrs	r3, r1
 8006b26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a2c      	ldr	r2, [pc, #176]	@ (8006bf4 <UART_SetConfig+0x114>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d103      	bne.n	8006b50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b48:	f7ff fae4 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	e002      	b.n	8006b56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b50:	f7ff facc 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 8006b54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009a      	lsls	r2, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	4a22      	ldr	r2, [pc, #136]	@ (8006bf8 <UART_SetConfig+0x118>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	0119      	lsls	r1, r3, #4
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009a      	lsls	r2, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf8 <UART_SetConfig+0x118>)
 8006b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	2064      	movs	r0, #100	@ 0x64
 8006b96:	fb00 f303 	mul.w	r3, r0, r3
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	3332      	adds	r3, #50	@ 0x32
 8006ba0:	4a15      	ldr	r2, [pc, #84]	@ (8006bf8 <UART_SetConfig+0x118>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bac:	4419      	add	r1, r3
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009a      	lsls	r2, r3, #2
 8006bb8:	441a      	add	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <UART_SetConfig+0x118>)
 8006bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2064      	movs	r0, #100	@ 0x64
 8006bce:	fb00 f303 	mul.w	r3, r0, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	3332      	adds	r3, #50	@ 0x32
 8006bd8:	4a07      	ldr	r2, [pc, #28]	@ (8006bf8 <UART_SetConfig+0x118>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f003 020f 	and.w	r2, r3, #15
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	440a      	add	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40013800 	.word	0x40013800
 8006bf8:	51eb851f 	.word	0x51eb851f

08006bfc <__cvt>:
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c02:	461d      	mov	r5, r3
 8006c04:	bfbb      	ittet	lt
 8006c06:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006c0a:	461d      	movlt	r5, r3
 8006c0c:	2300      	movge	r3, #0
 8006c0e:	232d      	movlt	r3, #45	@ 0x2d
 8006c10:	b088      	sub	sp, #32
 8006c12:	4614      	mov	r4, r2
 8006c14:	bfb8      	it	lt
 8006c16:	4614      	movlt	r4, r2
 8006c18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c1a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006c1c:	7013      	strb	r3, [r2, #0]
 8006c1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c20:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006c24:	f023 0820 	bic.w	r8, r3, #32
 8006c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c2c:	d005      	beq.n	8006c3a <__cvt+0x3e>
 8006c2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c32:	d100      	bne.n	8006c36 <__cvt+0x3a>
 8006c34:	3601      	adds	r6, #1
 8006c36:	2302      	movs	r3, #2
 8006c38:	e000      	b.n	8006c3c <__cvt+0x40>
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	aa07      	add	r2, sp, #28
 8006c3e:	9204      	str	r2, [sp, #16]
 8006c40:	aa06      	add	r2, sp, #24
 8006c42:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c46:	e9cd 3600 	strd	r3, r6, [sp]
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	f001 f8bb 	bl	8007dc8 <_dtoa_r>
 8006c52:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c56:	4607      	mov	r7, r0
 8006c58:	d119      	bne.n	8006c8e <__cvt+0x92>
 8006c5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c5c:	07db      	lsls	r3, r3, #31
 8006c5e:	d50e      	bpl.n	8006c7e <__cvt+0x82>
 8006c60:	eb00 0906 	add.w	r9, r0, r6
 8006c64:	2200      	movs	r2, #0
 8006c66:	2300      	movs	r3, #0
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7f9 fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8006c70:	b108      	cbz	r0, 8006c76 <__cvt+0x7a>
 8006c72:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c76:	2230      	movs	r2, #48	@ 0x30
 8006c78:	9b07      	ldr	r3, [sp, #28]
 8006c7a:	454b      	cmp	r3, r9
 8006c7c:	d31e      	bcc.n	8006cbc <__cvt+0xc0>
 8006c7e:	4638      	mov	r0, r7
 8006c80:	9b07      	ldr	r3, [sp, #28]
 8006c82:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006c84:	1bdb      	subs	r3, r3, r7
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	b008      	add	sp, #32
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c92:	eb00 0906 	add.w	r9, r0, r6
 8006c96:	d1e5      	bne.n	8006c64 <__cvt+0x68>
 8006c98:	7803      	ldrb	r3, [r0, #0]
 8006c9a:	2b30      	cmp	r3, #48	@ 0x30
 8006c9c:	d10a      	bne.n	8006cb4 <__cvt+0xb8>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 fe7f 	bl	80009a8 <__aeabi_dcmpeq>
 8006caa:	b918      	cbnz	r0, 8006cb4 <__cvt+0xb8>
 8006cac:	f1c6 0601 	rsb	r6, r6, #1
 8006cb0:	f8ca 6000 	str.w	r6, [sl]
 8006cb4:	f8da 3000 	ldr.w	r3, [sl]
 8006cb8:	4499      	add	r9, r3
 8006cba:	e7d3      	b.n	8006c64 <__cvt+0x68>
 8006cbc:	1c59      	adds	r1, r3, #1
 8006cbe:	9107      	str	r1, [sp, #28]
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e7d9      	b.n	8006c78 <__cvt+0x7c>

08006cc4 <__exponent>:
 8006cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	bfb6      	itet	lt
 8006cca:	232d      	movlt	r3, #45	@ 0x2d
 8006ccc:	232b      	movge	r3, #43	@ 0x2b
 8006cce:	4249      	neglt	r1, r1
 8006cd0:	2909      	cmp	r1, #9
 8006cd2:	7002      	strb	r2, [r0, #0]
 8006cd4:	7043      	strb	r3, [r0, #1]
 8006cd6:	dd29      	ble.n	8006d2c <__exponent+0x68>
 8006cd8:	f10d 0307 	add.w	r3, sp, #7
 8006cdc:	461d      	mov	r5, r3
 8006cde:	270a      	movs	r7, #10
 8006ce0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	fb07 1416 	mls	r4, r7, r6, r1
 8006cea:	3430      	adds	r4, #48	@ 0x30
 8006cec:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	2c63      	cmp	r4, #99	@ 0x63
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cfa:	dcf1      	bgt.n	8006ce0 <__exponent+0x1c>
 8006cfc:	3130      	adds	r1, #48	@ 0x30
 8006cfe:	1e94      	subs	r4, r2, #2
 8006d00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d04:	4623      	mov	r3, r4
 8006d06:	1c41      	adds	r1, r0, #1
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	d30a      	bcc.n	8006d22 <__exponent+0x5e>
 8006d0c:	f10d 0309 	add.w	r3, sp, #9
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	42ac      	cmp	r4, r5
 8006d14:	bf88      	it	hi
 8006d16:	2300      	movhi	r3, #0
 8006d18:	3302      	adds	r3, #2
 8006d1a:	4403      	add	r3, r0
 8006d1c:	1a18      	subs	r0, r3, r0
 8006d1e:	b003      	add	sp, #12
 8006d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d22:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d26:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d2a:	e7ed      	b.n	8006d08 <__exponent+0x44>
 8006d2c:	2330      	movs	r3, #48	@ 0x30
 8006d2e:	3130      	adds	r1, #48	@ 0x30
 8006d30:	7083      	strb	r3, [r0, #2]
 8006d32:	70c1      	strb	r1, [r0, #3]
 8006d34:	1d03      	adds	r3, r0, #4
 8006d36:	e7f1      	b.n	8006d1c <__exponent+0x58>

08006d38 <_printf_float>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	b091      	sub	sp, #68	@ 0x44
 8006d3e:	460c      	mov	r4, r1
 8006d40:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006d44:	4616      	mov	r6, r2
 8006d46:	461f      	mov	r7, r3
 8006d48:	4605      	mov	r5, r0
 8006d4a:	f000 ff1d 	bl	8007b88 <_localeconv_r>
 8006d4e:	6803      	ldr	r3, [r0, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	9308      	str	r3, [sp, #32]
 8006d54:	f7f9 f9fc 	bl	8000150 <strlen>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d60:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d62:	3307      	adds	r3, #7
 8006d64:	f023 0307 	bic.w	r3, r3, #7
 8006d68:	f103 0208 	add.w	r2, r3, #8
 8006d6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d70:	f8d4 b000 	ldr.w	fp, [r4]
 8006d74:	f8c8 2000 	str.w	r2, [r8]
 8006d78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d82:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006d86:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d92:	4b9c      	ldr	r3, [pc, #624]	@ (8007004 <_printf_float+0x2cc>)
 8006d94:	f7f9 fe3a 	bl	8000a0c <__aeabi_dcmpun>
 8006d98:	bb70      	cbnz	r0, 8006df8 <_printf_float+0xc0>
 8006d9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006da2:	4b98      	ldr	r3, [pc, #608]	@ (8007004 <_printf_float+0x2cc>)
 8006da4:	f7f9 fe14 	bl	80009d0 <__aeabi_dcmple>
 8006da8:	bb30      	cbnz	r0, 8006df8 <_printf_float+0xc0>
 8006daa:	2200      	movs	r2, #0
 8006dac:	2300      	movs	r3, #0
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7f9 fe03 	bl	80009bc <__aeabi_dcmplt>
 8006db6:	b110      	cbz	r0, 8006dbe <_printf_float+0x86>
 8006db8:	232d      	movs	r3, #45	@ 0x2d
 8006dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dbe:	4a92      	ldr	r2, [pc, #584]	@ (8007008 <_printf_float+0x2d0>)
 8006dc0:	4b92      	ldr	r3, [pc, #584]	@ (800700c <_printf_float+0x2d4>)
 8006dc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006dc6:	bf94      	ite	ls
 8006dc8:	4690      	movls	r8, r2
 8006dca:	4698      	movhi	r8, r3
 8006dcc:	2303      	movs	r3, #3
 8006dce:	f04f 0900 	mov.w	r9, #0
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	f02b 0304 	bic.w	r3, fp, #4
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	4633      	mov	r3, r6
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	9700      	str	r7, [sp, #0]
 8006de2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006de4:	f000 f9d4 	bl	8007190 <_printf_common>
 8006de8:	3001      	adds	r0, #1
 8006dea:	f040 8090 	bne.w	8006f0e <_printf_float+0x1d6>
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295
 8006df2:	b011      	add	sp, #68	@ 0x44
 8006df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe04 	bl	8000a0c <__aeabi_dcmpun>
 8006e04:	b148      	cbz	r0, 8006e1a <_printf_float+0xe2>
 8006e06:	464b      	mov	r3, r9
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bfb8      	it	lt
 8006e0c:	232d      	movlt	r3, #45	@ 0x2d
 8006e0e:	4a80      	ldr	r2, [pc, #512]	@ (8007010 <_printf_float+0x2d8>)
 8006e10:	bfb8      	it	lt
 8006e12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e16:	4b7f      	ldr	r3, [pc, #508]	@ (8007014 <_printf_float+0x2dc>)
 8006e18:	e7d3      	b.n	8006dc2 <_printf_float+0x8a>
 8006e1a:	6863      	ldr	r3, [r4, #4]
 8006e1c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	d13f      	bne.n	8006ea4 <_printf_float+0x16c>
 8006e24:	2306      	movs	r3, #6
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	9206      	str	r2, [sp, #24]
 8006e32:	aa0e      	add	r2, sp, #56	@ 0x38
 8006e34:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006e38:	aa0d      	add	r2, sp, #52	@ 0x34
 8006e3a:	9203      	str	r2, [sp, #12]
 8006e3c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006e40:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	4642      	mov	r2, r8
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006e50:	f7ff fed4 	bl	8006bfc <__cvt>
 8006e54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e56:	4680      	mov	r8, r0
 8006e58:	2947      	cmp	r1, #71	@ 0x47
 8006e5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e5c:	d128      	bne.n	8006eb0 <_printf_float+0x178>
 8006e5e:	1cc8      	adds	r0, r1, #3
 8006e60:	db02      	blt.n	8006e68 <_printf_float+0x130>
 8006e62:	6863      	ldr	r3, [r4, #4]
 8006e64:	4299      	cmp	r1, r3
 8006e66:	dd40      	ble.n	8006eea <_printf_float+0x1b2>
 8006e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e6c:	fa5f fa8a 	uxtb.w	sl, sl
 8006e70:	4652      	mov	r2, sl
 8006e72:	3901      	subs	r1, #1
 8006e74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e78:	910d      	str	r1, [sp, #52]	@ 0x34
 8006e7a:	f7ff ff23 	bl	8006cc4 <__exponent>
 8006e7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e80:	4681      	mov	r9, r0
 8006e82:	1813      	adds	r3, r2, r0
 8006e84:	2a01      	cmp	r2, #1
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	dc02      	bgt.n	8006e90 <_printf_float+0x158>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	07d2      	lsls	r2, r2, #31
 8006e8e:	d501      	bpl.n	8006e94 <_printf_float+0x15c>
 8006e90:	3301      	adds	r3, #1
 8006e92:	6123      	str	r3, [r4, #16]
 8006e94:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d09e      	beq.n	8006dda <_printf_float+0xa2>
 8006e9c:	232d      	movs	r3, #45	@ 0x2d
 8006e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ea2:	e79a      	b.n	8006dda <_printf_float+0xa2>
 8006ea4:	2947      	cmp	r1, #71	@ 0x47
 8006ea6:	d1bf      	bne.n	8006e28 <_printf_float+0xf0>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1bd      	bne.n	8006e28 <_printf_float+0xf0>
 8006eac:	2301      	movs	r3, #1
 8006eae:	e7ba      	b.n	8006e26 <_printf_float+0xee>
 8006eb0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006eb4:	d9dc      	bls.n	8006e70 <_printf_float+0x138>
 8006eb6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006eba:	d118      	bne.n	8006eee <_printf_float+0x1b6>
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	6863      	ldr	r3, [r4, #4]
 8006ec0:	dd0b      	ble.n	8006eda <_printf_float+0x1a2>
 8006ec2:	6121      	str	r1, [r4, #16]
 8006ec4:	b913      	cbnz	r3, 8006ecc <_printf_float+0x194>
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	07d0      	lsls	r0, r2, #31
 8006eca:	d502      	bpl.n	8006ed2 <_printf_float+0x19a>
 8006ecc:	3301      	adds	r3, #1
 8006ece:	440b      	add	r3, r1
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	f04f 0900 	mov.w	r9, #0
 8006ed6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ed8:	e7dc      	b.n	8006e94 <_printf_float+0x15c>
 8006eda:	b913      	cbnz	r3, 8006ee2 <_printf_float+0x1aa>
 8006edc:	6822      	ldr	r2, [r4, #0]
 8006ede:	07d2      	lsls	r2, r2, #31
 8006ee0:	d501      	bpl.n	8006ee6 <_printf_float+0x1ae>
 8006ee2:	3302      	adds	r3, #2
 8006ee4:	e7f4      	b.n	8006ed0 <_printf_float+0x198>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e7f2      	b.n	8006ed0 <_printf_float+0x198>
 8006eea:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006eee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	db05      	blt.n	8006f00 <_printf_float+0x1c8>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	6121      	str	r1, [r4, #16]
 8006ef8:	07d8      	lsls	r0, r3, #31
 8006efa:	d5ea      	bpl.n	8006ed2 <_printf_float+0x19a>
 8006efc:	1c4b      	adds	r3, r1, #1
 8006efe:	e7e7      	b.n	8006ed0 <_printf_float+0x198>
 8006f00:	2900      	cmp	r1, #0
 8006f02:	bfcc      	ite	gt
 8006f04:	2201      	movgt	r2, #1
 8006f06:	f1c1 0202 	rsble	r2, r1, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	e7e0      	b.n	8006ed0 <_printf_float+0x198>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	055a      	lsls	r2, r3, #21
 8006f12:	d407      	bmi.n	8006f24 <_printf_float+0x1ec>
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	4642      	mov	r2, r8
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d12b      	bne.n	8006f7a <_printf_float+0x242>
 8006f22:	e764      	b.n	8006dee <_printf_float+0xb6>
 8006f24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f28:	f240 80dc 	bls.w	80070e4 <_printf_float+0x3ac>
 8006f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	f7f9 fd38 	bl	80009a8 <__aeabi_dcmpeq>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d033      	beq.n	8006fa4 <_printf_float+0x26c>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	4a35      	ldr	r2, [pc, #212]	@ (8007018 <_printf_float+0x2e0>)
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	f43f af51 	beq.w	8006dee <_printf_float+0xb6>
 8006f4c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006f50:	4543      	cmp	r3, r8
 8006f52:	db02      	blt.n	8006f5a <_printf_float+0x222>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	07d8      	lsls	r0, r3, #31
 8006f58:	d50f      	bpl.n	8006f7a <_printf_float+0x242>
 8006f5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f af42 	beq.w	8006dee <_printf_float+0xb6>
 8006f6a:	f04f 0900 	mov.w	r9, #0
 8006f6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f72:	f104 0a1a 	add.w	sl, r4, #26
 8006f76:	45c8      	cmp	r8, r9
 8006f78:	dc09      	bgt.n	8006f8e <_printf_float+0x256>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	079b      	lsls	r3, r3, #30
 8006f7e:	f100 8102 	bmi.w	8007186 <_printf_float+0x44e>
 8006f82:	68e0      	ldr	r0, [r4, #12]
 8006f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f86:	4298      	cmp	r0, r3
 8006f88:	bfb8      	it	lt
 8006f8a:	4618      	movlt	r0, r3
 8006f8c:	e731      	b.n	8006df2 <_printf_float+0xba>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4652      	mov	r2, sl
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f af28 	beq.w	8006dee <_printf_float+0xb6>
 8006f9e:	f109 0901 	add.w	r9, r9, #1
 8006fa2:	e7e8      	b.n	8006f76 <_printf_float+0x23e>
 8006fa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dc38      	bgt.n	800701c <_printf_float+0x2e4>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4a19      	ldr	r2, [pc, #100]	@ (8007018 <_printf_float+0x2e0>)
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f af1a 	beq.w	8006dee <_printf_float+0xb6>
 8006fba:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006fbe:	ea59 0303 	orrs.w	r3, r9, r3
 8006fc2:	d102      	bne.n	8006fca <_printf_float+0x292>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	07d9      	lsls	r1, r3, #31
 8006fc8:	d5d7      	bpl.n	8006f7a <_printf_float+0x242>
 8006fca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b8      	blx	r7
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	f43f af0a 	beq.w	8006dee <_printf_float+0xb6>
 8006fda:	f04f 0a00 	mov.w	sl, #0
 8006fde:	f104 0b1a 	add.w	fp, r4, #26
 8006fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fe4:	425b      	negs	r3, r3
 8006fe6:	4553      	cmp	r3, sl
 8006fe8:	dc01      	bgt.n	8006fee <_printf_float+0x2b6>
 8006fea:	464b      	mov	r3, r9
 8006fec:	e793      	b.n	8006f16 <_printf_float+0x1de>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	465a      	mov	r2, fp
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f aef8 	beq.w	8006dee <_printf_float+0xb6>
 8006ffe:	f10a 0a01 	add.w	sl, sl, #1
 8007002:	e7ee      	b.n	8006fe2 <_printf_float+0x2aa>
 8007004:	7fefffff 	.word	0x7fefffff
 8007008:	0800bbde 	.word	0x0800bbde
 800700c:	0800bbe2 	.word	0x0800bbe2
 8007010:	0800bbe6 	.word	0x0800bbe6
 8007014:	0800bbea 	.word	0x0800bbea
 8007018:	0800bbee 	.word	0x0800bbee
 800701c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800701e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007022:	4553      	cmp	r3, sl
 8007024:	bfa8      	it	ge
 8007026:	4653      	movge	r3, sl
 8007028:	2b00      	cmp	r3, #0
 800702a:	4699      	mov	r9, r3
 800702c:	dc36      	bgt.n	800709c <_printf_float+0x364>
 800702e:	f04f 0b00 	mov.w	fp, #0
 8007032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007036:	f104 021a 	add.w	r2, r4, #26
 800703a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800703c:	930a      	str	r3, [sp, #40]	@ 0x28
 800703e:	eba3 0309 	sub.w	r3, r3, r9
 8007042:	455b      	cmp	r3, fp
 8007044:	dc31      	bgt.n	80070aa <_printf_float+0x372>
 8007046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007048:	459a      	cmp	sl, r3
 800704a:	dc3a      	bgt.n	80070c2 <_printf_float+0x38a>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07da      	lsls	r2, r3, #31
 8007050:	d437      	bmi.n	80070c2 <_printf_float+0x38a>
 8007052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007054:	ebaa 0903 	sub.w	r9, sl, r3
 8007058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705a:	ebaa 0303 	sub.w	r3, sl, r3
 800705e:	4599      	cmp	r9, r3
 8007060:	bfa8      	it	ge
 8007062:	4699      	movge	r9, r3
 8007064:	f1b9 0f00 	cmp.w	r9, #0
 8007068:	dc33      	bgt.n	80070d2 <_printf_float+0x39a>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007072:	f104 0b1a 	add.w	fp, r4, #26
 8007076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007078:	ebaa 0303 	sub.w	r3, sl, r3
 800707c:	eba3 0309 	sub.w	r3, r3, r9
 8007080:	4543      	cmp	r3, r8
 8007082:	f77f af7a 	ble.w	8006f7a <_printf_float+0x242>
 8007086:	2301      	movs	r3, #1
 8007088:	465a      	mov	r2, fp
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	f43f aeac 	beq.w	8006dee <_printf_float+0xb6>
 8007096:	f108 0801 	add.w	r8, r8, #1
 800709a:	e7ec      	b.n	8007076 <_printf_float+0x33e>
 800709c:	4642      	mov	r2, r8
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	d1c2      	bne.n	800702e <_printf_float+0x2f6>
 80070a8:	e6a1      	b.n	8006dee <_printf_float+0xb6>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80070b2:	47b8      	blx	r7
 80070b4:	3001      	adds	r0, #1
 80070b6:	f43f ae9a 	beq.w	8006dee <_printf_float+0xb6>
 80070ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070bc:	f10b 0b01 	add.w	fp, fp, #1
 80070c0:	e7bb      	b.n	800703a <_printf_float+0x302>
 80070c2:	4631      	mov	r1, r6
 80070c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	d1c0      	bne.n	8007052 <_printf_float+0x31a>
 80070d0:	e68d      	b.n	8006dee <_printf_float+0xb6>
 80070d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070d4:	464b      	mov	r3, r9
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	4442      	add	r2, r8
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	d1c3      	bne.n	800706a <_printf_float+0x332>
 80070e2:	e684      	b.n	8006dee <_printf_float+0xb6>
 80070e4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80070e8:	f1ba 0f01 	cmp.w	sl, #1
 80070ec:	dc01      	bgt.n	80070f2 <_printf_float+0x3ba>
 80070ee:	07db      	lsls	r3, r3, #31
 80070f0:	d536      	bpl.n	8007160 <_printf_float+0x428>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4642      	mov	r2, r8
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f ae76 	beq.w	8006dee <_printf_float+0xb6>
 8007102:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007106:	4631      	mov	r1, r6
 8007108:	4628      	mov	r0, r5
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	f43f ae6e 	beq.w	8006dee <_printf_float+0xb6>
 8007112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800711e:	f7f9 fc43 	bl	80009a8 <__aeabi_dcmpeq>
 8007122:	b9c0      	cbnz	r0, 8007156 <_printf_float+0x41e>
 8007124:	4653      	mov	r3, sl
 8007126:	f108 0201 	add.w	r2, r8, #1
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	d10c      	bne.n	800714e <_printf_float+0x416>
 8007134:	e65b      	b.n	8006dee <_printf_float+0xb6>
 8007136:	2301      	movs	r3, #1
 8007138:	465a      	mov	r2, fp
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f ae54 	beq.w	8006dee <_printf_float+0xb6>
 8007146:	f108 0801 	add.w	r8, r8, #1
 800714a:	45d0      	cmp	r8, sl
 800714c:	dbf3      	blt.n	8007136 <_printf_float+0x3fe>
 800714e:	464b      	mov	r3, r9
 8007150:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007154:	e6e0      	b.n	8006f18 <_printf_float+0x1e0>
 8007156:	f04f 0800 	mov.w	r8, #0
 800715a:	f104 0b1a 	add.w	fp, r4, #26
 800715e:	e7f4      	b.n	800714a <_printf_float+0x412>
 8007160:	2301      	movs	r3, #1
 8007162:	4642      	mov	r2, r8
 8007164:	e7e1      	b.n	800712a <_printf_float+0x3f2>
 8007166:	2301      	movs	r3, #1
 8007168:	464a      	mov	r2, r9
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	47b8      	blx	r7
 8007170:	3001      	adds	r0, #1
 8007172:	f43f ae3c 	beq.w	8006dee <_printf_float+0xb6>
 8007176:	f108 0801 	add.w	r8, r8, #1
 800717a:	68e3      	ldr	r3, [r4, #12]
 800717c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800717e:	1a5b      	subs	r3, r3, r1
 8007180:	4543      	cmp	r3, r8
 8007182:	dcf0      	bgt.n	8007166 <_printf_float+0x42e>
 8007184:	e6fd      	b.n	8006f82 <_printf_float+0x24a>
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	f104 0919 	add.w	r9, r4, #25
 800718e:	e7f4      	b.n	800717a <_printf_float+0x442>

08007190 <_printf_common>:
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	4616      	mov	r6, r2
 8007196:	4698      	mov	r8, r3
 8007198:	688a      	ldr	r2, [r1, #8]
 800719a:	690b      	ldr	r3, [r1, #16]
 800719c:	4607      	mov	r7, r0
 800719e:	4293      	cmp	r3, r2
 80071a0:	bfb8      	it	lt
 80071a2:	4613      	movlt	r3, r2
 80071a4:	6033      	str	r3, [r6, #0]
 80071a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071aa:	460c      	mov	r4, r1
 80071ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071b0:	b10a      	cbz	r2, 80071b6 <_printf_common+0x26>
 80071b2:	3301      	adds	r3, #1
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	0699      	lsls	r1, r3, #26
 80071ba:	bf42      	ittt	mi
 80071bc:	6833      	ldrmi	r3, [r6, #0]
 80071be:	3302      	addmi	r3, #2
 80071c0:	6033      	strmi	r3, [r6, #0]
 80071c2:	6825      	ldr	r5, [r4, #0]
 80071c4:	f015 0506 	ands.w	r5, r5, #6
 80071c8:	d106      	bne.n	80071d8 <_printf_common+0x48>
 80071ca:	f104 0a19 	add.w	sl, r4, #25
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	6832      	ldr	r2, [r6, #0]
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dc2b      	bgt.n	8007230 <_printf_common+0xa0>
 80071d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071dc:	6822      	ldr	r2, [r4, #0]
 80071de:	3b00      	subs	r3, #0
 80071e0:	bf18      	it	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	0692      	lsls	r2, r2, #26
 80071e6:	d430      	bmi.n	800724a <_printf_common+0xba>
 80071e8:	4641      	mov	r1, r8
 80071ea:	4638      	mov	r0, r7
 80071ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071f0:	47c8      	blx	r9
 80071f2:	3001      	adds	r0, #1
 80071f4:	d023      	beq.n	800723e <_printf_common+0xae>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	6922      	ldr	r2, [r4, #16]
 80071fa:	f003 0306 	and.w	r3, r3, #6
 80071fe:	2b04      	cmp	r3, #4
 8007200:	bf14      	ite	ne
 8007202:	2500      	movne	r5, #0
 8007204:	6833      	ldreq	r3, [r6, #0]
 8007206:	f04f 0600 	mov.w	r6, #0
 800720a:	bf08      	it	eq
 800720c:	68e5      	ldreq	r5, [r4, #12]
 800720e:	f104 041a 	add.w	r4, r4, #26
 8007212:	bf08      	it	eq
 8007214:	1aed      	subeq	r5, r5, r3
 8007216:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800721a:	bf08      	it	eq
 800721c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007220:	4293      	cmp	r3, r2
 8007222:	bfc4      	itt	gt
 8007224:	1a9b      	subgt	r3, r3, r2
 8007226:	18ed      	addgt	r5, r5, r3
 8007228:	42b5      	cmp	r5, r6
 800722a:	d11a      	bne.n	8007262 <_printf_common+0xd2>
 800722c:	2000      	movs	r0, #0
 800722e:	e008      	b.n	8007242 <_printf_common+0xb2>
 8007230:	2301      	movs	r3, #1
 8007232:	4652      	mov	r2, sl
 8007234:	4641      	mov	r1, r8
 8007236:	4638      	mov	r0, r7
 8007238:	47c8      	blx	r9
 800723a:	3001      	adds	r0, #1
 800723c:	d103      	bne.n	8007246 <_printf_common+0xb6>
 800723e:	f04f 30ff 	mov.w	r0, #4294967295
 8007242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007246:	3501      	adds	r5, #1
 8007248:	e7c1      	b.n	80071ce <_printf_common+0x3e>
 800724a:	2030      	movs	r0, #48	@ 0x30
 800724c:	18e1      	adds	r1, r4, r3
 800724e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007258:	4422      	add	r2, r4
 800725a:	3302      	adds	r3, #2
 800725c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007260:	e7c2      	b.n	80071e8 <_printf_common+0x58>
 8007262:	2301      	movs	r3, #1
 8007264:	4622      	mov	r2, r4
 8007266:	4641      	mov	r1, r8
 8007268:	4638      	mov	r0, r7
 800726a:	47c8      	blx	r9
 800726c:	3001      	adds	r0, #1
 800726e:	d0e6      	beq.n	800723e <_printf_common+0xae>
 8007270:	3601      	adds	r6, #1
 8007272:	e7d9      	b.n	8007228 <_printf_common+0x98>

08007274 <_printf_i>:
 8007274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	7e0f      	ldrb	r7, [r1, #24]
 800727a:	4691      	mov	r9, r2
 800727c:	2f78      	cmp	r7, #120	@ 0x78
 800727e:	4680      	mov	r8, r0
 8007280:	460c      	mov	r4, r1
 8007282:	469a      	mov	sl, r3
 8007284:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800728a:	d807      	bhi.n	800729c <_printf_i+0x28>
 800728c:	2f62      	cmp	r7, #98	@ 0x62
 800728e:	d80a      	bhi.n	80072a6 <_printf_i+0x32>
 8007290:	2f00      	cmp	r7, #0
 8007292:	f000 80d3 	beq.w	800743c <_printf_i+0x1c8>
 8007296:	2f58      	cmp	r7, #88	@ 0x58
 8007298:	f000 80ba 	beq.w	8007410 <_printf_i+0x19c>
 800729c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072a4:	e03a      	b.n	800731c <_printf_i+0xa8>
 80072a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072aa:	2b15      	cmp	r3, #21
 80072ac:	d8f6      	bhi.n	800729c <_printf_i+0x28>
 80072ae:	a101      	add	r1, pc, #4	@ (adr r1, 80072b4 <_printf_i+0x40>)
 80072b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b4:	0800730d 	.word	0x0800730d
 80072b8:	08007321 	.word	0x08007321
 80072bc:	0800729d 	.word	0x0800729d
 80072c0:	0800729d 	.word	0x0800729d
 80072c4:	0800729d 	.word	0x0800729d
 80072c8:	0800729d 	.word	0x0800729d
 80072cc:	08007321 	.word	0x08007321
 80072d0:	0800729d 	.word	0x0800729d
 80072d4:	0800729d 	.word	0x0800729d
 80072d8:	0800729d 	.word	0x0800729d
 80072dc:	0800729d 	.word	0x0800729d
 80072e0:	08007423 	.word	0x08007423
 80072e4:	0800734b 	.word	0x0800734b
 80072e8:	080073dd 	.word	0x080073dd
 80072ec:	0800729d 	.word	0x0800729d
 80072f0:	0800729d 	.word	0x0800729d
 80072f4:	08007445 	.word	0x08007445
 80072f8:	0800729d 	.word	0x0800729d
 80072fc:	0800734b 	.word	0x0800734b
 8007300:	0800729d 	.word	0x0800729d
 8007304:	0800729d 	.word	0x0800729d
 8007308:	080073e5 	.word	0x080073e5
 800730c:	6833      	ldr	r3, [r6, #0]
 800730e:	1d1a      	adds	r2, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6032      	str	r2, [r6, #0]
 8007314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800731c:	2301      	movs	r3, #1
 800731e:	e09e      	b.n	800745e <_printf_i+0x1ea>
 8007320:	6833      	ldr	r3, [r6, #0]
 8007322:	6820      	ldr	r0, [r4, #0]
 8007324:	1d19      	adds	r1, r3, #4
 8007326:	6031      	str	r1, [r6, #0]
 8007328:	0606      	lsls	r6, r0, #24
 800732a:	d501      	bpl.n	8007330 <_printf_i+0xbc>
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	e003      	b.n	8007338 <_printf_i+0xc4>
 8007330:	0645      	lsls	r5, r0, #25
 8007332:	d5fb      	bpl.n	800732c <_printf_i+0xb8>
 8007334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007338:	2d00      	cmp	r5, #0
 800733a:	da03      	bge.n	8007344 <_printf_i+0xd0>
 800733c:	232d      	movs	r3, #45	@ 0x2d
 800733e:	426d      	negs	r5, r5
 8007340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007344:	230a      	movs	r3, #10
 8007346:	4859      	ldr	r0, [pc, #356]	@ (80074ac <_printf_i+0x238>)
 8007348:	e011      	b.n	800736e <_printf_i+0xfa>
 800734a:	6821      	ldr	r1, [r4, #0]
 800734c:	6833      	ldr	r3, [r6, #0]
 800734e:	0608      	lsls	r0, r1, #24
 8007350:	f853 5b04 	ldr.w	r5, [r3], #4
 8007354:	d402      	bmi.n	800735c <_printf_i+0xe8>
 8007356:	0649      	lsls	r1, r1, #25
 8007358:	bf48      	it	mi
 800735a:	b2ad      	uxthmi	r5, r5
 800735c:	2f6f      	cmp	r7, #111	@ 0x6f
 800735e:	6033      	str	r3, [r6, #0]
 8007360:	bf14      	ite	ne
 8007362:	230a      	movne	r3, #10
 8007364:	2308      	moveq	r3, #8
 8007366:	4851      	ldr	r0, [pc, #324]	@ (80074ac <_printf_i+0x238>)
 8007368:	2100      	movs	r1, #0
 800736a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800736e:	6866      	ldr	r6, [r4, #4]
 8007370:	2e00      	cmp	r6, #0
 8007372:	bfa8      	it	ge
 8007374:	6821      	ldrge	r1, [r4, #0]
 8007376:	60a6      	str	r6, [r4, #8]
 8007378:	bfa4      	itt	ge
 800737a:	f021 0104 	bicge.w	r1, r1, #4
 800737e:	6021      	strge	r1, [r4, #0]
 8007380:	b90d      	cbnz	r5, 8007386 <_printf_i+0x112>
 8007382:	2e00      	cmp	r6, #0
 8007384:	d04b      	beq.n	800741e <_printf_i+0x1aa>
 8007386:	4616      	mov	r6, r2
 8007388:	fbb5 f1f3 	udiv	r1, r5, r3
 800738c:	fb03 5711 	mls	r7, r3, r1, r5
 8007390:	5dc7      	ldrb	r7, [r0, r7]
 8007392:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007396:	462f      	mov	r7, r5
 8007398:	42bb      	cmp	r3, r7
 800739a:	460d      	mov	r5, r1
 800739c:	d9f4      	bls.n	8007388 <_printf_i+0x114>
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d10b      	bne.n	80073ba <_printf_i+0x146>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	07df      	lsls	r7, r3, #31
 80073a6:	d508      	bpl.n	80073ba <_printf_i+0x146>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	6861      	ldr	r1, [r4, #4]
 80073ac:	4299      	cmp	r1, r3
 80073ae:	bfde      	ittt	le
 80073b0:	2330      	movle	r3, #48	@ 0x30
 80073b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073ba:	1b92      	subs	r2, r2, r6
 80073bc:	6122      	str	r2, [r4, #16]
 80073be:	464b      	mov	r3, r9
 80073c0:	4621      	mov	r1, r4
 80073c2:	4640      	mov	r0, r8
 80073c4:	f8cd a000 	str.w	sl, [sp]
 80073c8:	aa03      	add	r2, sp, #12
 80073ca:	f7ff fee1 	bl	8007190 <_printf_common>
 80073ce:	3001      	adds	r0, #1
 80073d0:	d14a      	bne.n	8007468 <_printf_i+0x1f4>
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	b004      	add	sp, #16
 80073d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	f043 0320 	orr.w	r3, r3, #32
 80073e2:	6023      	str	r3, [r4, #0]
 80073e4:	2778      	movs	r7, #120	@ 0x78
 80073e6:	4832      	ldr	r0, [pc, #200]	@ (80074b0 <_printf_i+0x23c>)
 80073e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	6831      	ldr	r1, [r6, #0]
 80073f0:	061f      	lsls	r7, r3, #24
 80073f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80073f6:	d402      	bmi.n	80073fe <_printf_i+0x18a>
 80073f8:	065f      	lsls	r7, r3, #25
 80073fa:	bf48      	it	mi
 80073fc:	b2ad      	uxthmi	r5, r5
 80073fe:	6031      	str	r1, [r6, #0]
 8007400:	07d9      	lsls	r1, r3, #31
 8007402:	bf44      	itt	mi
 8007404:	f043 0320 	orrmi.w	r3, r3, #32
 8007408:	6023      	strmi	r3, [r4, #0]
 800740a:	b11d      	cbz	r5, 8007414 <_printf_i+0x1a0>
 800740c:	2310      	movs	r3, #16
 800740e:	e7ab      	b.n	8007368 <_printf_i+0xf4>
 8007410:	4826      	ldr	r0, [pc, #152]	@ (80074ac <_printf_i+0x238>)
 8007412:	e7e9      	b.n	80073e8 <_printf_i+0x174>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	f023 0320 	bic.w	r3, r3, #32
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	e7f6      	b.n	800740c <_printf_i+0x198>
 800741e:	4616      	mov	r6, r2
 8007420:	e7bd      	b.n	800739e <_printf_i+0x12a>
 8007422:	6833      	ldr	r3, [r6, #0]
 8007424:	6825      	ldr	r5, [r4, #0]
 8007426:	1d18      	adds	r0, r3, #4
 8007428:	6961      	ldr	r1, [r4, #20]
 800742a:	6030      	str	r0, [r6, #0]
 800742c:	062e      	lsls	r6, r5, #24
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	d501      	bpl.n	8007436 <_printf_i+0x1c2>
 8007432:	6019      	str	r1, [r3, #0]
 8007434:	e002      	b.n	800743c <_printf_i+0x1c8>
 8007436:	0668      	lsls	r0, r5, #25
 8007438:	d5fb      	bpl.n	8007432 <_printf_i+0x1be>
 800743a:	8019      	strh	r1, [r3, #0]
 800743c:	2300      	movs	r3, #0
 800743e:	4616      	mov	r6, r2
 8007440:	6123      	str	r3, [r4, #16]
 8007442:	e7bc      	b.n	80073be <_printf_i+0x14a>
 8007444:	6833      	ldr	r3, [r6, #0]
 8007446:	2100      	movs	r1, #0
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	6032      	str	r2, [r6, #0]
 800744c:	681e      	ldr	r6, [r3, #0]
 800744e:	6862      	ldr	r2, [r4, #4]
 8007450:	4630      	mov	r0, r6
 8007452:	f000 fc10 	bl	8007c76 <memchr>
 8007456:	b108      	cbz	r0, 800745c <_printf_i+0x1e8>
 8007458:	1b80      	subs	r0, r0, r6
 800745a:	6060      	str	r0, [r4, #4]
 800745c:	6863      	ldr	r3, [r4, #4]
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	2300      	movs	r3, #0
 8007462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007466:	e7aa      	b.n	80073be <_printf_i+0x14a>
 8007468:	4632      	mov	r2, r6
 800746a:	4649      	mov	r1, r9
 800746c:	4640      	mov	r0, r8
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	47d0      	blx	sl
 8007472:	3001      	adds	r0, #1
 8007474:	d0ad      	beq.n	80073d2 <_printf_i+0x15e>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	079b      	lsls	r3, r3, #30
 800747a:	d413      	bmi.n	80074a4 <_printf_i+0x230>
 800747c:	68e0      	ldr	r0, [r4, #12]
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	4298      	cmp	r0, r3
 8007482:	bfb8      	it	lt
 8007484:	4618      	movlt	r0, r3
 8007486:	e7a6      	b.n	80073d6 <_printf_i+0x162>
 8007488:	2301      	movs	r3, #1
 800748a:	4632      	mov	r2, r6
 800748c:	4649      	mov	r1, r9
 800748e:	4640      	mov	r0, r8
 8007490:	47d0      	blx	sl
 8007492:	3001      	adds	r0, #1
 8007494:	d09d      	beq.n	80073d2 <_printf_i+0x15e>
 8007496:	3501      	adds	r5, #1
 8007498:	68e3      	ldr	r3, [r4, #12]
 800749a:	9903      	ldr	r1, [sp, #12]
 800749c:	1a5b      	subs	r3, r3, r1
 800749e:	42ab      	cmp	r3, r5
 80074a0:	dcf2      	bgt.n	8007488 <_printf_i+0x214>
 80074a2:	e7eb      	b.n	800747c <_printf_i+0x208>
 80074a4:	2500      	movs	r5, #0
 80074a6:	f104 0619 	add.w	r6, r4, #25
 80074aa:	e7f5      	b.n	8007498 <_printf_i+0x224>
 80074ac:	0800bbf0 	.word	0x0800bbf0
 80074b0:	0800bc01 	.word	0x0800bc01

080074b4 <_scanf_float>:
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	b087      	sub	sp, #28
 80074ba:	9303      	str	r3, [sp, #12]
 80074bc:	688b      	ldr	r3, [r1, #8]
 80074be:	4617      	mov	r7, r2
 80074c0:	1e5a      	subs	r2, r3, #1
 80074c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80074c6:	bf82      	ittt	hi
 80074c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80074cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80074d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80074d4:	460a      	mov	r2, r1
 80074d6:	f04f 0500 	mov.w	r5, #0
 80074da:	bf88      	it	hi
 80074dc:	608b      	strhi	r3, [r1, #8]
 80074de:	680b      	ldr	r3, [r1, #0]
 80074e0:	4680      	mov	r8, r0
 80074e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80074e6:	f842 3b1c 	str.w	r3, [r2], #28
 80074ea:	460c      	mov	r4, r1
 80074ec:	bf98      	it	ls
 80074ee:	f04f 0b00 	movls.w	fp, #0
 80074f2:	4616      	mov	r6, r2
 80074f4:	46aa      	mov	sl, r5
 80074f6:	46a9      	mov	r9, r5
 80074f8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80074fc:	9201      	str	r2, [sp, #4]
 80074fe:	9502      	str	r5, [sp, #8]
 8007500:	68a2      	ldr	r2, [r4, #8]
 8007502:	b152      	cbz	r2, 800751a <_scanf_float+0x66>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b4e      	cmp	r3, #78	@ 0x4e
 800750a:	d865      	bhi.n	80075d8 <_scanf_float+0x124>
 800750c:	2b40      	cmp	r3, #64	@ 0x40
 800750e:	d83d      	bhi.n	800758c <_scanf_float+0xd8>
 8007510:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007514:	b2c8      	uxtb	r0, r1
 8007516:	280e      	cmp	r0, #14
 8007518:	d93b      	bls.n	8007592 <_scanf_float+0xde>
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	d003      	beq.n	8007528 <_scanf_float+0x74>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	f10a 3aff 	add.w	sl, sl, #4294967295
 800752c:	f1ba 0f01 	cmp.w	sl, #1
 8007530:	f200 8118 	bhi.w	8007764 <_scanf_float+0x2b0>
 8007534:	9b01      	ldr	r3, [sp, #4]
 8007536:	429e      	cmp	r6, r3
 8007538:	f200 8109 	bhi.w	800774e <_scanf_float+0x29a>
 800753c:	2001      	movs	r0, #1
 800753e:	b007      	add	sp, #28
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007548:	2a0d      	cmp	r2, #13
 800754a:	d8e6      	bhi.n	800751a <_scanf_float+0x66>
 800754c:	a101      	add	r1, pc, #4	@ (adr r1, 8007554 <_scanf_float+0xa0>)
 800754e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007552:	bf00      	nop
 8007554:	0800769b 	.word	0x0800769b
 8007558:	0800751b 	.word	0x0800751b
 800755c:	0800751b 	.word	0x0800751b
 8007560:	0800751b 	.word	0x0800751b
 8007564:	080076fb 	.word	0x080076fb
 8007568:	080076d3 	.word	0x080076d3
 800756c:	0800751b 	.word	0x0800751b
 8007570:	0800751b 	.word	0x0800751b
 8007574:	080076a9 	.word	0x080076a9
 8007578:	0800751b 	.word	0x0800751b
 800757c:	0800751b 	.word	0x0800751b
 8007580:	0800751b 	.word	0x0800751b
 8007584:	0800751b 	.word	0x0800751b
 8007588:	08007661 	.word	0x08007661
 800758c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007590:	e7da      	b.n	8007548 <_scanf_float+0x94>
 8007592:	290e      	cmp	r1, #14
 8007594:	d8c1      	bhi.n	800751a <_scanf_float+0x66>
 8007596:	a001      	add	r0, pc, #4	@ (adr r0, 800759c <_scanf_float+0xe8>)
 8007598:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800759c:	08007651 	.word	0x08007651
 80075a0:	0800751b 	.word	0x0800751b
 80075a4:	08007651 	.word	0x08007651
 80075a8:	080076e7 	.word	0x080076e7
 80075ac:	0800751b 	.word	0x0800751b
 80075b0:	080075f9 	.word	0x080075f9
 80075b4:	08007637 	.word	0x08007637
 80075b8:	08007637 	.word	0x08007637
 80075bc:	08007637 	.word	0x08007637
 80075c0:	08007637 	.word	0x08007637
 80075c4:	08007637 	.word	0x08007637
 80075c8:	08007637 	.word	0x08007637
 80075cc:	08007637 	.word	0x08007637
 80075d0:	08007637 	.word	0x08007637
 80075d4:	08007637 	.word	0x08007637
 80075d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80075da:	d809      	bhi.n	80075f0 <_scanf_float+0x13c>
 80075dc:	2b60      	cmp	r3, #96	@ 0x60
 80075de:	d8b1      	bhi.n	8007544 <_scanf_float+0x90>
 80075e0:	2b54      	cmp	r3, #84	@ 0x54
 80075e2:	d07b      	beq.n	80076dc <_scanf_float+0x228>
 80075e4:	2b59      	cmp	r3, #89	@ 0x59
 80075e6:	d198      	bne.n	800751a <_scanf_float+0x66>
 80075e8:	2d07      	cmp	r5, #7
 80075ea:	d196      	bne.n	800751a <_scanf_float+0x66>
 80075ec:	2508      	movs	r5, #8
 80075ee:	e02c      	b.n	800764a <_scanf_float+0x196>
 80075f0:	2b74      	cmp	r3, #116	@ 0x74
 80075f2:	d073      	beq.n	80076dc <_scanf_float+0x228>
 80075f4:	2b79      	cmp	r3, #121	@ 0x79
 80075f6:	e7f6      	b.n	80075e6 <_scanf_float+0x132>
 80075f8:	6821      	ldr	r1, [r4, #0]
 80075fa:	05c8      	lsls	r0, r1, #23
 80075fc:	d51b      	bpl.n	8007636 <_scanf_float+0x182>
 80075fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007602:	6021      	str	r1, [r4, #0]
 8007604:	f109 0901 	add.w	r9, r9, #1
 8007608:	f1bb 0f00 	cmp.w	fp, #0
 800760c:	d003      	beq.n	8007616 <_scanf_float+0x162>
 800760e:	3201      	adds	r2, #1
 8007610:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007614:	60a2      	str	r2, [r4, #8]
 8007616:	68a3      	ldr	r3, [r4, #8]
 8007618:	3b01      	subs	r3, #1
 800761a:	60a3      	str	r3, [r4, #8]
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	3301      	adds	r3, #1
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3b01      	subs	r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	607b      	str	r3, [r7, #4]
 800762a:	f340 8087 	ble.w	800773c <_scanf_float+0x288>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	3301      	adds	r3, #1
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	e764      	b.n	8007500 <_scanf_float+0x4c>
 8007636:	eb1a 0105 	adds.w	r1, sl, r5
 800763a:	f47f af6e 	bne.w	800751a <_scanf_float+0x66>
 800763e:	460d      	mov	r5, r1
 8007640:	468a      	mov	sl, r1
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007648:	6022      	str	r2, [r4, #0]
 800764a:	f806 3b01 	strb.w	r3, [r6], #1
 800764e:	e7e2      	b.n	8007616 <_scanf_float+0x162>
 8007650:	6822      	ldr	r2, [r4, #0]
 8007652:	0610      	lsls	r0, r2, #24
 8007654:	f57f af61 	bpl.w	800751a <_scanf_float+0x66>
 8007658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	e7f4      	b.n	800764a <_scanf_float+0x196>
 8007660:	f1ba 0f00 	cmp.w	sl, #0
 8007664:	d10e      	bne.n	8007684 <_scanf_float+0x1d0>
 8007666:	f1b9 0f00 	cmp.w	r9, #0
 800766a:	d10e      	bne.n	800768a <_scanf_float+0x1d6>
 800766c:	6822      	ldr	r2, [r4, #0]
 800766e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007672:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007676:	d108      	bne.n	800768a <_scanf_float+0x1d6>
 8007678:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800767c:	f04f 0a01 	mov.w	sl, #1
 8007680:	6022      	str	r2, [r4, #0]
 8007682:	e7e2      	b.n	800764a <_scanf_float+0x196>
 8007684:	f1ba 0f02 	cmp.w	sl, #2
 8007688:	d055      	beq.n	8007736 <_scanf_float+0x282>
 800768a:	2d01      	cmp	r5, #1
 800768c:	d002      	beq.n	8007694 <_scanf_float+0x1e0>
 800768e:	2d04      	cmp	r5, #4
 8007690:	f47f af43 	bne.w	800751a <_scanf_float+0x66>
 8007694:	3501      	adds	r5, #1
 8007696:	b2ed      	uxtb	r5, r5
 8007698:	e7d7      	b.n	800764a <_scanf_float+0x196>
 800769a:	f1ba 0f01 	cmp.w	sl, #1
 800769e:	f47f af3c 	bne.w	800751a <_scanf_float+0x66>
 80076a2:	f04f 0a02 	mov.w	sl, #2
 80076a6:	e7d0      	b.n	800764a <_scanf_float+0x196>
 80076a8:	b97d      	cbnz	r5, 80076ca <_scanf_float+0x216>
 80076aa:	f1b9 0f00 	cmp.w	r9, #0
 80076ae:	f47f af37 	bne.w	8007520 <_scanf_float+0x6c>
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80076b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80076bc:	f040 8103 	bne.w	80078c6 <_scanf_float+0x412>
 80076c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076c4:	2501      	movs	r5, #1
 80076c6:	6022      	str	r2, [r4, #0]
 80076c8:	e7bf      	b.n	800764a <_scanf_float+0x196>
 80076ca:	2d03      	cmp	r5, #3
 80076cc:	d0e2      	beq.n	8007694 <_scanf_float+0x1e0>
 80076ce:	2d05      	cmp	r5, #5
 80076d0:	e7de      	b.n	8007690 <_scanf_float+0x1dc>
 80076d2:	2d02      	cmp	r5, #2
 80076d4:	f47f af21 	bne.w	800751a <_scanf_float+0x66>
 80076d8:	2503      	movs	r5, #3
 80076da:	e7b6      	b.n	800764a <_scanf_float+0x196>
 80076dc:	2d06      	cmp	r5, #6
 80076de:	f47f af1c 	bne.w	800751a <_scanf_float+0x66>
 80076e2:	2507      	movs	r5, #7
 80076e4:	e7b1      	b.n	800764a <_scanf_float+0x196>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	0591      	lsls	r1, r2, #22
 80076ea:	f57f af16 	bpl.w	800751a <_scanf_float+0x66>
 80076ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80076f2:	6022      	str	r2, [r4, #0]
 80076f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80076f8:	e7a7      	b.n	800764a <_scanf_float+0x196>
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007700:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007704:	d006      	beq.n	8007714 <_scanf_float+0x260>
 8007706:	0550      	lsls	r0, r2, #21
 8007708:	f57f af07 	bpl.w	800751a <_scanf_float+0x66>
 800770c:	f1b9 0f00 	cmp.w	r9, #0
 8007710:	f000 80d9 	beq.w	80078c6 <_scanf_float+0x412>
 8007714:	0591      	lsls	r1, r2, #22
 8007716:	bf58      	it	pl
 8007718:	9902      	ldrpl	r1, [sp, #8]
 800771a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800771e:	bf58      	it	pl
 8007720:	eba9 0101 	subpl.w	r1, r9, r1
 8007724:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007728:	f04f 0900 	mov.w	r9, #0
 800772c:	bf58      	it	pl
 800772e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	e789      	b.n	800764a <_scanf_float+0x196>
 8007736:	f04f 0a03 	mov.w	sl, #3
 800773a:	e786      	b.n	800764a <_scanf_float+0x196>
 800773c:	4639      	mov	r1, r7
 800773e:	4640      	mov	r0, r8
 8007740:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007744:	4798      	blx	r3
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f aeda 	beq.w	8007500 <_scanf_float+0x4c>
 800774c:	e6e5      	b.n	800751a <_scanf_float+0x66>
 800774e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007752:	463a      	mov	r2, r7
 8007754:	4640      	mov	r0, r8
 8007756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800775a:	4798      	blx	r3
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	3b01      	subs	r3, #1
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	e6e7      	b.n	8007534 <_scanf_float+0x80>
 8007764:	1e6b      	subs	r3, r5, #1
 8007766:	2b06      	cmp	r3, #6
 8007768:	d824      	bhi.n	80077b4 <_scanf_float+0x300>
 800776a:	2d02      	cmp	r5, #2
 800776c:	d836      	bhi.n	80077dc <_scanf_float+0x328>
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	429e      	cmp	r6, r3
 8007772:	f67f aee3 	bls.w	800753c <_scanf_float+0x88>
 8007776:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800777a:	463a      	mov	r2, r7
 800777c:	4640      	mov	r0, r8
 800777e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007782:	4798      	blx	r3
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	3b01      	subs	r3, #1
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	e7f0      	b.n	800776e <_scanf_float+0x2ba>
 800778c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007790:	463a      	mov	r2, r7
 8007792:	4640      	mov	r0, r8
 8007794:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007798:	4798      	blx	r3
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	3b01      	subs	r3, #1
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077a4:	fa5f fa8a 	uxtb.w	sl, sl
 80077a8:	f1ba 0f02 	cmp.w	sl, #2
 80077ac:	d1ee      	bne.n	800778c <_scanf_float+0x2d8>
 80077ae:	3d03      	subs	r5, #3
 80077b0:	b2ed      	uxtb	r5, r5
 80077b2:	1b76      	subs	r6, r6, r5
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	05da      	lsls	r2, r3, #23
 80077b8:	d530      	bpl.n	800781c <_scanf_float+0x368>
 80077ba:	055b      	lsls	r3, r3, #21
 80077bc:	d511      	bpl.n	80077e2 <_scanf_float+0x32e>
 80077be:	9b01      	ldr	r3, [sp, #4]
 80077c0:	429e      	cmp	r6, r3
 80077c2:	f67f aebb 	bls.w	800753c <_scanf_float+0x88>
 80077c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077ca:	463a      	mov	r2, r7
 80077cc:	4640      	mov	r0, r8
 80077ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077d2:	4798      	blx	r3
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	e7f0      	b.n	80077be <_scanf_float+0x30a>
 80077dc:	46aa      	mov	sl, r5
 80077de:	46b3      	mov	fp, r6
 80077e0:	e7de      	b.n	80077a0 <_scanf_float+0x2ec>
 80077e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80077e6:	6923      	ldr	r3, [r4, #16]
 80077e8:	2965      	cmp	r1, #101	@ 0x65
 80077ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80077ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80077f2:	6123      	str	r3, [r4, #16]
 80077f4:	d00c      	beq.n	8007810 <_scanf_float+0x35c>
 80077f6:	2945      	cmp	r1, #69	@ 0x45
 80077f8:	d00a      	beq.n	8007810 <_scanf_float+0x35c>
 80077fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077fe:	463a      	mov	r2, r7
 8007800:	4640      	mov	r0, r8
 8007802:	4798      	blx	r3
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800780a:	3b01      	subs	r3, #1
 800780c:	1eb5      	subs	r5, r6, #2
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	463a      	mov	r2, r7
 8007812:	4640      	mov	r0, r8
 8007814:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007818:	4798      	blx	r3
 800781a:	462e      	mov	r6, r5
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	f012 0210 	ands.w	r2, r2, #16
 8007822:	d001      	beq.n	8007828 <_scanf_float+0x374>
 8007824:	2000      	movs	r0, #0
 8007826:	e68a      	b.n	800753e <_scanf_float+0x8a>
 8007828:	7032      	strb	r2, [r6, #0]
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007834:	d11c      	bne.n	8007870 <_scanf_float+0x3bc>
 8007836:	9b02      	ldr	r3, [sp, #8]
 8007838:	454b      	cmp	r3, r9
 800783a:	eba3 0209 	sub.w	r2, r3, r9
 800783e:	d123      	bne.n	8007888 <_scanf_float+0x3d4>
 8007840:	2200      	movs	r2, #0
 8007842:	4640      	mov	r0, r8
 8007844:	9901      	ldr	r1, [sp, #4]
 8007846:	f002 fc27 	bl	800a098 <_strtod_r>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	6825      	ldr	r5, [r4, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f015 0f02 	tst.w	r5, #2
 8007854:	4606      	mov	r6, r0
 8007856:	460f      	mov	r7, r1
 8007858:	f103 0204 	add.w	r2, r3, #4
 800785c:	d01f      	beq.n	800789e <_scanf_float+0x3ea>
 800785e:	9903      	ldr	r1, [sp, #12]
 8007860:	600a      	str	r2, [r1, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	e9c3 6700 	strd	r6, r7, [r3]
 8007868:	68e3      	ldr	r3, [r4, #12]
 800786a:	3301      	adds	r3, #1
 800786c:	60e3      	str	r3, [r4, #12]
 800786e:	e7d9      	b.n	8007824 <_scanf_float+0x370>
 8007870:	9b04      	ldr	r3, [sp, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0e4      	beq.n	8007840 <_scanf_float+0x38c>
 8007876:	9905      	ldr	r1, [sp, #20]
 8007878:	230a      	movs	r3, #10
 800787a:	4640      	mov	r0, r8
 800787c:	3101      	adds	r1, #1
 800787e:	f002 fc8b 	bl	800a198 <_strtol_r>
 8007882:	9b04      	ldr	r3, [sp, #16]
 8007884:	9e05      	ldr	r6, [sp, #20]
 8007886:	1ac2      	subs	r2, r0, r3
 8007888:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800788c:	429e      	cmp	r6, r3
 800788e:	bf28      	it	cs
 8007890:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007894:	4630      	mov	r0, r6
 8007896:	490d      	ldr	r1, [pc, #52]	@ (80078cc <_scanf_float+0x418>)
 8007898:	f000 f8f0 	bl	8007a7c <siprintf>
 800789c:	e7d0      	b.n	8007840 <_scanf_float+0x38c>
 800789e:	076d      	lsls	r5, r5, #29
 80078a0:	d4dd      	bmi.n	800785e <_scanf_float+0x3aa>
 80078a2:	9d03      	ldr	r5, [sp, #12]
 80078a4:	602a      	str	r2, [r5, #0]
 80078a6:	681d      	ldr	r5, [r3, #0]
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	f7f9 f8ae 	bl	8000a0c <__aeabi_dcmpun>
 80078b0:	b120      	cbz	r0, 80078bc <_scanf_float+0x408>
 80078b2:	4807      	ldr	r0, [pc, #28]	@ (80078d0 <_scanf_float+0x41c>)
 80078b4:	f000 f9fc 	bl	8007cb0 <nanf>
 80078b8:	6028      	str	r0, [r5, #0]
 80078ba:	e7d5      	b.n	8007868 <_scanf_float+0x3b4>
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f7f9 f902 	bl	8000ac8 <__aeabi_d2f>
 80078c4:	e7f8      	b.n	80078b8 <_scanf_float+0x404>
 80078c6:	f04f 0900 	mov.w	r9, #0
 80078ca:	e62d      	b.n	8007528 <_scanf_float+0x74>
 80078cc:	0800bc12 	.word	0x0800bc12
 80078d0:	0800bfad 	.word	0x0800bfad

080078d4 <std>:
 80078d4:	2300      	movs	r3, #0
 80078d6:	b510      	push	{r4, lr}
 80078d8:	4604      	mov	r4, r0
 80078da:	e9c0 3300 	strd	r3, r3, [r0]
 80078de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078e2:	6083      	str	r3, [r0, #8]
 80078e4:	8181      	strh	r1, [r0, #12]
 80078e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80078e8:	81c2      	strh	r2, [r0, #14]
 80078ea:	6183      	str	r3, [r0, #24]
 80078ec:	4619      	mov	r1, r3
 80078ee:	2208      	movs	r2, #8
 80078f0:	305c      	adds	r0, #92	@ 0x5c
 80078f2:	f000 f940 	bl	8007b76 <memset>
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <std+0x58>)
 80078f8:	6224      	str	r4, [r4, #32]
 80078fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80078fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007930 <std+0x5c>)
 80078fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007900:	4b0c      	ldr	r3, [pc, #48]	@ (8007934 <std+0x60>)
 8007902:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007904:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <std+0x64>)
 8007906:	6323      	str	r3, [r4, #48]	@ 0x30
 8007908:	4b0c      	ldr	r3, [pc, #48]	@ (800793c <std+0x68>)
 800790a:	429c      	cmp	r4, r3
 800790c:	d006      	beq.n	800791c <std+0x48>
 800790e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007912:	4294      	cmp	r4, r2
 8007914:	d002      	beq.n	800791c <std+0x48>
 8007916:	33d0      	adds	r3, #208	@ 0xd0
 8007918:	429c      	cmp	r4, r3
 800791a:	d105      	bne.n	8007928 <std+0x54>
 800791c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007924:	f000 b9a4 	b.w	8007c70 <__retarget_lock_init_recursive>
 8007928:	bd10      	pop	{r4, pc}
 800792a:	bf00      	nop
 800792c:	08007abd 	.word	0x08007abd
 8007930:	08007adf 	.word	0x08007adf
 8007934:	08007b17 	.word	0x08007b17
 8007938:	08007b3b 	.word	0x08007b3b
 800793c:	20000778 	.word	0x20000778

08007940 <stdio_exit_handler>:
 8007940:	4a02      	ldr	r2, [pc, #8]	@ (800794c <stdio_exit_handler+0xc>)
 8007942:	4903      	ldr	r1, [pc, #12]	@ (8007950 <stdio_exit_handler+0x10>)
 8007944:	4803      	ldr	r0, [pc, #12]	@ (8007954 <stdio_exit_handler+0x14>)
 8007946:	f000 b869 	b.w	8007a1c <_fwalk_sglue>
 800794a:	bf00      	nop
 800794c:	20000020 	.word	0x20000020
 8007950:	0800a7cd 	.word	0x0800a7cd
 8007954:	20000030 	.word	0x20000030

08007958 <cleanup_stdio>:
 8007958:	6841      	ldr	r1, [r0, #4]
 800795a:	4b0c      	ldr	r3, [pc, #48]	@ (800798c <cleanup_stdio+0x34>)
 800795c:	b510      	push	{r4, lr}
 800795e:	4299      	cmp	r1, r3
 8007960:	4604      	mov	r4, r0
 8007962:	d001      	beq.n	8007968 <cleanup_stdio+0x10>
 8007964:	f002 ff32 	bl	800a7cc <_fflush_r>
 8007968:	68a1      	ldr	r1, [r4, #8]
 800796a:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <cleanup_stdio+0x38>)
 800796c:	4299      	cmp	r1, r3
 800796e:	d002      	beq.n	8007976 <cleanup_stdio+0x1e>
 8007970:	4620      	mov	r0, r4
 8007972:	f002 ff2b 	bl	800a7cc <_fflush_r>
 8007976:	68e1      	ldr	r1, [r4, #12]
 8007978:	4b06      	ldr	r3, [pc, #24]	@ (8007994 <cleanup_stdio+0x3c>)
 800797a:	4299      	cmp	r1, r3
 800797c:	d004      	beq.n	8007988 <cleanup_stdio+0x30>
 800797e:	4620      	mov	r0, r4
 8007980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007984:	f002 bf22 	b.w	800a7cc <_fflush_r>
 8007988:	bd10      	pop	{r4, pc}
 800798a:	bf00      	nop
 800798c:	20000778 	.word	0x20000778
 8007990:	200007e0 	.word	0x200007e0
 8007994:	20000848 	.word	0x20000848

08007998 <global_stdio_init.part.0>:
 8007998:	b510      	push	{r4, lr}
 800799a:	4b0b      	ldr	r3, [pc, #44]	@ (80079c8 <global_stdio_init.part.0+0x30>)
 800799c:	4c0b      	ldr	r4, [pc, #44]	@ (80079cc <global_stdio_init.part.0+0x34>)
 800799e:	4a0c      	ldr	r2, [pc, #48]	@ (80079d0 <global_stdio_init.part.0+0x38>)
 80079a0:	4620      	mov	r0, r4
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	2104      	movs	r1, #4
 80079a6:	2200      	movs	r2, #0
 80079a8:	f7ff ff94 	bl	80078d4 <std>
 80079ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079b0:	2201      	movs	r2, #1
 80079b2:	2109      	movs	r1, #9
 80079b4:	f7ff ff8e 	bl	80078d4 <std>
 80079b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079bc:	2202      	movs	r2, #2
 80079be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c2:	2112      	movs	r1, #18
 80079c4:	f7ff bf86 	b.w	80078d4 <std>
 80079c8:	200008b0 	.word	0x200008b0
 80079cc:	20000778 	.word	0x20000778
 80079d0:	08007941 	.word	0x08007941

080079d4 <__sfp_lock_acquire>:
 80079d4:	4801      	ldr	r0, [pc, #4]	@ (80079dc <__sfp_lock_acquire+0x8>)
 80079d6:	f000 b94c 	b.w	8007c72 <__retarget_lock_acquire_recursive>
 80079da:	bf00      	nop
 80079dc:	200008b9 	.word	0x200008b9

080079e0 <__sfp_lock_release>:
 80079e0:	4801      	ldr	r0, [pc, #4]	@ (80079e8 <__sfp_lock_release+0x8>)
 80079e2:	f000 b947 	b.w	8007c74 <__retarget_lock_release_recursive>
 80079e6:	bf00      	nop
 80079e8:	200008b9 	.word	0x200008b9

080079ec <__sinit>:
 80079ec:	b510      	push	{r4, lr}
 80079ee:	4604      	mov	r4, r0
 80079f0:	f7ff fff0 	bl	80079d4 <__sfp_lock_acquire>
 80079f4:	6a23      	ldr	r3, [r4, #32]
 80079f6:	b11b      	cbz	r3, 8007a00 <__sinit+0x14>
 80079f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fc:	f7ff bff0 	b.w	80079e0 <__sfp_lock_release>
 8007a00:	4b04      	ldr	r3, [pc, #16]	@ (8007a14 <__sinit+0x28>)
 8007a02:	6223      	str	r3, [r4, #32]
 8007a04:	4b04      	ldr	r3, [pc, #16]	@ (8007a18 <__sinit+0x2c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f5      	bne.n	80079f8 <__sinit+0xc>
 8007a0c:	f7ff ffc4 	bl	8007998 <global_stdio_init.part.0>
 8007a10:	e7f2      	b.n	80079f8 <__sinit+0xc>
 8007a12:	bf00      	nop
 8007a14:	08007959 	.word	0x08007959
 8007a18:	200008b0 	.word	0x200008b0

08007a1c <_fwalk_sglue>:
 8007a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a20:	4607      	mov	r7, r0
 8007a22:	4688      	mov	r8, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	2600      	movs	r6, #0
 8007a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007a30:	d505      	bpl.n	8007a3e <_fwalk_sglue+0x22>
 8007a32:	6824      	ldr	r4, [r4, #0]
 8007a34:	2c00      	cmp	r4, #0
 8007a36:	d1f7      	bne.n	8007a28 <_fwalk_sglue+0xc>
 8007a38:	4630      	mov	r0, r6
 8007a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d907      	bls.n	8007a54 <_fwalk_sglue+0x38>
 8007a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	d003      	beq.n	8007a54 <_fwalk_sglue+0x38>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4638      	mov	r0, r7
 8007a50:	47c0      	blx	r8
 8007a52:	4306      	orrs	r6, r0
 8007a54:	3568      	adds	r5, #104	@ 0x68
 8007a56:	e7e9      	b.n	8007a2c <_fwalk_sglue+0x10>

08007a58 <iprintf>:
 8007a58:	b40f      	push	{r0, r1, r2, r3}
 8007a5a:	b507      	push	{r0, r1, r2, lr}
 8007a5c:	4906      	ldr	r1, [pc, #24]	@ (8007a78 <iprintf+0x20>)
 8007a5e:	ab04      	add	r3, sp, #16
 8007a60:	6808      	ldr	r0, [r1, #0]
 8007a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a66:	6881      	ldr	r1, [r0, #8]
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	f002 fd17 	bl	800a49c <_vfiprintf_r>
 8007a6e:	b003      	add	sp, #12
 8007a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a74:	b004      	add	sp, #16
 8007a76:	4770      	bx	lr
 8007a78:	2000002c 	.word	0x2000002c

08007a7c <siprintf>:
 8007a7c:	b40e      	push	{r1, r2, r3}
 8007a7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a82:	b500      	push	{lr}
 8007a84:	b09c      	sub	sp, #112	@ 0x70
 8007a86:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a88:	9002      	str	r0, [sp, #8]
 8007a8a:	9006      	str	r0, [sp, #24]
 8007a8c:	9107      	str	r1, [sp, #28]
 8007a8e:	9104      	str	r1, [sp, #16]
 8007a90:	4808      	ldr	r0, [pc, #32]	@ (8007ab4 <siprintf+0x38>)
 8007a92:	4909      	ldr	r1, [pc, #36]	@ (8007ab8 <siprintf+0x3c>)
 8007a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a98:	9105      	str	r1, [sp, #20]
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	a902      	add	r1, sp, #8
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	f002 fbd8 	bl	800a254 <_svfiprintf_r>
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	9b02      	ldr	r3, [sp, #8]
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	b01c      	add	sp, #112	@ 0x70
 8007aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ab0:	b003      	add	sp, #12
 8007ab2:	4770      	bx	lr
 8007ab4:	2000002c 	.word	0x2000002c
 8007ab8:	ffff0208 	.word	0xffff0208

08007abc <__sread>:
 8007abc:	b510      	push	{r4, lr}
 8007abe:	460c      	mov	r4, r1
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	f000 f886 	bl	8007bd4 <_read_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	bfab      	itete	ge
 8007acc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ace:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad0:	181b      	addge	r3, r3, r0
 8007ad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ad6:	bfac      	ite	ge
 8007ad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ada:	81a3      	strhlt	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__swrite>:
 8007ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	461f      	mov	r7, r3
 8007ae4:	898b      	ldrh	r3, [r1, #12]
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	05db      	lsls	r3, r3, #23
 8007aea:	460c      	mov	r4, r1
 8007aec:	4616      	mov	r6, r2
 8007aee:	d505      	bpl.n	8007afc <__swrite+0x1e>
 8007af0:	2302      	movs	r3, #2
 8007af2:	2200      	movs	r2, #0
 8007af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af8:	f000 f85a 	bl	8007bb0 <_lseek_r>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	4632      	mov	r2, r6
 8007b00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	4628      	mov	r0, r5
 8007b08:	463b      	mov	r3, r7
 8007b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	f000 b871 	b.w	8007bf8 <_write_r>

08007b16 <__sseek>:
 8007b16:	b510      	push	{r4, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1e:	f000 f847 	bl	8007bb0 <_lseek_r>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	bf15      	itete	ne
 8007b28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b32:	81a3      	strheq	r3, [r4, #12]
 8007b34:	bf18      	it	ne
 8007b36:	81a3      	strhne	r3, [r4, #12]
 8007b38:	bd10      	pop	{r4, pc}

08007b3a <__sclose>:
 8007b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3e:	f000 b827 	b.w	8007b90 <_close_r>

08007b42 <memmove>:
 8007b42:	4288      	cmp	r0, r1
 8007b44:	b510      	push	{r4, lr}
 8007b46:	eb01 0402 	add.w	r4, r1, r2
 8007b4a:	d902      	bls.n	8007b52 <memmove+0x10>
 8007b4c:	4284      	cmp	r4, r0
 8007b4e:	4623      	mov	r3, r4
 8007b50:	d807      	bhi.n	8007b62 <memmove+0x20>
 8007b52:	1e43      	subs	r3, r0, #1
 8007b54:	42a1      	cmp	r1, r4
 8007b56:	d008      	beq.n	8007b6a <memmove+0x28>
 8007b58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b60:	e7f8      	b.n	8007b54 <memmove+0x12>
 8007b62:	4601      	mov	r1, r0
 8007b64:	4402      	add	r2, r0
 8007b66:	428a      	cmp	r2, r1
 8007b68:	d100      	bne.n	8007b6c <memmove+0x2a>
 8007b6a:	bd10      	pop	{r4, pc}
 8007b6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b74:	e7f7      	b.n	8007b66 <memmove+0x24>

08007b76 <memset>:
 8007b76:	4603      	mov	r3, r0
 8007b78:	4402      	add	r2, r0
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d100      	bne.n	8007b80 <memset+0xa>
 8007b7e:	4770      	bx	lr
 8007b80:	f803 1b01 	strb.w	r1, [r3], #1
 8007b84:	e7f9      	b.n	8007b7a <memset+0x4>
	...

08007b88 <_localeconv_r>:
 8007b88:	4800      	ldr	r0, [pc, #0]	@ (8007b8c <_localeconv_r+0x4>)
 8007b8a:	4770      	bx	lr
 8007b8c:	2000016c 	.word	0x2000016c

08007b90 <_close_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	2300      	movs	r3, #0
 8007b94:	4d05      	ldr	r5, [pc, #20]	@ (8007bac <_close_r+0x1c>)
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	f7fa fdc9 	bl	8002732 <_close>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_close_r+0x1a>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_close_r+0x1a>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	200008b4 	.word	0x200008b4

08007bb0 <_lseek_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4d05      	ldr	r5, [pc, #20]	@ (8007bd0 <_lseek_r+0x20>)
 8007bbc:	602a      	str	r2, [r5, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f7fa fddb 	bl	800277a <_lseek>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_lseek_r+0x1e>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_lseek_r+0x1e>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	200008b4 	.word	0x200008b4

08007bd4 <_read_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	4611      	mov	r1, r2
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4d05      	ldr	r5, [pc, #20]	@ (8007bf4 <_read_r+0x20>)
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7fa fd6c 	bl	80026c0 <_read>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_read_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_read_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	200008b4 	.word	0x200008b4

08007bf8 <_write_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	2200      	movs	r2, #0
 8007c02:	4d05      	ldr	r5, [pc, #20]	@ (8007c18 <_write_r+0x20>)
 8007c04:	602a      	str	r2, [r5, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7fa fd77 	bl	80026fa <_write>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_write_r+0x1e>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_write_r+0x1e>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	200008b4 	.word	0x200008b4

08007c1c <__errno>:
 8007c1c:	4b01      	ldr	r3, [pc, #4]	@ (8007c24 <__errno+0x8>)
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	2000002c 	.word	0x2000002c

08007c28 <__libc_init_array>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	2600      	movs	r6, #0
 8007c2c:	4d0c      	ldr	r5, [pc, #48]	@ (8007c60 <__libc_init_array+0x38>)
 8007c2e:	4c0d      	ldr	r4, [pc, #52]	@ (8007c64 <__libc_init_array+0x3c>)
 8007c30:	1b64      	subs	r4, r4, r5
 8007c32:	10a4      	asrs	r4, r4, #2
 8007c34:	42a6      	cmp	r6, r4
 8007c36:	d109      	bne.n	8007c4c <__libc_init_array+0x24>
 8007c38:	f003 fb4e 	bl	800b2d8 <_init>
 8007c3c:	2600      	movs	r6, #0
 8007c3e:	4d0a      	ldr	r5, [pc, #40]	@ (8007c68 <__libc_init_array+0x40>)
 8007c40:	4c0a      	ldr	r4, [pc, #40]	@ (8007c6c <__libc_init_array+0x44>)
 8007c42:	1b64      	subs	r4, r4, r5
 8007c44:	10a4      	asrs	r4, r4, #2
 8007c46:	42a6      	cmp	r6, r4
 8007c48:	d105      	bne.n	8007c56 <__libc_init_array+0x2e>
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c50:	4798      	blx	r3
 8007c52:	3601      	adds	r6, #1
 8007c54:	e7ee      	b.n	8007c34 <__libc_init_array+0xc>
 8007c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5a:	4798      	blx	r3
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	e7f2      	b.n	8007c46 <__libc_init_array+0x1e>
 8007c60:	0800c018 	.word	0x0800c018
 8007c64:	0800c018 	.word	0x0800c018
 8007c68:	0800c018 	.word	0x0800c018
 8007c6c:	0800c01c 	.word	0x0800c01c

08007c70 <__retarget_lock_init_recursive>:
 8007c70:	4770      	bx	lr

08007c72 <__retarget_lock_acquire_recursive>:
 8007c72:	4770      	bx	lr

08007c74 <__retarget_lock_release_recursive>:
 8007c74:	4770      	bx	lr

08007c76 <memchr>:
 8007c76:	4603      	mov	r3, r0
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	b2c9      	uxtb	r1, r1
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	d101      	bne.n	8007c88 <memchr+0x12>
 8007c84:	2000      	movs	r0, #0
 8007c86:	e003      	b.n	8007c90 <memchr+0x1a>
 8007c88:	7804      	ldrb	r4, [r0, #0]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	428c      	cmp	r4, r1
 8007c8e:	d1f6      	bne.n	8007c7e <memchr+0x8>
 8007c90:	bd10      	pop	{r4, pc}

08007c92 <memcpy>:
 8007c92:	440a      	add	r2, r1
 8007c94:	4291      	cmp	r1, r2
 8007c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c9a:	d100      	bne.n	8007c9e <memcpy+0xc>
 8007c9c:	4770      	bx	lr
 8007c9e:	b510      	push	{r4, lr}
 8007ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca4:	4291      	cmp	r1, r2
 8007ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007caa:	d1f9      	bne.n	8007ca0 <memcpy+0xe>
 8007cac:	bd10      	pop	{r4, pc}
	...

08007cb0 <nanf>:
 8007cb0:	4800      	ldr	r0, [pc, #0]	@ (8007cb4 <nanf+0x4>)
 8007cb2:	4770      	bx	lr
 8007cb4:	7fc00000 	.word	0x7fc00000

08007cb8 <quorem>:
 8007cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	6903      	ldr	r3, [r0, #16]
 8007cbe:	690c      	ldr	r4, [r1, #16]
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	db7e      	blt.n	8007dc4 <quorem+0x10c>
 8007cc6:	3c01      	subs	r4, #1
 8007cc8:	00a3      	lsls	r3, r4, #2
 8007cca:	f100 0514 	add.w	r5, r0, #20
 8007cce:	f101 0814 	add.w	r8, r1, #20
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cee:	d32e      	bcc.n	8007d4e <quorem+0x96>
 8007cf0:	f04f 0a00 	mov.w	sl, #0
 8007cf4:	46c4      	mov	ip, r8
 8007cf6:	46ae      	mov	lr, r5
 8007cf8:	46d3      	mov	fp, sl
 8007cfa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cfe:	b298      	uxth	r0, r3
 8007d00:	fb06 a000 	mla	r0, r6, r0, sl
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	0c02      	lsrs	r2, r0, #16
 8007d08:	fb06 2303 	mla	r3, r6, r3, r2
 8007d0c:	f8de 2000 	ldr.w	r2, [lr]
 8007d10:	b280      	uxth	r0, r0
 8007d12:	b292      	uxth	r2, r2
 8007d14:	1a12      	subs	r2, r2, r0
 8007d16:	445a      	add	r2, fp
 8007d18:	f8de 0000 	ldr.w	r0, [lr]
 8007d1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d2a:	b292      	uxth	r2, r2
 8007d2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d30:	45e1      	cmp	r9, ip
 8007d32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d36:	f84e 2b04 	str.w	r2, [lr], #4
 8007d3a:	d2de      	bcs.n	8007cfa <quorem+0x42>
 8007d3c:	9b00      	ldr	r3, [sp, #0]
 8007d3e:	58eb      	ldr	r3, [r5, r3]
 8007d40:	b92b      	cbnz	r3, 8007d4e <quorem+0x96>
 8007d42:	9b01      	ldr	r3, [sp, #4]
 8007d44:	3b04      	subs	r3, #4
 8007d46:	429d      	cmp	r5, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	d32f      	bcc.n	8007dac <quorem+0xf4>
 8007d4c:	613c      	str	r4, [r7, #16]
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f001 f9c2 	bl	80090d8 <__mcmp>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	db25      	blt.n	8007da4 <quorem+0xec>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d60:	f8d1 c000 	ldr.w	ip, [r1]
 8007d64:	fa1f fe82 	uxth.w	lr, r2
 8007d68:	fa1f f38c 	uxth.w	r3, ip
 8007d6c:	eba3 030e 	sub.w	r3, r3, lr
 8007d70:	4403      	add	r3, r0
 8007d72:	0c12      	lsrs	r2, r2, #16
 8007d74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d82:	45c1      	cmp	r9, r8
 8007d84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d88:	f841 3b04 	str.w	r3, [r1], #4
 8007d8c:	d2e6      	bcs.n	8007d5c <quorem+0xa4>
 8007d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d96:	b922      	cbnz	r2, 8007da2 <quorem+0xea>
 8007d98:	3b04      	subs	r3, #4
 8007d9a:	429d      	cmp	r5, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	d30b      	bcc.n	8007db8 <quorem+0x100>
 8007da0:	613c      	str	r4, [r7, #16]
 8007da2:	3601      	adds	r6, #1
 8007da4:	4630      	mov	r0, r6
 8007da6:	b003      	add	sp, #12
 8007da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	3b04      	subs	r3, #4
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d1cb      	bne.n	8007d4c <quorem+0x94>
 8007db4:	3c01      	subs	r4, #1
 8007db6:	e7c6      	b.n	8007d46 <quorem+0x8e>
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	3b04      	subs	r3, #4
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	d1ef      	bne.n	8007da0 <quorem+0xe8>
 8007dc0:	3c01      	subs	r4, #1
 8007dc2:	e7ea      	b.n	8007d9a <quorem+0xe2>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	e7ee      	b.n	8007da6 <quorem+0xee>

08007dc8 <_dtoa_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4614      	mov	r4, r2
 8007dce:	461d      	mov	r5, r3
 8007dd0:	69c7      	ldr	r7, [r0, #28]
 8007dd2:	b097      	sub	sp, #92	@ 0x5c
 8007dd4:	4683      	mov	fp, r0
 8007dd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007dda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007ddc:	b97f      	cbnz	r7, 8007dfe <_dtoa_r+0x36>
 8007dde:	2010      	movs	r0, #16
 8007de0:	f000 fe02 	bl	80089e8 <malloc>
 8007de4:	4602      	mov	r2, r0
 8007de6:	f8cb 001c 	str.w	r0, [fp, #28]
 8007dea:	b920      	cbnz	r0, 8007df6 <_dtoa_r+0x2e>
 8007dec:	21ef      	movs	r1, #239	@ 0xef
 8007dee:	4ba8      	ldr	r3, [pc, #672]	@ (8008090 <_dtoa_r+0x2c8>)
 8007df0:	48a8      	ldr	r0, [pc, #672]	@ (8008094 <_dtoa_r+0x2cc>)
 8007df2:	f002 fdcf 	bl	800a994 <__assert_func>
 8007df6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007dfa:	6007      	str	r7, [r0, #0]
 8007dfc:	60c7      	str	r7, [r0, #12]
 8007dfe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e02:	6819      	ldr	r1, [r3, #0]
 8007e04:	b159      	cbz	r1, 8007e1e <_dtoa_r+0x56>
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4093      	lsls	r3, r2
 8007e0c:	604a      	str	r2, [r1, #4]
 8007e0e:	608b      	str	r3, [r1, #8]
 8007e10:	4658      	mov	r0, fp
 8007e12:	f000 fedf 	bl	8008bd4 <_Bfree>
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	1e2b      	subs	r3, r5, #0
 8007e20:	bfaf      	iteee	ge
 8007e22:	2300      	movge	r3, #0
 8007e24:	2201      	movlt	r2, #1
 8007e26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e2a:	9303      	strlt	r3, [sp, #12]
 8007e2c:	bfa8      	it	ge
 8007e2e:	6033      	strge	r3, [r6, #0]
 8007e30:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007e34:	4b98      	ldr	r3, [pc, #608]	@ (8008098 <_dtoa_r+0x2d0>)
 8007e36:	bfb8      	it	lt
 8007e38:	6032      	strlt	r2, [r6, #0]
 8007e3a:	ea33 0308 	bics.w	r3, r3, r8
 8007e3e:	d112      	bne.n	8007e66 <_dtoa_r+0x9e>
 8007e40:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007e4c:	4323      	orrs	r3, r4
 8007e4e:	f000 8550 	beq.w	80088f2 <_dtoa_r+0xb2a>
 8007e52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e54:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800809c <_dtoa_r+0x2d4>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 8552 	beq.w	8008902 <_dtoa_r+0xb3a>
 8007e5e:	f10a 0303 	add.w	r3, sl, #3
 8007e62:	f000 bd4c 	b.w	80088fe <_dtoa_r+0xb36>
 8007e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e72:	2200      	movs	r2, #0
 8007e74:	2300      	movs	r3, #0
 8007e76:	f7f8 fd97 	bl	80009a8 <__aeabi_dcmpeq>
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	b158      	cbz	r0, 8007e96 <_dtoa_r+0xce>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e86:	b113      	cbz	r3, 8007e8e <_dtoa_r+0xc6>
 8007e88:	4b85      	ldr	r3, [pc, #532]	@ (80080a0 <_dtoa_r+0x2d8>)
 8007e8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80080a4 <_dtoa_r+0x2dc>
 8007e92:	f000 bd36 	b.w	8008902 <_dtoa_r+0xb3a>
 8007e96:	ab14      	add	r3, sp, #80	@ 0x50
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	ab15      	add	r3, sp, #84	@ 0x54
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ea4:	f001 fa30 	bl	8009308 <__d2b>
 8007ea8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007eac:	4681      	mov	r9, r0
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	d077      	beq.n	8007fa2 <_dtoa_r+0x1da>
 8007eb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eb8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ec0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ec4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ec8:	9712      	str	r7, [sp, #72]	@ 0x48
 8007eca:	4619      	mov	r1, r3
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4b76      	ldr	r3, [pc, #472]	@ (80080a8 <_dtoa_r+0x2e0>)
 8007ed0:	f7f8 f94a 	bl	8000168 <__aeabi_dsub>
 8007ed4:	a368      	add	r3, pc, #416	@ (adr r3, 8008078 <_dtoa_r+0x2b0>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 fafd 	bl	80004d8 <__aeabi_dmul>
 8007ede:	a368      	add	r3, pc, #416	@ (adr r3, 8008080 <_dtoa_r+0x2b8>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f7f8 f942 	bl	800016c <__adddf3>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	4630      	mov	r0, r6
 8007eec:	460d      	mov	r5, r1
 8007eee:	f7f8 fa89 	bl	8000404 <__aeabi_i2d>
 8007ef2:	a365      	add	r3, pc, #404	@ (adr r3, 8008088 <_dtoa_r+0x2c0>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 faee 	bl	80004d8 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 f932 	bl	800016c <__adddf3>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	f7f8 fd94 	bl	8000a38 <__aeabi_d2iz>
 8007f10:	2200      	movs	r2, #0
 8007f12:	4607      	mov	r7, r0
 8007f14:	2300      	movs	r3, #0
 8007f16:	4620      	mov	r0, r4
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7f8 fd4f 	bl	80009bc <__aeabi_dcmplt>
 8007f1e:	b140      	cbz	r0, 8007f32 <_dtoa_r+0x16a>
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7f8 fa6f 	bl	8000404 <__aeabi_i2d>
 8007f26:	4622      	mov	r2, r4
 8007f28:	462b      	mov	r3, r5
 8007f2a:	f7f8 fd3d 	bl	80009a8 <__aeabi_dcmpeq>
 8007f2e:	b900      	cbnz	r0, 8007f32 <_dtoa_r+0x16a>
 8007f30:	3f01      	subs	r7, #1
 8007f32:	2f16      	cmp	r7, #22
 8007f34:	d853      	bhi.n	8007fde <_dtoa_r+0x216>
 8007f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80080ac <_dtoa_r+0x2e4>)
 8007f3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 fd3a 	bl	80009bc <__aeabi_dcmplt>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d04a      	beq.n	8007fe2 <_dtoa_r+0x21a>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	3f01      	subs	r7, #1
 8007f50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f54:	1b9b      	subs	r3, r3, r6
 8007f56:	1e5a      	subs	r2, r3, #1
 8007f58:	bf46      	itte	mi
 8007f5a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007f5e:	2300      	movmi	r3, #0
 8007f60:	f04f 0800 	movpl.w	r8, #0
 8007f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f66:	bf48      	it	mi
 8007f68:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007f6a:	2f00      	cmp	r7, #0
 8007f6c:	db3b      	blt.n	8007fe6 <_dtoa_r+0x21e>
 8007f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f70:	970e      	str	r7, [sp, #56]	@ 0x38
 8007f72:	443b      	add	r3, r7
 8007f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f76:	2300      	movs	r3, #0
 8007f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f7c:	2b09      	cmp	r3, #9
 8007f7e:	d866      	bhi.n	800804e <_dtoa_r+0x286>
 8007f80:	2b05      	cmp	r3, #5
 8007f82:	bfc4      	itt	gt
 8007f84:	3b04      	subgt	r3, #4
 8007f86:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007f88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f8a:	bfc8      	it	gt
 8007f8c:	2400      	movgt	r4, #0
 8007f8e:	f1a3 0302 	sub.w	r3, r3, #2
 8007f92:	bfd8      	it	le
 8007f94:	2401      	movle	r4, #1
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d864      	bhi.n	8008064 <_dtoa_r+0x29c>
 8007f9a:	e8df f003 	tbb	[pc, r3]
 8007f9e:	382b      	.short	0x382b
 8007fa0:	5636      	.short	0x5636
 8007fa2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007fa6:	441e      	add	r6, r3
 8007fa8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007fac:	2b20      	cmp	r3, #32
 8007fae:	bfc1      	itttt	gt
 8007fb0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007fb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007fb8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007fbc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007fc0:	bfd6      	itet	le
 8007fc2:	f1c3 0320 	rsble	r3, r3, #32
 8007fc6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007fca:	fa04 f003 	lslle.w	r0, r4, r3
 8007fce:	f7f8 fa09 	bl	80003e4 <__aeabi_ui2d>
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007fd8:	3e01      	subs	r6, #1
 8007fda:	9212      	str	r2, [sp, #72]	@ 0x48
 8007fdc:	e775      	b.n	8007eca <_dtoa_r+0x102>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e7b6      	b.n	8007f50 <_dtoa_r+0x188>
 8007fe2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007fe4:	e7b5      	b.n	8007f52 <_dtoa_r+0x18a>
 8007fe6:	427b      	negs	r3, r7
 8007fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fea:	2300      	movs	r3, #0
 8007fec:	eba8 0807 	sub.w	r8, r8, r7
 8007ff0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ff2:	e7c2      	b.n	8007f7a <_dtoa_r+0x1b2>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ff8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dc35      	bgt.n	800806a <_dtoa_r+0x2a2>
 8007ffe:	2301      	movs	r3, #1
 8008000:	461a      	mov	r2, r3
 8008002:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008006:	9221      	str	r2, [sp, #132]	@ 0x84
 8008008:	e00b      	b.n	8008022 <_dtoa_r+0x25a>
 800800a:	2301      	movs	r3, #1
 800800c:	e7f3      	b.n	8007ff6 <_dtoa_r+0x22e>
 800800e:	2300      	movs	r3, #0
 8008010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008012:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008014:	18fb      	adds	r3, r7, r3
 8008016:	9308      	str	r3, [sp, #32]
 8008018:	3301      	adds	r3, #1
 800801a:	2b01      	cmp	r3, #1
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	bfb8      	it	lt
 8008020:	2301      	movlt	r3, #1
 8008022:	2100      	movs	r1, #0
 8008024:	2204      	movs	r2, #4
 8008026:	f8db 001c 	ldr.w	r0, [fp, #28]
 800802a:	f102 0514 	add.w	r5, r2, #20
 800802e:	429d      	cmp	r5, r3
 8008030:	d91f      	bls.n	8008072 <_dtoa_r+0x2aa>
 8008032:	6041      	str	r1, [r0, #4]
 8008034:	4658      	mov	r0, fp
 8008036:	f000 fd8d 	bl	8008b54 <_Balloc>
 800803a:	4682      	mov	sl, r0
 800803c:	2800      	cmp	r0, #0
 800803e:	d139      	bne.n	80080b4 <_dtoa_r+0x2ec>
 8008040:	4602      	mov	r2, r0
 8008042:	f240 11af 	movw	r1, #431	@ 0x1af
 8008046:	4b1a      	ldr	r3, [pc, #104]	@ (80080b0 <_dtoa_r+0x2e8>)
 8008048:	e6d2      	b.n	8007df0 <_dtoa_r+0x28>
 800804a:	2301      	movs	r3, #1
 800804c:	e7e0      	b.n	8008010 <_dtoa_r+0x248>
 800804e:	2401      	movs	r4, #1
 8008050:	2300      	movs	r3, #0
 8008052:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008054:	9320      	str	r3, [sp, #128]	@ 0x80
 8008056:	f04f 33ff 	mov.w	r3, #4294967295
 800805a:	2200      	movs	r2, #0
 800805c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008060:	2312      	movs	r3, #18
 8008062:	e7d0      	b.n	8008006 <_dtoa_r+0x23e>
 8008064:	2301      	movs	r3, #1
 8008066:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008068:	e7f5      	b.n	8008056 <_dtoa_r+0x28e>
 800806a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800806c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008070:	e7d7      	b.n	8008022 <_dtoa_r+0x25a>
 8008072:	3101      	adds	r1, #1
 8008074:	0052      	lsls	r2, r2, #1
 8008076:	e7d8      	b.n	800802a <_dtoa_r+0x262>
 8008078:	636f4361 	.word	0x636f4361
 800807c:	3fd287a7 	.word	0x3fd287a7
 8008080:	8b60c8b3 	.word	0x8b60c8b3
 8008084:	3fc68a28 	.word	0x3fc68a28
 8008088:	509f79fb 	.word	0x509f79fb
 800808c:	3fd34413 	.word	0x3fd34413
 8008090:	0800bc24 	.word	0x0800bc24
 8008094:	0800bc3b 	.word	0x0800bc3b
 8008098:	7ff00000 	.word	0x7ff00000
 800809c:	0800bc20 	.word	0x0800bc20
 80080a0:	0800bbef 	.word	0x0800bbef
 80080a4:	0800bbee 	.word	0x0800bbee
 80080a8:	3ff80000 	.word	0x3ff80000
 80080ac:	0800bd38 	.word	0x0800bd38
 80080b0:	0800bc93 	.word	0x0800bc93
 80080b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080b8:	6018      	str	r0, [r3, #0]
 80080ba:	9b07      	ldr	r3, [sp, #28]
 80080bc:	2b0e      	cmp	r3, #14
 80080be:	f200 80a4 	bhi.w	800820a <_dtoa_r+0x442>
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	f000 80a1 	beq.w	800820a <_dtoa_r+0x442>
 80080c8:	2f00      	cmp	r7, #0
 80080ca:	dd33      	ble.n	8008134 <_dtoa_r+0x36c>
 80080cc:	4b86      	ldr	r3, [pc, #536]	@ (80082e8 <_dtoa_r+0x520>)
 80080ce:	f007 020f 	and.w	r2, r7, #15
 80080d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080d6:	05f8      	lsls	r0, r7, #23
 80080d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80080e4:	d516      	bpl.n	8008114 <_dtoa_r+0x34c>
 80080e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080ea:	4b80      	ldr	r3, [pc, #512]	@ (80082ec <_dtoa_r+0x524>)
 80080ec:	2603      	movs	r6, #3
 80080ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080f2:	f7f8 fb1b 	bl	800072c <__aeabi_ddiv>
 80080f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080fa:	f004 040f 	and.w	r4, r4, #15
 80080fe:	4d7b      	ldr	r5, [pc, #492]	@ (80082ec <_dtoa_r+0x524>)
 8008100:	b954      	cbnz	r4, 8008118 <_dtoa_r+0x350>
 8008102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810a:	f7f8 fb0f 	bl	800072c <__aeabi_ddiv>
 800810e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008112:	e028      	b.n	8008166 <_dtoa_r+0x39e>
 8008114:	2602      	movs	r6, #2
 8008116:	e7f2      	b.n	80080fe <_dtoa_r+0x336>
 8008118:	07e1      	lsls	r1, r4, #31
 800811a:	d508      	bpl.n	800812e <_dtoa_r+0x366>
 800811c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008120:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008124:	f7f8 f9d8 	bl	80004d8 <__aeabi_dmul>
 8008128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800812c:	3601      	adds	r6, #1
 800812e:	1064      	asrs	r4, r4, #1
 8008130:	3508      	adds	r5, #8
 8008132:	e7e5      	b.n	8008100 <_dtoa_r+0x338>
 8008134:	f000 80d2 	beq.w	80082dc <_dtoa_r+0x514>
 8008138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800813c:	427c      	negs	r4, r7
 800813e:	4b6a      	ldr	r3, [pc, #424]	@ (80082e8 <_dtoa_r+0x520>)
 8008140:	f004 020f 	and.w	r2, r4, #15
 8008144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 f9c4 	bl	80004d8 <__aeabi_dmul>
 8008150:	2602      	movs	r6, #2
 8008152:	2300      	movs	r3, #0
 8008154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008158:	4d64      	ldr	r5, [pc, #400]	@ (80082ec <_dtoa_r+0x524>)
 800815a:	1124      	asrs	r4, r4, #4
 800815c:	2c00      	cmp	r4, #0
 800815e:	f040 80b2 	bne.w	80082c6 <_dtoa_r+0x4fe>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1d3      	bne.n	800810e <_dtoa_r+0x346>
 8008166:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800816a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 80b7 	beq.w	80082e0 <_dtoa_r+0x518>
 8008172:	2200      	movs	r2, #0
 8008174:	4620      	mov	r0, r4
 8008176:	4629      	mov	r1, r5
 8008178:	4b5d      	ldr	r3, [pc, #372]	@ (80082f0 <_dtoa_r+0x528>)
 800817a:	f7f8 fc1f 	bl	80009bc <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f000 80ae 	beq.w	80082e0 <_dtoa_r+0x518>
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80aa 	beq.w	80082e0 <_dtoa_r+0x518>
 800818c:	9b08      	ldr	r3, [sp, #32]
 800818e:	2b00      	cmp	r3, #0
 8008190:	dd37      	ble.n	8008202 <_dtoa_r+0x43a>
 8008192:	1e7b      	subs	r3, r7, #1
 8008194:	4620      	mov	r0, r4
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	2200      	movs	r2, #0
 800819a:	4629      	mov	r1, r5
 800819c:	4b55      	ldr	r3, [pc, #340]	@ (80082f4 <_dtoa_r+0x52c>)
 800819e:	f7f8 f99b 	bl	80004d8 <__aeabi_dmul>
 80081a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a6:	9c08      	ldr	r4, [sp, #32]
 80081a8:	3601      	adds	r6, #1
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7f8 f92a 	bl	8000404 <__aeabi_i2d>
 80081b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081b4:	f7f8 f990 	bl	80004d8 <__aeabi_dmul>
 80081b8:	2200      	movs	r2, #0
 80081ba:	4b4f      	ldr	r3, [pc, #316]	@ (80082f8 <_dtoa_r+0x530>)
 80081bc:	f7f7 ffd6 	bl	800016c <__adddf3>
 80081c0:	4605      	mov	r5, r0
 80081c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80081c6:	2c00      	cmp	r4, #0
 80081c8:	f040 809a 	bne.w	8008300 <_dtoa_r+0x538>
 80081cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d0:	2200      	movs	r2, #0
 80081d2:	4b4a      	ldr	r3, [pc, #296]	@ (80082fc <_dtoa_r+0x534>)
 80081d4:	f7f7 ffc8 	bl	8000168 <__aeabi_dsub>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081e0:	462a      	mov	r2, r5
 80081e2:	4633      	mov	r3, r6
 80081e4:	f7f8 fc08 	bl	80009f8 <__aeabi_dcmpgt>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f040 828e 	bne.w	800870a <_dtoa_r+0x942>
 80081ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f2:	462a      	mov	r2, r5
 80081f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081f8:	f7f8 fbe0 	bl	80009bc <__aeabi_dcmplt>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	f040 8127 	bne.w	8008450 <_dtoa_r+0x688>
 8008202:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008206:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800820a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800820c:	2b00      	cmp	r3, #0
 800820e:	f2c0 8163 	blt.w	80084d8 <_dtoa_r+0x710>
 8008212:	2f0e      	cmp	r7, #14
 8008214:	f300 8160 	bgt.w	80084d8 <_dtoa_r+0x710>
 8008218:	4b33      	ldr	r3, [pc, #204]	@ (80082e8 <_dtoa_r+0x520>)
 800821a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800821e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008222:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008226:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008228:	2b00      	cmp	r3, #0
 800822a:	da03      	bge.n	8008234 <_dtoa_r+0x46c>
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f340 8100 	ble.w	8008434 <_dtoa_r+0x66c>
 8008234:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008238:	4656      	mov	r6, sl
 800823a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 fa73 	bl	800072c <__aeabi_ddiv>
 8008246:	f7f8 fbf7 	bl	8000a38 <__aeabi_d2iz>
 800824a:	4680      	mov	r8, r0
 800824c:	f7f8 f8da 	bl	8000404 <__aeabi_i2d>
 8008250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008254:	f7f8 f940 	bl	80004d8 <__aeabi_dmul>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f7f7 ff82 	bl	8000168 <__aeabi_dsub>
 8008264:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008268:	9d07      	ldr	r5, [sp, #28]
 800826a:	f806 4b01 	strb.w	r4, [r6], #1
 800826e:	eba6 040a 	sub.w	r4, r6, sl
 8008272:	42a5      	cmp	r5, r4
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	f040 8116 	bne.w	80084a8 <_dtoa_r+0x6e0>
 800827c:	f7f7 ff76 	bl	800016c <__adddf3>
 8008280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	f7f8 fbb6 	bl	80009f8 <__aeabi_dcmpgt>
 800828c:	2800      	cmp	r0, #0
 800828e:	f040 80f8 	bne.w	8008482 <_dtoa_r+0x6ba>
 8008292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f8 fb85 	bl	80009a8 <__aeabi_dcmpeq>
 800829e:	b118      	cbz	r0, 80082a8 <_dtoa_r+0x4e0>
 80082a0:	f018 0f01 	tst.w	r8, #1
 80082a4:	f040 80ed 	bne.w	8008482 <_dtoa_r+0x6ba>
 80082a8:	4649      	mov	r1, r9
 80082aa:	4658      	mov	r0, fp
 80082ac:	f000 fc92 	bl	8008bd4 <_Bfree>
 80082b0:	2300      	movs	r3, #0
 80082b2:	7033      	strb	r3, [r6, #0]
 80082b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80082b6:	3701      	adds	r7, #1
 80082b8:	601f      	str	r7, [r3, #0]
 80082ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8320 	beq.w	8008902 <_dtoa_r+0xb3a>
 80082c2:	601e      	str	r6, [r3, #0]
 80082c4:	e31d      	b.n	8008902 <_dtoa_r+0xb3a>
 80082c6:	07e2      	lsls	r2, r4, #31
 80082c8:	d505      	bpl.n	80082d6 <_dtoa_r+0x50e>
 80082ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082ce:	f7f8 f903 	bl	80004d8 <__aeabi_dmul>
 80082d2:	2301      	movs	r3, #1
 80082d4:	3601      	adds	r6, #1
 80082d6:	1064      	asrs	r4, r4, #1
 80082d8:	3508      	adds	r5, #8
 80082da:	e73f      	b.n	800815c <_dtoa_r+0x394>
 80082dc:	2602      	movs	r6, #2
 80082de:	e742      	b.n	8008166 <_dtoa_r+0x39e>
 80082e0:	9c07      	ldr	r4, [sp, #28]
 80082e2:	9704      	str	r7, [sp, #16]
 80082e4:	e761      	b.n	80081aa <_dtoa_r+0x3e2>
 80082e6:	bf00      	nop
 80082e8:	0800bd38 	.word	0x0800bd38
 80082ec:	0800bd10 	.word	0x0800bd10
 80082f0:	3ff00000 	.word	0x3ff00000
 80082f4:	40240000 	.word	0x40240000
 80082f8:	401c0000 	.word	0x401c0000
 80082fc:	40140000 	.word	0x40140000
 8008300:	4b70      	ldr	r3, [pc, #448]	@ (80084c4 <_dtoa_r+0x6fc>)
 8008302:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008304:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008308:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800830c:	4454      	add	r4, sl
 800830e:	2900      	cmp	r1, #0
 8008310:	d045      	beq.n	800839e <_dtoa_r+0x5d6>
 8008312:	2000      	movs	r0, #0
 8008314:	496c      	ldr	r1, [pc, #432]	@ (80084c8 <_dtoa_r+0x700>)
 8008316:	f7f8 fa09 	bl	800072c <__aeabi_ddiv>
 800831a:	4633      	mov	r3, r6
 800831c:	462a      	mov	r2, r5
 800831e:	f7f7 ff23 	bl	8000168 <__aeabi_dsub>
 8008322:	4656      	mov	r6, sl
 8008324:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800832c:	f7f8 fb84 	bl	8000a38 <__aeabi_d2iz>
 8008330:	4605      	mov	r5, r0
 8008332:	f7f8 f867 	bl	8000404 <__aeabi_i2d>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800833e:	f7f7 ff13 	bl	8000168 <__aeabi_dsub>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	3530      	adds	r5, #48	@ 0x30
 8008348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800834c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008350:	f806 5b01 	strb.w	r5, [r6], #1
 8008354:	f7f8 fb32 	bl	80009bc <__aeabi_dcmplt>
 8008358:	2800      	cmp	r0, #0
 800835a:	d163      	bne.n	8008424 <_dtoa_r+0x65c>
 800835c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008360:	2000      	movs	r0, #0
 8008362:	495a      	ldr	r1, [pc, #360]	@ (80084cc <_dtoa_r+0x704>)
 8008364:	f7f7 ff00 	bl	8000168 <__aeabi_dsub>
 8008368:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800836c:	f7f8 fb26 	bl	80009bc <__aeabi_dcmplt>
 8008370:	2800      	cmp	r0, #0
 8008372:	f040 8087 	bne.w	8008484 <_dtoa_r+0x6bc>
 8008376:	42a6      	cmp	r6, r4
 8008378:	f43f af43 	beq.w	8008202 <_dtoa_r+0x43a>
 800837c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008380:	2200      	movs	r2, #0
 8008382:	4b53      	ldr	r3, [pc, #332]	@ (80084d0 <_dtoa_r+0x708>)
 8008384:	f7f8 f8a8 	bl	80004d8 <__aeabi_dmul>
 8008388:	2200      	movs	r2, #0
 800838a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800838e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008392:	4b4f      	ldr	r3, [pc, #316]	@ (80084d0 <_dtoa_r+0x708>)
 8008394:	f7f8 f8a0 	bl	80004d8 <__aeabi_dmul>
 8008398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800839c:	e7c4      	b.n	8008328 <_dtoa_r+0x560>
 800839e:	4631      	mov	r1, r6
 80083a0:	4628      	mov	r0, r5
 80083a2:	f7f8 f899 	bl	80004d8 <__aeabi_dmul>
 80083a6:	4656      	mov	r6, sl
 80083a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80083ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083b2:	f7f8 fb41 	bl	8000a38 <__aeabi_d2iz>
 80083b6:	4605      	mov	r5, r0
 80083b8:	f7f8 f824 	bl	8000404 <__aeabi_i2d>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c4:	f7f7 fed0 	bl	8000168 <__aeabi_dsub>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	3530      	adds	r5, #48	@ 0x30
 80083ce:	f806 5b01 	strb.w	r5, [r6], #1
 80083d2:	42a6      	cmp	r6, r4
 80083d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	d124      	bne.n	8008428 <_dtoa_r+0x660>
 80083de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083e2:	4b39      	ldr	r3, [pc, #228]	@ (80084c8 <_dtoa_r+0x700>)
 80083e4:	f7f7 fec2 	bl	800016c <__adddf3>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f0:	f7f8 fb02 	bl	80009f8 <__aeabi_dcmpgt>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d145      	bne.n	8008484 <_dtoa_r+0x6bc>
 80083f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083fc:	2000      	movs	r0, #0
 80083fe:	4932      	ldr	r1, [pc, #200]	@ (80084c8 <_dtoa_r+0x700>)
 8008400:	f7f7 feb2 	bl	8000168 <__aeabi_dsub>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800840c:	f7f8 fad6 	bl	80009bc <__aeabi_dcmplt>
 8008410:	2800      	cmp	r0, #0
 8008412:	f43f aef6 	beq.w	8008202 <_dtoa_r+0x43a>
 8008416:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008418:	1e73      	subs	r3, r6, #1
 800841a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800841c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008420:	2b30      	cmp	r3, #48	@ 0x30
 8008422:	d0f8      	beq.n	8008416 <_dtoa_r+0x64e>
 8008424:	9f04      	ldr	r7, [sp, #16]
 8008426:	e73f      	b.n	80082a8 <_dtoa_r+0x4e0>
 8008428:	4b29      	ldr	r3, [pc, #164]	@ (80084d0 <_dtoa_r+0x708>)
 800842a:	f7f8 f855 	bl	80004d8 <__aeabi_dmul>
 800842e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008432:	e7bc      	b.n	80083ae <_dtoa_r+0x5e6>
 8008434:	d10c      	bne.n	8008450 <_dtoa_r+0x688>
 8008436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800843a:	2200      	movs	r2, #0
 800843c:	4b25      	ldr	r3, [pc, #148]	@ (80084d4 <_dtoa_r+0x70c>)
 800843e:	f7f8 f84b 	bl	80004d8 <__aeabi_dmul>
 8008442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008446:	f7f8 facd 	bl	80009e4 <__aeabi_dcmpge>
 800844a:	2800      	cmp	r0, #0
 800844c:	f000 815b 	beq.w	8008706 <_dtoa_r+0x93e>
 8008450:	2400      	movs	r4, #0
 8008452:	4625      	mov	r5, r4
 8008454:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008456:	4656      	mov	r6, sl
 8008458:	43db      	mvns	r3, r3
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	2700      	movs	r7, #0
 800845e:	4621      	mov	r1, r4
 8008460:	4658      	mov	r0, fp
 8008462:	f000 fbb7 	bl	8008bd4 <_Bfree>
 8008466:	2d00      	cmp	r5, #0
 8008468:	d0dc      	beq.n	8008424 <_dtoa_r+0x65c>
 800846a:	b12f      	cbz	r7, 8008478 <_dtoa_r+0x6b0>
 800846c:	42af      	cmp	r7, r5
 800846e:	d003      	beq.n	8008478 <_dtoa_r+0x6b0>
 8008470:	4639      	mov	r1, r7
 8008472:	4658      	mov	r0, fp
 8008474:	f000 fbae 	bl	8008bd4 <_Bfree>
 8008478:	4629      	mov	r1, r5
 800847a:	4658      	mov	r0, fp
 800847c:	f000 fbaa 	bl	8008bd4 <_Bfree>
 8008480:	e7d0      	b.n	8008424 <_dtoa_r+0x65c>
 8008482:	9704      	str	r7, [sp, #16]
 8008484:	4633      	mov	r3, r6
 8008486:	461e      	mov	r6, r3
 8008488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800848c:	2a39      	cmp	r2, #57	@ 0x39
 800848e:	d107      	bne.n	80084a0 <_dtoa_r+0x6d8>
 8008490:	459a      	cmp	sl, r3
 8008492:	d1f8      	bne.n	8008486 <_dtoa_r+0x6be>
 8008494:	9a04      	ldr	r2, [sp, #16]
 8008496:	3201      	adds	r2, #1
 8008498:	9204      	str	r2, [sp, #16]
 800849a:	2230      	movs	r2, #48	@ 0x30
 800849c:	f88a 2000 	strb.w	r2, [sl]
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	3201      	adds	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	e7bd      	b.n	8008424 <_dtoa_r+0x65c>
 80084a8:	2200      	movs	r2, #0
 80084aa:	4b09      	ldr	r3, [pc, #36]	@ (80084d0 <_dtoa_r+0x708>)
 80084ac:	f7f8 f814 	bl	80004d8 <__aeabi_dmul>
 80084b0:	2200      	movs	r2, #0
 80084b2:	2300      	movs	r3, #0
 80084b4:	4604      	mov	r4, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	f7f8 fa76 	bl	80009a8 <__aeabi_dcmpeq>
 80084bc:	2800      	cmp	r0, #0
 80084be:	f43f aebc 	beq.w	800823a <_dtoa_r+0x472>
 80084c2:	e6f1      	b.n	80082a8 <_dtoa_r+0x4e0>
 80084c4:	0800bd38 	.word	0x0800bd38
 80084c8:	3fe00000 	.word	0x3fe00000
 80084cc:	3ff00000 	.word	0x3ff00000
 80084d0:	40240000 	.word	0x40240000
 80084d4:	40140000 	.word	0x40140000
 80084d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084da:	2a00      	cmp	r2, #0
 80084dc:	f000 80db 	beq.w	8008696 <_dtoa_r+0x8ce>
 80084e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084e2:	2a01      	cmp	r2, #1
 80084e4:	f300 80bf 	bgt.w	8008666 <_dtoa_r+0x89e>
 80084e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80084ea:	2a00      	cmp	r2, #0
 80084ec:	f000 80b7 	beq.w	800865e <_dtoa_r+0x896>
 80084f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80084f4:	4646      	mov	r6, r8
 80084f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084fa:	2101      	movs	r1, #1
 80084fc:	441a      	add	r2, r3
 80084fe:	4658      	mov	r0, fp
 8008500:	4498      	add	r8, r3
 8008502:	9209      	str	r2, [sp, #36]	@ 0x24
 8008504:	f000 fc64 	bl	8008dd0 <__i2b>
 8008508:	4605      	mov	r5, r0
 800850a:	b15e      	cbz	r6, 8008524 <_dtoa_r+0x75c>
 800850c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	dd08      	ble.n	8008524 <_dtoa_r+0x75c>
 8008512:	42b3      	cmp	r3, r6
 8008514:	bfa8      	it	ge
 8008516:	4633      	movge	r3, r6
 8008518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800851a:	eba8 0803 	sub.w	r8, r8, r3
 800851e:	1af6      	subs	r6, r6, r3
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	9309      	str	r3, [sp, #36]	@ 0x24
 8008524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008526:	b1f3      	cbz	r3, 8008566 <_dtoa_r+0x79e>
 8008528:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 80b7 	beq.w	800869e <_dtoa_r+0x8d6>
 8008530:	b18c      	cbz	r4, 8008556 <_dtoa_r+0x78e>
 8008532:	4629      	mov	r1, r5
 8008534:	4622      	mov	r2, r4
 8008536:	4658      	mov	r0, fp
 8008538:	f000 fd08 	bl	8008f4c <__pow5mult>
 800853c:	464a      	mov	r2, r9
 800853e:	4601      	mov	r1, r0
 8008540:	4605      	mov	r5, r0
 8008542:	4658      	mov	r0, fp
 8008544:	f000 fc5a 	bl	8008dfc <__multiply>
 8008548:	4649      	mov	r1, r9
 800854a:	9004      	str	r0, [sp, #16]
 800854c:	4658      	mov	r0, fp
 800854e:	f000 fb41 	bl	8008bd4 <_Bfree>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	4699      	mov	r9, r3
 8008556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008558:	1b1a      	subs	r2, r3, r4
 800855a:	d004      	beq.n	8008566 <_dtoa_r+0x79e>
 800855c:	4649      	mov	r1, r9
 800855e:	4658      	mov	r0, fp
 8008560:	f000 fcf4 	bl	8008f4c <__pow5mult>
 8008564:	4681      	mov	r9, r0
 8008566:	2101      	movs	r1, #1
 8008568:	4658      	mov	r0, fp
 800856a:	f000 fc31 	bl	8008dd0 <__i2b>
 800856e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008570:	4604      	mov	r4, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 81c9 	beq.w	800890a <_dtoa_r+0xb42>
 8008578:	461a      	mov	r2, r3
 800857a:	4601      	mov	r1, r0
 800857c:	4658      	mov	r0, fp
 800857e:	f000 fce5 	bl	8008f4c <__pow5mult>
 8008582:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008584:	4604      	mov	r4, r0
 8008586:	2b01      	cmp	r3, #1
 8008588:	f300 808f 	bgt.w	80086aa <_dtoa_r+0x8e2>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f040 8087 	bne.w	80086a2 <_dtoa_r+0x8da>
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800859a:	2b00      	cmp	r3, #0
 800859c:	f040 8083 	bne.w	80086a6 <_dtoa_r+0x8de>
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085a6:	0d1b      	lsrs	r3, r3, #20
 80085a8:	051b      	lsls	r3, r3, #20
 80085aa:	b12b      	cbz	r3, 80085b8 <_dtoa_r+0x7f0>
 80085ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ae:	f108 0801 	add.w	r8, r8, #1
 80085b2:	3301      	adds	r3, #1
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	2301      	movs	r3, #1
 80085b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 81aa 	beq.w	8008916 <_dtoa_r+0xb4e>
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085c8:	6918      	ldr	r0, [r3, #16]
 80085ca:	f000 fbb5 	bl	8008d38 <__hi0bits>
 80085ce:	f1c0 0020 	rsb	r0, r0, #32
 80085d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d4:	4418      	add	r0, r3
 80085d6:	f010 001f 	ands.w	r0, r0, #31
 80085da:	d071      	beq.n	80086c0 <_dtoa_r+0x8f8>
 80085dc:	f1c0 0320 	rsb	r3, r0, #32
 80085e0:	2b04      	cmp	r3, #4
 80085e2:	dd65      	ble.n	80086b0 <_dtoa_r+0x8e8>
 80085e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e6:	f1c0 001c 	rsb	r0, r0, #28
 80085ea:	4403      	add	r3, r0
 80085ec:	4480      	add	r8, r0
 80085ee:	4406      	add	r6, r0
 80085f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f2:	f1b8 0f00 	cmp.w	r8, #0
 80085f6:	dd05      	ble.n	8008604 <_dtoa_r+0x83c>
 80085f8:	4649      	mov	r1, r9
 80085fa:	4642      	mov	r2, r8
 80085fc:	4658      	mov	r0, fp
 80085fe:	f000 fcff 	bl	8009000 <__lshift>
 8008602:	4681      	mov	r9, r0
 8008604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	dd05      	ble.n	8008616 <_dtoa_r+0x84e>
 800860a:	4621      	mov	r1, r4
 800860c:	461a      	mov	r2, r3
 800860e:	4658      	mov	r0, fp
 8008610:	f000 fcf6 	bl	8009000 <__lshift>
 8008614:	4604      	mov	r4, r0
 8008616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d053      	beq.n	80086c4 <_dtoa_r+0x8fc>
 800861c:	4621      	mov	r1, r4
 800861e:	4648      	mov	r0, r9
 8008620:	f000 fd5a 	bl	80090d8 <__mcmp>
 8008624:	2800      	cmp	r0, #0
 8008626:	da4d      	bge.n	80086c4 <_dtoa_r+0x8fc>
 8008628:	1e7b      	subs	r3, r7, #1
 800862a:	4649      	mov	r1, r9
 800862c:	9304      	str	r3, [sp, #16]
 800862e:	220a      	movs	r2, #10
 8008630:	2300      	movs	r3, #0
 8008632:	4658      	mov	r0, fp
 8008634:	f000 faf0 	bl	8008c18 <__multadd>
 8008638:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800863a:	4681      	mov	r9, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 816c 	beq.w	800891a <_dtoa_r+0xb52>
 8008642:	2300      	movs	r3, #0
 8008644:	4629      	mov	r1, r5
 8008646:	220a      	movs	r2, #10
 8008648:	4658      	mov	r0, fp
 800864a:	f000 fae5 	bl	8008c18 <__multadd>
 800864e:	9b08      	ldr	r3, [sp, #32]
 8008650:	4605      	mov	r5, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	dc61      	bgt.n	800871a <_dtoa_r+0x952>
 8008656:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008658:	2b02      	cmp	r3, #2
 800865a:	dc3b      	bgt.n	80086d4 <_dtoa_r+0x90c>
 800865c:	e05d      	b.n	800871a <_dtoa_r+0x952>
 800865e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008660:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008664:	e746      	b.n	80084f4 <_dtoa_r+0x72c>
 8008666:	9b07      	ldr	r3, [sp, #28]
 8008668:	1e5c      	subs	r4, r3, #1
 800866a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800866c:	42a3      	cmp	r3, r4
 800866e:	bfbf      	itttt	lt
 8008670:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008672:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008674:	1ae3      	sublt	r3, r4, r3
 8008676:	18d2      	addlt	r2, r2, r3
 8008678:	bfa8      	it	ge
 800867a:	1b1c      	subge	r4, r3, r4
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	bfbe      	ittt	lt
 8008680:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008682:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008684:	2400      	movlt	r4, #0
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfb5      	itete	lt
 800868a:	eba8 0603 	sublt.w	r6, r8, r3
 800868e:	4646      	movge	r6, r8
 8008690:	2300      	movlt	r3, #0
 8008692:	9b07      	ldrge	r3, [sp, #28]
 8008694:	e730      	b.n	80084f8 <_dtoa_r+0x730>
 8008696:	4646      	mov	r6, r8
 8008698:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800869a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800869c:	e735      	b.n	800850a <_dtoa_r+0x742>
 800869e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086a0:	e75c      	b.n	800855c <_dtoa_r+0x794>
 80086a2:	2300      	movs	r3, #0
 80086a4:	e788      	b.n	80085b8 <_dtoa_r+0x7f0>
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	e786      	b.n	80085b8 <_dtoa_r+0x7f0>
 80086aa:	2300      	movs	r3, #0
 80086ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80086ae:	e788      	b.n	80085c2 <_dtoa_r+0x7fa>
 80086b0:	d09f      	beq.n	80085f2 <_dtoa_r+0x82a>
 80086b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086b4:	331c      	adds	r3, #28
 80086b6:	441a      	add	r2, r3
 80086b8:	4498      	add	r8, r3
 80086ba:	441e      	add	r6, r3
 80086bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80086be:	e798      	b.n	80085f2 <_dtoa_r+0x82a>
 80086c0:	4603      	mov	r3, r0
 80086c2:	e7f6      	b.n	80086b2 <_dtoa_r+0x8ea>
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	9704      	str	r7, [sp, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dc20      	bgt.n	800870e <_dtoa_r+0x946>
 80086cc:	9308      	str	r3, [sp, #32]
 80086ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	dd1e      	ble.n	8008712 <_dtoa_r+0x94a>
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f47f aebc 	bne.w	8008454 <_dtoa_r+0x68c>
 80086dc:	4621      	mov	r1, r4
 80086de:	2205      	movs	r2, #5
 80086e0:	4658      	mov	r0, fp
 80086e2:	f000 fa99 	bl	8008c18 <__multadd>
 80086e6:	4601      	mov	r1, r0
 80086e8:	4604      	mov	r4, r0
 80086ea:	4648      	mov	r0, r9
 80086ec:	f000 fcf4 	bl	80090d8 <__mcmp>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	f77f aeaf 	ble.w	8008454 <_dtoa_r+0x68c>
 80086f6:	2331      	movs	r3, #49	@ 0x31
 80086f8:	4656      	mov	r6, sl
 80086fa:	f806 3b01 	strb.w	r3, [r6], #1
 80086fe:	9b04      	ldr	r3, [sp, #16]
 8008700:	3301      	adds	r3, #1
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	e6aa      	b.n	800845c <_dtoa_r+0x694>
 8008706:	9c07      	ldr	r4, [sp, #28]
 8008708:	9704      	str	r7, [sp, #16]
 800870a:	4625      	mov	r5, r4
 800870c:	e7f3      	b.n	80086f6 <_dtoa_r+0x92e>
 800870e:	9b07      	ldr	r3, [sp, #28]
 8008710:	9308      	str	r3, [sp, #32]
 8008712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 8104 	beq.w	8008922 <_dtoa_r+0xb5a>
 800871a:	2e00      	cmp	r6, #0
 800871c:	dd05      	ble.n	800872a <_dtoa_r+0x962>
 800871e:	4629      	mov	r1, r5
 8008720:	4632      	mov	r2, r6
 8008722:	4658      	mov	r0, fp
 8008724:	f000 fc6c 	bl	8009000 <__lshift>
 8008728:	4605      	mov	r5, r0
 800872a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800872c:	2b00      	cmp	r3, #0
 800872e:	d05a      	beq.n	80087e6 <_dtoa_r+0xa1e>
 8008730:	4658      	mov	r0, fp
 8008732:	6869      	ldr	r1, [r5, #4]
 8008734:	f000 fa0e 	bl	8008b54 <_Balloc>
 8008738:	4606      	mov	r6, r0
 800873a:	b928      	cbnz	r0, 8008748 <_dtoa_r+0x980>
 800873c:	4602      	mov	r2, r0
 800873e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008742:	4b83      	ldr	r3, [pc, #524]	@ (8008950 <_dtoa_r+0xb88>)
 8008744:	f7ff bb54 	b.w	8007df0 <_dtoa_r+0x28>
 8008748:	692a      	ldr	r2, [r5, #16]
 800874a:	f105 010c 	add.w	r1, r5, #12
 800874e:	3202      	adds	r2, #2
 8008750:	0092      	lsls	r2, r2, #2
 8008752:	300c      	adds	r0, #12
 8008754:	f7ff fa9d 	bl	8007c92 <memcpy>
 8008758:	2201      	movs	r2, #1
 800875a:	4631      	mov	r1, r6
 800875c:	4658      	mov	r0, fp
 800875e:	f000 fc4f 	bl	8009000 <__lshift>
 8008762:	462f      	mov	r7, r5
 8008764:	4605      	mov	r5, r0
 8008766:	f10a 0301 	add.w	r3, sl, #1
 800876a:	9307      	str	r3, [sp, #28]
 800876c:	9b08      	ldr	r3, [sp, #32]
 800876e:	4453      	add	r3, sl
 8008770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008772:	9b02      	ldr	r3, [sp, #8]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	930a      	str	r3, [sp, #40]	@ 0x28
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	4621      	mov	r1, r4
 800877e:	3b01      	subs	r3, #1
 8008780:	4648      	mov	r0, r9
 8008782:	9302      	str	r3, [sp, #8]
 8008784:	f7ff fa98 	bl	8007cb8 <quorem>
 8008788:	4639      	mov	r1, r7
 800878a:	9008      	str	r0, [sp, #32]
 800878c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008790:	4648      	mov	r0, r9
 8008792:	f000 fca1 	bl	80090d8 <__mcmp>
 8008796:	462a      	mov	r2, r5
 8008798:	9009      	str	r0, [sp, #36]	@ 0x24
 800879a:	4621      	mov	r1, r4
 800879c:	4658      	mov	r0, fp
 800879e:	f000 fcb7 	bl	8009110 <__mdiff>
 80087a2:	68c2      	ldr	r2, [r0, #12]
 80087a4:	4606      	mov	r6, r0
 80087a6:	bb02      	cbnz	r2, 80087ea <_dtoa_r+0xa22>
 80087a8:	4601      	mov	r1, r0
 80087aa:	4648      	mov	r0, r9
 80087ac:	f000 fc94 	bl	80090d8 <__mcmp>
 80087b0:	4602      	mov	r2, r0
 80087b2:	4631      	mov	r1, r6
 80087b4:	4658      	mov	r0, fp
 80087b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80087b8:	f000 fa0c 	bl	8008bd4 <_Bfree>
 80087bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80087c0:	9e07      	ldr	r6, [sp, #28]
 80087c2:	ea43 0102 	orr.w	r1, r3, r2
 80087c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c8:	4319      	orrs	r1, r3
 80087ca:	d110      	bne.n	80087ee <_dtoa_r+0xa26>
 80087cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087d0:	d029      	beq.n	8008826 <_dtoa_r+0xa5e>
 80087d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dd02      	ble.n	80087de <_dtoa_r+0xa16>
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80087de:	9b02      	ldr	r3, [sp, #8]
 80087e0:	f883 8000 	strb.w	r8, [r3]
 80087e4:	e63b      	b.n	800845e <_dtoa_r+0x696>
 80087e6:	4628      	mov	r0, r5
 80087e8:	e7bb      	b.n	8008762 <_dtoa_r+0x99a>
 80087ea:	2201      	movs	r2, #1
 80087ec:	e7e1      	b.n	80087b2 <_dtoa_r+0x9ea>
 80087ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	db04      	blt.n	80087fe <_dtoa_r+0xa36>
 80087f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80087f6:	430b      	orrs	r3, r1
 80087f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087fa:	430b      	orrs	r3, r1
 80087fc:	d120      	bne.n	8008840 <_dtoa_r+0xa78>
 80087fe:	2a00      	cmp	r2, #0
 8008800:	dded      	ble.n	80087de <_dtoa_r+0xa16>
 8008802:	4649      	mov	r1, r9
 8008804:	2201      	movs	r2, #1
 8008806:	4658      	mov	r0, fp
 8008808:	f000 fbfa 	bl	8009000 <__lshift>
 800880c:	4621      	mov	r1, r4
 800880e:	4681      	mov	r9, r0
 8008810:	f000 fc62 	bl	80090d8 <__mcmp>
 8008814:	2800      	cmp	r0, #0
 8008816:	dc03      	bgt.n	8008820 <_dtoa_r+0xa58>
 8008818:	d1e1      	bne.n	80087de <_dtoa_r+0xa16>
 800881a:	f018 0f01 	tst.w	r8, #1
 800881e:	d0de      	beq.n	80087de <_dtoa_r+0xa16>
 8008820:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008824:	d1d8      	bne.n	80087d8 <_dtoa_r+0xa10>
 8008826:	2339      	movs	r3, #57	@ 0x39
 8008828:	9a02      	ldr	r2, [sp, #8]
 800882a:	7013      	strb	r3, [r2, #0]
 800882c:	4633      	mov	r3, r6
 800882e:	461e      	mov	r6, r3
 8008830:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008834:	3b01      	subs	r3, #1
 8008836:	2a39      	cmp	r2, #57	@ 0x39
 8008838:	d052      	beq.n	80088e0 <_dtoa_r+0xb18>
 800883a:	3201      	adds	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	e60e      	b.n	800845e <_dtoa_r+0x696>
 8008840:	2a00      	cmp	r2, #0
 8008842:	dd07      	ble.n	8008854 <_dtoa_r+0xa8c>
 8008844:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008848:	d0ed      	beq.n	8008826 <_dtoa_r+0xa5e>
 800884a:	9a02      	ldr	r2, [sp, #8]
 800884c:	f108 0301 	add.w	r3, r8, #1
 8008850:	7013      	strb	r3, [r2, #0]
 8008852:	e604      	b.n	800845e <_dtoa_r+0x696>
 8008854:	9b07      	ldr	r3, [sp, #28]
 8008856:	9a07      	ldr	r2, [sp, #28]
 8008858:	f803 8c01 	strb.w	r8, [r3, #-1]
 800885c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800885e:	4293      	cmp	r3, r2
 8008860:	d028      	beq.n	80088b4 <_dtoa_r+0xaec>
 8008862:	4649      	mov	r1, r9
 8008864:	2300      	movs	r3, #0
 8008866:	220a      	movs	r2, #10
 8008868:	4658      	mov	r0, fp
 800886a:	f000 f9d5 	bl	8008c18 <__multadd>
 800886e:	42af      	cmp	r7, r5
 8008870:	4681      	mov	r9, r0
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	f04f 020a 	mov.w	r2, #10
 800887a:	4639      	mov	r1, r7
 800887c:	4658      	mov	r0, fp
 800887e:	d107      	bne.n	8008890 <_dtoa_r+0xac8>
 8008880:	f000 f9ca 	bl	8008c18 <__multadd>
 8008884:	4607      	mov	r7, r0
 8008886:	4605      	mov	r5, r0
 8008888:	9b07      	ldr	r3, [sp, #28]
 800888a:	3301      	adds	r3, #1
 800888c:	9307      	str	r3, [sp, #28]
 800888e:	e774      	b.n	800877a <_dtoa_r+0x9b2>
 8008890:	f000 f9c2 	bl	8008c18 <__multadd>
 8008894:	4629      	mov	r1, r5
 8008896:	4607      	mov	r7, r0
 8008898:	2300      	movs	r3, #0
 800889a:	220a      	movs	r2, #10
 800889c:	4658      	mov	r0, fp
 800889e:	f000 f9bb 	bl	8008c18 <__multadd>
 80088a2:	4605      	mov	r5, r0
 80088a4:	e7f0      	b.n	8008888 <_dtoa_r+0xac0>
 80088a6:	9b08      	ldr	r3, [sp, #32]
 80088a8:	2700      	movs	r7, #0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bfcc      	ite	gt
 80088ae:	461e      	movgt	r6, r3
 80088b0:	2601      	movle	r6, #1
 80088b2:	4456      	add	r6, sl
 80088b4:	4649      	mov	r1, r9
 80088b6:	2201      	movs	r2, #1
 80088b8:	4658      	mov	r0, fp
 80088ba:	f000 fba1 	bl	8009000 <__lshift>
 80088be:	4621      	mov	r1, r4
 80088c0:	4681      	mov	r9, r0
 80088c2:	f000 fc09 	bl	80090d8 <__mcmp>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	dcb0      	bgt.n	800882c <_dtoa_r+0xa64>
 80088ca:	d102      	bne.n	80088d2 <_dtoa_r+0xb0a>
 80088cc:	f018 0f01 	tst.w	r8, #1
 80088d0:	d1ac      	bne.n	800882c <_dtoa_r+0xa64>
 80088d2:	4633      	mov	r3, r6
 80088d4:	461e      	mov	r6, r3
 80088d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088da:	2a30      	cmp	r2, #48	@ 0x30
 80088dc:	d0fa      	beq.n	80088d4 <_dtoa_r+0xb0c>
 80088de:	e5be      	b.n	800845e <_dtoa_r+0x696>
 80088e0:	459a      	cmp	sl, r3
 80088e2:	d1a4      	bne.n	800882e <_dtoa_r+0xa66>
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	3301      	adds	r3, #1
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	2331      	movs	r3, #49	@ 0x31
 80088ec:	f88a 3000 	strb.w	r3, [sl]
 80088f0:	e5b5      	b.n	800845e <_dtoa_r+0x696>
 80088f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008954 <_dtoa_r+0xb8c>
 80088f8:	b11b      	cbz	r3, 8008902 <_dtoa_r+0xb3a>
 80088fa:	f10a 0308 	add.w	r3, sl, #8
 80088fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	4650      	mov	r0, sl
 8008904:	b017      	add	sp, #92	@ 0x5c
 8008906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800890c:	2b01      	cmp	r3, #1
 800890e:	f77f ae3d 	ble.w	800858c <_dtoa_r+0x7c4>
 8008912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008914:	930a      	str	r3, [sp, #40]	@ 0x28
 8008916:	2001      	movs	r0, #1
 8008918:	e65b      	b.n	80085d2 <_dtoa_r+0x80a>
 800891a:	9b08      	ldr	r3, [sp, #32]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f77f aed6 	ble.w	80086ce <_dtoa_r+0x906>
 8008922:	4656      	mov	r6, sl
 8008924:	4621      	mov	r1, r4
 8008926:	4648      	mov	r0, r9
 8008928:	f7ff f9c6 	bl	8007cb8 <quorem>
 800892c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008930:	9b08      	ldr	r3, [sp, #32]
 8008932:	f806 8b01 	strb.w	r8, [r6], #1
 8008936:	eba6 020a 	sub.w	r2, r6, sl
 800893a:	4293      	cmp	r3, r2
 800893c:	ddb3      	ble.n	80088a6 <_dtoa_r+0xade>
 800893e:	4649      	mov	r1, r9
 8008940:	2300      	movs	r3, #0
 8008942:	220a      	movs	r2, #10
 8008944:	4658      	mov	r0, fp
 8008946:	f000 f967 	bl	8008c18 <__multadd>
 800894a:	4681      	mov	r9, r0
 800894c:	e7ea      	b.n	8008924 <_dtoa_r+0xb5c>
 800894e:	bf00      	nop
 8008950:	0800bc93 	.word	0x0800bc93
 8008954:	0800bc17 	.word	0x0800bc17

08008958 <_free_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4605      	mov	r5, r0
 800895c:	2900      	cmp	r1, #0
 800895e:	d040      	beq.n	80089e2 <_free_r+0x8a>
 8008960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008964:	1f0c      	subs	r4, r1, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	bfb8      	it	lt
 800896a:	18e4      	addlt	r4, r4, r3
 800896c:	f000 f8e6 	bl	8008b3c <__malloc_lock>
 8008970:	4a1c      	ldr	r2, [pc, #112]	@ (80089e4 <_free_r+0x8c>)
 8008972:	6813      	ldr	r3, [r2, #0]
 8008974:	b933      	cbnz	r3, 8008984 <_free_r+0x2c>
 8008976:	6063      	str	r3, [r4, #4]
 8008978:	6014      	str	r4, [r2, #0]
 800897a:	4628      	mov	r0, r5
 800897c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008980:	f000 b8e2 	b.w	8008b48 <__malloc_unlock>
 8008984:	42a3      	cmp	r3, r4
 8008986:	d908      	bls.n	800899a <_free_r+0x42>
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	1821      	adds	r1, r4, r0
 800898c:	428b      	cmp	r3, r1
 800898e:	bf01      	itttt	eq
 8008990:	6819      	ldreq	r1, [r3, #0]
 8008992:	685b      	ldreq	r3, [r3, #4]
 8008994:	1809      	addeq	r1, r1, r0
 8008996:	6021      	streq	r1, [r4, #0]
 8008998:	e7ed      	b.n	8008976 <_free_r+0x1e>
 800899a:	461a      	mov	r2, r3
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	b10b      	cbz	r3, 80089a4 <_free_r+0x4c>
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	d9fa      	bls.n	800899a <_free_r+0x42>
 80089a4:	6811      	ldr	r1, [r2, #0]
 80089a6:	1850      	adds	r0, r2, r1
 80089a8:	42a0      	cmp	r0, r4
 80089aa:	d10b      	bne.n	80089c4 <_free_r+0x6c>
 80089ac:	6820      	ldr	r0, [r4, #0]
 80089ae:	4401      	add	r1, r0
 80089b0:	1850      	adds	r0, r2, r1
 80089b2:	4283      	cmp	r3, r0
 80089b4:	6011      	str	r1, [r2, #0]
 80089b6:	d1e0      	bne.n	800897a <_free_r+0x22>
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	4408      	add	r0, r1
 80089be:	6010      	str	r0, [r2, #0]
 80089c0:	6053      	str	r3, [r2, #4]
 80089c2:	e7da      	b.n	800897a <_free_r+0x22>
 80089c4:	d902      	bls.n	80089cc <_free_r+0x74>
 80089c6:	230c      	movs	r3, #12
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	e7d6      	b.n	800897a <_free_r+0x22>
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	1821      	adds	r1, r4, r0
 80089d0:	428b      	cmp	r3, r1
 80089d2:	bf01      	itttt	eq
 80089d4:	6819      	ldreq	r1, [r3, #0]
 80089d6:	685b      	ldreq	r3, [r3, #4]
 80089d8:	1809      	addeq	r1, r1, r0
 80089da:	6021      	streq	r1, [r4, #0]
 80089dc:	6063      	str	r3, [r4, #4]
 80089de:	6054      	str	r4, [r2, #4]
 80089e0:	e7cb      	b.n	800897a <_free_r+0x22>
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	200008c0 	.word	0x200008c0

080089e8 <malloc>:
 80089e8:	4b02      	ldr	r3, [pc, #8]	@ (80089f4 <malloc+0xc>)
 80089ea:	4601      	mov	r1, r0
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f000 b825 	b.w	8008a3c <_malloc_r>
 80089f2:	bf00      	nop
 80089f4:	2000002c 	.word	0x2000002c

080089f8 <sbrk_aligned>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008a38 <sbrk_aligned+0x40>)
 80089fc:	460c      	mov	r4, r1
 80089fe:	6831      	ldr	r1, [r6, #0]
 8008a00:	4605      	mov	r5, r0
 8008a02:	b911      	cbnz	r1, 8008a0a <sbrk_aligned+0x12>
 8008a04:	f001 ffb0 	bl	800a968 <_sbrk_r>
 8008a08:	6030      	str	r0, [r6, #0]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f001 ffab 	bl	800a968 <_sbrk_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d103      	bne.n	8008a1e <sbrk_aligned+0x26>
 8008a16:	f04f 34ff 	mov.w	r4, #4294967295
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	1cc4      	adds	r4, r0, #3
 8008a20:	f024 0403 	bic.w	r4, r4, #3
 8008a24:	42a0      	cmp	r0, r4
 8008a26:	d0f8      	beq.n	8008a1a <sbrk_aligned+0x22>
 8008a28:	1a21      	subs	r1, r4, r0
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f001 ff9c 	bl	800a968 <_sbrk_r>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d1f2      	bne.n	8008a1a <sbrk_aligned+0x22>
 8008a34:	e7ef      	b.n	8008a16 <sbrk_aligned+0x1e>
 8008a36:	bf00      	nop
 8008a38:	200008bc 	.word	0x200008bc

08008a3c <_malloc_r>:
 8008a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a40:	1ccd      	adds	r5, r1, #3
 8008a42:	f025 0503 	bic.w	r5, r5, #3
 8008a46:	3508      	adds	r5, #8
 8008a48:	2d0c      	cmp	r5, #12
 8008a4a:	bf38      	it	cc
 8008a4c:	250c      	movcc	r5, #12
 8008a4e:	2d00      	cmp	r5, #0
 8008a50:	4606      	mov	r6, r0
 8008a52:	db01      	blt.n	8008a58 <_malloc_r+0x1c>
 8008a54:	42a9      	cmp	r1, r5
 8008a56:	d904      	bls.n	8008a62 <_malloc_r+0x26>
 8008a58:	230c      	movs	r3, #12
 8008a5a:	6033      	str	r3, [r6, #0]
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b38 <_malloc_r+0xfc>
 8008a66:	f000 f869 	bl	8008b3c <__malloc_lock>
 8008a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a6e:	461c      	mov	r4, r3
 8008a70:	bb44      	cbnz	r4, 8008ac4 <_malloc_r+0x88>
 8008a72:	4629      	mov	r1, r5
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff ffbf 	bl	80089f8 <sbrk_aligned>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	d158      	bne.n	8008b32 <_malloc_r+0xf6>
 8008a80:	f8d8 4000 	ldr.w	r4, [r8]
 8008a84:	4627      	mov	r7, r4
 8008a86:	2f00      	cmp	r7, #0
 8008a88:	d143      	bne.n	8008b12 <_malloc_r+0xd6>
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d04b      	beq.n	8008b26 <_malloc_r+0xea>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	4639      	mov	r1, r7
 8008a92:	4630      	mov	r0, r6
 8008a94:	eb04 0903 	add.w	r9, r4, r3
 8008a98:	f001 ff66 	bl	800a968 <_sbrk_r>
 8008a9c:	4581      	cmp	r9, r0
 8008a9e:	d142      	bne.n	8008b26 <_malloc_r+0xea>
 8008aa0:	6821      	ldr	r1, [r4, #0]
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	1a6d      	subs	r5, r5, r1
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	f7ff ffa6 	bl	80089f8 <sbrk_aligned>
 8008aac:	3001      	adds	r0, #1
 8008aae:	d03a      	beq.n	8008b26 <_malloc_r+0xea>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	442b      	add	r3, r5
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	bb62      	cbnz	r2, 8008b18 <_malloc_r+0xdc>
 8008abe:	f8c8 7000 	str.w	r7, [r8]
 8008ac2:	e00f      	b.n	8008ae4 <_malloc_r+0xa8>
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	1b52      	subs	r2, r2, r5
 8008ac8:	d420      	bmi.n	8008b0c <_malloc_r+0xd0>
 8008aca:	2a0b      	cmp	r2, #11
 8008acc:	d917      	bls.n	8008afe <_malloc_r+0xc2>
 8008ace:	1961      	adds	r1, r4, r5
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	6025      	str	r5, [r4, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	6059      	strne	r1, [r3, #4]
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	bf08      	it	eq
 8008adc:	f8c8 1000 	streq.w	r1, [r8]
 8008ae0:	5162      	str	r2, [r4, r5]
 8008ae2:	604b      	str	r3, [r1, #4]
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f000 f82f 	bl	8008b48 <__malloc_unlock>
 8008aea:	f104 000b 	add.w	r0, r4, #11
 8008aee:	1d23      	adds	r3, r4, #4
 8008af0:	f020 0007 	bic.w	r0, r0, #7
 8008af4:	1ac2      	subs	r2, r0, r3
 8008af6:	bf1c      	itt	ne
 8008af8:	1a1b      	subne	r3, r3, r0
 8008afa:	50a3      	strne	r3, [r4, r2]
 8008afc:	e7af      	b.n	8008a5e <_malloc_r+0x22>
 8008afe:	6862      	ldr	r2, [r4, #4]
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	bf0c      	ite	eq
 8008b04:	f8c8 2000 	streq.w	r2, [r8]
 8008b08:	605a      	strne	r2, [r3, #4]
 8008b0a:	e7eb      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	6864      	ldr	r4, [r4, #4]
 8008b10:	e7ae      	b.n	8008a70 <_malloc_r+0x34>
 8008b12:	463c      	mov	r4, r7
 8008b14:	687f      	ldr	r7, [r7, #4]
 8008b16:	e7b6      	b.n	8008a86 <_malloc_r+0x4a>
 8008b18:	461a      	mov	r2, r3
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	d1fb      	bne.n	8008b18 <_malloc_r+0xdc>
 8008b20:	2300      	movs	r3, #0
 8008b22:	6053      	str	r3, [r2, #4]
 8008b24:	e7de      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b26:	230c      	movs	r3, #12
 8008b28:	4630      	mov	r0, r6
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	f000 f80c 	bl	8008b48 <__malloc_unlock>
 8008b30:	e794      	b.n	8008a5c <_malloc_r+0x20>
 8008b32:	6005      	str	r5, [r0, #0]
 8008b34:	e7d6      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b36:	bf00      	nop
 8008b38:	200008c0 	.word	0x200008c0

08008b3c <__malloc_lock>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	@ (8008b44 <__malloc_lock+0x8>)
 8008b3e:	f7ff b898 	b.w	8007c72 <__retarget_lock_acquire_recursive>
 8008b42:	bf00      	nop
 8008b44:	200008b8 	.word	0x200008b8

08008b48 <__malloc_unlock>:
 8008b48:	4801      	ldr	r0, [pc, #4]	@ (8008b50 <__malloc_unlock+0x8>)
 8008b4a:	f7ff b893 	b.w	8007c74 <__retarget_lock_release_recursive>
 8008b4e:	bf00      	nop
 8008b50:	200008b8 	.word	0x200008b8

08008b54 <_Balloc>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	69c6      	ldr	r6, [r0, #28]
 8008b58:	4604      	mov	r4, r0
 8008b5a:	460d      	mov	r5, r1
 8008b5c:	b976      	cbnz	r6, 8008b7c <_Balloc+0x28>
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f7ff ff42 	bl	80089e8 <malloc>
 8008b64:	4602      	mov	r2, r0
 8008b66:	61e0      	str	r0, [r4, #28]
 8008b68:	b920      	cbnz	r0, 8008b74 <_Balloc+0x20>
 8008b6a:	216b      	movs	r1, #107	@ 0x6b
 8008b6c:	4b17      	ldr	r3, [pc, #92]	@ (8008bcc <_Balloc+0x78>)
 8008b6e:	4818      	ldr	r0, [pc, #96]	@ (8008bd0 <_Balloc+0x7c>)
 8008b70:	f001 ff10 	bl	800a994 <__assert_func>
 8008b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b78:	6006      	str	r6, [r0, #0]
 8008b7a:	60c6      	str	r6, [r0, #12]
 8008b7c:	69e6      	ldr	r6, [r4, #28]
 8008b7e:	68f3      	ldr	r3, [r6, #12]
 8008b80:	b183      	cbz	r3, 8008ba4 <_Balloc+0x50>
 8008b82:	69e3      	ldr	r3, [r4, #28]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b8a:	b9b8      	cbnz	r0, 8008bbc <_Balloc+0x68>
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b92:	1d72      	adds	r2, r6, #5
 8008b94:	4620      	mov	r0, r4
 8008b96:	0092      	lsls	r2, r2, #2
 8008b98:	f001 ff1a 	bl	800a9d0 <_calloc_r>
 8008b9c:	b160      	cbz	r0, 8008bb8 <_Balloc+0x64>
 8008b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ba2:	e00e      	b.n	8008bc2 <_Balloc+0x6e>
 8008ba4:	2221      	movs	r2, #33	@ 0x21
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f001 ff11 	bl	800a9d0 <_calloc_r>
 8008bae:	69e3      	ldr	r3, [r4, #28]
 8008bb0:	60f0      	str	r0, [r6, #12]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e4      	bne.n	8008b82 <_Balloc+0x2e>
 8008bb8:	2000      	movs	r0, #0
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	6802      	ldr	r2, [r0, #0]
 8008bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc8:	e7f7      	b.n	8008bba <_Balloc+0x66>
 8008bca:	bf00      	nop
 8008bcc:	0800bc24 	.word	0x0800bc24
 8008bd0:	0800bca4 	.word	0x0800bca4

08008bd4 <_Bfree>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	69c6      	ldr	r6, [r0, #28]
 8008bd8:	4605      	mov	r5, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b976      	cbnz	r6, 8008bfc <_Bfree+0x28>
 8008bde:	2010      	movs	r0, #16
 8008be0:	f7ff ff02 	bl	80089e8 <malloc>
 8008be4:	4602      	mov	r2, r0
 8008be6:	61e8      	str	r0, [r5, #28]
 8008be8:	b920      	cbnz	r0, 8008bf4 <_Bfree+0x20>
 8008bea:	218f      	movs	r1, #143	@ 0x8f
 8008bec:	4b08      	ldr	r3, [pc, #32]	@ (8008c10 <_Bfree+0x3c>)
 8008bee:	4809      	ldr	r0, [pc, #36]	@ (8008c14 <_Bfree+0x40>)
 8008bf0:	f001 fed0 	bl	800a994 <__assert_func>
 8008bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf8:	6006      	str	r6, [r0, #0]
 8008bfa:	60c6      	str	r6, [r0, #12]
 8008bfc:	b13c      	cbz	r4, 8008c0e <_Bfree+0x3a>
 8008bfe:	69eb      	ldr	r3, [r5, #28]
 8008c00:	6862      	ldr	r2, [r4, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c08:	6021      	str	r1, [r4, #0]
 8008c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	0800bc24 	.word	0x0800bc24
 8008c14:	0800bca4 	.word	0x0800bca4

08008c18 <__multadd>:
 8008c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1c:	4607      	mov	r7, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	461e      	mov	r6, r3
 8008c22:	2000      	movs	r0, #0
 8008c24:	690d      	ldr	r5, [r1, #16]
 8008c26:	f101 0c14 	add.w	ip, r1, #20
 8008c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8008c2e:	3001      	adds	r0, #1
 8008c30:	b299      	uxth	r1, r3
 8008c32:	fb02 6101 	mla	r1, r2, r1, r6
 8008c36:	0c1e      	lsrs	r6, r3, #16
 8008c38:	0c0b      	lsrs	r3, r1, #16
 8008c3a:	fb02 3306 	mla	r3, r2, r6, r3
 8008c3e:	b289      	uxth	r1, r1
 8008c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c44:	4285      	cmp	r5, r0
 8008c46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8008c4e:	dcec      	bgt.n	8008c2a <__multadd+0x12>
 8008c50:	b30e      	cbz	r6, 8008c96 <__multadd+0x7e>
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	42ab      	cmp	r3, r5
 8008c56:	dc19      	bgt.n	8008c8c <__multadd+0x74>
 8008c58:	6861      	ldr	r1, [r4, #4]
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	3101      	adds	r1, #1
 8008c5e:	f7ff ff79 	bl	8008b54 <_Balloc>
 8008c62:	4680      	mov	r8, r0
 8008c64:	b928      	cbnz	r0, 8008c72 <__multadd+0x5a>
 8008c66:	4602      	mov	r2, r0
 8008c68:	21ba      	movs	r1, #186	@ 0xba
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c9c <__multadd+0x84>)
 8008c6c:	480c      	ldr	r0, [pc, #48]	@ (8008ca0 <__multadd+0x88>)
 8008c6e:	f001 fe91 	bl	800a994 <__assert_func>
 8008c72:	6922      	ldr	r2, [r4, #16]
 8008c74:	f104 010c 	add.w	r1, r4, #12
 8008c78:	3202      	adds	r2, #2
 8008c7a:	0092      	lsls	r2, r2, #2
 8008c7c:	300c      	adds	r0, #12
 8008c7e:	f7ff f808 	bl	8007c92 <memcpy>
 8008c82:	4621      	mov	r1, r4
 8008c84:	4638      	mov	r0, r7
 8008c86:	f7ff ffa5 	bl	8008bd4 <_Bfree>
 8008c8a:	4644      	mov	r4, r8
 8008c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c90:	3501      	adds	r5, #1
 8008c92:	615e      	str	r6, [r3, #20]
 8008c94:	6125      	str	r5, [r4, #16]
 8008c96:	4620      	mov	r0, r4
 8008c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c9c:	0800bc93 	.word	0x0800bc93
 8008ca0:	0800bca4 	.word	0x0800bca4

08008ca4 <__s2b>:
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	4615      	mov	r5, r2
 8008caa:	2209      	movs	r2, #9
 8008cac:	461f      	mov	r7, r3
 8008cae:	3308      	adds	r3, #8
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	2201      	movs	r2, #1
 8008cba:	2100      	movs	r1, #0
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	db09      	blt.n	8008cd4 <__s2b+0x30>
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7ff ff47 	bl	8008b54 <_Balloc>
 8008cc6:	b940      	cbnz	r0, 8008cda <__s2b+0x36>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	21d3      	movs	r1, #211	@ 0xd3
 8008ccc:	4b18      	ldr	r3, [pc, #96]	@ (8008d30 <__s2b+0x8c>)
 8008cce:	4819      	ldr	r0, [pc, #100]	@ (8008d34 <__s2b+0x90>)
 8008cd0:	f001 fe60 	bl	800a994 <__assert_func>
 8008cd4:	0052      	lsls	r2, r2, #1
 8008cd6:	3101      	adds	r1, #1
 8008cd8:	e7f0      	b.n	8008cbc <__s2b+0x18>
 8008cda:	9b08      	ldr	r3, [sp, #32]
 8008cdc:	2d09      	cmp	r5, #9
 8008cde:	6143      	str	r3, [r0, #20]
 8008ce0:	f04f 0301 	mov.w	r3, #1
 8008ce4:	6103      	str	r3, [r0, #16]
 8008ce6:	dd16      	ble.n	8008d16 <__s2b+0x72>
 8008ce8:	f104 0909 	add.w	r9, r4, #9
 8008cec:	46c8      	mov	r8, r9
 8008cee:	442c      	add	r4, r5
 8008cf0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008cf4:	4601      	mov	r1, r0
 8008cf6:	220a      	movs	r2, #10
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	3b30      	subs	r3, #48	@ 0x30
 8008cfc:	f7ff ff8c 	bl	8008c18 <__multadd>
 8008d00:	45a0      	cmp	r8, r4
 8008d02:	d1f5      	bne.n	8008cf0 <__s2b+0x4c>
 8008d04:	f1a5 0408 	sub.w	r4, r5, #8
 8008d08:	444c      	add	r4, r9
 8008d0a:	1b2d      	subs	r5, r5, r4
 8008d0c:	1963      	adds	r3, r4, r5
 8008d0e:	42bb      	cmp	r3, r7
 8008d10:	db04      	blt.n	8008d1c <__s2b+0x78>
 8008d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d16:	2509      	movs	r5, #9
 8008d18:	340a      	adds	r4, #10
 8008d1a:	e7f6      	b.n	8008d0a <__s2b+0x66>
 8008d1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d20:	4601      	mov	r1, r0
 8008d22:	220a      	movs	r2, #10
 8008d24:	4630      	mov	r0, r6
 8008d26:	3b30      	subs	r3, #48	@ 0x30
 8008d28:	f7ff ff76 	bl	8008c18 <__multadd>
 8008d2c:	e7ee      	b.n	8008d0c <__s2b+0x68>
 8008d2e:	bf00      	nop
 8008d30:	0800bc93 	.word	0x0800bc93
 8008d34:	0800bca4 	.word	0x0800bca4

08008d38 <__hi0bits>:
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d3e:	bf3a      	itte	cc
 8008d40:	0403      	lslcc	r3, r0, #16
 8008d42:	2010      	movcc	r0, #16
 8008d44:	2000      	movcs	r0, #0
 8008d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d4a:	bf3c      	itt	cc
 8008d4c:	021b      	lslcc	r3, r3, #8
 8008d4e:	3008      	addcc	r0, #8
 8008d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d54:	bf3c      	itt	cc
 8008d56:	011b      	lslcc	r3, r3, #4
 8008d58:	3004      	addcc	r0, #4
 8008d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d5e:	bf3c      	itt	cc
 8008d60:	009b      	lslcc	r3, r3, #2
 8008d62:	3002      	addcc	r0, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	db05      	blt.n	8008d74 <__hi0bits+0x3c>
 8008d68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d6c:	f100 0001 	add.w	r0, r0, #1
 8008d70:	bf08      	it	eq
 8008d72:	2020      	moveq	r0, #32
 8008d74:	4770      	bx	lr

08008d76 <__lo0bits>:
 8008d76:	6803      	ldr	r3, [r0, #0]
 8008d78:	4602      	mov	r2, r0
 8008d7a:	f013 0007 	ands.w	r0, r3, #7
 8008d7e:	d00b      	beq.n	8008d98 <__lo0bits+0x22>
 8008d80:	07d9      	lsls	r1, r3, #31
 8008d82:	d421      	bmi.n	8008dc8 <__lo0bits+0x52>
 8008d84:	0798      	lsls	r0, r3, #30
 8008d86:	bf49      	itett	mi
 8008d88:	085b      	lsrmi	r3, r3, #1
 8008d8a:	089b      	lsrpl	r3, r3, #2
 8008d8c:	2001      	movmi	r0, #1
 8008d8e:	6013      	strmi	r3, [r2, #0]
 8008d90:	bf5c      	itt	pl
 8008d92:	2002      	movpl	r0, #2
 8008d94:	6013      	strpl	r3, [r2, #0]
 8008d96:	4770      	bx	lr
 8008d98:	b299      	uxth	r1, r3
 8008d9a:	b909      	cbnz	r1, 8008da0 <__lo0bits+0x2a>
 8008d9c:	2010      	movs	r0, #16
 8008d9e:	0c1b      	lsrs	r3, r3, #16
 8008da0:	b2d9      	uxtb	r1, r3
 8008da2:	b909      	cbnz	r1, 8008da8 <__lo0bits+0x32>
 8008da4:	3008      	adds	r0, #8
 8008da6:	0a1b      	lsrs	r3, r3, #8
 8008da8:	0719      	lsls	r1, r3, #28
 8008daa:	bf04      	itt	eq
 8008dac:	091b      	lsreq	r3, r3, #4
 8008dae:	3004      	addeq	r0, #4
 8008db0:	0799      	lsls	r1, r3, #30
 8008db2:	bf04      	itt	eq
 8008db4:	089b      	lsreq	r3, r3, #2
 8008db6:	3002      	addeq	r0, #2
 8008db8:	07d9      	lsls	r1, r3, #31
 8008dba:	d403      	bmi.n	8008dc4 <__lo0bits+0x4e>
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	f100 0001 	add.w	r0, r0, #1
 8008dc2:	d003      	beq.n	8008dcc <__lo0bits+0x56>
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	4770      	bx	lr
 8008dc8:	2000      	movs	r0, #0
 8008dca:	4770      	bx	lr
 8008dcc:	2020      	movs	r0, #32
 8008dce:	4770      	bx	lr

08008dd0 <__i2b>:
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	f7ff febd 	bl	8008b54 <_Balloc>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	b928      	cbnz	r0, 8008dea <__i2b+0x1a>
 8008dde:	f240 1145 	movw	r1, #325	@ 0x145
 8008de2:	4b04      	ldr	r3, [pc, #16]	@ (8008df4 <__i2b+0x24>)
 8008de4:	4804      	ldr	r0, [pc, #16]	@ (8008df8 <__i2b+0x28>)
 8008de6:	f001 fdd5 	bl	800a994 <__assert_func>
 8008dea:	2301      	movs	r3, #1
 8008dec:	6144      	str	r4, [r0, #20]
 8008dee:	6103      	str	r3, [r0, #16]
 8008df0:	bd10      	pop	{r4, pc}
 8008df2:	bf00      	nop
 8008df4:	0800bc93 	.word	0x0800bc93
 8008df8:	0800bca4 	.word	0x0800bca4

08008dfc <__multiply>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	4614      	mov	r4, r2
 8008e02:	690a      	ldr	r2, [r1, #16]
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	460f      	mov	r7, r1
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bfa2      	ittt	ge
 8008e0c:	4623      	movge	r3, r4
 8008e0e:	460c      	movge	r4, r1
 8008e10:	461f      	movge	r7, r3
 8008e12:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e16:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	6861      	ldr	r1, [r4, #4]
 8008e1e:	eb0a 0609 	add.w	r6, sl, r9
 8008e22:	42b3      	cmp	r3, r6
 8008e24:	b085      	sub	sp, #20
 8008e26:	bfb8      	it	lt
 8008e28:	3101      	addlt	r1, #1
 8008e2a:	f7ff fe93 	bl	8008b54 <_Balloc>
 8008e2e:	b930      	cbnz	r0, 8008e3e <__multiply+0x42>
 8008e30:	4602      	mov	r2, r0
 8008e32:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e36:	4b43      	ldr	r3, [pc, #268]	@ (8008f44 <__multiply+0x148>)
 8008e38:	4843      	ldr	r0, [pc, #268]	@ (8008f48 <__multiply+0x14c>)
 8008e3a:	f001 fdab 	bl	800a994 <__assert_func>
 8008e3e:	f100 0514 	add.w	r5, r0, #20
 8008e42:	462b      	mov	r3, r5
 8008e44:	2200      	movs	r2, #0
 8008e46:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e4a:	4543      	cmp	r3, r8
 8008e4c:	d321      	bcc.n	8008e92 <__multiply+0x96>
 8008e4e:	f107 0114 	add.w	r1, r7, #20
 8008e52:	f104 0214 	add.w	r2, r4, #20
 8008e56:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e5a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e5e:	9302      	str	r3, [sp, #8]
 8008e60:	1b13      	subs	r3, r2, r4
 8008e62:	3b15      	subs	r3, #21
 8008e64:	f023 0303 	bic.w	r3, r3, #3
 8008e68:	3304      	adds	r3, #4
 8008e6a:	f104 0715 	add.w	r7, r4, #21
 8008e6e:	42ba      	cmp	r2, r7
 8008e70:	bf38      	it	cc
 8008e72:	2304      	movcc	r3, #4
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	9103      	str	r1, [sp, #12]
 8008e7a:	428b      	cmp	r3, r1
 8008e7c:	d80c      	bhi.n	8008e98 <__multiply+0x9c>
 8008e7e:	2e00      	cmp	r6, #0
 8008e80:	dd03      	ble.n	8008e8a <__multiply+0x8e>
 8008e82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d05a      	beq.n	8008f40 <__multiply+0x144>
 8008e8a:	6106      	str	r6, [r0, #16]
 8008e8c:	b005      	add	sp, #20
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	f843 2b04 	str.w	r2, [r3], #4
 8008e96:	e7d8      	b.n	8008e4a <__multiply+0x4e>
 8008e98:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e9c:	f1ba 0f00 	cmp.w	sl, #0
 8008ea0:	d023      	beq.n	8008eea <__multiply+0xee>
 8008ea2:	46a9      	mov	r9, r5
 8008ea4:	f04f 0c00 	mov.w	ip, #0
 8008ea8:	f104 0e14 	add.w	lr, r4, #20
 8008eac:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008eb0:	f8d9 3000 	ldr.w	r3, [r9]
 8008eb4:	fa1f fb87 	uxth.w	fp, r7
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ebe:	4463      	add	r3, ip
 8008ec0:	f8d9 c000 	ldr.w	ip, [r9]
 8008ec4:	0c3f      	lsrs	r7, r7, #16
 8008ec6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008eca:	fb0a c707 	mla	r7, sl, r7, ip
 8008ece:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ed8:	4572      	cmp	r2, lr
 8008eda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ede:	f849 3b04 	str.w	r3, [r9], #4
 8008ee2:	d8e3      	bhi.n	8008eac <__multiply+0xb0>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	f845 c003 	str.w	ip, [r5, r3]
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	3104      	adds	r1, #4
 8008eee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ef2:	f1b9 0f00 	cmp.w	r9, #0
 8008ef6:	d021      	beq.n	8008f3c <__multiply+0x140>
 8008ef8:	46ae      	mov	lr, r5
 8008efa:	f04f 0a00 	mov.w	sl, #0
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	f104 0c14 	add.w	ip, r4, #20
 8008f04:	f8bc b000 	ldrh.w	fp, [ip]
 8008f08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	fb09 770b 	mla	r7, r9, fp, r7
 8008f12:	4457      	add	r7, sl
 8008f14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f18:	f84e 3b04 	str.w	r3, [lr], #4
 8008f1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f24:	f8be 3000 	ldrh.w	r3, [lr]
 8008f28:	4562      	cmp	r2, ip
 8008f2a:	fb09 330a 	mla	r3, r9, sl, r3
 8008f2e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f36:	d8e5      	bhi.n	8008f04 <__multiply+0x108>
 8008f38:	9f01      	ldr	r7, [sp, #4]
 8008f3a:	51eb      	str	r3, [r5, r7]
 8008f3c:	3504      	adds	r5, #4
 8008f3e:	e79a      	b.n	8008e76 <__multiply+0x7a>
 8008f40:	3e01      	subs	r6, #1
 8008f42:	e79c      	b.n	8008e7e <__multiply+0x82>
 8008f44:	0800bc93 	.word	0x0800bc93
 8008f48:	0800bca4 	.word	0x0800bca4

08008f4c <__pow5mult>:
 8008f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	4615      	mov	r5, r2
 8008f52:	f012 0203 	ands.w	r2, r2, #3
 8008f56:	4607      	mov	r7, r0
 8008f58:	460e      	mov	r6, r1
 8008f5a:	d007      	beq.n	8008f6c <__pow5mult+0x20>
 8008f5c:	4c25      	ldr	r4, [pc, #148]	@ (8008ff4 <__pow5mult+0xa8>)
 8008f5e:	3a01      	subs	r2, #1
 8008f60:	2300      	movs	r3, #0
 8008f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f66:	f7ff fe57 	bl	8008c18 <__multadd>
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	10ad      	asrs	r5, r5, #2
 8008f6e:	d03d      	beq.n	8008fec <__pow5mult+0xa0>
 8008f70:	69fc      	ldr	r4, [r7, #28]
 8008f72:	b97c      	cbnz	r4, 8008f94 <__pow5mult+0x48>
 8008f74:	2010      	movs	r0, #16
 8008f76:	f7ff fd37 	bl	80089e8 <malloc>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	61f8      	str	r0, [r7, #28]
 8008f7e:	b928      	cbnz	r0, 8008f8c <__pow5mult+0x40>
 8008f80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f84:	4b1c      	ldr	r3, [pc, #112]	@ (8008ff8 <__pow5mult+0xac>)
 8008f86:	481d      	ldr	r0, [pc, #116]	@ (8008ffc <__pow5mult+0xb0>)
 8008f88:	f001 fd04 	bl	800a994 <__assert_func>
 8008f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f90:	6004      	str	r4, [r0, #0]
 8008f92:	60c4      	str	r4, [r0, #12]
 8008f94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f9c:	b94c      	cbnz	r4, 8008fb2 <__pow5mult+0x66>
 8008f9e:	f240 2171 	movw	r1, #625	@ 0x271
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	f7ff ff14 	bl	8008dd0 <__i2b>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4604      	mov	r4, r0
 8008fac:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	f04f 0900 	mov.w	r9, #0
 8008fb6:	07eb      	lsls	r3, r5, #31
 8008fb8:	d50a      	bpl.n	8008fd0 <__pow5mult+0x84>
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f7ff ff1c 	bl	8008dfc <__multiply>
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff fe03 	bl	8008bd4 <_Bfree>
 8008fce:	4646      	mov	r6, r8
 8008fd0:	106d      	asrs	r5, r5, #1
 8008fd2:	d00b      	beq.n	8008fec <__pow5mult+0xa0>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	b938      	cbnz	r0, 8008fe8 <__pow5mult+0x9c>
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff ff0d 	bl	8008dfc <__multiply>
 8008fe2:	6020      	str	r0, [r4, #0]
 8008fe4:	f8c0 9000 	str.w	r9, [r0]
 8008fe8:	4604      	mov	r4, r0
 8008fea:	e7e4      	b.n	8008fb6 <__pow5mult+0x6a>
 8008fec:	4630      	mov	r0, r6
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	bf00      	nop
 8008ff4:	0800bd00 	.word	0x0800bd00
 8008ff8:	0800bc24 	.word	0x0800bc24
 8008ffc:	0800bca4 	.word	0x0800bca4

08009000 <__lshift>:
 8009000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	460c      	mov	r4, r1
 8009006:	4607      	mov	r7, r0
 8009008:	4691      	mov	r9, r2
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	6849      	ldr	r1, [r1, #4]
 800900e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009012:	68a3      	ldr	r3, [r4, #8]
 8009014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009018:	f108 0601 	add.w	r6, r8, #1
 800901c:	42b3      	cmp	r3, r6
 800901e:	db0b      	blt.n	8009038 <__lshift+0x38>
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff fd97 	bl	8008b54 <_Balloc>
 8009026:	4605      	mov	r5, r0
 8009028:	b948      	cbnz	r0, 800903e <__lshift+0x3e>
 800902a:	4602      	mov	r2, r0
 800902c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009030:	4b27      	ldr	r3, [pc, #156]	@ (80090d0 <__lshift+0xd0>)
 8009032:	4828      	ldr	r0, [pc, #160]	@ (80090d4 <__lshift+0xd4>)
 8009034:	f001 fcae 	bl	800a994 <__assert_func>
 8009038:	3101      	adds	r1, #1
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	e7ee      	b.n	800901c <__lshift+0x1c>
 800903e:	2300      	movs	r3, #0
 8009040:	f100 0114 	add.w	r1, r0, #20
 8009044:	f100 0210 	add.w	r2, r0, #16
 8009048:	4618      	mov	r0, r3
 800904a:	4553      	cmp	r3, sl
 800904c:	db33      	blt.n	80090b6 <__lshift+0xb6>
 800904e:	6920      	ldr	r0, [r4, #16]
 8009050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009054:	f104 0314 	add.w	r3, r4, #20
 8009058:	f019 091f 	ands.w	r9, r9, #31
 800905c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009060:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009064:	d02b      	beq.n	80090be <__lshift+0xbe>
 8009066:	468a      	mov	sl, r1
 8009068:	2200      	movs	r2, #0
 800906a:	f1c9 0e20 	rsb	lr, r9, #32
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	fa00 f009 	lsl.w	r0, r0, r9
 8009074:	4310      	orrs	r0, r2
 8009076:	f84a 0b04 	str.w	r0, [sl], #4
 800907a:	f853 2b04 	ldr.w	r2, [r3], #4
 800907e:	459c      	cmp	ip, r3
 8009080:	fa22 f20e 	lsr.w	r2, r2, lr
 8009084:	d8f3      	bhi.n	800906e <__lshift+0x6e>
 8009086:	ebac 0304 	sub.w	r3, ip, r4
 800908a:	3b15      	subs	r3, #21
 800908c:	f023 0303 	bic.w	r3, r3, #3
 8009090:	3304      	adds	r3, #4
 8009092:	f104 0015 	add.w	r0, r4, #21
 8009096:	4584      	cmp	ip, r0
 8009098:	bf38      	it	cc
 800909a:	2304      	movcc	r3, #4
 800909c:	50ca      	str	r2, [r1, r3]
 800909e:	b10a      	cbz	r2, 80090a4 <__lshift+0xa4>
 80090a0:	f108 0602 	add.w	r6, r8, #2
 80090a4:	3e01      	subs	r6, #1
 80090a6:	4638      	mov	r0, r7
 80090a8:	4621      	mov	r1, r4
 80090aa:	612e      	str	r6, [r5, #16]
 80090ac:	f7ff fd92 	bl	8008bd4 <_Bfree>
 80090b0:	4628      	mov	r0, r5
 80090b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ba:	3301      	adds	r3, #1
 80090bc:	e7c5      	b.n	800904a <__lshift+0x4a>
 80090be:	3904      	subs	r1, #4
 80090c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c4:	459c      	cmp	ip, r3
 80090c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80090ca:	d8f9      	bhi.n	80090c0 <__lshift+0xc0>
 80090cc:	e7ea      	b.n	80090a4 <__lshift+0xa4>
 80090ce:	bf00      	nop
 80090d0:	0800bc93 	.word	0x0800bc93
 80090d4:	0800bca4 	.word	0x0800bca4

080090d8 <__mcmp>:
 80090d8:	4603      	mov	r3, r0
 80090da:	690a      	ldr	r2, [r1, #16]
 80090dc:	6900      	ldr	r0, [r0, #16]
 80090de:	b530      	push	{r4, r5, lr}
 80090e0:	1a80      	subs	r0, r0, r2
 80090e2:	d10e      	bne.n	8009102 <__mcmp+0x2a>
 80090e4:	3314      	adds	r3, #20
 80090e6:	3114      	adds	r1, #20
 80090e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090f8:	4295      	cmp	r5, r2
 80090fa:	d003      	beq.n	8009104 <__mcmp+0x2c>
 80090fc:	d205      	bcs.n	800910a <__mcmp+0x32>
 80090fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009102:	bd30      	pop	{r4, r5, pc}
 8009104:	42a3      	cmp	r3, r4
 8009106:	d3f3      	bcc.n	80090f0 <__mcmp+0x18>
 8009108:	e7fb      	b.n	8009102 <__mcmp+0x2a>
 800910a:	2001      	movs	r0, #1
 800910c:	e7f9      	b.n	8009102 <__mcmp+0x2a>
	...

08009110 <__mdiff>:
 8009110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	4689      	mov	r9, r1
 8009116:	4606      	mov	r6, r0
 8009118:	4611      	mov	r1, r2
 800911a:	4648      	mov	r0, r9
 800911c:	4614      	mov	r4, r2
 800911e:	f7ff ffdb 	bl	80090d8 <__mcmp>
 8009122:	1e05      	subs	r5, r0, #0
 8009124:	d112      	bne.n	800914c <__mdiff+0x3c>
 8009126:	4629      	mov	r1, r5
 8009128:	4630      	mov	r0, r6
 800912a:	f7ff fd13 	bl	8008b54 <_Balloc>
 800912e:	4602      	mov	r2, r0
 8009130:	b928      	cbnz	r0, 800913e <__mdiff+0x2e>
 8009132:	f240 2137 	movw	r1, #567	@ 0x237
 8009136:	4b3e      	ldr	r3, [pc, #248]	@ (8009230 <__mdiff+0x120>)
 8009138:	483e      	ldr	r0, [pc, #248]	@ (8009234 <__mdiff+0x124>)
 800913a:	f001 fc2b 	bl	800a994 <__assert_func>
 800913e:	2301      	movs	r3, #1
 8009140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009144:	4610      	mov	r0, r2
 8009146:	b003      	add	sp, #12
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	bfbc      	itt	lt
 800914e:	464b      	movlt	r3, r9
 8009150:	46a1      	movlt	r9, r4
 8009152:	4630      	mov	r0, r6
 8009154:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009158:	bfba      	itte	lt
 800915a:	461c      	movlt	r4, r3
 800915c:	2501      	movlt	r5, #1
 800915e:	2500      	movge	r5, #0
 8009160:	f7ff fcf8 	bl	8008b54 <_Balloc>
 8009164:	4602      	mov	r2, r0
 8009166:	b918      	cbnz	r0, 8009170 <__mdiff+0x60>
 8009168:	f240 2145 	movw	r1, #581	@ 0x245
 800916c:	4b30      	ldr	r3, [pc, #192]	@ (8009230 <__mdiff+0x120>)
 800916e:	e7e3      	b.n	8009138 <__mdiff+0x28>
 8009170:	f100 0b14 	add.w	fp, r0, #20
 8009174:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009178:	f109 0310 	add.w	r3, r9, #16
 800917c:	60c5      	str	r5, [r0, #12]
 800917e:	f04f 0c00 	mov.w	ip, #0
 8009182:	f109 0514 	add.w	r5, r9, #20
 8009186:	46d9      	mov	r9, fp
 8009188:	6926      	ldr	r6, [r4, #16]
 800918a:	f104 0e14 	add.w	lr, r4, #20
 800918e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009192:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800919e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091a2:	b281      	uxth	r1, r0
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	fa1f f38a 	uxth.w	r3, sl
 80091aa:	1a5b      	subs	r3, r3, r1
 80091ac:	0c00      	lsrs	r0, r0, #16
 80091ae:	4463      	add	r3, ip
 80091b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091be:	4576      	cmp	r6, lr
 80091c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091c4:	f849 3b04 	str.w	r3, [r9], #4
 80091c8:	d8e6      	bhi.n	8009198 <__mdiff+0x88>
 80091ca:	1b33      	subs	r3, r6, r4
 80091cc:	3b15      	subs	r3, #21
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	3415      	adds	r4, #21
 80091d4:	3304      	adds	r3, #4
 80091d6:	42a6      	cmp	r6, r4
 80091d8:	bf38      	it	cc
 80091da:	2304      	movcc	r3, #4
 80091dc:	441d      	add	r5, r3
 80091de:	445b      	add	r3, fp
 80091e0:	461e      	mov	r6, r3
 80091e2:	462c      	mov	r4, r5
 80091e4:	4544      	cmp	r4, r8
 80091e6:	d30e      	bcc.n	8009206 <__mdiff+0xf6>
 80091e8:	f108 0103 	add.w	r1, r8, #3
 80091ec:	1b49      	subs	r1, r1, r5
 80091ee:	f021 0103 	bic.w	r1, r1, #3
 80091f2:	3d03      	subs	r5, #3
 80091f4:	45a8      	cmp	r8, r5
 80091f6:	bf38      	it	cc
 80091f8:	2100      	movcc	r1, #0
 80091fa:	440b      	add	r3, r1
 80091fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009200:	b199      	cbz	r1, 800922a <__mdiff+0x11a>
 8009202:	6117      	str	r7, [r2, #16]
 8009204:	e79e      	b.n	8009144 <__mdiff+0x34>
 8009206:	46e6      	mov	lr, ip
 8009208:	f854 1b04 	ldr.w	r1, [r4], #4
 800920c:	fa1f fc81 	uxth.w	ip, r1
 8009210:	44f4      	add	ip, lr
 8009212:	0c08      	lsrs	r0, r1, #16
 8009214:	4471      	add	r1, lr
 8009216:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800921a:	b289      	uxth	r1, r1
 800921c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009224:	f846 1b04 	str.w	r1, [r6], #4
 8009228:	e7dc      	b.n	80091e4 <__mdiff+0xd4>
 800922a:	3f01      	subs	r7, #1
 800922c:	e7e6      	b.n	80091fc <__mdiff+0xec>
 800922e:	bf00      	nop
 8009230:	0800bc93 	.word	0x0800bc93
 8009234:	0800bca4 	.word	0x0800bca4

08009238 <__ulp>:
 8009238:	4b0e      	ldr	r3, [pc, #56]	@ (8009274 <__ulp+0x3c>)
 800923a:	400b      	ands	r3, r1
 800923c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009240:	2b00      	cmp	r3, #0
 8009242:	dc08      	bgt.n	8009256 <__ulp+0x1e>
 8009244:	425b      	negs	r3, r3
 8009246:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800924a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800924e:	da04      	bge.n	800925a <__ulp+0x22>
 8009250:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009254:	4113      	asrs	r3, r2
 8009256:	2200      	movs	r2, #0
 8009258:	e008      	b.n	800926c <__ulp+0x34>
 800925a:	f1a2 0314 	sub.w	r3, r2, #20
 800925e:	2b1e      	cmp	r3, #30
 8009260:	bfd6      	itet	le
 8009262:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009266:	2201      	movgt	r2, #1
 8009268:	40da      	lsrle	r2, r3
 800926a:	2300      	movs	r3, #0
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	7ff00000 	.word	0x7ff00000

08009278 <__b2d>:
 8009278:	6902      	ldr	r2, [r0, #16]
 800927a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927c:	f100 0614 	add.w	r6, r0, #20
 8009280:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009284:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009288:	4f1e      	ldr	r7, [pc, #120]	@ (8009304 <__b2d+0x8c>)
 800928a:	4620      	mov	r0, r4
 800928c:	f7ff fd54 	bl	8008d38 <__hi0bits>
 8009290:	4603      	mov	r3, r0
 8009292:	f1c0 0020 	rsb	r0, r0, #32
 8009296:	2b0a      	cmp	r3, #10
 8009298:	f1a2 0504 	sub.w	r5, r2, #4
 800929c:	6008      	str	r0, [r1, #0]
 800929e:	dc12      	bgt.n	80092c6 <__b2d+0x4e>
 80092a0:	42ae      	cmp	r6, r5
 80092a2:	bf2c      	ite	cs
 80092a4:	2200      	movcs	r2, #0
 80092a6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80092aa:	f1c3 0c0b 	rsb	ip, r3, #11
 80092ae:	3315      	adds	r3, #21
 80092b0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80092b4:	fa04 f303 	lsl.w	r3, r4, r3
 80092b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80092bc:	ea4e 0107 	orr.w	r1, lr, r7
 80092c0:	431a      	orrs	r2, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c6:	42ae      	cmp	r6, r5
 80092c8:	bf36      	itet	cc
 80092ca:	f1a2 0508 	subcc.w	r5, r2, #8
 80092ce:	2200      	movcs	r2, #0
 80092d0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80092d4:	3b0b      	subs	r3, #11
 80092d6:	d012      	beq.n	80092fe <__b2d+0x86>
 80092d8:	f1c3 0720 	rsb	r7, r3, #32
 80092dc:	fa22 f107 	lsr.w	r1, r2, r7
 80092e0:	409c      	lsls	r4, r3
 80092e2:	430c      	orrs	r4, r1
 80092e4:	42b5      	cmp	r5, r6
 80092e6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80092ea:	bf94      	ite	ls
 80092ec:	2400      	movls	r4, #0
 80092ee:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80092f2:	409a      	lsls	r2, r3
 80092f4:	40fc      	lsrs	r4, r7
 80092f6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80092fa:	4322      	orrs	r2, r4
 80092fc:	e7e1      	b.n	80092c2 <__b2d+0x4a>
 80092fe:	ea44 0107 	orr.w	r1, r4, r7
 8009302:	e7de      	b.n	80092c2 <__b2d+0x4a>
 8009304:	3ff00000 	.word	0x3ff00000

08009308 <__d2b>:
 8009308:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800930c:	2101      	movs	r1, #1
 800930e:	4690      	mov	r8, r2
 8009310:	4699      	mov	r9, r3
 8009312:	9e08      	ldr	r6, [sp, #32]
 8009314:	f7ff fc1e 	bl	8008b54 <_Balloc>
 8009318:	4604      	mov	r4, r0
 800931a:	b930      	cbnz	r0, 800932a <__d2b+0x22>
 800931c:	4602      	mov	r2, r0
 800931e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009322:	4b23      	ldr	r3, [pc, #140]	@ (80093b0 <__d2b+0xa8>)
 8009324:	4823      	ldr	r0, [pc, #140]	@ (80093b4 <__d2b+0xac>)
 8009326:	f001 fb35 	bl	800a994 <__assert_func>
 800932a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800932e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009332:	b10d      	cbz	r5, 8009338 <__d2b+0x30>
 8009334:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	f1b8 0300 	subs.w	r3, r8, #0
 800933e:	d024      	beq.n	800938a <__d2b+0x82>
 8009340:	4668      	mov	r0, sp
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	f7ff fd17 	bl	8008d76 <__lo0bits>
 8009348:	e9dd 1200 	ldrd	r1, r2, [sp]
 800934c:	b1d8      	cbz	r0, 8009386 <__d2b+0x7e>
 800934e:	f1c0 0320 	rsb	r3, r0, #32
 8009352:	fa02 f303 	lsl.w	r3, r2, r3
 8009356:	430b      	orrs	r3, r1
 8009358:	40c2      	lsrs	r2, r0
 800935a:	6163      	str	r3, [r4, #20]
 800935c:	9201      	str	r2, [sp, #4]
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	bf0c      	ite	eq
 8009364:	2201      	moveq	r2, #1
 8009366:	2202      	movne	r2, #2
 8009368:	61a3      	str	r3, [r4, #24]
 800936a:	6122      	str	r2, [r4, #16]
 800936c:	b1ad      	cbz	r5, 800939a <__d2b+0x92>
 800936e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009372:	4405      	add	r5, r0
 8009374:	6035      	str	r5, [r6, #0]
 8009376:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800937a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800937c:	6018      	str	r0, [r3, #0]
 800937e:	4620      	mov	r0, r4
 8009380:	b002      	add	sp, #8
 8009382:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009386:	6161      	str	r1, [r4, #20]
 8009388:	e7e9      	b.n	800935e <__d2b+0x56>
 800938a:	a801      	add	r0, sp, #4
 800938c:	f7ff fcf3 	bl	8008d76 <__lo0bits>
 8009390:	9b01      	ldr	r3, [sp, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	6163      	str	r3, [r4, #20]
 8009396:	3020      	adds	r0, #32
 8009398:	e7e7      	b.n	800936a <__d2b+0x62>
 800939a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800939e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093a2:	6030      	str	r0, [r6, #0]
 80093a4:	6918      	ldr	r0, [r3, #16]
 80093a6:	f7ff fcc7 	bl	8008d38 <__hi0bits>
 80093aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093ae:	e7e4      	b.n	800937a <__d2b+0x72>
 80093b0:	0800bc93 	.word	0x0800bc93
 80093b4:	0800bca4 	.word	0x0800bca4

080093b8 <__ratio>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	b085      	sub	sp, #20
 80093be:	e9cd 1000 	strd	r1, r0, [sp]
 80093c2:	a902      	add	r1, sp, #8
 80093c4:	f7ff ff58 	bl	8009278 <__b2d>
 80093c8:	468b      	mov	fp, r1
 80093ca:	4606      	mov	r6, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	9800      	ldr	r0, [sp, #0]
 80093d0:	a903      	add	r1, sp, #12
 80093d2:	f7ff ff51 	bl	8009278 <__b2d>
 80093d6:	460d      	mov	r5, r1
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	4689      	mov	r9, r1
 80093dc:	6919      	ldr	r1, [r3, #16]
 80093de:	9b00      	ldr	r3, [sp, #0]
 80093e0:	4604      	mov	r4, r0
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	4630      	mov	r0, r6
 80093e6:	1ac9      	subs	r1, r1, r3
 80093e8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80093ec:	1a9b      	subs	r3, r3, r2
 80093ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bfcd      	iteet	gt
 80093f6:	463a      	movgt	r2, r7
 80093f8:	462a      	movle	r2, r5
 80093fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80093fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009402:	bfd8      	it	le
 8009404:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009408:	464b      	mov	r3, r9
 800940a:	4622      	mov	r2, r4
 800940c:	4659      	mov	r1, fp
 800940e:	f7f7 f98d 	bl	800072c <__aeabi_ddiv>
 8009412:	b005      	add	sp, #20
 8009414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009418 <__copybits>:
 8009418:	3901      	subs	r1, #1
 800941a:	b570      	push	{r4, r5, r6, lr}
 800941c:	1149      	asrs	r1, r1, #5
 800941e:	6914      	ldr	r4, [r2, #16]
 8009420:	3101      	adds	r1, #1
 8009422:	f102 0314 	add.w	r3, r2, #20
 8009426:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800942a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800942e:	1f05      	subs	r5, r0, #4
 8009430:	42a3      	cmp	r3, r4
 8009432:	d30c      	bcc.n	800944e <__copybits+0x36>
 8009434:	1aa3      	subs	r3, r4, r2
 8009436:	3b11      	subs	r3, #17
 8009438:	f023 0303 	bic.w	r3, r3, #3
 800943c:	3211      	adds	r2, #17
 800943e:	42a2      	cmp	r2, r4
 8009440:	bf88      	it	hi
 8009442:	2300      	movhi	r3, #0
 8009444:	4418      	add	r0, r3
 8009446:	2300      	movs	r3, #0
 8009448:	4288      	cmp	r0, r1
 800944a:	d305      	bcc.n	8009458 <__copybits+0x40>
 800944c:	bd70      	pop	{r4, r5, r6, pc}
 800944e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009452:	f845 6f04 	str.w	r6, [r5, #4]!
 8009456:	e7eb      	b.n	8009430 <__copybits+0x18>
 8009458:	f840 3b04 	str.w	r3, [r0], #4
 800945c:	e7f4      	b.n	8009448 <__copybits+0x30>

0800945e <__any_on>:
 800945e:	f100 0214 	add.w	r2, r0, #20
 8009462:	6900      	ldr	r0, [r0, #16]
 8009464:	114b      	asrs	r3, r1, #5
 8009466:	4298      	cmp	r0, r3
 8009468:	b510      	push	{r4, lr}
 800946a:	db11      	blt.n	8009490 <__any_on+0x32>
 800946c:	dd0a      	ble.n	8009484 <__any_on+0x26>
 800946e:	f011 011f 	ands.w	r1, r1, #31
 8009472:	d007      	beq.n	8009484 <__any_on+0x26>
 8009474:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009478:	fa24 f001 	lsr.w	r0, r4, r1
 800947c:	fa00 f101 	lsl.w	r1, r0, r1
 8009480:	428c      	cmp	r4, r1
 8009482:	d10b      	bne.n	800949c <__any_on+0x3e>
 8009484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009488:	4293      	cmp	r3, r2
 800948a:	d803      	bhi.n	8009494 <__any_on+0x36>
 800948c:	2000      	movs	r0, #0
 800948e:	bd10      	pop	{r4, pc}
 8009490:	4603      	mov	r3, r0
 8009492:	e7f7      	b.n	8009484 <__any_on+0x26>
 8009494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009498:	2900      	cmp	r1, #0
 800949a:	d0f5      	beq.n	8009488 <__any_on+0x2a>
 800949c:	2001      	movs	r0, #1
 800949e:	e7f6      	b.n	800948e <__any_on+0x30>

080094a0 <sulp>:
 80094a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a4:	460f      	mov	r7, r1
 80094a6:	4690      	mov	r8, r2
 80094a8:	f7ff fec6 	bl	8009238 <__ulp>
 80094ac:	4604      	mov	r4, r0
 80094ae:	460d      	mov	r5, r1
 80094b0:	f1b8 0f00 	cmp.w	r8, #0
 80094b4:	d011      	beq.n	80094da <sulp+0x3a>
 80094b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80094ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80094be:	2b00      	cmp	r3, #0
 80094c0:	dd0b      	ble.n	80094da <sulp+0x3a>
 80094c2:	2400      	movs	r4, #0
 80094c4:	051b      	lsls	r3, r3, #20
 80094c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80094ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80094ce:	4622      	mov	r2, r4
 80094d0:	462b      	mov	r3, r5
 80094d2:	f7f7 f801 	bl	80004d8 <__aeabi_dmul>
 80094d6:	4604      	mov	r4, r0
 80094d8:	460d      	mov	r5, r1
 80094da:	4620      	mov	r0, r4
 80094dc:	4629      	mov	r1, r5
 80094de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e2:	0000      	movs	r0, r0
 80094e4:	0000      	movs	r0, r0
	...

080094e8 <_strtod_l>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	b09f      	sub	sp, #124	@ 0x7c
 80094ee:	9217      	str	r2, [sp, #92]	@ 0x5c
 80094f0:	2200      	movs	r2, #0
 80094f2:	460c      	mov	r4, r1
 80094f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80094f6:	f04f 0a00 	mov.w	sl, #0
 80094fa:	f04f 0b00 	mov.w	fp, #0
 80094fe:	460a      	mov	r2, r1
 8009500:	9005      	str	r0, [sp, #20]
 8009502:	9219      	str	r2, [sp, #100]	@ 0x64
 8009504:	7811      	ldrb	r1, [r2, #0]
 8009506:	292b      	cmp	r1, #43	@ 0x2b
 8009508:	d048      	beq.n	800959c <_strtod_l+0xb4>
 800950a:	d836      	bhi.n	800957a <_strtod_l+0x92>
 800950c:	290d      	cmp	r1, #13
 800950e:	d830      	bhi.n	8009572 <_strtod_l+0x8a>
 8009510:	2908      	cmp	r1, #8
 8009512:	d830      	bhi.n	8009576 <_strtod_l+0x8e>
 8009514:	2900      	cmp	r1, #0
 8009516:	d039      	beq.n	800958c <_strtod_l+0xa4>
 8009518:	2200      	movs	r2, #0
 800951a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800951c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800951e:	782a      	ldrb	r2, [r5, #0]
 8009520:	2a30      	cmp	r2, #48	@ 0x30
 8009522:	f040 80b1 	bne.w	8009688 <_strtod_l+0x1a0>
 8009526:	786a      	ldrb	r2, [r5, #1]
 8009528:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800952c:	2a58      	cmp	r2, #88	@ 0x58
 800952e:	d16c      	bne.n	800960a <_strtod_l+0x122>
 8009530:	9302      	str	r3, [sp, #8]
 8009532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009534:	4a8e      	ldr	r2, [pc, #568]	@ (8009770 <_strtod_l+0x288>)
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	ab1a      	add	r3, sp, #104	@ 0x68
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	9805      	ldr	r0, [sp, #20]
 800953e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009540:	a919      	add	r1, sp, #100	@ 0x64
 8009542:	f001 fac1 	bl	800aac8 <__gethex>
 8009546:	f010 060f 	ands.w	r6, r0, #15
 800954a:	4604      	mov	r4, r0
 800954c:	d005      	beq.n	800955a <_strtod_l+0x72>
 800954e:	2e06      	cmp	r6, #6
 8009550:	d126      	bne.n	80095a0 <_strtod_l+0xb8>
 8009552:	2300      	movs	r3, #0
 8009554:	3501      	adds	r5, #1
 8009556:	9519      	str	r5, [sp, #100]	@ 0x64
 8009558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800955a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800955c:	2b00      	cmp	r3, #0
 800955e:	f040 8584 	bne.w	800a06a <_strtod_l+0xb82>
 8009562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009564:	b1bb      	cbz	r3, 8009596 <_strtod_l+0xae>
 8009566:	4650      	mov	r0, sl
 8009568:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800956c:	b01f      	add	sp, #124	@ 0x7c
 800956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009572:	2920      	cmp	r1, #32
 8009574:	d1d0      	bne.n	8009518 <_strtod_l+0x30>
 8009576:	3201      	adds	r2, #1
 8009578:	e7c3      	b.n	8009502 <_strtod_l+0x1a>
 800957a:	292d      	cmp	r1, #45	@ 0x2d
 800957c:	d1cc      	bne.n	8009518 <_strtod_l+0x30>
 800957e:	2101      	movs	r1, #1
 8009580:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009582:	1c51      	adds	r1, r2, #1
 8009584:	9119      	str	r1, [sp, #100]	@ 0x64
 8009586:	7852      	ldrb	r2, [r2, #1]
 8009588:	2a00      	cmp	r2, #0
 800958a:	d1c7      	bne.n	800951c <_strtod_l+0x34>
 800958c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800958e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009590:	2b00      	cmp	r3, #0
 8009592:	f040 8568 	bne.w	800a066 <_strtod_l+0xb7e>
 8009596:	4650      	mov	r0, sl
 8009598:	4659      	mov	r1, fp
 800959a:	e7e7      	b.n	800956c <_strtod_l+0x84>
 800959c:	2100      	movs	r1, #0
 800959e:	e7ef      	b.n	8009580 <_strtod_l+0x98>
 80095a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095a2:	b13a      	cbz	r2, 80095b4 <_strtod_l+0xcc>
 80095a4:	2135      	movs	r1, #53	@ 0x35
 80095a6:	a81c      	add	r0, sp, #112	@ 0x70
 80095a8:	f7ff ff36 	bl	8009418 <__copybits>
 80095ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095ae:	9805      	ldr	r0, [sp, #20]
 80095b0:	f7ff fb10 	bl	8008bd4 <_Bfree>
 80095b4:	3e01      	subs	r6, #1
 80095b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80095b8:	2e04      	cmp	r6, #4
 80095ba:	d806      	bhi.n	80095ca <_strtod_l+0xe2>
 80095bc:	e8df f006 	tbb	[pc, r6]
 80095c0:	201d0314 	.word	0x201d0314
 80095c4:	14          	.byte	0x14
 80095c5:	00          	.byte	0x00
 80095c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80095ca:	05e1      	lsls	r1, r4, #23
 80095cc:	bf48      	it	mi
 80095ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80095d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095d6:	0d1b      	lsrs	r3, r3, #20
 80095d8:	051b      	lsls	r3, r3, #20
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1bd      	bne.n	800955a <_strtod_l+0x72>
 80095de:	f7fe fb1d 	bl	8007c1c <__errno>
 80095e2:	2322      	movs	r3, #34	@ 0x22
 80095e4:	6003      	str	r3, [r0, #0]
 80095e6:	e7b8      	b.n	800955a <_strtod_l+0x72>
 80095e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80095ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80095f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80095f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80095f8:	e7e7      	b.n	80095ca <_strtod_l+0xe2>
 80095fa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009774 <_strtod_l+0x28c>
 80095fe:	e7e4      	b.n	80095ca <_strtod_l+0xe2>
 8009600:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009604:	f04f 3aff 	mov.w	sl, #4294967295
 8009608:	e7df      	b.n	80095ca <_strtod_l+0xe2>
 800960a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009610:	785b      	ldrb	r3, [r3, #1]
 8009612:	2b30      	cmp	r3, #48	@ 0x30
 8009614:	d0f9      	beq.n	800960a <_strtod_l+0x122>
 8009616:	2b00      	cmp	r3, #0
 8009618:	d09f      	beq.n	800955a <_strtod_l+0x72>
 800961a:	2301      	movs	r3, #1
 800961c:	9309      	str	r3, [sp, #36]	@ 0x24
 800961e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009620:	220a      	movs	r2, #10
 8009622:	930c      	str	r3, [sp, #48]	@ 0x30
 8009624:	2300      	movs	r3, #0
 8009626:	461f      	mov	r7, r3
 8009628:	9308      	str	r3, [sp, #32]
 800962a:	930a      	str	r3, [sp, #40]	@ 0x28
 800962c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800962e:	7805      	ldrb	r5, [r0, #0]
 8009630:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009634:	b2d9      	uxtb	r1, r3
 8009636:	2909      	cmp	r1, #9
 8009638:	d928      	bls.n	800968c <_strtod_l+0x1a4>
 800963a:	2201      	movs	r2, #1
 800963c:	494e      	ldr	r1, [pc, #312]	@ (8009778 <_strtod_l+0x290>)
 800963e:	f001 f981 	bl	800a944 <strncmp>
 8009642:	2800      	cmp	r0, #0
 8009644:	d032      	beq.n	80096ac <_strtod_l+0x1c4>
 8009646:	2000      	movs	r0, #0
 8009648:	462a      	mov	r2, r5
 800964a:	4681      	mov	r9, r0
 800964c:	463d      	mov	r5, r7
 800964e:	4603      	mov	r3, r0
 8009650:	2a65      	cmp	r2, #101	@ 0x65
 8009652:	d001      	beq.n	8009658 <_strtod_l+0x170>
 8009654:	2a45      	cmp	r2, #69	@ 0x45
 8009656:	d114      	bne.n	8009682 <_strtod_l+0x19a>
 8009658:	b91d      	cbnz	r5, 8009662 <_strtod_l+0x17a>
 800965a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800965c:	4302      	orrs	r2, r0
 800965e:	d095      	beq.n	800958c <_strtod_l+0xa4>
 8009660:	2500      	movs	r5, #0
 8009662:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009664:	1c62      	adds	r2, r4, #1
 8009666:	9219      	str	r2, [sp, #100]	@ 0x64
 8009668:	7862      	ldrb	r2, [r4, #1]
 800966a:	2a2b      	cmp	r2, #43	@ 0x2b
 800966c:	d077      	beq.n	800975e <_strtod_l+0x276>
 800966e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009670:	d07b      	beq.n	800976a <_strtod_l+0x282>
 8009672:	f04f 0c00 	mov.w	ip, #0
 8009676:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800967a:	2909      	cmp	r1, #9
 800967c:	f240 8082 	bls.w	8009784 <_strtod_l+0x29c>
 8009680:	9419      	str	r4, [sp, #100]	@ 0x64
 8009682:	f04f 0800 	mov.w	r8, #0
 8009686:	e0a2      	b.n	80097ce <_strtod_l+0x2e6>
 8009688:	2300      	movs	r3, #0
 800968a:	e7c7      	b.n	800961c <_strtod_l+0x134>
 800968c:	2f08      	cmp	r7, #8
 800968e:	bfd5      	itete	le
 8009690:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009692:	9908      	ldrgt	r1, [sp, #32]
 8009694:	fb02 3301 	mlale	r3, r2, r1, r3
 8009698:	fb02 3301 	mlagt	r3, r2, r1, r3
 800969c:	f100 0001 	add.w	r0, r0, #1
 80096a0:	bfd4      	ite	le
 80096a2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80096a4:	9308      	strgt	r3, [sp, #32]
 80096a6:	3701      	adds	r7, #1
 80096a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80096aa:	e7bf      	b.n	800962c <_strtod_l+0x144>
 80096ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80096b2:	785a      	ldrb	r2, [r3, #1]
 80096b4:	b37f      	cbz	r7, 8009716 <_strtod_l+0x22e>
 80096b6:	4681      	mov	r9, r0
 80096b8:	463d      	mov	r5, r7
 80096ba:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80096be:	2b09      	cmp	r3, #9
 80096c0:	d912      	bls.n	80096e8 <_strtod_l+0x200>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e7c4      	b.n	8009650 <_strtod_l+0x168>
 80096c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096c8:	3001      	adds	r0, #1
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80096ce:	785a      	ldrb	r2, [r3, #1]
 80096d0:	2a30      	cmp	r2, #48	@ 0x30
 80096d2:	d0f8      	beq.n	80096c6 <_strtod_l+0x1de>
 80096d4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80096d8:	2b08      	cmp	r3, #8
 80096da:	f200 84cb 	bhi.w	800a074 <_strtod_l+0xb8c>
 80096de:	4681      	mov	r9, r0
 80096e0:	2000      	movs	r0, #0
 80096e2:	4605      	mov	r5, r0
 80096e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80096e8:	3a30      	subs	r2, #48	@ 0x30
 80096ea:	f100 0301 	add.w	r3, r0, #1
 80096ee:	d02a      	beq.n	8009746 <_strtod_l+0x25e>
 80096f0:	4499      	add	r9, r3
 80096f2:	210a      	movs	r1, #10
 80096f4:	462b      	mov	r3, r5
 80096f6:	eb00 0c05 	add.w	ip, r0, r5
 80096fa:	4563      	cmp	r3, ip
 80096fc:	d10d      	bne.n	800971a <_strtod_l+0x232>
 80096fe:	1c69      	adds	r1, r5, #1
 8009700:	4401      	add	r1, r0
 8009702:	4428      	add	r0, r5
 8009704:	2808      	cmp	r0, #8
 8009706:	dc16      	bgt.n	8009736 <_strtod_l+0x24e>
 8009708:	230a      	movs	r3, #10
 800970a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800970c:	fb03 2300 	mla	r3, r3, r0, r2
 8009710:	930a      	str	r3, [sp, #40]	@ 0x28
 8009712:	2300      	movs	r3, #0
 8009714:	e018      	b.n	8009748 <_strtod_l+0x260>
 8009716:	4638      	mov	r0, r7
 8009718:	e7da      	b.n	80096d0 <_strtod_l+0x1e8>
 800971a:	2b08      	cmp	r3, #8
 800971c:	f103 0301 	add.w	r3, r3, #1
 8009720:	dc03      	bgt.n	800972a <_strtod_l+0x242>
 8009722:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009724:	434e      	muls	r6, r1
 8009726:	960a      	str	r6, [sp, #40]	@ 0x28
 8009728:	e7e7      	b.n	80096fa <_strtod_l+0x212>
 800972a:	2b10      	cmp	r3, #16
 800972c:	bfde      	ittt	le
 800972e:	9e08      	ldrle	r6, [sp, #32]
 8009730:	434e      	mulle	r6, r1
 8009732:	9608      	strle	r6, [sp, #32]
 8009734:	e7e1      	b.n	80096fa <_strtod_l+0x212>
 8009736:	280f      	cmp	r0, #15
 8009738:	dceb      	bgt.n	8009712 <_strtod_l+0x22a>
 800973a:	230a      	movs	r3, #10
 800973c:	9808      	ldr	r0, [sp, #32]
 800973e:	fb03 2300 	mla	r3, r3, r0, r2
 8009742:	9308      	str	r3, [sp, #32]
 8009744:	e7e5      	b.n	8009712 <_strtod_l+0x22a>
 8009746:	4629      	mov	r1, r5
 8009748:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800974a:	460d      	mov	r5, r1
 800974c:	1c50      	adds	r0, r2, #1
 800974e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009750:	7852      	ldrb	r2, [r2, #1]
 8009752:	4618      	mov	r0, r3
 8009754:	e7b1      	b.n	80096ba <_strtod_l+0x1d2>
 8009756:	f04f 0900 	mov.w	r9, #0
 800975a:	2301      	movs	r3, #1
 800975c:	e77d      	b.n	800965a <_strtod_l+0x172>
 800975e:	f04f 0c00 	mov.w	ip, #0
 8009762:	1ca2      	adds	r2, r4, #2
 8009764:	9219      	str	r2, [sp, #100]	@ 0x64
 8009766:	78a2      	ldrb	r2, [r4, #2]
 8009768:	e785      	b.n	8009676 <_strtod_l+0x18e>
 800976a:	f04f 0c01 	mov.w	ip, #1
 800976e:	e7f8      	b.n	8009762 <_strtod_l+0x27a>
 8009770:	0800be18 	.word	0x0800be18
 8009774:	7ff00000 	.word	0x7ff00000
 8009778:	0800be00 	.word	0x0800be00
 800977c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800977e:	1c51      	adds	r1, r2, #1
 8009780:	9119      	str	r1, [sp, #100]	@ 0x64
 8009782:	7852      	ldrb	r2, [r2, #1]
 8009784:	2a30      	cmp	r2, #48	@ 0x30
 8009786:	d0f9      	beq.n	800977c <_strtod_l+0x294>
 8009788:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800978c:	2908      	cmp	r1, #8
 800978e:	f63f af78 	bhi.w	8009682 <_strtod_l+0x19a>
 8009792:	f04f 080a 	mov.w	r8, #10
 8009796:	3a30      	subs	r2, #48	@ 0x30
 8009798:	920e      	str	r2, [sp, #56]	@ 0x38
 800979a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800979c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800979e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097a0:	1c56      	adds	r6, r2, #1
 80097a2:	9619      	str	r6, [sp, #100]	@ 0x64
 80097a4:	7852      	ldrb	r2, [r2, #1]
 80097a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80097aa:	f1be 0f09 	cmp.w	lr, #9
 80097ae:	d939      	bls.n	8009824 <_strtod_l+0x33c>
 80097b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80097b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80097b6:	1a76      	subs	r6, r6, r1
 80097b8:	2e08      	cmp	r6, #8
 80097ba:	dc03      	bgt.n	80097c4 <_strtod_l+0x2dc>
 80097bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80097be:	4588      	cmp	r8, r1
 80097c0:	bfa8      	it	ge
 80097c2:	4688      	movge	r8, r1
 80097c4:	f1bc 0f00 	cmp.w	ip, #0
 80097c8:	d001      	beq.n	80097ce <_strtod_l+0x2e6>
 80097ca:	f1c8 0800 	rsb	r8, r8, #0
 80097ce:	2d00      	cmp	r5, #0
 80097d0:	d14e      	bne.n	8009870 <_strtod_l+0x388>
 80097d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097d4:	4308      	orrs	r0, r1
 80097d6:	f47f aec0 	bne.w	800955a <_strtod_l+0x72>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f47f aed6 	bne.w	800958c <_strtod_l+0xa4>
 80097e0:	2a69      	cmp	r2, #105	@ 0x69
 80097e2:	d028      	beq.n	8009836 <_strtod_l+0x34e>
 80097e4:	dc25      	bgt.n	8009832 <_strtod_l+0x34a>
 80097e6:	2a49      	cmp	r2, #73	@ 0x49
 80097e8:	d025      	beq.n	8009836 <_strtod_l+0x34e>
 80097ea:	2a4e      	cmp	r2, #78	@ 0x4e
 80097ec:	f47f aece 	bne.w	800958c <_strtod_l+0xa4>
 80097f0:	499a      	ldr	r1, [pc, #616]	@ (8009a5c <_strtod_l+0x574>)
 80097f2:	a819      	add	r0, sp, #100	@ 0x64
 80097f4:	f001 fb8a 	bl	800af0c <__match>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	f43f aec7 	beq.w	800958c <_strtod_l+0xa4>
 80097fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2b28      	cmp	r3, #40	@ 0x28
 8009804:	d12e      	bne.n	8009864 <_strtod_l+0x37c>
 8009806:	4996      	ldr	r1, [pc, #600]	@ (8009a60 <_strtod_l+0x578>)
 8009808:	aa1c      	add	r2, sp, #112	@ 0x70
 800980a:	a819      	add	r0, sp, #100	@ 0x64
 800980c:	f001 fb92 	bl	800af34 <__hexnan>
 8009810:	2805      	cmp	r0, #5
 8009812:	d127      	bne.n	8009864 <_strtod_l+0x37c>
 8009814:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009816:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800981a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800981e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009822:	e69a      	b.n	800955a <_strtod_l+0x72>
 8009824:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009826:	fb08 2101 	mla	r1, r8, r1, r2
 800982a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800982e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009830:	e7b5      	b.n	800979e <_strtod_l+0x2b6>
 8009832:	2a6e      	cmp	r2, #110	@ 0x6e
 8009834:	e7da      	b.n	80097ec <_strtod_l+0x304>
 8009836:	498b      	ldr	r1, [pc, #556]	@ (8009a64 <_strtod_l+0x57c>)
 8009838:	a819      	add	r0, sp, #100	@ 0x64
 800983a:	f001 fb67 	bl	800af0c <__match>
 800983e:	2800      	cmp	r0, #0
 8009840:	f43f aea4 	beq.w	800958c <_strtod_l+0xa4>
 8009844:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009846:	4988      	ldr	r1, [pc, #544]	@ (8009a68 <_strtod_l+0x580>)
 8009848:	3b01      	subs	r3, #1
 800984a:	a819      	add	r0, sp, #100	@ 0x64
 800984c:	9319      	str	r3, [sp, #100]	@ 0x64
 800984e:	f001 fb5d 	bl	800af0c <__match>
 8009852:	b910      	cbnz	r0, 800985a <_strtod_l+0x372>
 8009854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009856:	3301      	adds	r3, #1
 8009858:	9319      	str	r3, [sp, #100]	@ 0x64
 800985a:	f04f 0a00 	mov.w	sl, #0
 800985e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009a6c <_strtod_l+0x584>
 8009862:	e67a      	b.n	800955a <_strtod_l+0x72>
 8009864:	4882      	ldr	r0, [pc, #520]	@ (8009a70 <_strtod_l+0x588>)
 8009866:	f001 f88f 	bl	800a988 <nan>
 800986a:	4682      	mov	sl, r0
 800986c:	468b      	mov	fp, r1
 800986e:	e674      	b.n	800955a <_strtod_l+0x72>
 8009870:	eba8 0309 	sub.w	r3, r8, r9
 8009874:	2f00      	cmp	r7, #0
 8009876:	bf08      	it	eq
 8009878:	462f      	moveq	r7, r5
 800987a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800987c:	2d10      	cmp	r5, #16
 800987e:	462c      	mov	r4, r5
 8009880:	9309      	str	r3, [sp, #36]	@ 0x24
 8009882:	bfa8      	it	ge
 8009884:	2410      	movge	r4, #16
 8009886:	f7f6 fdad 	bl	80003e4 <__aeabi_ui2d>
 800988a:	2d09      	cmp	r5, #9
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	dc11      	bgt.n	80098b6 <_strtod_l+0x3ce>
 8009892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	f43f ae60 	beq.w	800955a <_strtod_l+0x72>
 800989a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800989c:	dd76      	ble.n	800998c <_strtod_l+0x4a4>
 800989e:	2b16      	cmp	r3, #22
 80098a0:	dc5d      	bgt.n	800995e <_strtod_l+0x476>
 80098a2:	4974      	ldr	r1, [pc, #464]	@ (8009a74 <_strtod_l+0x58c>)
 80098a4:	4652      	mov	r2, sl
 80098a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098aa:	465b      	mov	r3, fp
 80098ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b0:	f7f6 fe12 	bl	80004d8 <__aeabi_dmul>
 80098b4:	e7d9      	b.n	800986a <_strtod_l+0x382>
 80098b6:	4b6f      	ldr	r3, [pc, #444]	@ (8009a74 <_strtod_l+0x58c>)
 80098b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80098c0:	f7f6 fe0a 	bl	80004d8 <__aeabi_dmul>
 80098c4:	4682      	mov	sl, r0
 80098c6:	9808      	ldr	r0, [sp, #32]
 80098c8:	468b      	mov	fp, r1
 80098ca:	f7f6 fd8b 	bl	80003e4 <__aeabi_ui2d>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4650      	mov	r0, sl
 80098d4:	4659      	mov	r1, fp
 80098d6:	f7f6 fc49 	bl	800016c <__adddf3>
 80098da:	2d0f      	cmp	r5, #15
 80098dc:	4682      	mov	sl, r0
 80098de:	468b      	mov	fp, r1
 80098e0:	ddd7      	ble.n	8009892 <_strtod_l+0x3aa>
 80098e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e4:	1b2c      	subs	r4, r5, r4
 80098e6:	441c      	add	r4, r3
 80098e8:	2c00      	cmp	r4, #0
 80098ea:	f340 8096 	ble.w	8009a1a <_strtod_l+0x532>
 80098ee:	f014 030f 	ands.w	r3, r4, #15
 80098f2:	d00a      	beq.n	800990a <_strtod_l+0x422>
 80098f4:	495f      	ldr	r1, [pc, #380]	@ (8009a74 <_strtod_l+0x58c>)
 80098f6:	4652      	mov	r2, sl
 80098f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009900:	465b      	mov	r3, fp
 8009902:	f7f6 fde9 	bl	80004d8 <__aeabi_dmul>
 8009906:	4682      	mov	sl, r0
 8009908:	468b      	mov	fp, r1
 800990a:	f034 040f 	bics.w	r4, r4, #15
 800990e:	d073      	beq.n	80099f8 <_strtod_l+0x510>
 8009910:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009914:	dd48      	ble.n	80099a8 <_strtod_l+0x4c0>
 8009916:	2400      	movs	r4, #0
 8009918:	46a0      	mov	r8, r4
 800991a:	46a1      	mov	r9, r4
 800991c:	940a      	str	r4, [sp, #40]	@ 0x28
 800991e:	2322      	movs	r3, #34	@ 0x22
 8009920:	f04f 0a00 	mov.w	sl, #0
 8009924:	9a05      	ldr	r2, [sp, #20]
 8009926:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009a6c <_strtod_l+0x584>
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	f43f ae13 	beq.w	800955a <_strtod_l+0x72>
 8009934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009936:	9805      	ldr	r0, [sp, #20]
 8009938:	f7ff f94c 	bl	8008bd4 <_Bfree>
 800993c:	4649      	mov	r1, r9
 800993e:	9805      	ldr	r0, [sp, #20]
 8009940:	f7ff f948 	bl	8008bd4 <_Bfree>
 8009944:	4641      	mov	r1, r8
 8009946:	9805      	ldr	r0, [sp, #20]
 8009948:	f7ff f944 	bl	8008bd4 <_Bfree>
 800994c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800994e:	9805      	ldr	r0, [sp, #20]
 8009950:	f7ff f940 	bl	8008bd4 <_Bfree>
 8009954:	4621      	mov	r1, r4
 8009956:	9805      	ldr	r0, [sp, #20]
 8009958:	f7ff f93c 	bl	8008bd4 <_Bfree>
 800995c:	e5fd      	b.n	800955a <_strtod_l+0x72>
 800995e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009960:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009964:	4293      	cmp	r3, r2
 8009966:	dbbc      	blt.n	80098e2 <_strtod_l+0x3fa>
 8009968:	4c42      	ldr	r4, [pc, #264]	@ (8009a74 <_strtod_l+0x58c>)
 800996a:	f1c5 050f 	rsb	r5, r5, #15
 800996e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009972:	4652      	mov	r2, sl
 8009974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009978:	465b      	mov	r3, fp
 800997a:	f7f6 fdad 	bl	80004d8 <__aeabi_dmul>
 800997e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009980:	1b5d      	subs	r5, r3, r5
 8009982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800998a:	e791      	b.n	80098b0 <_strtod_l+0x3c8>
 800998c:	3316      	adds	r3, #22
 800998e:	dba8      	blt.n	80098e2 <_strtod_l+0x3fa>
 8009990:	4b38      	ldr	r3, [pc, #224]	@ (8009a74 <_strtod_l+0x58c>)
 8009992:	eba9 0808 	sub.w	r8, r9, r8
 8009996:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800999a:	4650      	mov	r0, sl
 800999c:	e9d8 2300 	ldrd	r2, r3, [r8]
 80099a0:	4659      	mov	r1, fp
 80099a2:	f7f6 fec3 	bl	800072c <__aeabi_ddiv>
 80099a6:	e760      	b.n	800986a <_strtod_l+0x382>
 80099a8:	4b33      	ldr	r3, [pc, #204]	@ (8009a78 <_strtod_l+0x590>)
 80099aa:	4650      	mov	r0, sl
 80099ac:	9308      	str	r3, [sp, #32]
 80099ae:	2300      	movs	r3, #0
 80099b0:	4659      	mov	r1, fp
 80099b2:	461e      	mov	r6, r3
 80099b4:	1124      	asrs	r4, r4, #4
 80099b6:	2c01      	cmp	r4, #1
 80099b8:	dc21      	bgt.n	80099fe <_strtod_l+0x516>
 80099ba:	b10b      	cbz	r3, 80099c0 <_strtod_l+0x4d8>
 80099bc:	4682      	mov	sl, r0
 80099be:	468b      	mov	fp, r1
 80099c0:	492d      	ldr	r1, [pc, #180]	@ (8009a78 <_strtod_l+0x590>)
 80099c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80099c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80099ca:	4652      	mov	r2, sl
 80099cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d0:	465b      	mov	r3, fp
 80099d2:	f7f6 fd81 	bl	80004d8 <__aeabi_dmul>
 80099d6:	4b25      	ldr	r3, [pc, #148]	@ (8009a6c <_strtod_l+0x584>)
 80099d8:	460a      	mov	r2, r1
 80099da:	400b      	ands	r3, r1
 80099dc:	4927      	ldr	r1, [pc, #156]	@ (8009a7c <_strtod_l+0x594>)
 80099de:	4682      	mov	sl, r0
 80099e0:	428b      	cmp	r3, r1
 80099e2:	d898      	bhi.n	8009916 <_strtod_l+0x42e>
 80099e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80099e8:	428b      	cmp	r3, r1
 80099ea:	bf86      	itte	hi
 80099ec:	f04f 3aff 	movhi.w	sl, #4294967295
 80099f0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009a80 <_strtod_l+0x598>
 80099f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80099f8:	2300      	movs	r3, #0
 80099fa:	9308      	str	r3, [sp, #32]
 80099fc:	e07a      	b.n	8009af4 <_strtod_l+0x60c>
 80099fe:	07e2      	lsls	r2, r4, #31
 8009a00:	d505      	bpl.n	8009a0e <_strtod_l+0x526>
 8009a02:	9b08      	ldr	r3, [sp, #32]
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f7f6 fd66 	bl	80004d8 <__aeabi_dmul>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	9a08      	ldr	r2, [sp, #32]
 8009a10:	3601      	adds	r6, #1
 8009a12:	3208      	adds	r2, #8
 8009a14:	1064      	asrs	r4, r4, #1
 8009a16:	9208      	str	r2, [sp, #32]
 8009a18:	e7cd      	b.n	80099b6 <_strtod_l+0x4ce>
 8009a1a:	d0ed      	beq.n	80099f8 <_strtod_l+0x510>
 8009a1c:	4264      	negs	r4, r4
 8009a1e:	f014 020f 	ands.w	r2, r4, #15
 8009a22:	d00a      	beq.n	8009a3a <_strtod_l+0x552>
 8009a24:	4b13      	ldr	r3, [pc, #76]	@ (8009a74 <_strtod_l+0x58c>)
 8009a26:	4650      	mov	r0, sl
 8009a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a2c:	4659      	mov	r1, fp
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fe7b 	bl	800072c <__aeabi_ddiv>
 8009a36:	4682      	mov	sl, r0
 8009a38:	468b      	mov	fp, r1
 8009a3a:	1124      	asrs	r4, r4, #4
 8009a3c:	d0dc      	beq.n	80099f8 <_strtod_l+0x510>
 8009a3e:	2c1f      	cmp	r4, #31
 8009a40:	dd20      	ble.n	8009a84 <_strtod_l+0x59c>
 8009a42:	2400      	movs	r4, #0
 8009a44:	46a0      	mov	r8, r4
 8009a46:	46a1      	mov	r9, r4
 8009a48:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a4a:	2322      	movs	r3, #34	@ 0x22
 8009a4c:	9a05      	ldr	r2, [sp, #20]
 8009a4e:	f04f 0a00 	mov.w	sl, #0
 8009a52:	f04f 0b00 	mov.w	fp, #0
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	e768      	b.n	800992c <_strtod_l+0x444>
 8009a5a:	bf00      	nop
 8009a5c:	0800bbeb 	.word	0x0800bbeb
 8009a60:	0800be04 	.word	0x0800be04
 8009a64:	0800bbe3 	.word	0x0800bbe3
 8009a68:	0800bc1a 	.word	0x0800bc1a
 8009a6c:	7ff00000 	.word	0x7ff00000
 8009a70:	0800bfad 	.word	0x0800bfad
 8009a74:	0800bd38 	.word	0x0800bd38
 8009a78:	0800bd10 	.word	0x0800bd10
 8009a7c:	7ca00000 	.word	0x7ca00000
 8009a80:	7fefffff 	.word	0x7fefffff
 8009a84:	f014 0310 	ands.w	r3, r4, #16
 8009a88:	bf18      	it	ne
 8009a8a:	236a      	movne	r3, #106	@ 0x6a
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	9308      	str	r3, [sp, #32]
 8009a90:	4659      	mov	r1, fp
 8009a92:	2300      	movs	r3, #0
 8009a94:	4ea9      	ldr	r6, [pc, #676]	@ (8009d3c <_strtod_l+0x854>)
 8009a96:	07e2      	lsls	r2, r4, #31
 8009a98:	d504      	bpl.n	8009aa4 <_strtod_l+0x5bc>
 8009a9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a9e:	f7f6 fd1b 	bl	80004d8 <__aeabi_dmul>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	1064      	asrs	r4, r4, #1
 8009aa6:	f106 0608 	add.w	r6, r6, #8
 8009aaa:	d1f4      	bne.n	8009a96 <_strtod_l+0x5ae>
 8009aac:	b10b      	cbz	r3, 8009ab2 <_strtod_l+0x5ca>
 8009aae:	4682      	mov	sl, r0
 8009ab0:	468b      	mov	fp, r1
 8009ab2:	9b08      	ldr	r3, [sp, #32]
 8009ab4:	b1b3      	cbz	r3, 8009ae4 <_strtod_l+0x5fc>
 8009ab6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009aba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	4659      	mov	r1, fp
 8009ac2:	dd0f      	ble.n	8009ae4 <_strtod_l+0x5fc>
 8009ac4:	2b1f      	cmp	r3, #31
 8009ac6:	dd57      	ble.n	8009b78 <_strtod_l+0x690>
 8009ac8:	2b34      	cmp	r3, #52	@ 0x34
 8009aca:	bfd8      	it	le
 8009acc:	f04f 33ff 	movle.w	r3, #4294967295
 8009ad0:	f04f 0a00 	mov.w	sl, #0
 8009ad4:	bfcf      	iteee	gt
 8009ad6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009ada:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009ade:	4093      	lslle	r3, r2
 8009ae0:	ea03 0b01 	andle.w	fp, r3, r1
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4650      	mov	r0, sl
 8009aea:	4659      	mov	r1, fp
 8009aec:	f7f6 ff5c 	bl	80009a8 <__aeabi_dcmpeq>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1a6      	bne.n	8009a42 <_strtod_l+0x55a>
 8009af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009af6:	463a      	mov	r2, r7
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009afc:	462b      	mov	r3, r5
 8009afe:	9805      	ldr	r0, [sp, #20]
 8009b00:	f7ff f8d0 	bl	8008ca4 <__s2b>
 8009b04:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f43f af05 	beq.w	8009916 <_strtod_l+0x42e>
 8009b0c:	2400      	movs	r4, #0
 8009b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b10:	eba9 0308 	sub.w	r3, r9, r8
 8009b14:	2a00      	cmp	r2, #0
 8009b16:	bfa8      	it	ge
 8009b18:	2300      	movge	r3, #0
 8009b1a:	46a0      	mov	r8, r4
 8009b1c:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b22:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b26:	9805      	ldr	r0, [sp, #20]
 8009b28:	6859      	ldr	r1, [r3, #4]
 8009b2a:	f7ff f813 	bl	8008b54 <_Balloc>
 8009b2e:	4681      	mov	r9, r0
 8009b30:	2800      	cmp	r0, #0
 8009b32:	f43f aef4 	beq.w	800991e <_strtod_l+0x436>
 8009b36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b38:	300c      	adds	r0, #12
 8009b3a:	691a      	ldr	r2, [r3, #16]
 8009b3c:	f103 010c 	add.w	r1, r3, #12
 8009b40:	3202      	adds	r2, #2
 8009b42:	0092      	lsls	r2, r2, #2
 8009b44:	f7fe f8a5 	bl	8007c92 <memcpy>
 8009b48:	ab1c      	add	r3, sp, #112	@ 0x70
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	4652      	mov	r2, sl
 8009b52:	465b      	mov	r3, fp
 8009b54:	9805      	ldr	r0, [sp, #20]
 8009b56:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009b5a:	f7ff fbd5 	bl	8009308 <__d2b>
 8009b5e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b60:	2800      	cmp	r0, #0
 8009b62:	f43f aedc 	beq.w	800991e <_strtod_l+0x436>
 8009b66:	2101      	movs	r1, #1
 8009b68:	9805      	ldr	r0, [sp, #20]
 8009b6a:	f7ff f931 	bl	8008dd0 <__i2b>
 8009b6e:	4680      	mov	r8, r0
 8009b70:	b948      	cbnz	r0, 8009b86 <_strtod_l+0x69e>
 8009b72:	f04f 0800 	mov.w	r8, #0
 8009b76:	e6d2      	b.n	800991e <_strtod_l+0x436>
 8009b78:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b80:	ea03 0a0a 	and.w	sl, r3, sl
 8009b84:	e7ae      	b.n	8009ae4 <_strtod_l+0x5fc>
 8009b86:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009b88:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009b8a:	2d00      	cmp	r5, #0
 8009b8c:	bfab      	itete	ge
 8009b8e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009b90:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009b92:	18ef      	addge	r7, r5, r3
 8009b94:	1b5e      	sublt	r6, r3, r5
 8009b96:	9b08      	ldr	r3, [sp, #32]
 8009b98:	bfa8      	it	ge
 8009b9a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009b9c:	eba5 0503 	sub.w	r5, r5, r3
 8009ba0:	4415      	add	r5, r2
 8009ba2:	4b67      	ldr	r3, [pc, #412]	@ (8009d40 <_strtod_l+0x858>)
 8009ba4:	f105 35ff 	add.w	r5, r5, #4294967295
 8009ba8:	bfb8      	it	lt
 8009baa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009bac:	429d      	cmp	r5, r3
 8009bae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009bb2:	da50      	bge.n	8009c56 <_strtod_l+0x76e>
 8009bb4:	1b5b      	subs	r3, r3, r5
 8009bb6:	2b1f      	cmp	r3, #31
 8009bb8:	f04f 0101 	mov.w	r1, #1
 8009bbc:	eba2 0203 	sub.w	r2, r2, r3
 8009bc0:	dc3d      	bgt.n	8009c3e <_strtod_l+0x756>
 8009bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bcc:	18bd      	adds	r5, r7, r2
 8009bce:	9b08      	ldr	r3, [sp, #32]
 8009bd0:	42af      	cmp	r7, r5
 8009bd2:	4416      	add	r6, r2
 8009bd4:	441e      	add	r6, r3
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	bfa8      	it	ge
 8009bda:	462b      	movge	r3, r5
 8009bdc:	42b3      	cmp	r3, r6
 8009bde:	bfa8      	it	ge
 8009be0:	4633      	movge	r3, r6
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bfc2      	ittt	gt
 8009be6:	1aed      	subgt	r5, r5, r3
 8009be8:	1af6      	subgt	r6, r6, r3
 8009bea:	1aff      	subgt	r7, r7, r3
 8009bec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dd16      	ble.n	8009c20 <_strtod_l+0x738>
 8009bf2:	4641      	mov	r1, r8
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	9805      	ldr	r0, [sp, #20]
 8009bf8:	f7ff f9a8 	bl	8008f4c <__pow5mult>
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d0b7      	beq.n	8009b72 <_strtod_l+0x68a>
 8009c02:	4601      	mov	r1, r0
 8009c04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c06:	9805      	ldr	r0, [sp, #20]
 8009c08:	f7ff f8f8 	bl	8008dfc <__multiply>
 8009c0c:	900e      	str	r0, [sp, #56]	@ 0x38
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f43f ae85 	beq.w	800991e <_strtod_l+0x436>
 8009c14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c16:	9805      	ldr	r0, [sp, #20]
 8009c18:	f7fe ffdc 	bl	8008bd4 <_Bfree>
 8009c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	dc1d      	bgt.n	8009c60 <_strtod_l+0x778>
 8009c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dd23      	ble.n	8009c72 <_strtod_l+0x78a>
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c2e:	9805      	ldr	r0, [sp, #20]
 8009c30:	f7ff f98c 	bl	8008f4c <__pow5mult>
 8009c34:	4681      	mov	r9, r0
 8009c36:	b9e0      	cbnz	r0, 8009c72 <_strtod_l+0x78a>
 8009c38:	f04f 0900 	mov.w	r9, #0
 8009c3c:	e66f      	b.n	800991e <_strtod_l+0x436>
 8009c3e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009c42:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009c46:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009c4a:	35e2      	adds	r5, #226	@ 0xe2
 8009c4c:	fa01 f305 	lsl.w	r3, r1, r5
 8009c50:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c52:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009c54:	e7ba      	b.n	8009bcc <_strtod_l+0x6e4>
 8009c56:	2300      	movs	r3, #0
 8009c58:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c5e:	e7b5      	b.n	8009bcc <_strtod_l+0x6e4>
 8009c60:	462a      	mov	r2, r5
 8009c62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c64:	9805      	ldr	r0, [sp, #20]
 8009c66:	f7ff f9cb 	bl	8009000 <__lshift>
 8009c6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d1d9      	bne.n	8009c24 <_strtod_l+0x73c>
 8009c70:	e655      	b.n	800991e <_strtod_l+0x436>
 8009c72:	2e00      	cmp	r6, #0
 8009c74:	dd07      	ble.n	8009c86 <_strtod_l+0x79e>
 8009c76:	4649      	mov	r1, r9
 8009c78:	4632      	mov	r2, r6
 8009c7a:	9805      	ldr	r0, [sp, #20]
 8009c7c:	f7ff f9c0 	bl	8009000 <__lshift>
 8009c80:	4681      	mov	r9, r0
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d0d8      	beq.n	8009c38 <_strtod_l+0x750>
 8009c86:	2f00      	cmp	r7, #0
 8009c88:	dd08      	ble.n	8009c9c <_strtod_l+0x7b4>
 8009c8a:	4641      	mov	r1, r8
 8009c8c:	463a      	mov	r2, r7
 8009c8e:	9805      	ldr	r0, [sp, #20]
 8009c90:	f7ff f9b6 	bl	8009000 <__lshift>
 8009c94:	4680      	mov	r8, r0
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f43f ae41 	beq.w	800991e <_strtod_l+0x436>
 8009c9c:	464a      	mov	r2, r9
 8009c9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ca0:	9805      	ldr	r0, [sp, #20]
 8009ca2:	f7ff fa35 	bl	8009110 <__mdiff>
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f43f ae38 	beq.w	800991e <_strtod_l+0x436>
 8009cae:	68c3      	ldr	r3, [r0, #12]
 8009cb0:	4641      	mov	r1, r8
 8009cb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60c3      	str	r3, [r0, #12]
 8009cb8:	f7ff fa0e 	bl	80090d8 <__mcmp>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	da45      	bge.n	8009d4c <_strtod_l+0x864>
 8009cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cc2:	ea53 030a 	orrs.w	r3, r3, sl
 8009cc6:	d16b      	bne.n	8009da0 <_strtod_l+0x8b8>
 8009cc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d167      	bne.n	8009da0 <_strtod_l+0x8b8>
 8009cd0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cd4:	0d1b      	lsrs	r3, r3, #20
 8009cd6:	051b      	lsls	r3, r3, #20
 8009cd8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009cdc:	d960      	bls.n	8009da0 <_strtod_l+0x8b8>
 8009cde:	6963      	ldr	r3, [r4, #20]
 8009ce0:	b913      	cbnz	r3, 8009ce8 <_strtod_l+0x800>
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	dd5b      	ble.n	8009da0 <_strtod_l+0x8b8>
 8009ce8:	4621      	mov	r1, r4
 8009cea:	2201      	movs	r2, #1
 8009cec:	9805      	ldr	r0, [sp, #20]
 8009cee:	f7ff f987 	bl	8009000 <__lshift>
 8009cf2:	4641      	mov	r1, r8
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	f7ff f9ef 	bl	80090d8 <__mcmp>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	dd50      	ble.n	8009da0 <_strtod_l+0x8b8>
 8009cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d02:	9a08      	ldr	r2, [sp, #32]
 8009d04:	0d1b      	lsrs	r3, r3, #20
 8009d06:	051b      	lsls	r3, r3, #20
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	d06a      	beq.n	8009de2 <_strtod_l+0x8fa>
 8009d0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d10:	d867      	bhi.n	8009de2 <_strtod_l+0x8fa>
 8009d12:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d16:	f67f ae98 	bls.w	8009a4a <_strtod_l+0x562>
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	4b09      	ldr	r3, [pc, #36]	@ (8009d44 <_strtod_l+0x85c>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	f7f6 fbd9 	bl	80004d8 <__aeabi_dmul>
 8009d26:	4b08      	ldr	r3, [pc, #32]	@ (8009d48 <_strtod_l+0x860>)
 8009d28:	4682      	mov	sl, r0
 8009d2a:	400b      	ands	r3, r1
 8009d2c:	468b      	mov	fp, r1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f47f ae00 	bne.w	8009934 <_strtod_l+0x44c>
 8009d34:	2322      	movs	r3, #34	@ 0x22
 8009d36:	9a05      	ldr	r2, [sp, #20]
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	e5fb      	b.n	8009934 <_strtod_l+0x44c>
 8009d3c:	0800be30 	.word	0x0800be30
 8009d40:	fffffc02 	.word	0xfffffc02
 8009d44:	39500000 	.word	0x39500000
 8009d48:	7ff00000 	.word	0x7ff00000
 8009d4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d50:	d165      	bne.n	8009e1e <_strtod_l+0x936>
 8009d52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d58:	b35a      	cbz	r2, 8009db2 <_strtod_l+0x8ca>
 8009d5a:	4a99      	ldr	r2, [pc, #612]	@ (8009fc0 <_strtod_l+0xad8>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d12b      	bne.n	8009db8 <_strtod_l+0x8d0>
 8009d60:	9b08      	ldr	r3, [sp, #32]
 8009d62:	4651      	mov	r1, sl
 8009d64:	b303      	cbz	r3, 8009da8 <_strtod_l+0x8c0>
 8009d66:	465a      	mov	r2, fp
 8009d68:	4b96      	ldr	r3, [pc, #600]	@ (8009fc4 <_strtod_l+0xadc>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009d70:	f04f 32ff 	mov.w	r2, #4294967295
 8009d74:	d81b      	bhi.n	8009dae <_strtod_l+0x8c6>
 8009d76:	0d1b      	lsrs	r3, r3, #20
 8009d78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	4299      	cmp	r1, r3
 8009d82:	d119      	bne.n	8009db8 <_strtod_l+0x8d0>
 8009d84:	4b90      	ldr	r3, [pc, #576]	@ (8009fc8 <_strtod_l+0xae0>)
 8009d86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d102      	bne.n	8009d92 <_strtod_l+0x8aa>
 8009d8c:	3101      	adds	r1, #1
 8009d8e:	f43f adc6 	beq.w	800991e <_strtod_l+0x436>
 8009d92:	f04f 0a00 	mov.w	sl, #0
 8009d96:	4b8b      	ldr	r3, [pc, #556]	@ (8009fc4 <_strtod_l+0xadc>)
 8009d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d9a:	401a      	ands	r2, r3
 8009d9c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1b9      	bne.n	8009d1a <_strtod_l+0x832>
 8009da6:	e5c5      	b.n	8009934 <_strtod_l+0x44c>
 8009da8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dac:	e7e8      	b.n	8009d80 <_strtod_l+0x898>
 8009dae:	4613      	mov	r3, r2
 8009db0:	e7e6      	b.n	8009d80 <_strtod_l+0x898>
 8009db2:	ea53 030a 	orrs.w	r3, r3, sl
 8009db6:	d0a2      	beq.n	8009cfe <_strtod_l+0x816>
 8009db8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009dba:	b1db      	cbz	r3, 8009df4 <_strtod_l+0x90c>
 8009dbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dbe:	4213      	tst	r3, r2
 8009dc0:	d0ee      	beq.n	8009da0 <_strtod_l+0x8b8>
 8009dc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	9a08      	ldr	r2, [sp, #32]
 8009dca:	b1bb      	cbz	r3, 8009dfc <_strtod_l+0x914>
 8009dcc:	f7ff fb68 	bl	80094a0 <sulp>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dd8:	f7f6 f9c8 	bl	800016c <__adddf3>
 8009ddc:	4682      	mov	sl, r0
 8009dde:	468b      	mov	fp, r1
 8009de0:	e7de      	b.n	8009da0 <_strtod_l+0x8b8>
 8009de2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009de6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009dea:	f04f 3aff 	mov.w	sl, #4294967295
 8009dee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009df2:	e7d5      	b.n	8009da0 <_strtod_l+0x8b8>
 8009df4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009df6:	ea13 0f0a 	tst.w	r3, sl
 8009dfa:	e7e1      	b.n	8009dc0 <_strtod_l+0x8d8>
 8009dfc:	f7ff fb50 	bl	80094a0 <sulp>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e08:	f7f6 f9ae 	bl	8000168 <__aeabi_dsub>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4682      	mov	sl, r0
 8009e12:	468b      	mov	fp, r1
 8009e14:	f7f6 fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d0c1      	beq.n	8009da0 <_strtod_l+0x8b8>
 8009e1c:	e615      	b.n	8009a4a <_strtod_l+0x562>
 8009e1e:	4641      	mov	r1, r8
 8009e20:	4620      	mov	r0, r4
 8009e22:	f7ff fac9 	bl	80093b8 <__ratio>
 8009e26:	2200      	movs	r2, #0
 8009e28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	460f      	mov	r7, r1
 8009e30:	f7f6 fdce 	bl	80009d0 <__aeabi_dcmple>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d06d      	beq.n	8009f14 <_strtod_l+0xa2c>
 8009e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d178      	bne.n	8009f30 <_strtod_l+0xa48>
 8009e3e:	f1ba 0f00 	cmp.w	sl, #0
 8009e42:	d156      	bne.n	8009ef2 <_strtod_l+0xa0a>
 8009e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d158      	bne.n	8009f00 <_strtod_l+0xa18>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4630      	mov	r0, r6
 8009e52:	4639      	mov	r1, r7
 8009e54:	4b5d      	ldr	r3, [pc, #372]	@ (8009fcc <_strtod_l+0xae4>)
 8009e56:	f7f6 fdb1 	bl	80009bc <__aeabi_dcmplt>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d157      	bne.n	8009f0e <_strtod_l+0xa26>
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	2200      	movs	r2, #0
 8009e64:	4b5a      	ldr	r3, [pc, #360]	@ (8009fd0 <_strtod_l+0xae8>)
 8009e66:	f7f6 fb37 	bl	80004d8 <__aeabi_dmul>
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009e72:	9606      	str	r6, [sp, #24]
 8009e74:	9307      	str	r3, [sp, #28]
 8009e76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e7a:	4d52      	ldr	r5, [pc, #328]	@ (8009fc4 <_strtod_l+0xadc>)
 8009e7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e82:	401d      	ands	r5, r3
 8009e84:	4b53      	ldr	r3, [pc, #332]	@ (8009fd4 <_strtod_l+0xaec>)
 8009e86:	429d      	cmp	r5, r3
 8009e88:	f040 80aa 	bne.w	8009fe0 <_strtod_l+0xaf8>
 8009e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e8e:	4650      	mov	r0, sl
 8009e90:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009e94:	4659      	mov	r1, fp
 8009e96:	f7ff f9cf 	bl	8009238 <__ulp>
 8009e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e9e:	f7f6 fb1b 	bl	80004d8 <__aeabi_dmul>
 8009ea2:	4652      	mov	r2, sl
 8009ea4:	465b      	mov	r3, fp
 8009ea6:	f7f6 f961 	bl	800016c <__adddf3>
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4945      	ldr	r1, [pc, #276]	@ (8009fc4 <_strtod_l+0xadc>)
 8009eae:	4a4a      	ldr	r2, [pc, #296]	@ (8009fd8 <_strtod_l+0xaf0>)
 8009eb0:	4019      	ands	r1, r3
 8009eb2:	4291      	cmp	r1, r2
 8009eb4:	4682      	mov	sl, r0
 8009eb6:	d942      	bls.n	8009f3e <_strtod_l+0xa56>
 8009eb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009eba:	4b43      	ldr	r3, [pc, #268]	@ (8009fc8 <_strtod_l+0xae0>)
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d103      	bne.n	8009ec8 <_strtod_l+0x9e0>
 8009ec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	f43f ad2b 	beq.w	800991e <_strtod_l+0x436>
 8009ec8:	f04f 3aff 	mov.w	sl, #4294967295
 8009ecc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009fc8 <_strtod_l+0xae0>
 8009ed0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ed2:	9805      	ldr	r0, [sp, #20]
 8009ed4:	f7fe fe7e 	bl	8008bd4 <_Bfree>
 8009ed8:	4649      	mov	r1, r9
 8009eda:	9805      	ldr	r0, [sp, #20]
 8009edc:	f7fe fe7a 	bl	8008bd4 <_Bfree>
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	9805      	ldr	r0, [sp, #20]
 8009ee4:	f7fe fe76 	bl	8008bd4 <_Bfree>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	9805      	ldr	r0, [sp, #20]
 8009eec:	f7fe fe72 	bl	8008bd4 <_Bfree>
 8009ef0:	e618      	b.n	8009b24 <_strtod_l+0x63c>
 8009ef2:	f1ba 0f01 	cmp.w	sl, #1
 8009ef6:	d103      	bne.n	8009f00 <_strtod_l+0xa18>
 8009ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f43f ada5 	beq.w	8009a4a <_strtod_l+0x562>
 8009f00:	2200      	movs	r2, #0
 8009f02:	4b36      	ldr	r3, [pc, #216]	@ (8009fdc <_strtod_l+0xaf4>)
 8009f04:	2600      	movs	r6, #0
 8009f06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f0a:	4f30      	ldr	r7, [pc, #192]	@ (8009fcc <_strtod_l+0xae4>)
 8009f0c:	e7b3      	b.n	8009e76 <_strtod_l+0x98e>
 8009f0e:	2600      	movs	r6, #0
 8009f10:	4f2f      	ldr	r7, [pc, #188]	@ (8009fd0 <_strtod_l+0xae8>)
 8009f12:	e7ac      	b.n	8009e6e <_strtod_l+0x986>
 8009f14:	4630      	mov	r0, r6
 8009f16:	4639      	mov	r1, r7
 8009f18:	4b2d      	ldr	r3, [pc, #180]	@ (8009fd0 <_strtod_l+0xae8>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f7f6 fadc 	bl	80004d8 <__aeabi_dmul>
 8009f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0a1      	beq.n	8009e6e <_strtod_l+0x986>
 8009f2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009f2e:	e7a2      	b.n	8009e76 <_strtod_l+0x98e>
 8009f30:	2200      	movs	r2, #0
 8009f32:	4b26      	ldr	r3, [pc, #152]	@ (8009fcc <_strtod_l+0xae4>)
 8009f34:	4616      	mov	r6, r2
 8009f36:	461f      	mov	r7, r3
 8009f38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f3c:	e79b      	b.n	8009e76 <_strtod_l+0x98e>
 8009f3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009f42:	9b08      	ldr	r3, [sp, #32]
 8009f44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1c1      	bne.n	8009ed0 <_strtod_l+0x9e8>
 8009f4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f50:	0d1b      	lsrs	r3, r3, #20
 8009f52:	051b      	lsls	r3, r3, #20
 8009f54:	429d      	cmp	r5, r3
 8009f56:	d1bb      	bne.n	8009ed0 <_strtod_l+0x9e8>
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 fff0 	bl	8000f40 <__aeabi_d2lz>
 8009f60:	f7f6 fa8c 	bl	800047c <__aeabi_l2d>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4630      	mov	r0, r6
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	f7f6 f8fc 	bl	8000168 <__aeabi_dsub>
 8009f70:	460b      	mov	r3, r1
 8009f72:	4602      	mov	r2, r0
 8009f74:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009f78:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f7e:	ea46 060a 	orr.w	r6, r6, sl
 8009f82:	431e      	orrs	r6, r3
 8009f84:	d069      	beq.n	800a05a <_strtod_l+0xb72>
 8009f86:	a30a      	add	r3, pc, #40	@ (adr r3, 8009fb0 <_strtod_l+0xac8>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 fd16 	bl	80009bc <__aeabi_dcmplt>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	f47f accf 	bne.w	8009934 <_strtod_l+0x44c>
 8009f96:	a308      	add	r3, pc, #32	@ (adr r3, 8009fb8 <_strtod_l+0xad0>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fa0:	f7f6 fd2a 	bl	80009f8 <__aeabi_dcmpgt>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d093      	beq.n	8009ed0 <_strtod_l+0x9e8>
 8009fa8:	e4c4      	b.n	8009934 <_strtod_l+0x44c>
 8009faa:	bf00      	nop
 8009fac:	f3af 8000 	nop.w
 8009fb0:	94a03595 	.word	0x94a03595
 8009fb4:	3fdfffff 	.word	0x3fdfffff
 8009fb8:	35afe535 	.word	0x35afe535
 8009fbc:	3fe00000 	.word	0x3fe00000
 8009fc0:	000fffff 	.word	0x000fffff
 8009fc4:	7ff00000 	.word	0x7ff00000
 8009fc8:	7fefffff 	.word	0x7fefffff
 8009fcc:	3ff00000 	.word	0x3ff00000
 8009fd0:	3fe00000 	.word	0x3fe00000
 8009fd4:	7fe00000 	.word	0x7fe00000
 8009fd8:	7c9fffff 	.word	0x7c9fffff
 8009fdc:	bff00000 	.word	0xbff00000
 8009fe0:	9b08      	ldr	r3, [sp, #32]
 8009fe2:	b323      	cbz	r3, 800a02e <_strtod_l+0xb46>
 8009fe4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009fe8:	d821      	bhi.n	800a02e <_strtod_l+0xb46>
 8009fea:	a327      	add	r3, pc, #156	@ (adr r3, 800a088 <_strtod_l+0xba0>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 fcec 	bl	80009d0 <__aeabi_dcmple>
 8009ff8:	b1a0      	cbz	r0, 800a024 <_strtod_l+0xb3c>
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7f6 fd43 	bl	8000a88 <__aeabi_d2uiz>
 800a002:	2801      	cmp	r0, #1
 800a004:	bf38      	it	cc
 800a006:	2001      	movcc	r0, #1
 800a008:	f7f6 f9ec 	bl	80003e4 <__aeabi_ui2d>
 800a00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a00e:	4606      	mov	r6, r0
 800a010:	460f      	mov	r7, r1
 800a012:	b9fb      	cbnz	r3, 800a054 <_strtod_l+0xb6c>
 800a014:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a018:	9014      	str	r0, [sp, #80]	@ 0x50
 800a01a:	9315      	str	r3, [sp, #84]	@ 0x54
 800a01c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a020:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a024:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a026:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a02a:	1b5b      	subs	r3, r3, r5
 800a02c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a02e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a032:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a036:	f7ff f8ff 	bl	8009238 <__ulp>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4650      	mov	r0, sl
 800a040:	4659      	mov	r1, fp
 800a042:	f7f6 fa49 	bl	80004d8 <__aeabi_dmul>
 800a046:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a04a:	f7f6 f88f 	bl	800016c <__adddf3>
 800a04e:	4682      	mov	sl, r0
 800a050:	468b      	mov	fp, r1
 800a052:	e776      	b.n	8009f42 <_strtod_l+0xa5a>
 800a054:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a058:	e7e0      	b.n	800a01c <_strtod_l+0xb34>
 800a05a:	a30d      	add	r3, pc, #52	@ (adr r3, 800a090 <_strtod_l+0xba8>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 fcac 	bl	80009bc <__aeabi_dcmplt>
 800a064:	e79e      	b.n	8009fa4 <_strtod_l+0xabc>
 800a066:	2300      	movs	r3, #0
 800a068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a06a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a06c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	f7ff ba77 	b.w	8009562 <_strtod_l+0x7a>
 800a074:	2a65      	cmp	r2, #101	@ 0x65
 800a076:	f43f ab6e 	beq.w	8009756 <_strtod_l+0x26e>
 800a07a:	2a45      	cmp	r2, #69	@ 0x45
 800a07c:	f43f ab6b 	beq.w	8009756 <_strtod_l+0x26e>
 800a080:	2301      	movs	r3, #1
 800a082:	f7ff bba6 	b.w	80097d2 <_strtod_l+0x2ea>
 800a086:	bf00      	nop
 800a088:	ffc00000 	.word	0xffc00000
 800a08c:	41dfffff 	.word	0x41dfffff
 800a090:	94a03595 	.word	0x94a03595
 800a094:	3fcfffff 	.word	0x3fcfffff

0800a098 <_strtod_r>:
 800a098:	4b01      	ldr	r3, [pc, #4]	@ (800a0a0 <_strtod_r+0x8>)
 800a09a:	f7ff ba25 	b.w	80094e8 <_strtod_l>
 800a09e:	bf00      	nop
 800a0a0:	2000007c 	.word	0x2000007c

0800a0a4 <_strtol_l.constprop.0>:
 800a0a4:	2b24      	cmp	r3, #36	@ 0x24
 800a0a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0aa:	4686      	mov	lr, r0
 800a0ac:	4690      	mov	r8, r2
 800a0ae:	d801      	bhi.n	800a0b4 <_strtol_l.constprop.0+0x10>
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d106      	bne.n	800a0c2 <_strtol_l.constprop.0+0x1e>
 800a0b4:	f7fd fdb2 	bl	8007c1c <__errno>
 800a0b8:	2316      	movs	r3, #22
 800a0ba:	6003      	str	r3, [r0, #0]
 800a0bc:	2000      	movs	r0, #0
 800a0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	4833      	ldr	r0, [pc, #204]	@ (800a194 <_strtol_l.constprop.0+0xf0>)
 800a0c6:	462a      	mov	r2, r5
 800a0c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0cc:	5d06      	ldrb	r6, [r0, r4]
 800a0ce:	f016 0608 	ands.w	r6, r6, #8
 800a0d2:	d1f8      	bne.n	800a0c6 <_strtol_l.constprop.0+0x22>
 800a0d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a0d6:	d12d      	bne.n	800a134 <_strtol_l.constprop.0+0x90>
 800a0d8:	2601      	movs	r6, #1
 800a0da:	782c      	ldrb	r4, [r5, #0]
 800a0dc:	1c95      	adds	r5, r2, #2
 800a0de:	f033 0210 	bics.w	r2, r3, #16
 800a0e2:	d109      	bne.n	800a0f8 <_strtol_l.constprop.0+0x54>
 800a0e4:	2c30      	cmp	r4, #48	@ 0x30
 800a0e6:	d12a      	bne.n	800a13e <_strtol_l.constprop.0+0x9a>
 800a0e8:	782a      	ldrb	r2, [r5, #0]
 800a0ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a0ee:	2a58      	cmp	r2, #88	@ 0x58
 800a0f0:	d125      	bne.n	800a13e <_strtol_l.constprop.0+0x9a>
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	786c      	ldrb	r4, [r5, #1]
 800a0f6:	3502      	adds	r5, #2
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a0fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a102:	fbbc f9f3 	udiv	r9, ip, r3
 800a106:	4610      	mov	r0, r2
 800a108:	fb03 ca19 	mls	sl, r3, r9, ip
 800a10c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a110:	2f09      	cmp	r7, #9
 800a112:	d81b      	bhi.n	800a14c <_strtol_l.constprop.0+0xa8>
 800a114:	463c      	mov	r4, r7
 800a116:	42a3      	cmp	r3, r4
 800a118:	dd27      	ble.n	800a16a <_strtol_l.constprop.0+0xc6>
 800a11a:	1c57      	adds	r7, r2, #1
 800a11c:	d007      	beq.n	800a12e <_strtol_l.constprop.0+0x8a>
 800a11e:	4581      	cmp	r9, r0
 800a120:	d320      	bcc.n	800a164 <_strtol_l.constprop.0+0xc0>
 800a122:	d101      	bne.n	800a128 <_strtol_l.constprop.0+0x84>
 800a124:	45a2      	cmp	sl, r4
 800a126:	db1d      	blt.n	800a164 <_strtol_l.constprop.0+0xc0>
 800a128:	2201      	movs	r2, #1
 800a12a:	fb00 4003 	mla	r0, r0, r3, r4
 800a12e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a132:	e7eb      	b.n	800a10c <_strtol_l.constprop.0+0x68>
 800a134:	2c2b      	cmp	r4, #43	@ 0x2b
 800a136:	bf04      	itt	eq
 800a138:	782c      	ldrbeq	r4, [r5, #0]
 800a13a:	1c95      	addeq	r5, r2, #2
 800a13c:	e7cf      	b.n	800a0de <_strtol_l.constprop.0+0x3a>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1da      	bne.n	800a0f8 <_strtol_l.constprop.0+0x54>
 800a142:	2c30      	cmp	r4, #48	@ 0x30
 800a144:	bf0c      	ite	eq
 800a146:	2308      	moveq	r3, #8
 800a148:	230a      	movne	r3, #10
 800a14a:	e7d5      	b.n	800a0f8 <_strtol_l.constprop.0+0x54>
 800a14c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a150:	2f19      	cmp	r7, #25
 800a152:	d801      	bhi.n	800a158 <_strtol_l.constprop.0+0xb4>
 800a154:	3c37      	subs	r4, #55	@ 0x37
 800a156:	e7de      	b.n	800a116 <_strtol_l.constprop.0+0x72>
 800a158:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a15c:	2f19      	cmp	r7, #25
 800a15e:	d804      	bhi.n	800a16a <_strtol_l.constprop.0+0xc6>
 800a160:	3c57      	subs	r4, #87	@ 0x57
 800a162:	e7d8      	b.n	800a116 <_strtol_l.constprop.0+0x72>
 800a164:	f04f 32ff 	mov.w	r2, #4294967295
 800a168:	e7e1      	b.n	800a12e <_strtol_l.constprop.0+0x8a>
 800a16a:	1c53      	adds	r3, r2, #1
 800a16c:	d108      	bne.n	800a180 <_strtol_l.constprop.0+0xdc>
 800a16e:	2322      	movs	r3, #34	@ 0x22
 800a170:	4660      	mov	r0, ip
 800a172:	f8ce 3000 	str.w	r3, [lr]
 800a176:	f1b8 0f00 	cmp.w	r8, #0
 800a17a:	d0a0      	beq.n	800a0be <_strtol_l.constprop.0+0x1a>
 800a17c:	1e69      	subs	r1, r5, #1
 800a17e:	e006      	b.n	800a18e <_strtol_l.constprop.0+0xea>
 800a180:	b106      	cbz	r6, 800a184 <_strtol_l.constprop.0+0xe0>
 800a182:	4240      	negs	r0, r0
 800a184:	f1b8 0f00 	cmp.w	r8, #0
 800a188:	d099      	beq.n	800a0be <_strtol_l.constprop.0+0x1a>
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	d1f6      	bne.n	800a17c <_strtol_l.constprop.0+0xd8>
 800a18e:	f8c8 1000 	str.w	r1, [r8]
 800a192:	e794      	b.n	800a0be <_strtol_l.constprop.0+0x1a>
 800a194:	0800be59 	.word	0x0800be59

0800a198 <_strtol_r>:
 800a198:	f7ff bf84 	b.w	800a0a4 <_strtol_l.constprop.0>

0800a19c <__ssputs_r>:
 800a19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a0:	461f      	mov	r7, r3
 800a1a2:	688e      	ldr	r6, [r1, #8]
 800a1a4:	4682      	mov	sl, r0
 800a1a6:	42be      	cmp	r6, r7
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	4690      	mov	r8, r2
 800a1ac:	680b      	ldr	r3, [r1, #0]
 800a1ae:	d82d      	bhi.n	800a20c <__ssputs_r+0x70>
 800a1b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a1b8:	d026      	beq.n	800a208 <__ssputs_r+0x6c>
 800a1ba:	6965      	ldr	r5, [r4, #20]
 800a1bc:	6909      	ldr	r1, [r1, #16]
 800a1be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1c2:	eba3 0901 	sub.w	r9, r3, r1
 800a1c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1ca:	1c7b      	adds	r3, r7, #1
 800a1cc:	444b      	add	r3, r9
 800a1ce:	106d      	asrs	r5, r5, #1
 800a1d0:	429d      	cmp	r5, r3
 800a1d2:	bf38      	it	cc
 800a1d4:	461d      	movcc	r5, r3
 800a1d6:	0553      	lsls	r3, r2, #21
 800a1d8:	d527      	bpl.n	800a22a <__ssputs_r+0x8e>
 800a1da:	4629      	mov	r1, r5
 800a1dc:	f7fe fc2e 	bl	8008a3c <_malloc_r>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	b360      	cbz	r0, 800a23e <__ssputs_r+0xa2>
 800a1e4:	464a      	mov	r2, r9
 800a1e6:	6921      	ldr	r1, [r4, #16]
 800a1e8:	f7fd fd53 	bl	8007c92 <memcpy>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	6126      	str	r6, [r4, #16]
 800a1fa:	444e      	add	r6, r9
 800a1fc:	6026      	str	r6, [r4, #0]
 800a1fe:	463e      	mov	r6, r7
 800a200:	6165      	str	r5, [r4, #20]
 800a202:	eba5 0509 	sub.w	r5, r5, r9
 800a206:	60a5      	str	r5, [r4, #8]
 800a208:	42be      	cmp	r6, r7
 800a20a:	d900      	bls.n	800a20e <__ssputs_r+0x72>
 800a20c:	463e      	mov	r6, r7
 800a20e:	4632      	mov	r2, r6
 800a210:	4641      	mov	r1, r8
 800a212:	6820      	ldr	r0, [r4, #0]
 800a214:	f7fd fc95 	bl	8007b42 <memmove>
 800a218:	2000      	movs	r0, #0
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	1b9b      	subs	r3, r3, r6
 800a21e:	60a3      	str	r3, [r4, #8]
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	4433      	add	r3, r6
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22a:	462a      	mov	r2, r5
 800a22c:	f000 ff2f 	bl	800b08e <_realloc_r>
 800a230:	4606      	mov	r6, r0
 800a232:	2800      	cmp	r0, #0
 800a234:	d1e0      	bne.n	800a1f8 <__ssputs_r+0x5c>
 800a236:	4650      	mov	r0, sl
 800a238:	6921      	ldr	r1, [r4, #16]
 800a23a:	f7fe fb8d 	bl	8008958 <_free_r>
 800a23e:	230c      	movs	r3, #12
 800a240:	f8ca 3000 	str.w	r3, [sl]
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f04f 30ff 	mov.w	r0, #4294967295
 800a24a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	e7e9      	b.n	800a226 <__ssputs_r+0x8a>
	...

0800a254 <_svfiprintf_r>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	4698      	mov	r8, r3
 800a25a:	898b      	ldrh	r3, [r1, #12]
 800a25c:	4607      	mov	r7, r0
 800a25e:	061b      	lsls	r3, r3, #24
 800a260:	460d      	mov	r5, r1
 800a262:	4614      	mov	r4, r2
 800a264:	b09d      	sub	sp, #116	@ 0x74
 800a266:	d510      	bpl.n	800a28a <_svfiprintf_r+0x36>
 800a268:	690b      	ldr	r3, [r1, #16]
 800a26a:	b973      	cbnz	r3, 800a28a <_svfiprintf_r+0x36>
 800a26c:	2140      	movs	r1, #64	@ 0x40
 800a26e:	f7fe fbe5 	bl	8008a3c <_malloc_r>
 800a272:	6028      	str	r0, [r5, #0]
 800a274:	6128      	str	r0, [r5, #16]
 800a276:	b930      	cbnz	r0, 800a286 <_svfiprintf_r+0x32>
 800a278:	230c      	movs	r3, #12
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	f04f 30ff 	mov.w	r0, #4294967295
 800a280:	b01d      	add	sp, #116	@ 0x74
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a286:	2340      	movs	r3, #64	@ 0x40
 800a288:	616b      	str	r3, [r5, #20]
 800a28a:	2300      	movs	r3, #0
 800a28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a28e:	2320      	movs	r3, #32
 800a290:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a294:	2330      	movs	r3, #48	@ 0x30
 800a296:	f04f 0901 	mov.w	r9, #1
 800a29a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a29e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a438 <_svfiprintf_r+0x1e4>
 800a2a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2a6:	4623      	mov	r3, r4
 800a2a8:	469a      	mov	sl, r3
 800a2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ae:	b10a      	cbz	r2, 800a2b4 <_svfiprintf_r+0x60>
 800a2b0:	2a25      	cmp	r2, #37	@ 0x25
 800a2b2:	d1f9      	bne.n	800a2a8 <_svfiprintf_r+0x54>
 800a2b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a2b8:	d00b      	beq.n	800a2d2 <_svfiprintf_r+0x7e>
 800a2ba:	465b      	mov	r3, fp
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	f7ff ff6b 	bl	800a19c <__ssputs_r>
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f000 80a7 	beq.w	800a41a <_svfiprintf_r+0x1c6>
 800a2cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ce:	445a      	add	r2, fp
 800a2d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 809f 	beq.w	800a41a <_svfiprintf_r+0x1c6>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2e6:	f10a 0a01 	add.w	sl, sl, #1
 800a2ea:	9304      	str	r3, [sp, #16]
 800a2ec:	9307      	str	r3, [sp, #28]
 800a2ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2f4:	4654      	mov	r4, sl
 800a2f6:	2205      	movs	r2, #5
 800a2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2fc:	484e      	ldr	r0, [pc, #312]	@ (800a438 <_svfiprintf_r+0x1e4>)
 800a2fe:	f7fd fcba 	bl	8007c76 <memchr>
 800a302:	9a04      	ldr	r2, [sp, #16]
 800a304:	b9d8      	cbnz	r0, 800a33e <_svfiprintf_r+0xea>
 800a306:	06d0      	lsls	r0, r2, #27
 800a308:	bf44      	itt	mi
 800a30a:	2320      	movmi	r3, #32
 800a30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a310:	0711      	lsls	r1, r2, #28
 800a312:	bf44      	itt	mi
 800a314:	232b      	movmi	r3, #43	@ 0x2b
 800a316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a31a:	f89a 3000 	ldrb.w	r3, [sl]
 800a31e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a320:	d015      	beq.n	800a34e <_svfiprintf_r+0xfa>
 800a322:	4654      	mov	r4, sl
 800a324:	2000      	movs	r0, #0
 800a326:	f04f 0c0a 	mov.w	ip, #10
 800a32a:	9a07      	ldr	r2, [sp, #28]
 800a32c:	4621      	mov	r1, r4
 800a32e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a332:	3b30      	subs	r3, #48	@ 0x30
 800a334:	2b09      	cmp	r3, #9
 800a336:	d94b      	bls.n	800a3d0 <_svfiprintf_r+0x17c>
 800a338:	b1b0      	cbz	r0, 800a368 <_svfiprintf_r+0x114>
 800a33a:	9207      	str	r2, [sp, #28]
 800a33c:	e014      	b.n	800a368 <_svfiprintf_r+0x114>
 800a33e:	eba0 0308 	sub.w	r3, r0, r8
 800a342:	fa09 f303 	lsl.w	r3, r9, r3
 800a346:	4313      	orrs	r3, r2
 800a348:	46a2      	mov	sl, r4
 800a34a:	9304      	str	r3, [sp, #16]
 800a34c:	e7d2      	b.n	800a2f4 <_svfiprintf_r+0xa0>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	1d19      	adds	r1, r3, #4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	9103      	str	r1, [sp, #12]
 800a356:	2b00      	cmp	r3, #0
 800a358:	bfbb      	ittet	lt
 800a35a:	425b      	neglt	r3, r3
 800a35c:	f042 0202 	orrlt.w	r2, r2, #2
 800a360:	9307      	strge	r3, [sp, #28]
 800a362:	9307      	strlt	r3, [sp, #28]
 800a364:	bfb8      	it	lt
 800a366:	9204      	strlt	r2, [sp, #16]
 800a368:	7823      	ldrb	r3, [r4, #0]
 800a36a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a36c:	d10a      	bne.n	800a384 <_svfiprintf_r+0x130>
 800a36e:	7863      	ldrb	r3, [r4, #1]
 800a370:	2b2a      	cmp	r3, #42	@ 0x2a
 800a372:	d132      	bne.n	800a3da <_svfiprintf_r+0x186>
 800a374:	9b03      	ldr	r3, [sp, #12]
 800a376:	3402      	adds	r4, #2
 800a378:	1d1a      	adds	r2, r3, #4
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	9203      	str	r2, [sp, #12]
 800a37e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a43c <_svfiprintf_r+0x1e8>
 800a388:	2203      	movs	r2, #3
 800a38a:	4650      	mov	r0, sl
 800a38c:	7821      	ldrb	r1, [r4, #0]
 800a38e:	f7fd fc72 	bl	8007c76 <memchr>
 800a392:	b138      	cbz	r0, 800a3a4 <_svfiprintf_r+0x150>
 800a394:	2240      	movs	r2, #64	@ 0x40
 800a396:	9b04      	ldr	r3, [sp, #16]
 800a398:	eba0 000a 	sub.w	r0, r0, sl
 800a39c:	4082      	lsls	r2, r0
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	3401      	adds	r4, #1
 800a3a2:	9304      	str	r3, [sp, #16]
 800a3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a8:	2206      	movs	r2, #6
 800a3aa:	4825      	ldr	r0, [pc, #148]	@ (800a440 <_svfiprintf_r+0x1ec>)
 800a3ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3b0:	f7fd fc61 	bl	8007c76 <memchr>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d036      	beq.n	800a426 <_svfiprintf_r+0x1d2>
 800a3b8:	4b22      	ldr	r3, [pc, #136]	@ (800a444 <_svfiprintf_r+0x1f0>)
 800a3ba:	bb1b      	cbnz	r3, 800a404 <_svfiprintf_r+0x1b0>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	3307      	adds	r3, #7
 800a3c0:	f023 0307 	bic.w	r3, r3, #7
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	9303      	str	r3, [sp, #12]
 800a3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ca:	4433      	add	r3, r6
 800a3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ce:	e76a      	b.n	800a2a6 <_svfiprintf_r+0x52>
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3d8:	e7a8      	b.n	800a32c <_svfiprintf_r+0xd8>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f04f 0c0a 	mov.w	ip, #10
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	3401      	adds	r4, #1
 800a3e4:	9305      	str	r3, [sp, #20]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ec:	3a30      	subs	r2, #48	@ 0x30
 800a3ee:	2a09      	cmp	r2, #9
 800a3f0:	d903      	bls.n	800a3fa <_svfiprintf_r+0x1a6>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0c6      	beq.n	800a384 <_svfiprintf_r+0x130>
 800a3f6:	9105      	str	r1, [sp, #20]
 800a3f8:	e7c4      	b.n	800a384 <_svfiprintf_r+0x130>
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a402:	e7f0      	b.n	800a3e6 <_svfiprintf_r+0x192>
 800a404:	ab03      	add	r3, sp, #12
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	462a      	mov	r2, r5
 800a40a:	4638      	mov	r0, r7
 800a40c:	4b0e      	ldr	r3, [pc, #56]	@ (800a448 <_svfiprintf_r+0x1f4>)
 800a40e:	a904      	add	r1, sp, #16
 800a410:	f7fc fc92 	bl	8006d38 <_printf_float>
 800a414:	1c42      	adds	r2, r0, #1
 800a416:	4606      	mov	r6, r0
 800a418:	d1d6      	bne.n	800a3c8 <_svfiprintf_r+0x174>
 800a41a:	89ab      	ldrh	r3, [r5, #12]
 800a41c:	065b      	lsls	r3, r3, #25
 800a41e:	f53f af2d 	bmi.w	800a27c <_svfiprintf_r+0x28>
 800a422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a424:	e72c      	b.n	800a280 <_svfiprintf_r+0x2c>
 800a426:	ab03      	add	r3, sp, #12
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	462a      	mov	r2, r5
 800a42c:	4638      	mov	r0, r7
 800a42e:	4b06      	ldr	r3, [pc, #24]	@ (800a448 <_svfiprintf_r+0x1f4>)
 800a430:	a904      	add	r1, sp, #16
 800a432:	f7fc ff1f 	bl	8007274 <_printf_i>
 800a436:	e7ed      	b.n	800a414 <_svfiprintf_r+0x1c0>
 800a438:	0800bf59 	.word	0x0800bf59
 800a43c:	0800bf5f 	.word	0x0800bf5f
 800a440:	0800bf63 	.word	0x0800bf63
 800a444:	08006d39 	.word	0x08006d39
 800a448:	0800a19d 	.word	0x0800a19d

0800a44c <__sfputc_r>:
 800a44c:	6893      	ldr	r3, [r2, #8]
 800a44e:	b410      	push	{r4}
 800a450:	3b01      	subs	r3, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	6093      	str	r3, [r2, #8]
 800a456:	da07      	bge.n	800a468 <__sfputc_r+0x1c>
 800a458:	6994      	ldr	r4, [r2, #24]
 800a45a:	42a3      	cmp	r3, r4
 800a45c:	db01      	blt.n	800a462 <__sfputc_r+0x16>
 800a45e:	290a      	cmp	r1, #10
 800a460:	d102      	bne.n	800a468 <__sfputc_r+0x1c>
 800a462:	bc10      	pop	{r4}
 800a464:	f000 b9da 	b.w	800a81c <__swbuf_r>
 800a468:	6813      	ldr	r3, [r2, #0]
 800a46a:	1c58      	adds	r0, r3, #1
 800a46c:	6010      	str	r0, [r2, #0]
 800a46e:	7019      	strb	r1, [r3, #0]
 800a470:	4608      	mov	r0, r1
 800a472:	bc10      	pop	{r4}
 800a474:	4770      	bx	lr

0800a476 <__sfputs_r>:
 800a476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a478:	4606      	mov	r6, r0
 800a47a:	460f      	mov	r7, r1
 800a47c:	4614      	mov	r4, r2
 800a47e:	18d5      	adds	r5, r2, r3
 800a480:	42ac      	cmp	r4, r5
 800a482:	d101      	bne.n	800a488 <__sfputs_r+0x12>
 800a484:	2000      	movs	r0, #0
 800a486:	e007      	b.n	800a498 <__sfputs_r+0x22>
 800a488:	463a      	mov	r2, r7
 800a48a:	4630      	mov	r0, r6
 800a48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a490:	f7ff ffdc 	bl	800a44c <__sfputc_r>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d1f3      	bne.n	800a480 <__sfputs_r+0xa>
 800a498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a49c <_vfiprintf_r>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	4614      	mov	r4, r2
 800a4a4:	4698      	mov	r8, r3
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	b09d      	sub	sp, #116	@ 0x74
 800a4aa:	b118      	cbz	r0, 800a4b4 <_vfiprintf_r+0x18>
 800a4ac:	6a03      	ldr	r3, [r0, #32]
 800a4ae:	b90b      	cbnz	r3, 800a4b4 <_vfiprintf_r+0x18>
 800a4b0:	f7fd fa9c 	bl	80079ec <__sinit>
 800a4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4b6:	07d9      	lsls	r1, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_vfiprintf_r+0x2a>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	059a      	lsls	r2, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_vfiprintf_r+0x2a>
 800a4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4c2:	f7fd fbd6 	bl	8007c72 <__retarget_lock_acquire_recursive>
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	071b      	lsls	r3, r3, #28
 800a4ca:	d501      	bpl.n	800a4d0 <_vfiprintf_r+0x34>
 800a4cc:	692b      	ldr	r3, [r5, #16]
 800a4ce:	b99b      	cbnz	r3, 800a4f8 <_vfiprintf_r+0x5c>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f000 f9e0 	bl	800a898 <__swsetup_r>
 800a4d8:	b170      	cbz	r0, 800a4f8 <_vfiprintf_r+0x5c>
 800a4da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4dc:	07dc      	lsls	r4, r3, #31
 800a4de:	d504      	bpl.n	800a4ea <_vfiprintf_r+0x4e>
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e4:	b01d      	add	sp, #116	@ 0x74
 800a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ea:	89ab      	ldrh	r3, [r5, #12]
 800a4ec:	0598      	lsls	r0, r3, #22
 800a4ee:	d4f7      	bmi.n	800a4e0 <_vfiprintf_r+0x44>
 800a4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4f2:	f7fd fbbf 	bl	8007c74 <__retarget_lock_release_recursive>
 800a4f6:	e7f3      	b.n	800a4e0 <_vfiprintf_r+0x44>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4fc:	2320      	movs	r3, #32
 800a4fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a502:	2330      	movs	r3, #48	@ 0x30
 800a504:	f04f 0901 	mov.w	r9, #1
 800a508:	f8cd 800c 	str.w	r8, [sp, #12]
 800a50c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a6b8 <_vfiprintf_r+0x21c>
 800a510:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a514:	4623      	mov	r3, r4
 800a516:	469a      	mov	sl, r3
 800a518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a51c:	b10a      	cbz	r2, 800a522 <_vfiprintf_r+0x86>
 800a51e:	2a25      	cmp	r2, #37	@ 0x25
 800a520:	d1f9      	bne.n	800a516 <_vfiprintf_r+0x7a>
 800a522:	ebba 0b04 	subs.w	fp, sl, r4
 800a526:	d00b      	beq.n	800a540 <_vfiprintf_r+0xa4>
 800a528:	465b      	mov	r3, fp
 800a52a:	4622      	mov	r2, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	4630      	mov	r0, r6
 800a530:	f7ff ffa1 	bl	800a476 <__sfputs_r>
 800a534:	3001      	adds	r0, #1
 800a536:	f000 80a7 	beq.w	800a688 <_vfiprintf_r+0x1ec>
 800a53a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a53c:	445a      	add	r2, fp
 800a53e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a540:	f89a 3000 	ldrb.w	r3, [sl]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 809f 	beq.w	800a688 <_vfiprintf_r+0x1ec>
 800a54a:	2300      	movs	r3, #0
 800a54c:	f04f 32ff 	mov.w	r2, #4294967295
 800a550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a554:	f10a 0a01 	add.w	sl, sl, #1
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	9307      	str	r3, [sp, #28]
 800a55c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a560:	931a      	str	r3, [sp, #104]	@ 0x68
 800a562:	4654      	mov	r4, sl
 800a564:	2205      	movs	r2, #5
 800a566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56a:	4853      	ldr	r0, [pc, #332]	@ (800a6b8 <_vfiprintf_r+0x21c>)
 800a56c:	f7fd fb83 	bl	8007c76 <memchr>
 800a570:	9a04      	ldr	r2, [sp, #16]
 800a572:	b9d8      	cbnz	r0, 800a5ac <_vfiprintf_r+0x110>
 800a574:	06d1      	lsls	r1, r2, #27
 800a576:	bf44      	itt	mi
 800a578:	2320      	movmi	r3, #32
 800a57a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a57e:	0713      	lsls	r3, r2, #28
 800a580:	bf44      	itt	mi
 800a582:	232b      	movmi	r3, #43	@ 0x2b
 800a584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a588:	f89a 3000 	ldrb.w	r3, [sl]
 800a58c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a58e:	d015      	beq.n	800a5bc <_vfiprintf_r+0x120>
 800a590:	4654      	mov	r4, sl
 800a592:	2000      	movs	r0, #0
 800a594:	f04f 0c0a 	mov.w	ip, #10
 800a598:	9a07      	ldr	r2, [sp, #28]
 800a59a:	4621      	mov	r1, r4
 800a59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5a0:	3b30      	subs	r3, #48	@ 0x30
 800a5a2:	2b09      	cmp	r3, #9
 800a5a4:	d94b      	bls.n	800a63e <_vfiprintf_r+0x1a2>
 800a5a6:	b1b0      	cbz	r0, 800a5d6 <_vfiprintf_r+0x13a>
 800a5a8:	9207      	str	r2, [sp, #28]
 800a5aa:	e014      	b.n	800a5d6 <_vfiprintf_r+0x13a>
 800a5ac:	eba0 0308 	sub.w	r3, r0, r8
 800a5b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	46a2      	mov	sl, r4
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	e7d2      	b.n	800a562 <_vfiprintf_r+0xc6>
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	1d19      	adds	r1, r3, #4
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	9103      	str	r1, [sp, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bfbb      	ittet	lt
 800a5c8:	425b      	neglt	r3, r3
 800a5ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a5ce:	9307      	strge	r3, [sp, #28]
 800a5d0:	9307      	strlt	r3, [sp, #28]
 800a5d2:	bfb8      	it	lt
 800a5d4:	9204      	strlt	r2, [sp, #16]
 800a5d6:	7823      	ldrb	r3, [r4, #0]
 800a5d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5da:	d10a      	bne.n	800a5f2 <_vfiprintf_r+0x156>
 800a5dc:	7863      	ldrb	r3, [r4, #1]
 800a5de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5e0:	d132      	bne.n	800a648 <_vfiprintf_r+0x1ac>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	3402      	adds	r4, #2
 800a5e6:	1d1a      	adds	r2, r3, #4
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	9203      	str	r2, [sp, #12]
 800a5ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5f0:	9305      	str	r3, [sp, #20]
 800a5f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a6bc <_vfiprintf_r+0x220>
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	4650      	mov	r0, sl
 800a5fa:	7821      	ldrb	r1, [r4, #0]
 800a5fc:	f7fd fb3b 	bl	8007c76 <memchr>
 800a600:	b138      	cbz	r0, 800a612 <_vfiprintf_r+0x176>
 800a602:	2240      	movs	r2, #64	@ 0x40
 800a604:	9b04      	ldr	r3, [sp, #16]
 800a606:	eba0 000a 	sub.w	r0, r0, sl
 800a60a:	4082      	lsls	r2, r0
 800a60c:	4313      	orrs	r3, r2
 800a60e:	3401      	adds	r4, #1
 800a610:	9304      	str	r3, [sp, #16]
 800a612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a616:	2206      	movs	r2, #6
 800a618:	4829      	ldr	r0, [pc, #164]	@ (800a6c0 <_vfiprintf_r+0x224>)
 800a61a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a61e:	f7fd fb2a 	bl	8007c76 <memchr>
 800a622:	2800      	cmp	r0, #0
 800a624:	d03f      	beq.n	800a6a6 <_vfiprintf_r+0x20a>
 800a626:	4b27      	ldr	r3, [pc, #156]	@ (800a6c4 <_vfiprintf_r+0x228>)
 800a628:	bb1b      	cbnz	r3, 800a672 <_vfiprintf_r+0x1d6>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	3307      	adds	r3, #7
 800a62e:	f023 0307 	bic.w	r3, r3, #7
 800a632:	3308      	adds	r3, #8
 800a634:	9303      	str	r3, [sp, #12]
 800a636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a638:	443b      	add	r3, r7
 800a63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63c:	e76a      	b.n	800a514 <_vfiprintf_r+0x78>
 800a63e:	460c      	mov	r4, r1
 800a640:	2001      	movs	r0, #1
 800a642:	fb0c 3202 	mla	r2, ip, r2, r3
 800a646:	e7a8      	b.n	800a59a <_vfiprintf_r+0xfe>
 800a648:	2300      	movs	r3, #0
 800a64a:	f04f 0c0a 	mov.w	ip, #10
 800a64e:	4619      	mov	r1, r3
 800a650:	3401      	adds	r4, #1
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	4620      	mov	r0, r4
 800a656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a65a:	3a30      	subs	r2, #48	@ 0x30
 800a65c:	2a09      	cmp	r2, #9
 800a65e:	d903      	bls.n	800a668 <_vfiprintf_r+0x1cc>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d0c6      	beq.n	800a5f2 <_vfiprintf_r+0x156>
 800a664:	9105      	str	r1, [sp, #20]
 800a666:	e7c4      	b.n	800a5f2 <_vfiprintf_r+0x156>
 800a668:	4604      	mov	r4, r0
 800a66a:	2301      	movs	r3, #1
 800a66c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a670:	e7f0      	b.n	800a654 <_vfiprintf_r+0x1b8>
 800a672:	ab03      	add	r3, sp, #12
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	462a      	mov	r2, r5
 800a678:	4630      	mov	r0, r6
 800a67a:	4b13      	ldr	r3, [pc, #76]	@ (800a6c8 <_vfiprintf_r+0x22c>)
 800a67c:	a904      	add	r1, sp, #16
 800a67e:	f7fc fb5b 	bl	8006d38 <_printf_float>
 800a682:	4607      	mov	r7, r0
 800a684:	1c78      	adds	r0, r7, #1
 800a686:	d1d6      	bne.n	800a636 <_vfiprintf_r+0x19a>
 800a688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a68a:	07d9      	lsls	r1, r3, #31
 800a68c:	d405      	bmi.n	800a69a <_vfiprintf_r+0x1fe>
 800a68e:	89ab      	ldrh	r3, [r5, #12]
 800a690:	059a      	lsls	r2, r3, #22
 800a692:	d402      	bmi.n	800a69a <_vfiprintf_r+0x1fe>
 800a694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a696:	f7fd faed 	bl	8007c74 <__retarget_lock_release_recursive>
 800a69a:	89ab      	ldrh	r3, [r5, #12]
 800a69c:	065b      	lsls	r3, r3, #25
 800a69e:	f53f af1f 	bmi.w	800a4e0 <_vfiprintf_r+0x44>
 800a6a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6a4:	e71e      	b.n	800a4e4 <_vfiprintf_r+0x48>
 800a6a6:	ab03      	add	r3, sp, #12
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	462a      	mov	r2, r5
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4b06      	ldr	r3, [pc, #24]	@ (800a6c8 <_vfiprintf_r+0x22c>)
 800a6b0:	a904      	add	r1, sp, #16
 800a6b2:	f7fc fddf 	bl	8007274 <_printf_i>
 800a6b6:	e7e4      	b.n	800a682 <_vfiprintf_r+0x1e6>
 800a6b8:	0800bf59 	.word	0x0800bf59
 800a6bc:	0800bf5f 	.word	0x0800bf5f
 800a6c0:	0800bf63 	.word	0x0800bf63
 800a6c4:	08006d39 	.word	0x08006d39
 800a6c8:	0800a477 	.word	0x0800a477

0800a6cc <__sflush_r>:
 800a6cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	0716      	lsls	r6, r2, #28
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	d454      	bmi.n	800a784 <__sflush_r+0xb8>
 800a6da:	684b      	ldr	r3, [r1, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dc02      	bgt.n	800a6e6 <__sflush_r+0x1a>
 800a6e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	dd48      	ble.n	800a778 <__sflush_r+0xac>
 800a6e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6e8:	2e00      	cmp	r6, #0
 800a6ea:	d045      	beq.n	800a778 <__sflush_r+0xac>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6f2:	682f      	ldr	r7, [r5, #0]
 800a6f4:	6a21      	ldr	r1, [r4, #32]
 800a6f6:	602b      	str	r3, [r5, #0]
 800a6f8:	d030      	beq.n	800a75c <__sflush_r+0x90>
 800a6fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	0759      	lsls	r1, r3, #29
 800a700:	d505      	bpl.n	800a70e <__sflush_r+0x42>
 800a702:	6863      	ldr	r3, [r4, #4]
 800a704:	1ad2      	subs	r2, r2, r3
 800a706:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a708:	b10b      	cbz	r3, 800a70e <__sflush_r+0x42>
 800a70a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a70c:	1ad2      	subs	r2, r2, r3
 800a70e:	2300      	movs	r3, #0
 800a710:	4628      	mov	r0, r5
 800a712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a714:	6a21      	ldr	r1, [r4, #32]
 800a716:	47b0      	blx	r6
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	d106      	bne.n	800a72c <__sflush_r+0x60>
 800a71e:	6829      	ldr	r1, [r5, #0]
 800a720:	291d      	cmp	r1, #29
 800a722:	d82b      	bhi.n	800a77c <__sflush_r+0xb0>
 800a724:	4a28      	ldr	r2, [pc, #160]	@ (800a7c8 <__sflush_r+0xfc>)
 800a726:	410a      	asrs	r2, r1
 800a728:	07d6      	lsls	r6, r2, #31
 800a72a:	d427      	bmi.n	800a77c <__sflush_r+0xb0>
 800a72c:	2200      	movs	r2, #0
 800a72e:	6062      	str	r2, [r4, #4]
 800a730:	6922      	ldr	r2, [r4, #16]
 800a732:	04d9      	lsls	r1, r3, #19
 800a734:	6022      	str	r2, [r4, #0]
 800a736:	d504      	bpl.n	800a742 <__sflush_r+0x76>
 800a738:	1c42      	adds	r2, r0, #1
 800a73a:	d101      	bne.n	800a740 <__sflush_r+0x74>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b903      	cbnz	r3, 800a742 <__sflush_r+0x76>
 800a740:	6560      	str	r0, [r4, #84]	@ 0x54
 800a742:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a744:	602f      	str	r7, [r5, #0]
 800a746:	b1b9      	cbz	r1, 800a778 <__sflush_r+0xac>
 800a748:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a74c:	4299      	cmp	r1, r3
 800a74e:	d002      	beq.n	800a756 <__sflush_r+0x8a>
 800a750:	4628      	mov	r0, r5
 800a752:	f7fe f901 	bl	8008958 <_free_r>
 800a756:	2300      	movs	r3, #0
 800a758:	6363      	str	r3, [r4, #52]	@ 0x34
 800a75a:	e00d      	b.n	800a778 <__sflush_r+0xac>
 800a75c:	2301      	movs	r3, #1
 800a75e:	4628      	mov	r0, r5
 800a760:	47b0      	blx	r6
 800a762:	4602      	mov	r2, r0
 800a764:	1c50      	adds	r0, r2, #1
 800a766:	d1c9      	bne.n	800a6fc <__sflush_r+0x30>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d0c6      	beq.n	800a6fc <__sflush_r+0x30>
 800a76e:	2b1d      	cmp	r3, #29
 800a770:	d001      	beq.n	800a776 <__sflush_r+0xaa>
 800a772:	2b16      	cmp	r3, #22
 800a774:	d11d      	bne.n	800a7b2 <__sflush_r+0xe6>
 800a776:	602f      	str	r7, [r5, #0]
 800a778:	2000      	movs	r0, #0
 800a77a:	e021      	b.n	800a7c0 <__sflush_r+0xf4>
 800a77c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a780:	b21b      	sxth	r3, r3
 800a782:	e01a      	b.n	800a7ba <__sflush_r+0xee>
 800a784:	690f      	ldr	r7, [r1, #16]
 800a786:	2f00      	cmp	r7, #0
 800a788:	d0f6      	beq.n	800a778 <__sflush_r+0xac>
 800a78a:	0793      	lsls	r3, r2, #30
 800a78c:	bf18      	it	ne
 800a78e:	2300      	movne	r3, #0
 800a790:	680e      	ldr	r6, [r1, #0]
 800a792:	bf08      	it	eq
 800a794:	694b      	ldreq	r3, [r1, #20]
 800a796:	1bf6      	subs	r6, r6, r7
 800a798:	600f      	str	r7, [r1, #0]
 800a79a:	608b      	str	r3, [r1, #8]
 800a79c:	2e00      	cmp	r6, #0
 800a79e:	ddeb      	ble.n	800a778 <__sflush_r+0xac>
 800a7a0:	4633      	mov	r3, r6
 800a7a2:	463a      	mov	r2, r7
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	6a21      	ldr	r1, [r4, #32]
 800a7a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a7ac:	47e0      	blx	ip
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	dc07      	bgt.n	800a7c2 <__sflush_r+0xf6>
 800a7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a7be:	81a3      	strh	r3, [r4, #12]
 800a7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c2:	4407      	add	r7, r0
 800a7c4:	1a36      	subs	r6, r6, r0
 800a7c6:	e7e9      	b.n	800a79c <__sflush_r+0xd0>
 800a7c8:	dfbffffe 	.word	0xdfbffffe

0800a7cc <_fflush_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	690b      	ldr	r3, [r1, #16]
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	b913      	cbnz	r3, 800a7dc <_fflush_r+0x10>
 800a7d6:	2500      	movs	r5, #0
 800a7d8:	4628      	mov	r0, r5
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	b118      	cbz	r0, 800a7e6 <_fflush_r+0x1a>
 800a7de:	6a03      	ldr	r3, [r0, #32]
 800a7e0:	b90b      	cbnz	r3, 800a7e6 <_fflush_r+0x1a>
 800a7e2:	f7fd f903 	bl	80079ec <__sinit>
 800a7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0f3      	beq.n	800a7d6 <_fflush_r+0xa>
 800a7ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7f0:	07d0      	lsls	r0, r2, #31
 800a7f2:	d404      	bmi.n	800a7fe <_fflush_r+0x32>
 800a7f4:	0599      	lsls	r1, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_fflush_r+0x32>
 800a7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7fa:	f7fd fa3a 	bl	8007c72 <__retarget_lock_acquire_recursive>
 800a7fe:	4628      	mov	r0, r5
 800a800:	4621      	mov	r1, r4
 800a802:	f7ff ff63 	bl	800a6cc <__sflush_r>
 800a806:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a808:	4605      	mov	r5, r0
 800a80a:	07da      	lsls	r2, r3, #31
 800a80c:	d4e4      	bmi.n	800a7d8 <_fflush_r+0xc>
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	059b      	lsls	r3, r3, #22
 800a812:	d4e1      	bmi.n	800a7d8 <_fflush_r+0xc>
 800a814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a816:	f7fd fa2d 	bl	8007c74 <__retarget_lock_release_recursive>
 800a81a:	e7dd      	b.n	800a7d8 <_fflush_r+0xc>

0800a81c <__swbuf_r>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	460e      	mov	r6, r1
 800a820:	4614      	mov	r4, r2
 800a822:	4605      	mov	r5, r0
 800a824:	b118      	cbz	r0, 800a82e <__swbuf_r+0x12>
 800a826:	6a03      	ldr	r3, [r0, #32]
 800a828:	b90b      	cbnz	r3, 800a82e <__swbuf_r+0x12>
 800a82a:	f7fd f8df 	bl	80079ec <__sinit>
 800a82e:	69a3      	ldr	r3, [r4, #24]
 800a830:	60a3      	str	r3, [r4, #8]
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	071a      	lsls	r2, r3, #28
 800a836:	d501      	bpl.n	800a83c <__swbuf_r+0x20>
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	b943      	cbnz	r3, 800a84e <__swbuf_r+0x32>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 f82a 	bl	800a898 <__swsetup_r>
 800a844:	b118      	cbz	r0, 800a84e <__swbuf_r+0x32>
 800a846:	f04f 37ff 	mov.w	r7, #4294967295
 800a84a:	4638      	mov	r0, r7
 800a84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	6922      	ldr	r2, [r4, #16]
 800a852:	b2f6      	uxtb	r6, r6
 800a854:	1a98      	subs	r0, r3, r2
 800a856:	6963      	ldr	r3, [r4, #20]
 800a858:	4637      	mov	r7, r6
 800a85a:	4283      	cmp	r3, r0
 800a85c:	dc05      	bgt.n	800a86a <__swbuf_r+0x4e>
 800a85e:	4621      	mov	r1, r4
 800a860:	4628      	mov	r0, r5
 800a862:	f7ff ffb3 	bl	800a7cc <_fflush_r>
 800a866:	2800      	cmp	r0, #0
 800a868:	d1ed      	bne.n	800a846 <__swbuf_r+0x2a>
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	60a3      	str	r3, [r4, #8]
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	6022      	str	r2, [r4, #0]
 800a876:	701e      	strb	r6, [r3, #0]
 800a878:	6962      	ldr	r2, [r4, #20]
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d004      	beq.n	800a88a <__swbuf_r+0x6e>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	07db      	lsls	r3, r3, #31
 800a884:	d5e1      	bpl.n	800a84a <__swbuf_r+0x2e>
 800a886:	2e0a      	cmp	r6, #10
 800a888:	d1df      	bne.n	800a84a <__swbuf_r+0x2e>
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f7ff ff9d 	bl	800a7cc <_fflush_r>
 800a892:	2800      	cmp	r0, #0
 800a894:	d0d9      	beq.n	800a84a <__swbuf_r+0x2e>
 800a896:	e7d6      	b.n	800a846 <__swbuf_r+0x2a>

0800a898 <__swsetup_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4b29      	ldr	r3, [pc, #164]	@ (800a940 <__swsetup_r+0xa8>)
 800a89c:	4605      	mov	r5, r0
 800a89e:	6818      	ldr	r0, [r3, #0]
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	b118      	cbz	r0, 800a8ac <__swsetup_r+0x14>
 800a8a4:	6a03      	ldr	r3, [r0, #32]
 800a8a6:	b90b      	cbnz	r3, 800a8ac <__swsetup_r+0x14>
 800a8a8:	f7fd f8a0 	bl	80079ec <__sinit>
 800a8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b0:	0719      	lsls	r1, r3, #28
 800a8b2:	d422      	bmi.n	800a8fa <__swsetup_r+0x62>
 800a8b4:	06da      	lsls	r2, r3, #27
 800a8b6:	d407      	bmi.n	800a8c8 <__swsetup_r+0x30>
 800a8b8:	2209      	movs	r2, #9
 800a8ba:	602a      	str	r2, [r5, #0]
 800a8bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	e033      	b.n	800a930 <__swsetup_r+0x98>
 800a8c8:	0758      	lsls	r0, r3, #29
 800a8ca:	d512      	bpl.n	800a8f2 <__swsetup_r+0x5a>
 800a8cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8ce:	b141      	cbz	r1, 800a8e2 <__swsetup_r+0x4a>
 800a8d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	d002      	beq.n	800a8de <__swsetup_r+0x46>
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f7fe f83d 	bl	8008958 <_free_r>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	6063      	str	r3, [r4, #4]
 800a8ee:	6923      	ldr	r3, [r4, #16]
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f043 0308 	orr.w	r3, r3, #8
 800a8f8:	81a3      	strh	r3, [r4, #12]
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	b94b      	cbnz	r3, 800a912 <__swsetup_r+0x7a>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a908:	d003      	beq.n	800a912 <__swsetup_r+0x7a>
 800a90a:	4621      	mov	r1, r4
 800a90c:	4628      	mov	r0, r5
 800a90e:	f000 fc30 	bl	800b172 <__smakebuf_r>
 800a912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a916:	f013 0201 	ands.w	r2, r3, #1
 800a91a:	d00a      	beq.n	800a932 <__swsetup_r+0x9a>
 800a91c:	2200      	movs	r2, #0
 800a91e:	60a2      	str	r2, [r4, #8]
 800a920:	6962      	ldr	r2, [r4, #20]
 800a922:	4252      	negs	r2, r2
 800a924:	61a2      	str	r2, [r4, #24]
 800a926:	6922      	ldr	r2, [r4, #16]
 800a928:	b942      	cbnz	r2, 800a93c <__swsetup_r+0xa4>
 800a92a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a92e:	d1c5      	bne.n	800a8bc <__swsetup_r+0x24>
 800a930:	bd38      	pop	{r3, r4, r5, pc}
 800a932:	0799      	lsls	r1, r3, #30
 800a934:	bf58      	it	pl
 800a936:	6962      	ldrpl	r2, [r4, #20]
 800a938:	60a2      	str	r2, [r4, #8]
 800a93a:	e7f4      	b.n	800a926 <__swsetup_r+0x8e>
 800a93c:	2000      	movs	r0, #0
 800a93e:	e7f7      	b.n	800a930 <__swsetup_r+0x98>
 800a940:	2000002c 	.word	0x2000002c

0800a944 <strncmp>:
 800a944:	b510      	push	{r4, lr}
 800a946:	b16a      	cbz	r2, 800a964 <strncmp+0x20>
 800a948:	3901      	subs	r1, #1
 800a94a:	1884      	adds	r4, r0, r2
 800a94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a954:	429a      	cmp	r2, r3
 800a956:	d103      	bne.n	800a960 <strncmp+0x1c>
 800a958:	42a0      	cmp	r0, r4
 800a95a:	d001      	beq.n	800a960 <strncmp+0x1c>
 800a95c:	2a00      	cmp	r2, #0
 800a95e:	d1f5      	bne.n	800a94c <strncmp+0x8>
 800a960:	1ad0      	subs	r0, r2, r3
 800a962:	bd10      	pop	{r4, pc}
 800a964:	4610      	mov	r0, r2
 800a966:	e7fc      	b.n	800a962 <strncmp+0x1e>

0800a968 <_sbrk_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	2300      	movs	r3, #0
 800a96c:	4d05      	ldr	r5, [pc, #20]	@ (800a984 <_sbrk_r+0x1c>)
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	f7f7 ff0e 	bl	8002794 <_sbrk>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_sbrk_r+0x1a>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_sbrk_r+0x1a>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	200008b4 	.word	0x200008b4

0800a988 <nan>:
 800a988:	2000      	movs	r0, #0
 800a98a:	4901      	ldr	r1, [pc, #4]	@ (800a990 <nan+0x8>)
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	7ff80000 	.word	0x7ff80000

0800a994 <__assert_func>:
 800a994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a996:	4614      	mov	r4, r2
 800a998:	461a      	mov	r2, r3
 800a99a:	4b09      	ldr	r3, [pc, #36]	@ (800a9c0 <__assert_func+0x2c>)
 800a99c:	4605      	mov	r5, r0
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68d8      	ldr	r0, [r3, #12]
 800a9a2:	b954      	cbnz	r4, 800a9ba <__assert_func+0x26>
 800a9a4:	4b07      	ldr	r3, [pc, #28]	@ (800a9c4 <__assert_func+0x30>)
 800a9a6:	461c      	mov	r4, r3
 800a9a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9ac:	9100      	str	r1, [sp, #0]
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	4905      	ldr	r1, [pc, #20]	@ (800a9c8 <__assert_func+0x34>)
 800a9b2:	f000 fba7 	bl	800b104 <fiprintf>
 800a9b6:	f000 fc3b 	bl	800b230 <abort>
 800a9ba:	4b04      	ldr	r3, [pc, #16]	@ (800a9cc <__assert_func+0x38>)
 800a9bc:	e7f4      	b.n	800a9a8 <__assert_func+0x14>
 800a9be:	bf00      	nop
 800a9c0:	2000002c 	.word	0x2000002c
 800a9c4:	0800bfad 	.word	0x0800bfad
 800a9c8:	0800bf7f 	.word	0x0800bf7f
 800a9cc:	0800bf72 	.word	0x0800bf72

0800a9d0 <_calloc_r>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	fba1 5402 	umull	r5, r4, r1, r2
 800a9d6:	b93c      	cbnz	r4, 800a9e8 <_calloc_r+0x18>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7fe f82f 	bl	8008a3c <_malloc_r>
 800a9de:	4606      	mov	r6, r0
 800a9e0:	b928      	cbnz	r0, 800a9ee <_calloc_r+0x1e>
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	220c      	movs	r2, #12
 800a9ea:	6002      	str	r2, [r0, #0]
 800a9ec:	e7f9      	b.n	800a9e2 <_calloc_r+0x12>
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	f7fd f8c0 	bl	8007b76 <memset>
 800a9f6:	e7f5      	b.n	800a9e4 <_calloc_r+0x14>

0800a9f8 <rshift>:
 800a9f8:	6903      	ldr	r3, [r0, #16]
 800a9fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa02:	f100 0414 	add.w	r4, r0, #20
 800aa06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa0a:	dd46      	ble.n	800aa9a <rshift+0xa2>
 800aa0c:	f011 011f 	ands.w	r1, r1, #31
 800aa10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa18:	d10c      	bne.n	800aa34 <rshift+0x3c>
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f100 0710 	add.w	r7, r0, #16
 800aa20:	42b1      	cmp	r1, r6
 800aa22:	d335      	bcc.n	800aa90 <rshift+0x98>
 800aa24:	1a9b      	subs	r3, r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	1eea      	subs	r2, r5, #3
 800aa2a:	4296      	cmp	r6, r2
 800aa2c:	bf38      	it	cc
 800aa2e:	2300      	movcc	r3, #0
 800aa30:	4423      	add	r3, r4
 800aa32:	e015      	b.n	800aa60 <rshift+0x68>
 800aa34:	46a1      	mov	r9, r4
 800aa36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa3a:	f1c1 0820 	rsb	r8, r1, #32
 800aa3e:	40cf      	lsrs	r7, r1
 800aa40:	f105 0e04 	add.w	lr, r5, #4
 800aa44:	4576      	cmp	r6, lr
 800aa46:	46f4      	mov	ip, lr
 800aa48:	d816      	bhi.n	800aa78 <rshift+0x80>
 800aa4a:	1a9a      	subs	r2, r3, r2
 800aa4c:	0092      	lsls	r2, r2, #2
 800aa4e:	3a04      	subs	r2, #4
 800aa50:	3501      	adds	r5, #1
 800aa52:	42ae      	cmp	r6, r5
 800aa54:	bf38      	it	cc
 800aa56:	2200      	movcc	r2, #0
 800aa58:	18a3      	adds	r3, r4, r2
 800aa5a:	50a7      	str	r7, [r4, r2]
 800aa5c:	b107      	cbz	r7, 800aa60 <rshift+0x68>
 800aa5e:	3304      	adds	r3, #4
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	eba3 0204 	sub.w	r2, r3, r4
 800aa66:	bf08      	it	eq
 800aa68:	2300      	moveq	r3, #0
 800aa6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa6e:	6102      	str	r2, [r0, #16]
 800aa70:	bf08      	it	eq
 800aa72:	6143      	streq	r3, [r0, #20]
 800aa74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa78:	f8dc c000 	ldr.w	ip, [ip]
 800aa7c:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa80:	ea4c 0707 	orr.w	r7, ip, r7
 800aa84:	f849 7b04 	str.w	r7, [r9], #4
 800aa88:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa8c:	40cf      	lsrs	r7, r1
 800aa8e:	e7d9      	b.n	800aa44 <rshift+0x4c>
 800aa90:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa94:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa98:	e7c2      	b.n	800aa20 <rshift+0x28>
 800aa9a:	4623      	mov	r3, r4
 800aa9c:	e7e0      	b.n	800aa60 <rshift+0x68>

0800aa9e <__hexdig_fun>:
 800aa9e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aaa2:	2b09      	cmp	r3, #9
 800aaa4:	d802      	bhi.n	800aaac <__hexdig_fun+0xe>
 800aaa6:	3820      	subs	r0, #32
 800aaa8:	b2c0      	uxtb	r0, r0
 800aaaa:	4770      	bx	lr
 800aaac:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aab0:	2b05      	cmp	r3, #5
 800aab2:	d801      	bhi.n	800aab8 <__hexdig_fun+0x1a>
 800aab4:	3847      	subs	r0, #71	@ 0x47
 800aab6:	e7f7      	b.n	800aaa8 <__hexdig_fun+0xa>
 800aab8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aabc:	2b05      	cmp	r3, #5
 800aabe:	d801      	bhi.n	800aac4 <__hexdig_fun+0x26>
 800aac0:	3827      	subs	r0, #39	@ 0x27
 800aac2:	e7f1      	b.n	800aaa8 <__hexdig_fun+0xa>
 800aac4:	2000      	movs	r0, #0
 800aac6:	4770      	bx	lr

0800aac8 <__gethex>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	468a      	mov	sl, r1
 800aace:	4690      	mov	r8, r2
 800aad0:	b085      	sub	sp, #20
 800aad2:	9302      	str	r3, [sp, #8]
 800aad4:	680b      	ldr	r3, [r1, #0]
 800aad6:	9001      	str	r0, [sp, #4]
 800aad8:	1c9c      	adds	r4, r3, #2
 800aada:	46a1      	mov	r9, r4
 800aadc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aae0:	2830      	cmp	r0, #48	@ 0x30
 800aae2:	d0fa      	beq.n	800aada <__gethex+0x12>
 800aae4:	eba9 0303 	sub.w	r3, r9, r3
 800aae8:	f1a3 0b02 	sub.w	fp, r3, #2
 800aaec:	f7ff ffd7 	bl	800aa9e <__hexdig_fun>
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d168      	bne.n	800abc8 <__gethex+0x100>
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	4648      	mov	r0, r9
 800aafa:	499f      	ldr	r1, [pc, #636]	@ (800ad78 <__gethex+0x2b0>)
 800aafc:	f7ff ff22 	bl	800a944 <strncmp>
 800ab00:	4607      	mov	r7, r0
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d167      	bne.n	800abd6 <__gethex+0x10e>
 800ab06:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ab0a:	4626      	mov	r6, r4
 800ab0c:	f7ff ffc7 	bl	800aa9e <__hexdig_fun>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d062      	beq.n	800abda <__gethex+0x112>
 800ab14:	4623      	mov	r3, r4
 800ab16:	7818      	ldrb	r0, [r3, #0]
 800ab18:	4699      	mov	r9, r3
 800ab1a:	2830      	cmp	r0, #48	@ 0x30
 800ab1c:	f103 0301 	add.w	r3, r3, #1
 800ab20:	d0f9      	beq.n	800ab16 <__gethex+0x4e>
 800ab22:	f7ff ffbc 	bl	800aa9e <__hexdig_fun>
 800ab26:	fab0 f580 	clz	r5, r0
 800ab2a:	f04f 0b01 	mov.w	fp, #1
 800ab2e:	096d      	lsrs	r5, r5, #5
 800ab30:	464a      	mov	r2, r9
 800ab32:	4616      	mov	r6, r2
 800ab34:	7830      	ldrb	r0, [r6, #0]
 800ab36:	3201      	adds	r2, #1
 800ab38:	f7ff ffb1 	bl	800aa9e <__hexdig_fun>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d1f8      	bne.n	800ab32 <__gethex+0x6a>
 800ab40:	2201      	movs	r2, #1
 800ab42:	4630      	mov	r0, r6
 800ab44:	498c      	ldr	r1, [pc, #560]	@ (800ad78 <__gethex+0x2b0>)
 800ab46:	f7ff fefd 	bl	800a944 <strncmp>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d13f      	bne.n	800abce <__gethex+0x106>
 800ab4e:	b944      	cbnz	r4, 800ab62 <__gethex+0x9a>
 800ab50:	1c74      	adds	r4, r6, #1
 800ab52:	4622      	mov	r2, r4
 800ab54:	4616      	mov	r6, r2
 800ab56:	7830      	ldrb	r0, [r6, #0]
 800ab58:	3201      	adds	r2, #1
 800ab5a:	f7ff ffa0 	bl	800aa9e <__hexdig_fun>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d1f8      	bne.n	800ab54 <__gethex+0x8c>
 800ab62:	1ba4      	subs	r4, r4, r6
 800ab64:	00a7      	lsls	r7, r4, #2
 800ab66:	7833      	ldrb	r3, [r6, #0]
 800ab68:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab6c:	2b50      	cmp	r3, #80	@ 0x50
 800ab6e:	d13e      	bne.n	800abee <__gethex+0x126>
 800ab70:	7873      	ldrb	r3, [r6, #1]
 800ab72:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab74:	d033      	beq.n	800abde <__gethex+0x116>
 800ab76:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab78:	d034      	beq.n	800abe4 <__gethex+0x11c>
 800ab7a:	2400      	movs	r4, #0
 800ab7c:	1c71      	adds	r1, r6, #1
 800ab7e:	7808      	ldrb	r0, [r1, #0]
 800ab80:	f7ff ff8d 	bl	800aa9e <__hexdig_fun>
 800ab84:	1e43      	subs	r3, r0, #1
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b18      	cmp	r3, #24
 800ab8a:	d830      	bhi.n	800abee <__gethex+0x126>
 800ab8c:	f1a0 0210 	sub.w	r2, r0, #16
 800ab90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab94:	f7ff ff83 	bl	800aa9e <__hexdig_fun>
 800ab98:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab9c:	fa5f fc8c 	uxtb.w	ip, ip
 800aba0:	f1bc 0f18 	cmp.w	ip, #24
 800aba4:	f04f 030a 	mov.w	r3, #10
 800aba8:	d91e      	bls.n	800abe8 <__gethex+0x120>
 800abaa:	b104      	cbz	r4, 800abae <__gethex+0xe6>
 800abac:	4252      	negs	r2, r2
 800abae:	4417      	add	r7, r2
 800abb0:	f8ca 1000 	str.w	r1, [sl]
 800abb4:	b1ed      	cbz	r5, 800abf2 <__gethex+0x12a>
 800abb6:	f1bb 0f00 	cmp.w	fp, #0
 800abba:	bf0c      	ite	eq
 800abbc:	2506      	moveq	r5, #6
 800abbe:	2500      	movne	r5, #0
 800abc0:	4628      	mov	r0, r5
 800abc2:	b005      	add	sp, #20
 800abc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc8:	2500      	movs	r5, #0
 800abca:	462c      	mov	r4, r5
 800abcc:	e7b0      	b.n	800ab30 <__gethex+0x68>
 800abce:	2c00      	cmp	r4, #0
 800abd0:	d1c7      	bne.n	800ab62 <__gethex+0x9a>
 800abd2:	4627      	mov	r7, r4
 800abd4:	e7c7      	b.n	800ab66 <__gethex+0x9e>
 800abd6:	464e      	mov	r6, r9
 800abd8:	462f      	mov	r7, r5
 800abda:	2501      	movs	r5, #1
 800abdc:	e7c3      	b.n	800ab66 <__gethex+0x9e>
 800abde:	2400      	movs	r4, #0
 800abe0:	1cb1      	adds	r1, r6, #2
 800abe2:	e7cc      	b.n	800ab7e <__gethex+0xb6>
 800abe4:	2401      	movs	r4, #1
 800abe6:	e7fb      	b.n	800abe0 <__gethex+0x118>
 800abe8:	fb03 0002 	mla	r0, r3, r2, r0
 800abec:	e7ce      	b.n	800ab8c <__gethex+0xc4>
 800abee:	4631      	mov	r1, r6
 800abf0:	e7de      	b.n	800abb0 <__gethex+0xe8>
 800abf2:	4629      	mov	r1, r5
 800abf4:	eba6 0309 	sub.w	r3, r6, r9
 800abf8:	3b01      	subs	r3, #1
 800abfa:	2b07      	cmp	r3, #7
 800abfc:	dc0a      	bgt.n	800ac14 <__gethex+0x14c>
 800abfe:	9801      	ldr	r0, [sp, #4]
 800ac00:	f7fd ffa8 	bl	8008b54 <_Balloc>
 800ac04:	4604      	mov	r4, r0
 800ac06:	b940      	cbnz	r0, 800ac1a <__gethex+0x152>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	21e4      	movs	r1, #228	@ 0xe4
 800ac0c:	4b5b      	ldr	r3, [pc, #364]	@ (800ad7c <__gethex+0x2b4>)
 800ac0e:	485c      	ldr	r0, [pc, #368]	@ (800ad80 <__gethex+0x2b8>)
 800ac10:	f7ff fec0 	bl	800a994 <__assert_func>
 800ac14:	3101      	adds	r1, #1
 800ac16:	105b      	asrs	r3, r3, #1
 800ac18:	e7ef      	b.n	800abfa <__gethex+0x132>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f100 0a14 	add.w	sl, r0, #20
 800ac20:	4655      	mov	r5, sl
 800ac22:	469b      	mov	fp, r3
 800ac24:	45b1      	cmp	r9, r6
 800ac26:	d337      	bcc.n	800ac98 <__gethex+0x1d0>
 800ac28:	f845 bb04 	str.w	fp, [r5], #4
 800ac2c:	eba5 050a 	sub.w	r5, r5, sl
 800ac30:	10ad      	asrs	r5, r5, #2
 800ac32:	6125      	str	r5, [r4, #16]
 800ac34:	4658      	mov	r0, fp
 800ac36:	f7fe f87f 	bl	8008d38 <__hi0bits>
 800ac3a:	016d      	lsls	r5, r5, #5
 800ac3c:	f8d8 6000 	ldr.w	r6, [r8]
 800ac40:	1a2d      	subs	r5, r5, r0
 800ac42:	42b5      	cmp	r5, r6
 800ac44:	dd54      	ble.n	800acf0 <__gethex+0x228>
 800ac46:	1bad      	subs	r5, r5, r6
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7fe fc07 	bl	800945e <__any_on>
 800ac50:	4681      	mov	r9, r0
 800ac52:	b178      	cbz	r0, 800ac74 <__gethex+0x1ac>
 800ac54:	f04f 0901 	mov.w	r9, #1
 800ac58:	1e6b      	subs	r3, r5, #1
 800ac5a:	1159      	asrs	r1, r3, #5
 800ac5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac60:	f003 021f 	and.w	r2, r3, #31
 800ac64:	fa09 f202 	lsl.w	r2, r9, r2
 800ac68:	420a      	tst	r2, r1
 800ac6a:	d003      	beq.n	800ac74 <__gethex+0x1ac>
 800ac6c:	454b      	cmp	r3, r9
 800ac6e:	dc36      	bgt.n	800acde <__gethex+0x216>
 800ac70:	f04f 0902 	mov.w	r9, #2
 800ac74:	4629      	mov	r1, r5
 800ac76:	4620      	mov	r0, r4
 800ac78:	f7ff febe 	bl	800a9f8 <rshift>
 800ac7c:	442f      	add	r7, r5
 800ac7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac82:	42bb      	cmp	r3, r7
 800ac84:	da42      	bge.n	800ad0c <__gethex+0x244>
 800ac86:	4621      	mov	r1, r4
 800ac88:	9801      	ldr	r0, [sp, #4]
 800ac8a:	f7fd ffa3 	bl	8008bd4 <_Bfree>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac92:	25a3      	movs	r5, #163	@ 0xa3
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	e793      	b.n	800abc0 <__gethex+0xf8>
 800ac98:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac9c:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac9e:	d012      	beq.n	800acc6 <__gethex+0x1fe>
 800aca0:	2b20      	cmp	r3, #32
 800aca2:	d104      	bne.n	800acae <__gethex+0x1e6>
 800aca4:	f845 bb04 	str.w	fp, [r5], #4
 800aca8:	f04f 0b00 	mov.w	fp, #0
 800acac:	465b      	mov	r3, fp
 800acae:	7830      	ldrb	r0, [r6, #0]
 800acb0:	9303      	str	r3, [sp, #12]
 800acb2:	f7ff fef4 	bl	800aa9e <__hexdig_fun>
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	f000 000f 	and.w	r0, r0, #15
 800acbc:	4098      	lsls	r0, r3
 800acbe:	ea4b 0b00 	orr.w	fp, fp, r0
 800acc2:	3304      	adds	r3, #4
 800acc4:	e7ae      	b.n	800ac24 <__gethex+0x15c>
 800acc6:	45b1      	cmp	r9, r6
 800acc8:	d8ea      	bhi.n	800aca0 <__gethex+0x1d8>
 800acca:	2201      	movs	r2, #1
 800accc:	4630      	mov	r0, r6
 800acce:	492a      	ldr	r1, [pc, #168]	@ (800ad78 <__gethex+0x2b0>)
 800acd0:	9303      	str	r3, [sp, #12]
 800acd2:	f7ff fe37 	bl	800a944 <strncmp>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	2800      	cmp	r0, #0
 800acda:	d1e1      	bne.n	800aca0 <__gethex+0x1d8>
 800acdc:	e7a2      	b.n	800ac24 <__gethex+0x15c>
 800acde:	4620      	mov	r0, r4
 800ace0:	1ea9      	subs	r1, r5, #2
 800ace2:	f7fe fbbc 	bl	800945e <__any_on>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d0c2      	beq.n	800ac70 <__gethex+0x1a8>
 800acea:	f04f 0903 	mov.w	r9, #3
 800acee:	e7c1      	b.n	800ac74 <__gethex+0x1ac>
 800acf0:	da09      	bge.n	800ad06 <__gethex+0x23e>
 800acf2:	1b75      	subs	r5, r6, r5
 800acf4:	4621      	mov	r1, r4
 800acf6:	462a      	mov	r2, r5
 800acf8:	9801      	ldr	r0, [sp, #4]
 800acfa:	f7fe f981 	bl	8009000 <__lshift>
 800acfe:	4604      	mov	r4, r0
 800ad00:	1b7f      	subs	r7, r7, r5
 800ad02:	f100 0a14 	add.w	sl, r0, #20
 800ad06:	f04f 0900 	mov.w	r9, #0
 800ad0a:	e7b8      	b.n	800ac7e <__gethex+0x1b6>
 800ad0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad10:	42bd      	cmp	r5, r7
 800ad12:	dd6f      	ble.n	800adf4 <__gethex+0x32c>
 800ad14:	1bed      	subs	r5, r5, r7
 800ad16:	42ae      	cmp	r6, r5
 800ad18:	dc34      	bgt.n	800ad84 <__gethex+0x2bc>
 800ad1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d022      	beq.n	800ad68 <__gethex+0x2a0>
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d024      	beq.n	800ad70 <__gethex+0x2a8>
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d115      	bne.n	800ad56 <__gethex+0x28e>
 800ad2a:	42ae      	cmp	r6, r5
 800ad2c:	d113      	bne.n	800ad56 <__gethex+0x28e>
 800ad2e:	2e01      	cmp	r6, #1
 800ad30:	d10b      	bne.n	800ad4a <__gethex+0x282>
 800ad32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad36:	9a02      	ldr	r2, [sp, #8]
 800ad38:	2562      	movs	r5, #98	@ 0x62
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	f8ca 3000 	str.w	r3, [sl]
 800ad44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad46:	601c      	str	r4, [r3, #0]
 800ad48:	e73a      	b.n	800abc0 <__gethex+0xf8>
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	1e71      	subs	r1, r6, #1
 800ad4e:	f7fe fb86 	bl	800945e <__any_on>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d1ed      	bne.n	800ad32 <__gethex+0x26a>
 800ad56:	4621      	mov	r1, r4
 800ad58:	9801      	ldr	r0, [sp, #4]
 800ad5a:	f7fd ff3b 	bl	8008bd4 <_Bfree>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad62:	2550      	movs	r5, #80	@ 0x50
 800ad64:	6013      	str	r3, [r2, #0]
 800ad66:	e72b      	b.n	800abc0 <__gethex+0xf8>
 800ad68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1f3      	bne.n	800ad56 <__gethex+0x28e>
 800ad6e:	e7e0      	b.n	800ad32 <__gethex+0x26a>
 800ad70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1dd      	bne.n	800ad32 <__gethex+0x26a>
 800ad76:	e7ee      	b.n	800ad56 <__gethex+0x28e>
 800ad78:	0800be00 	.word	0x0800be00
 800ad7c:	0800bc93 	.word	0x0800bc93
 800ad80:	0800bfae 	.word	0x0800bfae
 800ad84:	1e6f      	subs	r7, r5, #1
 800ad86:	f1b9 0f00 	cmp.w	r9, #0
 800ad8a:	d130      	bne.n	800adee <__gethex+0x326>
 800ad8c:	b127      	cbz	r7, 800ad98 <__gethex+0x2d0>
 800ad8e:	4639      	mov	r1, r7
 800ad90:	4620      	mov	r0, r4
 800ad92:	f7fe fb64 	bl	800945e <__any_on>
 800ad96:	4681      	mov	r9, r0
 800ad98:	2301      	movs	r3, #1
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	1b76      	subs	r6, r6, r5
 800ad9e:	2502      	movs	r5, #2
 800ada0:	117a      	asrs	r2, r7, #5
 800ada2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ada6:	f007 071f 	and.w	r7, r7, #31
 800adaa:	40bb      	lsls	r3, r7
 800adac:	4213      	tst	r3, r2
 800adae:	4620      	mov	r0, r4
 800adb0:	bf18      	it	ne
 800adb2:	f049 0902 	orrne.w	r9, r9, #2
 800adb6:	f7ff fe1f 	bl	800a9f8 <rshift>
 800adba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800adbe:	f1b9 0f00 	cmp.w	r9, #0
 800adc2:	d047      	beq.n	800ae54 <__gethex+0x38c>
 800adc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d015      	beq.n	800adf8 <__gethex+0x330>
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d017      	beq.n	800ae00 <__gethex+0x338>
 800add0:	2b01      	cmp	r3, #1
 800add2:	d109      	bne.n	800ade8 <__gethex+0x320>
 800add4:	f019 0f02 	tst.w	r9, #2
 800add8:	d006      	beq.n	800ade8 <__gethex+0x320>
 800adda:	f8da 3000 	ldr.w	r3, [sl]
 800adde:	ea49 0903 	orr.w	r9, r9, r3
 800ade2:	f019 0f01 	tst.w	r9, #1
 800ade6:	d10e      	bne.n	800ae06 <__gethex+0x33e>
 800ade8:	f045 0510 	orr.w	r5, r5, #16
 800adec:	e032      	b.n	800ae54 <__gethex+0x38c>
 800adee:	f04f 0901 	mov.w	r9, #1
 800adf2:	e7d1      	b.n	800ad98 <__gethex+0x2d0>
 800adf4:	2501      	movs	r5, #1
 800adf6:	e7e2      	b.n	800adbe <__gethex+0x2f6>
 800adf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adfa:	f1c3 0301 	rsb	r3, r3, #1
 800adfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0f0      	beq.n	800ade8 <__gethex+0x320>
 800ae06:	f04f 0c00 	mov.w	ip, #0
 800ae0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae0e:	f104 0314 	add.w	r3, r4, #20
 800ae12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae20:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae24:	d01b      	beq.n	800ae5e <__gethex+0x396>
 800ae26:	3201      	adds	r2, #1
 800ae28:	6002      	str	r2, [r0, #0]
 800ae2a:	2d02      	cmp	r5, #2
 800ae2c:	f104 0314 	add.w	r3, r4, #20
 800ae30:	d13c      	bne.n	800aeac <__gethex+0x3e4>
 800ae32:	f8d8 2000 	ldr.w	r2, [r8]
 800ae36:	3a01      	subs	r2, #1
 800ae38:	42b2      	cmp	r2, r6
 800ae3a:	d109      	bne.n	800ae50 <__gethex+0x388>
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	1171      	asrs	r1, r6, #5
 800ae40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae44:	f006 061f 	and.w	r6, r6, #31
 800ae48:	fa02 f606 	lsl.w	r6, r2, r6
 800ae4c:	421e      	tst	r6, r3
 800ae4e:	d13a      	bne.n	800aec6 <__gethex+0x3fe>
 800ae50:	f045 0520 	orr.w	r5, r5, #32
 800ae54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae56:	601c      	str	r4, [r3, #0]
 800ae58:	9b02      	ldr	r3, [sp, #8]
 800ae5a:	601f      	str	r7, [r3, #0]
 800ae5c:	e6b0      	b.n	800abc0 <__gethex+0xf8>
 800ae5e:	4299      	cmp	r1, r3
 800ae60:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae64:	d8d9      	bhi.n	800ae1a <__gethex+0x352>
 800ae66:	68a3      	ldr	r3, [r4, #8]
 800ae68:	459b      	cmp	fp, r3
 800ae6a:	db17      	blt.n	800ae9c <__gethex+0x3d4>
 800ae6c:	6861      	ldr	r1, [r4, #4]
 800ae6e:	9801      	ldr	r0, [sp, #4]
 800ae70:	3101      	adds	r1, #1
 800ae72:	f7fd fe6f 	bl	8008b54 <_Balloc>
 800ae76:	4681      	mov	r9, r0
 800ae78:	b918      	cbnz	r0, 800ae82 <__gethex+0x3ba>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	2184      	movs	r1, #132	@ 0x84
 800ae7e:	4b19      	ldr	r3, [pc, #100]	@ (800aee4 <__gethex+0x41c>)
 800ae80:	e6c5      	b.n	800ac0e <__gethex+0x146>
 800ae82:	6922      	ldr	r2, [r4, #16]
 800ae84:	f104 010c 	add.w	r1, r4, #12
 800ae88:	3202      	adds	r2, #2
 800ae8a:	0092      	lsls	r2, r2, #2
 800ae8c:	300c      	adds	r0, #12
 800ae8e:	f7fc ff00 	bl	8007c92 <memcpy>
 800ae92:	4621      	mov	r1, r4
 800ae94:	9801      	ldr	r0, [sp, #4]
 800ae96:	f7fd fe9d 	bl	8008bd4 <_Bfree>
 800ae9a:	464c      	mov	r4, r9
 800ae9c:	6923      	ldr	r3, [r4, #16]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	6122      	str	r2, [r4, #16]
 800aea2:	2201      	movs	r2, #1
 800aea4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aea8:	615a      	str	r2, [r3, #20]
 800aeaa:	e7be      	b.n	800ae2a <__gethex+0x362>
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	455a      	cmp	r2, fp
 800aeb0:	dd0b      	ble.n	800aeca <__gethex+0x402>
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f7ff fd9f 	bl	800a9f8 <rshift>
 800aeba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aebe:	3701      	adds	r7, #1
 800aec0:	42bb      	cmp	r3, r7
 800aec2:	f6ff aee0 	blt.w	800ac86 <__gethex+0x1be>
 800aec6:	2501      	movs	r5, #1
 800aec8:	e7c2      	b.n	800ae50 <__gethex+0x388>
 800aeca:	f016 061f 	ands.w	r6, r6, #31
 800aece:	d0fa      	beq.n	800aec6 <__gethex+0x3fe>
 800aed0:	4453      	add	r3, sl
 800aed2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aed6:	f7fd ff2f 	bl	8008d38 <__hi0bits>
 800aeda:	f1c6 0620 	rsb	r6, r6, #32
 800aede:	42b0      	cmp	r0, r6
 800aee0:	dbe7      	blt.n	800aeb2 <__gethex+0x3ea>
 800aee2:	e7f0      	b.n	800aec6 <__gethex+0x3fe>
 800aee4:	0800bc93 	.word	0x0800bc93

0800aee8 <L_shift>:
 800aee8:	f1c2 0208 	rsb	r2, r2, #8
 800aeec:	0092      	lsls	r2, r2, #2
 800aeee:	b570      	push	{r4, r5, r6, lr}
 800aef0:	f1c2 0620 	rsb	r6, r2, #32
 800aef4:	6843      	ldr	r3, [r0, #4]
 800aef6:	6804      	ldr	r4, [r0, #0]
 800aef8:	fa03 f506 	lsl.w	r5, r3, r6
 800aefc:	432c      	orrs	r4, r5
 800aefe:	40d3      	lsrs	r3, r2
 800af00:	6004      	str	r4, [r0, #0]
 800af02:	f840 3f04 	str.w	r3, [r0, #4]!
 800af06:	4288      	cmp	r0, r1
 800af08:	d3f4      	bcc.n	800aef4 <L_shift+0xc>
 800af0a:	bd70      	pop	{r4, r5, r6, pc}

0800af0c <__match>:
 800af0c:	b530      	push	{r4, r5, lr}
 800af0e:	6803      	ldr	r3, [r0, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af16:	b914      	cbnz	r4, 800af1e <__match+0x12>
 800af18:	6003      	str	r3, [r0, #0]
 800af1a:	2001      	movs	r0, #1
 800af1c:	bd30      	pop	{r4, r5, pc}
 800af1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af22:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800af26:	2d19      	cmp	r5, #25
 800af28:	bf98      	it	ls
 800af2a:	3220      	addls	r2, #32
 800af2c:	42a2      	cmp	r2, r4
 800af2e:	d0f0      	beq.n	800af12 <__match+0x6>
 800af30:	2000      	movs	r0, #0
 800af32:	e7f3      	b.n	800af1c <__match+0x10>

0800af34 <__hexnan>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	2500      	movs	r5, #0
 800af3a:	680b      	ldr	r3, [r1, #0]
 800af3c:	4682      	mov	sl, r0
 800af3e:	115e      	asrs	r6, r3, #5
 800af40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af44:	f013 031f 	ands.w	r3, r3, #31
 800af48:	bf18      	it	ne
 800af4a:	3604      	addne	r6, #4
 800af4c:	1f37      	subs	r7, r6, #4
 800af4e:	4690      	mov	r8, r2
 800af50:	46b9      	mov	r9, r7
 800af52:	463c      	mov	r4, r7
 800af54:	46ab      	mov	fp, r5
 800af56:	b087      	sub	sp, #28
 800af58:	6801      	ldr	r1, [r0, #0]
 800af5a:	9301      	str	r3, [sp, #4]
 800af5c:	f846 5c04 	str.w	r5, [r6, #-4]
 800af60:	9502      	str	r5, [sp, #8]
 800af62:	784a      	ldrb	r2, [r1, #1]
 800af64:	1c4b      	adds	r3, r1, #1
 800af66:	9303      	str	r3, [sp, #12]
 800af68:	b342      	cbz	r2, 800afbc <__hexnan+0x88>
 800af6a:	4610      	mov	r0, r2
 800af6c:	9105      	str	r1, [sp, #20]
 800af6e:	9204      	str	r2, [sp, #16]
 800af70:	f7ff fd95 	bl	800aa9e <__hexdig_fun>
 800af74:	2800      	cmp	r0, #0
 800af76:	d151      	bne.n	800b01c <__hexnan+0xe8>
 800af78:	9a04      	ldr	r2, [sp, #16]
 800af7a:	9905      	ldr	r1, [sp, #20]
 800af7c:	2a20      	cmp	r2, #32
 800af7e:	d818      	bhi.n	800afb2 <__hexnan+0x7e>
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	459b      	cmp	fp, r3
 800af84:	dd13      	ble.n	800afae <__hexnan+0x7a>
 800af86:	454c      	cmp	r4, r9
 800af88:	d206      	bcs.n	800af98 <__hexnan+0x64>
 800af8a:	2d07      	cmp	r5, #7
 800af8c:	dc04      	bgt.n	800af98 <__hexnan+0x64>
 800af8e:	462a      	mov	r2, r5
 800af90:	4649      	mov	r1, r9
 800af92:	4620      	mov	r0, r4
 800af94:	f7ff ffa8 	bl	800aee8 <L_shift>
 800af98:	4544      	cmp	r4, r8
 800af9a:	d952      	bls.n	800b042 <__hexnan+0x10e>
 800af9c:	2300      	movs	r3, #0
 800af9e:	f1a4 0904 	sub.w	r9, r4, #4
 800afa2:	f844 3c04 	str.w	r3, [r4, #-4]
 800afa6:	461d      	mov	r5, r3
 800afa8:	464c      	mov	r4, r9
 800afaa:	f8cd b008 	str.w	fp, [sp, #8]
 800afae:	9903      	ldr	r1, [sp, #12]
 800afb0:	e7d7      	b.n	800af62 <__hexnan+0x2e>
 800afb2:	2a29      	cmp	r2, #41	@ 0x29
 800afb4:	d157      	bne.n	800b066 <__hexnan+0x132>
 800afb6:	3102      	adds	r1, #2
 800afb8:	f8ca 1000 	str.w	r1, [sl]
 800afbc:	f1bb 0f00 	cmp.w	fp, #0
 800afc0:	d051      	beq.n	800b066 <__hexnan+0x132>
 800afc2:	454c      	cmp	r4, r9
 800afc4:	d206      	bcs.n	800afd4 <__hexnan+0xa0>
 800afc6:	2d07      	cmp	r5, #7
 800afc8:	dc04      	bgt.n	800afd4 <__hexnan+0xa0>
 800afca:	462a      	mov	r2, r5
 800afcc:	4649      	mov	r1, r9
 800afce:	4620      	mov	r0, r4
 800afd0:	f7ff ff8a 	bl	800aee8 <L_shift>
 800afd4:	4544      	cmp	r4, r8
 800afd6:	d936      	bls.n	800b046 <__hexnan+0x112>
 800afd8:	4623      	mov	r3, r4
 800afda:	f1a8 0204 	sub.w	r2, r8, #4
 800afde:	f853 1b04 	ldr.w	r1, [r3], #4
 800afe2:	429f      	cmp	r7, r3
 800afe4:	f842 1f04 	str.w	r1, [r2, #4]!
 800afe8:	d2f9      	bcs.n	800afde <__hexnan+0xaa>
 800afea:	1b3b      	subs	r3, r7, r4
 800afec:	f023 0303 	bic.w	r3, r3, #3
 800aff0:	3304      	adds	r3, #4
 800aff2:	3401      	adds	r4, #1
 800aff4:	3e03      	subs	r6, #3
 800aff6:	42b4      	cmp	r4, r6
 800aff8:	bf88      	it	hi
 800affa:	2304      	movhi	r3, #4
 800affc:	2200      	movs	r2, #0
 800affe:	4443      	add	r3, r8
 800b000:	f843 2b04 	str.w	r2, [r3], #4
 800b004:	429f      	cmp	r7, r3
 800b006:	d2fb      	bcs.n	800b000 <__hexnan+0xcc>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	b91b      	cbnz	r3, 800b014 <__hexnan+0xe0>
 800b00c:	4547      	cmp	r7, r8
 800b00e:	d128      	bne.n	800b062 <__hexnan+0x12e>
 800b010:	2301      	movs	r3, #1
 800b012:	603b      	str	r3, [r7, #0]
 800b014:	2005      	movs	r0, #5
 800b016:	b007      	add	sp, #28
 800b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01c:	3501      	adds	r5, #1
 800b01e:	2d08      	cmp	r5, #8
 800b020:	f10b 0b01 	add.w	fp, fp, #1
 800b024:	dd06      	ble.n	800b034 <__hexnan+0x100>
 800b026:	4544      	cmp	r4, r8
 800b028:	d9c1      	bls.n	800afae <__hexnan+0x7a>
 800b02a:	2300      	movs	r3, #0
 800b02c:	2501      	movs	r5, #1
 800b02e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b032:	3c04      	subs	r4, #4
 800b034:	6822      	ldr	r2, [r4, #0]
 800b036:	f000 000f 	and.w	r0, r0, #15
 800b03a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b03e:	6020      	str	r0, [r4, #0]
 800b040:	e7b5      	b.n	800afae <__hexnan+0x7a>
 800b042:	2508      	movs	r5, #8
 800b044:	e7b3      	b.n	800afae <__hexnan+0x7a>
 800b046:	9b01      	ldr	r3, [sp, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d0dd      	beq.n	800b008 <__hexnan+0xd4>
 800b04c:	f04f 32ff 	mov.w	r2, #4294967295
 800b050:	f1c3 0320 	rsb	r3, r3, #32
 800b054:	40da      	lsrs	r2, r3
 800b056:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b05a:	4013      	ands	r3, r2
 800b05c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b060:	e7d2      	b.n	800b008 <__hexnan+0xd4>
 800b062:	3f04      	subs	r7, #4
 800b064:	e7d0      	b.n	800b008 <__hexnan+0xd4>
 800b066:	2004      	movs	r0, #4
 800b068:	e7d5      	b.n	800b016 <__hexnan+0xe2>

0800b06a <__ascii_mbtowc>:
 800b06a:	b082      	sub	sp, #8
 800b06c:	b901      	cbnz	r1, 800b070 <__ascii_mbtowc+0x6>
 800b06e:	a901      	add	r1, sp, #4
 800b070:	b142      	cbz	r2, 800b084 <__ascii_mbtowc+0x1a>
 800b072:	b14b      	cbz	r3, 800b088 <__ascii_mbtowc+0x1e>
 800b074:	7813      	ldrb	r3, [r2, #0]
 800b076:	600b      	str	r3, [r1, #0]
 800b078:	7812      	ldrb	r2, [r2, #0]
 800b07a:	1e10      	subs	r0, r2, #0
 800b07c:	bf18      	it	ne
 800b07e:	2001      	movne	r0, #1
 800b080:	b002      	add	sp, #8
 800b082:	4770      	bx	lr
 800b084:	4610      	mov	r0, r2
 800b086:	e7fb      	b.n	800b080 <__ascii_mbtowc+0x16>
 800b088:	f06f 0001 	mvn.w	r0, #1
 800b08c:	e7f8      	b.n	800b080 <__ascii_mbtowc+0x16>

0800b08e <_realloc_r>:
 800b08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b092:	4680      	mov	r8, r0
 800b094:	4615      	mov	r5, r2
 800b096:	460c      	mov	r4, r1
 800b098:	b921      	cbnz	r1, 800b0a4 <_realloc_r+0x16>
 800b09a:	4611      	mov	r1, r2
 800b09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	f7fd bccc 	b.w	8008a3c <_malloc_r>
 800b0a4:	b92a      	cbnz	r2, 800b0b2 <_realloc_r+0x24>
 800b0a6:	f7fd fc57 	bl	8008958 <_free_r>
 800b0aa:	2400      	movs	r4, #0
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b2:	f000 f8c4 	bl	800b23e <_malloc_usable_size_r>
 800b0b6:	4285      	cmp	r5, r0
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	d802      	bhi.n	800b0c2 <_realloc_r+0x34>
 800b0bc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0c0:	d8f4      	bhi.n	800b0ac <_realloc_r+0x1e>
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	f7fd fcb9 	bl	8008a3c <_malloc_r>
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d0ec      	beq.n	800b0aa <_realloc_r+0x1c>
 800b0d0:	42b5      	cmp	r5, r6
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	bf28      	it	cs
 800b0d8:	4632      	movcs	r2, r6
 800b0da:	f7fc fdda 	bl	8007c92 <memcpy>
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	f7fd fc39 	bl	8008958 <_free_r>
 800b0e6:	463c      	mov	r4, r7
 800b0e8:	e7e0      	b.n	800b0ac <_realloc_r+0x1e>

0800b0ea <__ascii_wctomb>:
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	b141      	cbz	r1, 800b102 <__ascii_wctomb+0x18>
 800b0f0:	2aff      	cmp	r2, #255	@ 0xff
 800b0f2:	d904      	bls.n	800b0fe <__ascii_wctomb+0x14>
 800b0f4:	228a      	movs	r2, #138	@ 0x8a
 800b0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	4770      	bx	lr
 800b0fe:	2001      	movs	r0, #1
 800b100:	700a      	strb	r2, [r1, #0]
 800b102:	4770      	bx	lr

0800b104 <fiprintf>:
 800b104:	b40e      	push	{r1, r2, r3}
 800b106:	b503      	push	{r0, r1, lr}
 800b108:	4601      	mov	r1, r0
 800b10a:	ab03      	add	r3, sp, #12
 800b10c:	4805      	ldr	r0, [pc, #20]	@ (800b124 <fiprintf+0x20>)
 800b10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b112:	6800      	ldr	r0, [r0, #0]
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	f7ff f9c1 	bl	800a49c <_vfiprintf_r>
 800b11a:	b002      	add	sp, #8
 800b11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b120:	b003      	add	sp, #12
 800b122:	4770      	bx	lr
 800b124:	2000002c 	.word	0x2000002c

0800b128 <__swhatbuf_r>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	460c      	mov	r4, r1
 800b12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b130:	4615      	mov	r5, r2
 800b132:	2900      	cmp	r1, #0
 800b134:	461e      	mov	r6, r3
 800b136:	b096      	sub	sp, #88	@ 0x58
 800b138:	da0c      	bge.n	800b154 <__swhatbuf_r+0x2c>
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	2100      	movs	r1, #0
 800b13e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b142:	bf14      	ite	ne
 800b144:	2340      	movne	r3, #64	@ 0x40
 800b146:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b14a:	2000      	movs	r0, #0
 800b14c:	6031      	str	r1, [r6, #0]
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	b016      	add	sp, #88	@ 0x58
 800b152:	bd70      	pop	{r4, r5, r6, pc}
 800b154:	466a      	mov	r2, sp
 800b156:	f000 f849 	bl	800b1ec <_fstat_r>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	dbed      	blt.n	800b13a <__swhatbuf_r+0x12>
 800b15e:	9901      	ldr	r1, [sp, #4]
 800b160:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b164:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b168:	4259      	negs	r1, r3
 800b16a:	4159      	adcs	r1, r3
 800b16c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b170:	e7eb      	b.n	800b14a <__swhatbuf_r+0x22>

0800b172 <__smakebuf_r>:
 800b172:	898b      	ldrh	r3, [r1, #12]
 800b174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b176:	079d      	lsls	r5, r3, #30
 800b178:	4606      	mov	r6, r0
 800b17a:	460c      	mov	r4, r1
 800b17c:	d507      	bpl.n	800b18e <__smakebuf_r+0x1c>
 800b17e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b182:	6023      	str	r3, [r4, #0]
 800b184:	6123      	str	r3, [r4, #16]
 800b186:	2301      	movs	r3, #1
 800b188:	6163      	str	r3, [r4, #20]
 800b18a:	b003      	add	sp, #12
 800b18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b18e:	466a      	mov	r2, sp
 800b190:	ab01      	add	r3, sp, #4
 800b192:	f7ff ffc9 	bl	800b128 <__swhatbuf_r>
 800b196:	9f00      	ldr	r7, [sp, #0]
 800b198:	4605      	mov	r5, r0
 800b19a:	4639      	mov	r1, r7
 800b19c:	4630      	mov	r0, r6
 800b19e:	f7fd fc4d 	bl	8008a3c <_malloc_r>
 800b1a2:	b948      	cbnz	r0, 800b1b8 <__smakebuf_r+0x46>
 800b1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a8:	059a      	lsls	r2, r3, #22
 800b1aa:	d4ee      	bmi.n	800b18a <__smakebuf_r+0x18>
 800b1ac:	f023 0303 	bic.w	r3, r3, #3
 800b1b0:	f043 0302 	orr.w	r3, r3, #2
 800b1b4:	81a3      	strh	r3, [r4, #12]
 800b1b6:	e7e2      	b.n	800b17e <__smakebuf_r+0xc>
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	6020      	str	r0, [r4, #0]
 800b1c8:	b15b      	cbz	r3, 800b1e2 <__smakebuf_r+0x70>
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1d0:	f000 f81e 	bl	800b210 <_isatty_r>
 800b1d4:	b128      	cbz	r0, 800b1e2 <__smakebuf_r+0x70>
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	f023 0303 	bic.w	r3, r3, #3
 800b1dc:	f043 0301 	orr.w	r3, r3, #1
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	431d      	orrs	r5, r3
 800b1e6:	81a5      	strh	r5, [r4, #12]
 800b1e8:	e7cf      	b.n	800b18a <__smakebuf_r+0x18>
	...

0800b1ec <_fstat_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4d06      	ldr	r5, [pc, #24]	@ (800b20c <_fstat_r+0x20>)
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	602b      	str	r3, [r5, #0]
 800b1fa:	f7f7 faa5 	bl	8002748 <_fstat>
 800b1fe:	1c43      	adds	r3, r0, #1
 800b200:	d102      	bne.n	800b208 <_fstat_r+0x1c>
 800b202:	682b      	ldr	r3, [r5, #0]
 800b204:	b103      	cbz	r3, 800b208 <_fstat_r+0x1c>
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	bd38      	pop	{r3, r4, r5, pc}
 800b20a:	bf00      	nop
 800b20c:	200008b4 	.word	0x200008b4

0800b210 <_isatty_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	2300      	movs	r3, #0
 800b214:	4d05      	ldr	r5, [pc, #20]	@ (800b22c <_isatty_r+0x1c>)
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	f7f7 faa3 	bl	8002766 <_isatty>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_isatty_r+0x1a>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_isatty_r+0x1a>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	200008b4 	.word	0x200008b4

0800b230 <abort>:
 800b230:	2006      	movs	r0, #6
 800b232:	b508      	push	{r3, lr}
 800b234:	f000 f834 	bl	800b2a0 <raise>
 800b238:	2001      	movs	r0, #1
 800b23a:	f7f7 fa36 	bl	80026aa <_exit>

0800b23e <_malloc_usable_size_r>:
 800b23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b242:	1f18      	subs	r0, r3, #4
 800b244:	2b00      	cmp	r3, #0
 800b246:	bfbc      	itt	lt
 800b248:	580b      	ldrlt	r3, [r1, r0]
 800b24a:	18c0      	addlt	r0, r0, r3
 800b24c:	4770      	bx	lr

0800b24e <_raise_r>:
 800b24e:	291f      	cmp	r1, #31
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4605      	mov	r5, r0
 800b254:	460c      	mov	r4, r1
 800b256:	d904      	bls.n	800b262 <_raise_r+0x14>
 800b258:	2316      	movs	r3, #22
 800b25a:	6003      	str	r3, [r0, #0]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	bd38      	pop	{r3, r4, r5, pc}
 800b262:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b264:	b112      	cbz	r2, 800b26c <_raise_r+0x1e>
 800b266:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b26a:	b94b      	cbnz	r3, 800b280 <_raise_r+0x32>
 800b26c:	4628      	mov	r0, r5
 800b26e:	f000 f831 	bl	800b2d4 <_getpid_r>
 800b272:	4622      	mov	r2, r4
 800b274:	4601      	mov	r1, r0
 800b276:	4628      	mov	r0, r5
 800b278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27c:	f000 b818 	b.w	800b2b0 <_kill_r>
 800b280:	2b01      	cmp	r3, #1
 800b282:	d00a      	beq.n	800b29a <_raise_r+0x4c>
 800b284:	1c59      	adds	r1, r3, #1
 800b286:	d103      	bne.n	800b290 <_raise_r+0x42>
 800b288:	2316      	movs	r3, #22
 800b28a:	6003      	str	r3, [r0, #0]
 800b28c:	2001      	movs	r0, #1
 800b28e:	e7e7      	b.n	800b260 <_raise_r+0x12>
 800b290:	2100      	movs	r1, #0
 800b292:	4620      	mov	r0, r4
 800b294:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b298:	4798      	blx	r3
 800b29a:	2000      	movs	r0, #0
 800b29c:	e7e0      	b.n	800b260 <_raise_r+0x12>
	...

0800b2a0 <raise>:
 800b2a0:	4b02      	ldr	r3, [pc, #8]	@ (800b2ac <raise+0xc>)
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f7ff bfd2 	b.w	800b24e <_raise_r>
 800b2aa:	bf00      	nop
 800b2ac:	2000002c 	.word	0x2000002c

0800b2b0 <_kill_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	4d06      	ldr	r5, [pc, #24]	@ (800b2d0 <_kill_r+0x20>)
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	f7f7 f9e4 	bl	800268a <_kill>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	d102      	bne.n	800b2cc <_kill_r+0x1c>
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	b103      	cbz	r3, 800b2cc <_kill_r+0x1c>
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	bd38      	pop	{r3, r4, r5, pc}
 800b2ce:	bf00      	nop
 800b2d0:	200008b4 	.word	0x200008b4

0800b2d4 <_getpid_r>:
 800b2d4:	f7f7 b9d2 	b.w	800267c <_getpid>

0800b2d8 <_init>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	bf00      	nop
 800b2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2de:	bc08      	pop	{r3}
 800b2e0:	469e      	mov	lr, r3
 800b2e2:	4770      	bx	lr

0800b2e4 <_fini>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	bf00      	nop
 800b2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ea:	bc08      	pop	{r3}
 800b2ec:	469e      	mov	lr, r3
 800b2ee:	4770      	bx	lr
