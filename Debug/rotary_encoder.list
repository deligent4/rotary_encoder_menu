
rotary_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdd8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d30  0800bee8  0800bee8  0000cee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc18  0800cc18  0000e1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc18  0800cc18  0000dc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc20  0800cc20  0000e1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc20  0800cc20  0000dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc24  0800cc24  0000dc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800cc28  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  200001f8  0800ce20  0000e1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800ce20  0000e8d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011913  00000000  00000000  0000e221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd2  00000000  00000000  0001fb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00022808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da1  00000000  00000000  00023980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d00d  00000000  00000000  00024721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cb9  00000000  00000000  0004172e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffdf  00000000  00000000  000573e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e73c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006174  00000000  00000000  000e740c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000ed580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bed0 	.word	0x0800bed0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800bed0 	.word	0x0800bed0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_DMA_Init+0x38>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <MX_DMA_Init+0x38>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_DMA_Init+0x38>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2010      	movs	r0, #16
 8001100:	f001 fccb 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001104:	2010      	movs	r0, #16
 8001106:	f001 fce4 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <MX_GPIO_Init+0x100>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a39      	ldr	r2, [pc, #228]	@ (8001218 <MX_GPIO_Init+0x100>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <MX_GPIO_Init+0x100>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <MX_GPIO_Init+0x100>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a33      	ldr	r2, [pc, #204]	@ (8001218 <MX_GPIO_Init+0x100>)
 800114a:	f043 0320 	orr.w	r3, r3, #32
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <MX_GPIO_Init+0x100>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <MX_GPIO_Init+0x100>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a2d      	ldr	r2, [pc, #180]	@ (8001218 <MX_GPIO_Init+0x100>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <MX_GPIO_Init+0x100>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <MX_GPIO_Init+0x100>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <MX_GPIO_Init+0x100>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <MX_GPIO_Init+0x100>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001192:	4822      	ldr	r0, [pc, #136]	@ (800121c <MX_GPIO_Init+0x104>)
 8001194:	f002 f8c5 	bl	8003322 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLU_Pin;
 8001198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800119c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BLU_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	481a      	ldr	r0, [pc, #104]	@ (800121c <MX_GPIO_Init+0x104>)
 80011b2:	f001 ff1b 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_SW_Pin|B_SW_Pin|C_SW_Pin|ROT_SW_Pin;
 80011b6:	2333      	movs	r3, #51	@ 0x33
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <MX_GPIO_Init+0x108>)
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	4816      	ldr	r0, [pc, #88]	@ (8001224 <MX_GPIO_Init+0x10c>)
 80011ca:	f001 ff0f 	bl	8002fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2006      	movs	r0, #6
 80011d4:	f001 fc61 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011d8:	2006      	movs	r0, #6
 80011da:	f001 fc7a 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2007      	movs	r0, #7
 80011e4:	f001 fc59 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011e8:	2007      	movs	r0, #7
 80011ea:	f001 fc72 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	200a      	movs	r0, #10
 80011f4:	f001 fc51 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011f8:	200a      	movs	r0, #10
 80011fa:	f001 fc6a 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2017      	movs	r0, #23
 8001204:	f001 fc49 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001208:	2017      	movs	r0, #23
 800120a:	f001 fc62 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	40011000 	.word	0x40011000
 8001220:	10210000 	.word	0x10210000
 8001224:	40010800 	.word	0x40010800

08001228 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <MX_I2C1_Init+0x50>)
 800122e:	4a13      	ldr	r2, [pc, #76]	@ (800127c <MX_I2C1_Init+0x54>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_I2C1_Init+0x50>)
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <MX_I2C1_Init+0x58>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_I2C1_Init+0x50>)
 8001246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	@ (8001278 <MX_I2C1_Init+0x50>)
 8001266:	f002 f8a5 	bl	80033b4 <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001270:	f000 fdd2 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000214 	.word	0x20000214
 800127c:	40005400 	.word	0x40005400
 8001280:	00061a80 	.word	0x00061a80

08001284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2c      	ldr	r2, [pc, #176]	@ (8001350 <HAL_I2C_MspInit+0xcc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d151      	bne.n	8001348 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <HAL_I2C_MspInit+0xd0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001354 <HAL_I2C_MspInit+0xd0>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <HAL_I2C_MspInit+0xd0>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012bc:	23c0      	movs	r3, #192	@ 0xc0
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c0:	2312      	movs	r3, #18
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4822      	ldr	r0, [pc, #136]	@ (8001358 <HAL_I2C_MspInit+0xd4>)
 80012d0:	f001 fe8c 	bl	8002fec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <HAL_I2C_MspInit+0xd0>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <HAL_I2C_MspInit+0xd0>)
 80012da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012de:	61d3      	str	r3, [r2, #28]
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_I2C_MspInit+0xd0>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 80012ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <HAL_I2C_MspInit+0xdc>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 80012f4:	2210      	movs	r2, #16
 80012f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 8001300:	2280      	movs	r2, #128	@ 0x80
 8001302:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 8001318:	2200      	movs	r2, #0
 800131a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800131c:	480f      	ldr	r0, [pc, #60]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 800131e:	f001 fbf3 	bl	8002b08 <HAL_DMA_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001328:	f000 fd76 	bl	8001e18 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 8001330:	635a      	str	r2, [r3, #52]	@ 0x34
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_I2C_MspInit+0xd8>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	201f      	movs	r0, #31
 800133e:	f001 fbac 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001342:	201f      	movs	r0, #31
 8001344:	f001 fbc5 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40005400 	.word	0x40005400
 8001354:	40021000 	.word	0x40021000
 8001358:	40010c00 	.word	0x40010c00
 800135c:	20000268 	.word	0x20000268
 8001360:	4002006c 	.word	0x4002006c

08001364 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800136c:	1d39      	adds	r1, r7, #4
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	2201      	movs	r2, #1
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <__io_putchar+0x20>)
 8001376:	f005 f977 	bl	8006668 <HAL_UART_Transmit>
  return ch;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000740 	.word	0x20000740

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f001 fa28 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f86e 	bl	8001470 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f7ff fec0 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 8001398:	f7ff fea0 	bl	80010dc <MX_DMA_Init>
  MX_TIM3_Init();
 800139c:	f001 f8ec 	bl	8002578 <MX_TIM3_Init>
  MX_I2C1_Init();
 80013a0:	f7ff ff42 	bl	8001228 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013a4:	f001 f982 	bl	80026ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80013a8:	213c      	movs	r1, #60	@ 0x3c
 80013aa:	4824      	ldr	r0, [pc, #144]	@ (800143c <main+0xb4>)
 80013ac:	f004 fe3c 	bl	8006028 <HAL_TIM_Encoder_Start_IT>
  ssd1306_Init();
 80013b0:	f000 fd82 	bl	8001eb8 <ssd1306_Init>
  update_display(); // Ensure the initial display is updated
 80013b4:	f000 f982 	bl	80016bc <update_display>

  HAL_Delay(100);
 80013b8:	2064      	movs	r0, #100	@ 0x64
 80013ba:	f001 fa73 	bl	80028a4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tick = HAL_GetTick();
 80013be:	f001 fa67 	bl	8002890 <HAL_GetTick>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001440 <main+0xb8>)
 80013c6:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 80013c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013cc:	481d      	ldr	r0, [pc, #116]	@ (8001444 <main+0xbc>)
 80013ce:	f001 ffc0 	bl	8003352 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	@ 0x64
 80013d4:	f001 fa66 	bl	80028a4 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(ROT_SW_GPIO_Port, ROT_SW_Pin) == 0){
 80013d8:	2120      	movs	r1, #32
 80013da:	481b      	ldr	r0, [pc, #108]	@ (8001448 <main+0xc0>)
 80013dc:	f001 ff8a 	bl	80032f4 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d108      	bne.n	80013f8 <main+0x70>
		  HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, 1);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ec:	4815      	ldr	r0, [pc, #84]	@ (8001444 <main+0xbc>)
 80013ee:	f001 ff98 	bl	8003322 <HAL_GPIO_WritePin>
		  menu_flag = 2;
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <main+0xc4>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]
	  }

//      printf("Hello World\n\r\v");

      update_encoder_state();
 80013f8:	f000 fb80 	bl	8001afc <update_encoder_state>
      handle_button_press();
 80013fc:	f000 fcb6 	bl	8001d6c <handle_button_press>
      update_display();
 8001400:	f000 f95c 	bl	80016bc <update_display>
      printf("current_state %d\n\r", current_state);
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <main+0xc8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	4812      	ldr	r0, [pc, #72]	@ (8001454 <main+0xcc>)
 800140c:	f006 f9da 	bl	80077c4 <iprintf>
      printf("digit_position %d\n\r", digit_position);
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <main+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	4811      	ldr	r0, [pc, #68]	@ (800145c <main+0xd4>)
 8001418:	f006 f9d4 	bl	80077c4 <iprintf>
      printf("cursor_position %d\n\r", cursor_position);
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <main+0xd8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	4810      	ldr	r0, [pc, #64]	@ (8001464 <main+0xdc>)
 8001424:	f006 f9ce 	bl	80077c4 <iprintf>
      printf("mode_index %d\n\r\v", mode_index);
 8001428:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <main+0xe0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	480f      	ldr	r0, [pc, #60]	@ (800146c <main+0xe4>)
 8001430:	f006 f9c8 	bl	80077c4 <iprintf>

	  HAL_Delay(200); // Adjust the delay as needed
 8001434:	20c8      	movs	r0, #200	@ 0xc8
 8001436:	f001 fa35 	bl	80028a4 <HAL_Delay>
	  tick = HAL_GetTick();
 800143a:	e7c0      	b.n	80013be <main+0x36>
 800143c:	200006f8 	.word	0x200006f8
 8001440:	200002ac 	.word	0x200002ac
 8001444:	40011000 	.word	0x40011000
 8001448:	40010800 	.word	0x40010800
 800144c:	200002b8 	.word	0x200002b8
 8001450:	200002b9 	.word	0x200002b9
 8001454:	0800bee8 	.word	0x0800bee8
 8001458:	200002d8 	.word	0x200002d8
 800145c:	0800befc 	.word	0x0800befc
 8001460:	200002bc 	.word	0x200002bc
 8001464:	0800bf10 	.word	0x0800bf10
 8001468:	200002c0 	.word	0x200002c0
 800146c:	0800bf28 	.word	0x0800bf28

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b090      	sub	sp, #64	@ 0x40
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	2228      	movs	r2, #40	@ 0x28
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f006 fa63 	bl	800794a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001496:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 f903 	bl	80056c4 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014c4:	f000 fca8 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c8:	230f      	movs	r3, #15
 80014ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014cc:	2302      	movs	r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2102      	movs	r1, #2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f004 fb70 	bl	8005bc8 <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014ee:	f000 fc93 	bl	8001e18 <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3740      	adds	r7, #64	@ 0x40
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	rotary_out = __HAL_TIM_GET_COUNTER(htim);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <HAL_TIM_IC_CaptureCallback+0x28>)
 800150c:	6013      	str	r3, [r2, #0]
	rot_cnt = rotary_out / 4;
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200002b0 	.word	0x200002b0
 8001528:	200002b4 	.word	0x200002b4

0800152c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3b01      	subs	r3, #1
 800153a:	2b1f      	cmp	r3, #31
 800153c:	d864      	bhi.n	8001608 <HAL_GPIO_EXTI_Callback+0xdc>
 800153e:	a201      	add	r2, pc, #4	@ (adr r2, 8001544 <HAL_GPIO_EXTI_Callback+0x18>)
 8001540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001544:	080015cd 	.word	0x080015cd
 8001548:	080015e1 	.word	0x080015e1
 800154c:	08001609 	.word	0x08001609
 8001550:	08001609 	.word	0x08001609
 8001554:	08001609 	.word	0x08001609
 8001558:	08001609 	.word	0x08001609
 800155c:	08001609 	.word	0x08001609
 8001560:	08001609 	.word	0x08001609
 8001564:	08001609 	.word	0x08001609
 8001568:	08001609 	.word	0x08001609
 800156c:	08001609 	.word	0x08001609
 8001570:	08001609 	.word	0x08001609
 8001574:	08001609 	.word	0x08001609
 8001578:	08001609 	.word	0x08001609
 800157c:	08001609 	.word	0x08001609
 8001580:	080015f5 	.word	0x080015f5
 8001584:	08001609 	.word	0x08001609
 8001588:	08001609 	.word	0x08001609
 800158c:	08001609 	.word	0x08001609
 8001590:	08001609 	.word	0x08001609
 8001594:	08001609 	.word	0x08001609
 8001598:	08001609 	.word	0x08001609
 800159c:	08001609 	.word	0x08001609
 80015a0:	08001609 	.word	0x08001609
 80015a4:	08001609 	.word	0x08001609
 80015a8:	08001609 	.word	0x08001609
 80015ac:	08001609 	.word	0x08001609
 80015b0:	08001609 	.word	0x08001609
 80015b4:	08001609 	.word	0x08001609
 80015b8:	08001609 	.word	0x08001609
 80015bc:	08001609 	.word	0x08001609
 80015c0:	080015c5 	.word	0x080015c5
	case ROT_SW_Pin:
		rot_sw_state = true;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_GPIO_EXTI_Callback+0xe8>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
		break;
 80015ca:	e01e      	b.n	800160a <HAL_GPIO_EXTI_Callback+0xde>
	case A_SW_Pin:
		a_sw_state = true;
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_GPIO_EXTI_Callback+0xec>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
		current_a_cnt++;
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_GPIO_EXTI_Callback+0xf0>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <HAL_GPIO_EXTI_Callback+0xf0>)
 80015dc:	801a      	strh	r2, [r3, #0]
		break;
 80015de:	e014      	b.n	800160a <HAL_GPIO_EXTI_Callback+0xde>
	case B_SW_Pin:
		b_sw_state = true;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_GPIO_EXTI_Callback+0xf4>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
		current_b_cnt++;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_GPIO_EXTI_Callback+0xf8>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <HAL_GPIO_EXTI_Callback+0xf8>)
 80015f0:	801a      	strh	r2, [r3, #0]
		break;
 80015f2:	e00a      	b.n	800160a <HAL_GPIO_EXTI_Callback+0xde>
	case C_SW_Pin:
		c_sw_state = true;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_GPIO_EXTI_Callback+0xfc>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
		current_c_cnt++;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <HAL_GPIO_EXTI_Callback+0x100>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_GPIO_EXTI_Callback+0x100>)
 8001604:	801a      	strh	r2, [r3, #0]
		break;
 8001606:	e000      	b.n	800160a <HAL_GPIO_EXTI_Callback+0xde>
	default:
//		a_sw_state = b_sw_state = c_sw_state = false;
		break;
 8001608:	bf00      	nop
	}
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	200002e2 	.word	0x200002e2
 8001618:	200002e3 	.word	0x200002e3
 800161c:	200002dc 	.word	0x200002dc
 8001620:	200002e4 	.word	0x200002e4
 8001624:	200002de 	.word	0x200002de
 8001628:	200002e5 	.word	0x200002e5
 800162c:	200002e0 	.word	0x200002e0

08001630 <myOLED_char>:

void myOLED_char(uint16_t cursorX, uint16_t cursorY, char* data){
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	603a      	str	r2, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
 800163c:	460b      	mov	r3, r1
 800163e:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	88ba      	ldrh	r2, [r7, #4]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fde8 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_7x10, White);
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <myOLED_char+0x34>)
 8001652:	2301      	movs	r3, #1
 8001654:	ca06      	ldmia	r2, {r1, r2}
 8001656:	6838      	ldr	r0, [r7, #0]
 8001658:	f000 fdbc 	bl	80021d4 <ssd1306_WriteString>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000008 	.word	0x20000008

08001668 <myOLED_float>:

void myOLED_float(uint16_t cursorX, uint16_t cursorY, float data){
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	603a      	str	r2, [r7, #0]
 8001672:	80fb      	strh	r3, [r7, #6]
 8001674:	460b      	mov	r3, r1
 8001676:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 8001678:	6838      	ldr	r0, [r7, #0]
 800167a:	f7fe fed5 	bl	8000428 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	f107 000c 	add.w	r0, r7, #12
 8001686:	490b      	ldr	r1, [pc, #44]	@ (80016b4 <myOLED_float+0x4c>)
 8001688:	f006 f8e2 	bl	8007850 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	88ba      	ldrh	r2, [r7, #4]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fdc2 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <myOLED_float+0x50>)
 800169e:	f107 000c 	add.w	r0, r7, #12
 80016a2:	2301      	movs	r3, #1
 80016a4:	ca06      	ldmia	r2, {r1, r2}
 80016a6:	f000 fd95 	bl	80021d4 <ssd1306_WriteString>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	0800bf3c 	.word	0x0800bf3c
 80016b8:	20000008 	.word	0x20000008

080016bc <update_display>:
	ssd1306_SetCursor(cursorX, cursorY);
	ssd1306_WriteString(str_data, Font_7x10, White);
}

// Update Display
void update_display() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
    static MenuState last_state = HOME_SCREEN;
    static bool first_update = true;
    bool force_update = (current_state != last_state) || first_update;
 80016c2:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <update_display+0x114>)
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <update_display+0x118>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d103      	bne.n	80016d6 <update_display+0x1a>
 80016ce:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <update_display+0x11c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <update_display+0x1e>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <update_display+0x20>
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]

    if (force_update) {
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00a      	beq.n	8001702 <update_display+0x46>
        last_state = current_state;
 80016ec:	4b38      	ldr	r3, [pc, #224]	@ (80017d0 <update_display+0x114>)
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b38      	ldr	r3, [pc, #224]	@ (80017d4 <update_display+0x118>)
 80016f2:	701a      	strb	r2, [r3, #0]
        last_cursor_position = -1; // Force full update on state change
 80016f4:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <update_display+0x120>)
 80016f6:	f04f 32ff 	mov.w	r2, #4294967295
 80016fa:	601a      	str	r2, [r3, #0]
        first_update = false;
 80016fc:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <update_display+0x11c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    }

    // Handle cursor position updates separately
    bool cursor_changed = (cursor_position != last_cursor_position);
 8001702:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <update_display+0x124>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <update_display+0x120>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	bf14      	ite	ne
 800170e:	2301      	movne	r3, #1
 8001710:	2300      	moveq	r3, #0
 8001712:	71bb      	strb	r3, [r7, #6]

    switch (current_state) {
 8001714:	4b2e      	ldr	r3, [pc, #184]	@ (80017d0 <update_display+0x114>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d851      	bhi.n	80017c0 <update_display+0x104>
 800171c:	a201      	add	r2, pc, #4	@ (adr r2, 8001724 <update_display+0x68>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001739 	.word	0x08001739
 8001728:	08001759 	.word	0x08001759
 800172c:	08001779 	.word	0x08001779
 8001730:	08001799 	.word	0x08001799
 8001734:	080017b9 	.word	0x080017b9
        case HOME_SCREEN:
            display_home_screen(force_update || cursor_changed);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <update_display+0x88>
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <update_display+0x8c>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <update_display+0x8e>
 8001748:	2300      	movs	r3, #0
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f000 f847 	bl	80017e4 <display_home_screen>
            break;
 8001756:	e033      	b.n	80017c0 <update_display+0x104>
        case MODE_SELECTION:
            display_mode_selection(force_update || cursor_changed);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <update_display+0xa8>
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <update_display+0xac>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <update_display+0xae>
 8001768:	2300      	movs	r3, #0
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f8b9 	bl	80018e8 <display_mode_selection>
            break;
 8001776:	e023      	b.n	80017c0 <update_display+0x104>
        case PARAMETER_SETTING:
            display_parameter_setting(force_update || cursor_changed);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <update_display+0xc8>
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <update_display+0xcc>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <update_display+0xce>
 8001788:	2300      	movs	r3, #0
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f911 	bl	80019b8 <display_parameter_setting>
            break;
 8001796:	e013      	b.n	80017c0 <update_display+0x104>
        case DIGIT_SETTING:
        	display_digit_setting(force_update || cursor_changed);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <update_display+0xe8>
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <update_display+0xec>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <update_display+0xee>
 80017a8:	2300      	movs	r3, #0
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f999 	bl	8001ae8 <display_digit_setting>
        	break;
 80017b6:	e003      	b.n	80017c0 <update_display+0x104>
        case RETURN_TO_HOME:
            current_state = HOME_SCREEN;
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <update_display+0x114>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
            break;
 80017be:	bf00      	nop
    }

    last_cursor_position = cursor_position;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <update_display+0x124>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <update_display+0x120>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200002b9 	.word	0x200002b9
 80017d4:	200002e7 	.word	0x200002e7
 80017d8:	20000004 	.word	0x20000004
 80017dc:	20000000 	.word	0x20000000
 80017e0:	200002bc 	.word	0x200002bc

080017e4 <display_home_screen>:

// Display Home Screen
void display_home_screen(bool force_update) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
    if (force_update) {
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03e      	beq.n	8001872 <display_home_screen+0x8e>
        myOLED_char(0, 0, "VOLT:   ");
 80017f4:	4a2e      	ldr	r2, [pc, #184]	@ (80018b0 <display_home_screen+0xcc>)
 80017f6:	2100      	movs	r1, #0
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff ff19 	bl	8001630 <myOLED_char>
        myOLED_float(50, 0, volt);
 80017fe:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <display_home_screen+0xd0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	2100      	movs	r1, #0
 8001806:	2032      	movs	r0, #50	@ 0x32
 8001808:	f7ff ff2e 	bl	8001668 <myOLED_float>
        myOLED_char(0, 10, "CURR:   ");
 800180c:	4a2a      	ldr	r2, [pc, #168]	@ (80018b8 <display_home_screen+0xd4>)
 800180e:	210a      	movs	r1, #10
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff ff0d 	bl	8001630 <myOLED_char>
        myOLED_float(50, 10, curr);
 8001816:	4b29      	ldr	r3, [pc, #164]	@ (80018bc <display_home_screen+0xd8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	210a      	movs	r1, #10
 800181e:	2032      	movs	r0, #50	@ 0x32
 8001820:	f7ff ff22 	bl	8001668 <myOLED_float>
        myOLED_char(0, 20, "CHG:    ");
 8001824:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <display_home_screen+0xdc>)
 8001826:	2114      	movs	r1, #20
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff ff01 	bl	8001630 <myOLED_char>
        myOLED_float(50, 20, chg);
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <display_home_screen+0xe0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	2114      	movs	r1, #20
 8001836:	2032      	movs	r0, #50	@ 0x32
 8001838:	f7ff ff16 	bl	8001668 <myOLED_float>
        myOLED_char(0, 30, "TEMP:");
 800183c:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <display_home_screen+0xe4>)
 800183e:	211e      	movs	r1, #30
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fef5 	bl	8001630 <myOLED_char>
        myOLED_float(50, 30, temp);
 8001846:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <display_home_screen+0xe8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	211e      	movs	r1, #30
 800184e:	2032      	movs	r0, #50	@ 0x32
 8001850:	f7ff ff0a 	bl	8001668 <myOLED_float>
        myOLED_char(0, 40, "                  ");
 8001854:	4a1e      	ldr	r2, [pc, #120]	@ (80018d0 <display_home_screen+0xec>)
 8001856:	2128      	movs	r1, #40	@ 0x28
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fee9 	bl	8001630 <myOLED_char>
        myOLED_char(15, 50, "SET    ");
 800185e:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <display_home_screen+0xf0>)
 8001860:	2132      	movs	r1, #50	@ 0x32
 8001862:	200f      	movs	r0, #15
 8001864:	f7ff fee4 	bl	8001630 <myOLED_char>
        myOLED_char(70, 50, "TURN ON");
 8001868:	4a1b      	ldr	r2, [pc, #108]	@ (80018d8 <display_home_screen+0xf4>)
 800186a:	2132      	movs	r1, #50	@ 0x32
 800186c:	2046      	movs	r0, #70	@ 0x46
 800186e:	f7ff fedf 	bl	8001630 <myOLED_char>
    }

    // Update cursor only
    if (cursor_position == 0) {
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <display_home_screen+0xf8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10a      	bne.n	8001890 <display_home_screen+0xac>
        myOLED_char(0, 50, "->");
 800187a:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <display_home_screen+0xfc>)
 800187c:	2132      	movs	r1, #50	@ 0x32
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fed6 	bl	8001630 <myOLED_char>
        myOLED_char(55, 50, "  "); // Clear other arrow
 8001884:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <display_home_screen+0x100>)
 8001886:	2132      	movs	r1, #50	@ 0x32
 8001888:	2037      	movs	r0, #55	@ 0x37
 800188a:	f7ff fed1 	bl	8001630 <myOLED_char>
 800188e:	e009      	b.n	80018a4 <display_home_screen+0xc0>
    } else {
        myOLED_char(0, 50, "  "); // Clear other arrow
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <display_home_screen+0x100>)
 8001892:	2132      	movs	r1, #50	@ 0x32
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff fecb 	bl	8001630 <myOLED_char>
        myOLED_char(55, 50, "->");
 800189a:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <display_home_screen+0xfc>)
 800189c:	2132      	movs	r1, #50	@ 0x32
 800189e:	2037      	movs	r0, #55	@ 0x37
 80018a0:	f7ff fec6 	bl	8001630 <myOLED_char>
    }
    ssd1306_UpdateScreen();
 80018a4:	f000 fb94 	bl	8001fd0 <ssd1306_UpdateScreen>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800bf4c 	.word	0x0800bf4c
 80018b4:	200002c4 	.word	0x200002c4
 80018b8:	0800bf58 	.word	0x0800bf58
 80018bc:	200002c8 	.word	0x200002c8
 80018c0:	0800bf64 	.word	0x0800bf64
 80018c4:	200002cc 	.word	0x200002cc
 80018c8:	0800bf70 	.word	0x0800bf70
 80018cc:	200002d0 	.word	0x200002d0
 80018d0:	0800bf78 	.word	0x0800bf78
 80018d4:	0800bf8c 	.word	0x0800bf8c
 80018d8:	0800bf94 	.word	0x0800bf94
 80018dc:	200002bc 	.word	0x200002bc
 80018e0:	0800bf9c 	.word	0x0800bf9c
 80018e4:	0800bfa0 	.word	0x0800bfa0

080018e8 <display_mode_selection>:

// Display Mode Selection Screen
void display_mode_selection(bool force_update) {
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
    const char* modes[] = {"CC", "CV", "CP", "CR"};
 80018f2:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <display_mode_selection+0xbc>)
 80018f4:	f107 0408 	add.w	r4, r7, #8
 80018f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (force_update) {
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01c      	beq.n	800193e <display_mode_selection+0x56>
        ssd1306_Fill(Black); // Clear the screen
 8001904:	2000      	movs	r0, #0
 8001906:	f000 fb41 	bl	8001f8c <ssd1306_Fill>
        for (int i = 0; i < 4; i++) {
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e013      	b.n	8001938 <display_mode_selection+0x50>
            myOLED_char(15, i * 10, (char*)modes[i]); // Print modes in column
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	b29b      	uxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	0092      	lsls	r2, r2, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	b299      	uxth	r1, r3
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3320      	adds	r3, #32
 8001924:	443b      	add	r3, r7
 8001926:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800192a:	461a      	mov	r2, r3
 800192c:	200f      	movs	r0, #15
 800192e:	f7ff fe7f 	bl	8001630 <myOLED_char>
        for (int i = 0; i < 4; i++) {
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b03      	cmp	r3, #3
 800193c:	dde8      	ble.n	8001910 <display_mode_selection+0x28>
        }
    }

    // Update cursor only
    for (int i = 0; i < 4; i++) {
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	e020      	b.n	8001986 <display_mode_selection+0x9e>
        if (i == cursor_position) {
 8001944:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <display_mode_selection+0xc0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	429a      	cmp	r2, r3
 800194c:	d10c      	bne.n	8001968 <display_mode_selection+0x80>
            myOLED_char(0, i* 10, "->");
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	b29b      	uxth	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4413      	add	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	b29b      	uxth	r3, r3
 800195c:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <display_mode_selection+0xc4>)
 800195e:	4619      	mov	r1, r3
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fe65 	bl	8001630 <myOLED_char>
 8001966:	e00b      	b.n	8001980 <display_mode_selection+0x98>
        } else {
            myOLED_char(0, i* 10, "  ");
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	b29b      	uxth	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	4a0e      	ldr	r2, [pc, #56]	@ (80019b0 <display_mode_selection+0xc8>)
 8001978:	4619      	mov	r1, r3
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff fe58 	bl	8001630 <myOLED_char>
    for (int i = 0; i < 4; i++) {
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	3301      	adds	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b03      	cmp	r3, #3
 800198a:	dddb      	ble.n	8001944 <display_mode_selection+0x5c>
        }
    }

    myOLED_char(5, 50, "<SELECT THE MODE>");
 800198c:	4a09      	ldr	r2, [pc, #36]	@ (80019b4 <display_mode_selection+0xcc>)
 800198e:	2132      	movs	r1, #50	@ 0x32
 8001990:	2005      	movs	r0, #5
 8001992:	f7ff fe4d 	bl	8001630 <myOLED_char>
    ssd1306_UpdateScreen();
 8001996:	f000 fb1b 	bl	8001fd0 <ssd1306_UpdateScreen>
}
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0800bfc8 	.word	0x0800bfc8
 80019a8:	200002bc 	.word	0x200002bc
 80019ac:	0800bf9c 	.word	0x0800bf9c
 80019b0:	0800bfa0 	.word	0x0800bfa0
 80019b4:	0800bfa4 	.word	0x0800bfa4

080019b8 <display_parameter_setting>:
//    }
//    myOLED_char(0, 50, "OK");
//    ssd1306_UpdateScreen();
//}

void display_parameter_setting(bool force_update) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af02      	add	r7, sp, #8
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
    if (force_update) {
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d038      	beq.n	8001a3a <display_parameter_setting+0x82>
        // Redraw entire screen if forced
        ssd1306_Fill(Black);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f000 fadf 	bl	8001f8c <ssd1306_Fill>
        myOLED_char(0, 0, "Set Value:");
 80019ce:	4a38      	ldr	r2, [pc, #224]	@ (8001ab0 <display_parameter_setting+0xf8>)
 80019d0:	2100      	movs	r1, #0
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff fe2c 	bl	8001630 <myOLED_char>
        myOLED_char(20, 40, "RETURN");
 80019d8:	4a36      	ldr	r2, [pc, #216]	@ (8001ab4 <display_parameter_setting+0xfc>)
 80019da:	2128      	movs	r1, #40	@ 0x28
 80019dc:	2014      	movs	r0, #20
 80019de:	f7ff fe27 	bl	8001630 <myOLED_char>

        // Check the state and print the mode in parameter setting screen
        if(current_state == 2){
 80019e2:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <display_parameter_setting+0x100>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d127      	bne.n	8001a3a <display_parameter_setting+0x82>
        	switch(mode_index) {
 80019ea:	4b34      	ldr	r3, [pc, #208]	@ (8001abc <display_parameter_setting+0x104>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d822      	bhi.n	8001a38 <display_parameter_setting+0x80>
 80019f2:	a201      	add	r2, pc, #4	@ (adr r2, 80019f8 <display_parameter_setting+0x40>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a09 	.word	0x08001a09
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a21 	.word	0x08001a21
 8001a04:	08001a2d 	.word	0x08001a2d
        		case 0:
                	myOLED_char(70, 0, "CC");
 8001a08:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac0 <display_parameter_setting+0x108>)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2046      	movs	r0, #70	@ 0x46
 8001a0e:	f7ff fe0f 	bl	8001630 <myOLED_char>
                	break;
 8001a12:	e012      	b.n	8001a3a <display_parameter_setting+0x82>
        		case 1:
        			myOLED_char(70, 0, "CV");
 8001a14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac4 <display_parameter_setting+0x10c>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	2046      	movs	r0, #70	@ 0x46
 8001a1a:	f7ff fe09 	bl	8001630 <myOLED_char>
        			break;
 8001a1e:	e00c      	b.n	8001a3a <display_parameter_setting+0x82>
        		case 2:
        			myOLED_char(70, 0, "CP");
 8001a20:	4a29      	ldr	r2, [pc, #164]	@ (8001ac8 <display_parameter_setting+0x110>)
 8001a22:	2100      	movs	r1, #0
 8001a24:	2046      	movs	r0, #70	@ 0x46
 8001a26:	f7ff fe03 	bl	8001630 <myOLED_char>
        			break;
 8001a2a:	e006      	b.n	8001a3a <display_parameter_setting+0x82>
        		case 3:
        			myOLED_char(70, 0, "CR");
 8001a2c:	4a27      	ldr	r2, [pc, #156]	@ (8001acc <display_parameter_setting+0x114>)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2046      	movs	r0, #70	@ 0x46
 8001a32:	f7ff fdfd 	bl	8001630 <myOLED_char>
                	break;
 8001a36:	e000      	b.n	8001a3a <display_parameter_setting+0x82>
        		default:
        			break;
 8001a38:	bf00      	nop

//    printf("cursor_pos param = %d\n\v\r", cursor_position);

    // Always update the current digit and value
    char buffer[8]; // "00.000" format has 6 characters + 1 for null terminator
    snprintf(buffer, sizeof(buffer), "%05.3f", param_value);
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <display_parameter_setting+0x118>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fcf2 	bl	8000428 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	f107 000c 	add.w	r0, r7, #12
 8001a4c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a50:	4a20      	ldr	r2, [pc, #128]	@ (8001ad4 <display_parameter_setting+0x11c>)
 8001a52:	2108      	movs	r1, #8
 8001a54:	f005 fec8 	bl	80077e8 <sniprintf>
    myOLED_char(10, 20, buffer);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2114      	movs	r1, #20
 8001a60:	200a      	movs	r0, #10
 8001a62:	f7ff fde5 	bl	8001630 <myOLED_char>

    // Clear previous cursor position by redrawing the entire line
    ssd1306_SetCursor(0, 30);
 8001a66:	211e      	movs	r1, #30
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 fbd9 	bl	8002220 <ssd1306_SetCursor>
    ssd1306_WriteString("        ", Font_7x10, White);  // Assuming 7 characters wide space to clear
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad8 <display_parameter_setting+0x120>)
 8001a70:	2301      	movs	r3, #1
 8001a72:	ca06      	ldmia	r2, {r1, r2}
 8001a74:	4819      	ldr	r0, [pc, #100]	@ (8001adc <display_parameter_setting+0x124>)
 8001a76:	f000 fbad 	bl	80021d4 <ssd1306_WriteString>

    // Draw cursor under the digit
    int cursor_x = digit_position * 8;  // Assuming 7 pixels width per character
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <display_parameter_setting+0x128>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	617b      	str	r3, [r7, #20]
//    int cursot_y = 50;
    if(digit_position == 7){
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <display_parameter_setting+0x128>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b07      	cmp	r3, #7
 8001a88:	d105      	bne.n	8001a96 <display_parameter_setting+0xde>
    	myOLED_char(40, 50, "^");  // Draw the cursor
 8001a8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ae4 <display_parameter_setting+0x12c>)
 8001a8c:	2132      	movs	r1, #50	@ 0x32
 8001a8e:	2028      	movs	r0, #40	@ 0x28
 8001a90:	f7ff fdce 	bl	8001630 <myOLED_char>
 8001a94:	e006      	b.n	8001aa4 <display_parameter_setting+0xec>
    }else{
    	myOLED_char(cursor_x, 30, "^");  // Draw the cursor
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <display_parameter_setting+0x12c>)
 8001a9c:	211e      	movs	r1, #30
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fdc6 	bl	8001630 <myOLED_char>
    }

    // Refresh the display after updating
    ssd1306_UpdateScreen();
 8001aa4:	f000 fa94 	bl	8001fd0 <ssd1306_UpdateScreen>
}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	0800bfd8 	.word	0x0800bfd8
 8001ab4:	0800bfe4 	.word	0x0800bfe4
 8001ab8:	200002b9 	.word	0x200002b9
 8001abc:	200002c0 	.word	0x200002c0
 8001ac0:	0800bfb8 	.word	0x0800bfb8
 8001ac4:	0800bfbc 	.word	0x0800bfbc
 8001ac8:	0800bfc0 	.word	0x0800bfc0
 8001acc:	0800bfc4 	.word	0x0800bfc4
 8001ad0:	200002d4 	.word	0x200002d4
 8001ad4:	0800bfec 	.word	0x0800bfec
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	0800bff4 	.word	0x0800bff4
 8001ae0:	200002d8 	.word	0x200002d8
 8001ae4:	0800c000 	.word	0x0800c000

08001ae8 <display_digit_setting>:




// Display Digit in parameter setting mode
void display_digit_setting(bool force_update){
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]

}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <update_encoder_state>:


// Update Encoder State
void update_encoder_state() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
    int new_rot_pos = rot_cnt;
 8001b02:	4b39      	ldr	r3, [pc, #228]	@ (8001be8 <update_encoder_state+0xec>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	607b      	str	r3, [r7, #4]
    static int old_rot_pos = 0;

    if (new_rot_pos > old_rot_pos) {
 8001b08:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <update_encoder_state+0xf0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dd17      	ble.n	8001b42 <update_encoder_state+0x46>
        if (current_state == PARAMETER_SETTING) {
 8001b12:	4b37      	ldr	r3, [pc, #220]	@ (8001bf0 <update_encoder_state+0xf4>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d10d      	bne.n	8001b36 <update_encoder_state+0x3a>
            if (adjusting_digit) {
 8001b1a:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <update_encoder_state+0xf8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <update_encoder_state+0x2e>
                update_parameter_value(1); // Increment digit
 8001b22:	2001      	movs	r0, #1
 8001b24:	f000 f86c 	bl	8001c00 <update_parameter_value>
 8001b28:	e028      	b.n	8001b7c <update_encoder_state+0x80>
            } else {
                digit_position++;
 8001b2a:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <update_encoder_state+0xfc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a31      	ldr	r2, [pc, #196]	@ (8001bf8 <update_encoder_state+0xfc>)
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e022      	b.n	8001b7c <update_encoder_state+0x80>
            }
        } else {
            cursor_position++;
 8001b36:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <update_encoder_state+0x100>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bfc <update_encoder_state+0x100>)
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e01c      	b.n	8001b7c <update_encoder_state+0x80>
        }
    } else if (new_rot_pos < old_rot_pos) {
 8001b42:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <update_encoder_state+0xf0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	da17      	bge.n	8001b7c <update_encoder_state+0x80>
        if (current_state == PARAMETER_SETTING) {
 8001b4c:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <update_encoder_state+0xf4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d10e      	bne.n	8001b72 <update_encoder_state+0x76>
            if (adjusting_digit) {
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <update_encoder_state+0xf8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <update_encoder_state+0x6a>
                update_parameter_value(-1); // Decrement digit
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f84e 	bl	8001c00 <update_parameter_value>
 8001b64:	e00a      	b.n	8001b7c <update_encoder_state+0x80>
            } else {
                digit_position--;
 8001b66:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <update_encoder_state+0xfc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	4a22      	ldr	r2, [pc, #136]	@ (8001bf8 <update_encoder_state+0xfc>)
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e004      	b.n	8001b7c <update_encoder_state+0x80>
            }
        } else {
            cursor_position--;
 8001b72:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <update_encoder_state+0x100>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <update_encoder_state+0x100>)
 8001b7a:	6013      	str	r3, [r2, #0]
        }
    }
    old_rot_pos = new_rot_pos;
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bec <update_encoder_state+0xf0>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]

    // putting limits
    if (cursor_position < 0) cursor_position = 0;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <update_encoder_state+0x100>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da02      	bge.n	8001b90 <update_encoder_state+0x94>
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <update_encoder_state+0x100>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
    if (current_state == HOME_SCREEN && cursor_position > 1) cursor_position = 1;
 8001b90:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <update_encoder_state+0xf4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d106      	bne.n	8001ba6 <update_encoder_state+0xaa>
 8001b98:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <update_encoder_state+0x100>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	dd02      	ble.n	8001ba6 <update_encoder_state+0xaa>
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <update_encoder_state+0x100>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
    if (current_state == MODE_SELECTION && cursor_position > 3) cursor_position = 3;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <update_encoder_state+0xf4>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d106      	bne.n	8001bbc <update_encoder_state+0xc0>
 8001bae:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <update_encoder_state+0x100>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	dd02      	ble.n	8001bbc <update_encoder_state+0xc0>
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <update_encoder_state+0x100>)
 8001bb8:	2203      	movs	r2, #3
 8001bba:	601a      	str	r2, [r3, #0]
    if (current_state == PARAMETER_SETTING && digit_position > 7) digit_position = 7;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <update_encoder_state+0xf4>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d106      	bne.n	8001bd2 <update_encoder_state+0xd6>
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <update_encoder_state+0xfc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b07      	cmp	r3, #7
 8001bca:	dd02      	ble.n	8001bd2 <update_encoder_state+0xd6>
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <update_encoder_state+0xfc>)
 8001bce:	2207      	movs	r2, #7
 8001bd0:	601a      	str	r2, [r3, #0]
    if (digit_position < 0) digit_position = 0;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <update_encoder_state+0xfc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da02      	bge.n	8001be0 <update_encoder_state+0xe4>
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <update_encoder_state+0xfc>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200002b4 	.word	0x200002b4
 8001bec:	200002e8 	.word	0x200002e8
 8001bf0:	200002b9 	.word	0x200002b9
 8001bf4:	200002e6 	.word	0x200002e6
 8001bf8:	200002d8 	.word	0x200002d8
 8001bfc:	200002bc 	.word	0x200002bc

08001c00 <update_parameter_value>:
//
//    // Debug: Print the new param_value
//    printf("Updated param_value: %f\n\r\v", param_value);
//}

void update_parameter_value(int direction) {
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    int integer_part = (int)param_value;
 8001c08:	4b52      	ldr	r3, [pc, #328]	@ (8001d54 <update_parameter_value+0x154>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fa09 	bl	8001024 <__aeabi_f2iz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	61fb      	str	r3, [r7, #28]
    float fractional_part = param_value - integer_part;
 8001c16:	4b4f      	ldr	r3, [pc, #316]	@ (8001d54 <update_parameter_value+0x154>)
 8001c18:	681c      	ldr	r4, [r3, #0]
 8001c1a:	69f8      	ldr	r0, [r7, #28]
 8001c1c:	f7ff f85e 	bl	8000cdc <__aeabi_i2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4620      	mov	r0, r4
 8001c26:	f7fe ffa3 	bl	8000b70 <__aeabi_fsub>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]

    // Adjust digit position for integer or fractional part
    if (digit_position < 3) {
 8001c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d58 <update_parameter_value+0x158>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	dc2d      	bgt.n	8001c92 <update_parameter_value+0x92>
        // Update integer part
        int multiplier = pow(10, 2 - digit_position);
 8001c36:	4b48      	ldr	r3, [pc, #288]	@ (8001d58 <update_parameter_value+0x158>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1c3 0302 	rsb	r3, r3, #2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fbe0 	bl	8000404 <__aeabi_i2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	4943      	ldr	r1, [pc, #268]	@ (8001d5c <update_parameter_value+0x15c>)
 8001c4e:	f009 fa2f 	bl	800b0b0 <pow>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe feed 	bl	8000a38 <__aeabi_d2iz>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60fb      	str	r3, [r7, #12]
        integer_part += direction * multiplier;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	61fb      	str	r3, [r7, #28]

        // Ensure the integer part stays within valid range (e.g., 000 to 999)
        if (integer_part < 0) {
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da04      	bge.n	8001c80 <update_parameter_value+0x80>
            integer_part += 1000;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e04f      	b.n	8001d20 <update_parameter_value+0x120>
        } else if (integer_part >= 1000) {
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c86:	db4b      	blt.n	8001d20 <update_parameter_value+0x120>
            integer_part -= 1000;
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	e046      	b.n	8001d20 <update_parameter_value+0x120>
        }

    } else {
        // Update fractional part
        int multiplier = pow(10, 5 - digit_position); // Positions after the decimal
 8001c92:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <update_parameter_value+0x158>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1c3 0305 	rsb	r3, r3, #5
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbb2 	bl	8000404 <__aeabi_i2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	492c      	ldr	r1, [pc, #176]	@ (8001d5c <update_parameter_value+0x15c>)
 8001caa:	f009 fa01 	bl	800b0b0 <pow>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe febf 	bl	8000a38 <__aeabi_d2iz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]
        int fractional_int = fractional_part * 1000;
 8001cbe:	4928      	ldr	r1, [pc, #160]	@ (8001d60 <update_parameter_value+0x160>)
 8001cc0:	69b8      	ldr	r0, [r7, #24]
 8001cc2:	f7ff f85f 	bl	8000d84 <__aeabi_fmul>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f9ab 	bl	8001024 <__aeabi_f2iz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	617b      	str	r3, [r7, #20]
        fractional_int += direction * multiplier;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4413      	add	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]

        // Ensure the fractional part stays within valid range (e.g., 000 to 999)
        if (fractional_int < 0) {
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da04      	bge.n	8001cf0 <update_parameter_value+0xf0>
            fractional_int += 1000;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e007      	b.n	8001d00 <update_parameter_value+0x100>
        } else if (fractional_int >= 1000) {
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cf6:	db03      	blt.n	8001d00 <update_parameter_value+0x100>
            fractional_int -= 1000;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001cfe:	617b      	str	r3, [r7, #20]
        }

        fractional_part = fractional_int / 1000.0;
 8001d00:	6978      	ldr	r0, [r7, #20]
 8001d02:	f7fe fb7f 	bl	8000404 <__aeabi_i2d>
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <update_parameter_value+0x164>)
 8001d0c:	f7fe fd0e 	bl	800072c <__aeabi_ddiv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe fed6 	bl	8000ac8 <__aeabi_d2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	61bb      	str	r3, [r7, #24]
    }

    // Combine integer part and modified fractional part
    param_value = integer_part + fractional_part;
 8001d20:	69f8      	ldr	r0, [r7, #28]
 8001d22:	f7fe ffdb 	bl	8000cdc <__aeabi_i2f>
 8001d26:	4603      	mov	r3, r0
 8001d28:	69b9      	ldr	r1, [r7, #24]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ff22 	bl	8000b74 <__addsf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <update_parameter_value+0x154>)
 8001d36:	601a      	str	r2, [r3, #0]

    // Debug: Print the updated param_value
    printf("Updated param_value: %f\n\r\v", param_value);
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <update_parameter_value+0x154>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fb73 	bl	8000428 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <update_parameter_value+0x168>)
 8001d48:	f005 fd3c 	bl	80077c4 <iprintf>
}
 8001d4c:	bf00      	nop
 8001d4e:	3724      	adds	r7, #36	@ 0x24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	200002d4 	.word	0x200002d4
 8001d58:	200002d8 	.word	0x200002d8
 8001d5c:	40240000 	.word	0x40240000
 8001d60:	447a0000 	.word	0x447a0000
 8001d64:	408f4000 	.word	0x408f4000
 8001d68:	0800c004 	.word	0x0800c004

08001d6c <handle_button_press>:



void handle_button_press() {
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
    if (rot_sw_state) {
 8001d70:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <handle_button_press+0x94>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d03e      	beq.n	8001df6 <handle_button_press+0x8a>
    	switch (current_state) {
 8001d78:	4b22      	ldr	r3, [pc, #136]	@ (8001e04 <handle_button_press+0x98>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d01c      	beq.n	8001dba <handle_button_press+0x4e>
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	dc30      	bgt.n	8001de6 <handle_button_press+0x7a>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <handle_button_press+0x22>
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d008      	beq.n	8001d9e <handle_button_press+0x32>
					current_state = RETURN_TO_HOME;
					digit_position = 0;
				}
				break;
			default:
				break;
 8001d8c:	e02b      	b.n	8001de6 <handle_button_press+0x7a>
				if (cursor_position == 0) {
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <handle_button_press+0x9c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d129      	bne.n	8001dea <handle_button_press+0x7e>
					current_state = MODE_SELECTION;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <handle_button_press+0x98>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
				break;
 8001d9c:	e025      	b.n	8001dea <handle_button_press+0x7e>
				current_state = PARAMETER_SETTING;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <handle_button_press+0x98>)
 8001da0:	2202      	movs	r2, #2
 8001da2:	701a      	strb	r2, [r3, #0]
				mode_index = cursor_position;
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <handle_button_press+0x9c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a18      	ldr	r2, [pc, #96]	@ (8001e0c <handle_button_press+0xa0>)
 8001daa:	6013      	str	r3, [r2, #0]
				cursor_position = 0;
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <handle_button_press+0x9c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
				adjusting_digit = false;
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <handle_button_press+0xa4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
				break;
 8001db8:	e01a      	b.n	8001df0 <handle_button_press+0x84>
				if (adjusting_digit) {
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <handle_button_press+0xa4>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <handle_button_press+0x5e>
					adjusting_digit = false; // Stop adjusting the digit
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <handle_button_press+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e002      	b.n	8001dd0 <handle_button_press+0x64>
					adjusting_digit = true; // Start adjusting the digit
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <handle_button_press+0xa4>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
				if (digit_position == 7) {
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <handle_button_press+0xa8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d10a      	bne.n	8001dee <handle_button_press+0x82>
					current_state = RETURN_TO_HOME;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <handle_button_press+0x98>)
 8001dda:	2204      	movs	r2, #4
 8001ddc:	701a      	strb	r2, [r3, #0]
					digit_position = 0;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <handle_button_press+0xa8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
				break;
 8001de4:	e003      	b.n	8001dee <handle_button_press+0x82>
				break;
 8001de6:	bf00      	nop
 8001de8:	e002      	b.n	8001df0 <handle_button_press+0x84>
				break;
 8001dea:	bf00      	nop
 8001dec:	e000      	b.n	8001df0 <handle_button_press+0x84>
				break;
 8001dee:	bf00      	nop
        }
        rot_sw_state = false; // Reset button state
 8001df0:	4b03      	ldr	r3, [pc, #12]	@ (8001e00 <handle_button_press+0x94>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
    }
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200002e2 	.word	0x200002e2
 8001e04:	200002b9 	.word	0x200002b9
 8001e08:	200002bc 	.word	0x200002bc
 8001e0c:	200002c0 	.word	0x200002c0
 8001e10:	200002e6 	.word	0x200002e6
 8001e14:	200002d8 	.word	0x200002d8

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <Error_Handler+0x8>

08001e24 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001e3a:	bf00      	nop
 8001e3c:	4809      	ldr	r0, [pc, #36]	@ (8001e64 <ssd1306_WriteCommand+0x34>)
 8001e3e:	f001 ff0f 	bl	8003c60 <HAL_I2C_GetState>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d1f9      	bne.n	8001e3c <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
 8001e48:	2301      	movs	r3, #1
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	1dfb      	adds	r3, r7, #7
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	2200      	movs	r2, #0
 8001e54:	2178      	movs	r1, #120	@ 0x78
 8001e56:	4803      	ldr	r0, [pc, #12]	@ (8001e64 <ssd1306_WriteCommand+0x34>)
 8001e58:	f001 fc04 	bl	8003664 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
#endif
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000214 	.word	0x20000214

08001e68 <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001e72:	bf00      	nop
 8001e74:	480a      	ldr	r0, [pc, #40]	@ (8001ea0 <ssd1306_WriteData+0x38>)
 8001e76:	f001 fef3 	bl	8003c60 <HAL_I2C_GetState>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d1f9      	bne.n	8001e74 <ssd1306_WriteData+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2240      	movs	r2, #64	@ 0x40
 8001e8e:	2178      	movs	r1, #120	@ 0x78
 8001e90:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <ssd1306_WriteData+0x38>)
 8001e92:	f001 fbe7 	bl	8003664 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
#endif
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000214 	.word	0x20000214

08001ea4 <HAL_I2C_MemTxCpltCallback>:


#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
	...

08001eb8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ebc:	f7ff ffb2 	bl	8001e24 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001ec0:	2064      	movs	r0, #100	@ 0x64
 8001ec2:	f000 fcef 	bl	80028a4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 f9d6 	bl	8002278 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ecc:	2020      	movs	r0, #32
 8001ece:	f7ff ffaf 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff ffac 	bl	8001e30 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ed8:	20b0      	movs	r0, #176	@ 0xb0
 8001eda:	f7ff ffa9 	bl	8001e30 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001ede:	20c8      	movs	r0, #200	@ 0xc8
 8001ee0:	f7ff ffa6 	bl	8001e30 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff ffa3 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001eea:	2010      	movs	r0, #16
 8001eec:	f7ff ffa0 	bl	8001e30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ef0:	2040      	movs	r0, #64	@ 0x40
 8001ef2:	f7ff ff9d 	bl	8001e30 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ef6:	20ff      	movs	r0, #255	@ 0xff
 8001ef8:	f000 f9aa 	bl	8002250 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001efc:	20a1      	movs	r0, #161	@ 0xa1
 8001efe:	f7ff ff97 	bl	8001e30 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001f02:	20a6      	movs	r0, #166	@ 0xa6
 8001f04:	f7ff ff94 	bl	8001e30 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001f08:	20a8      	movs	r0, #168	@ 0xa8
 8001f0a:	f7ff ff91 	bl	8001e30 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001f0e:	203f      	movs	r0, #63	@ 0x3f
 8001f10:	f7ff ff8e 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f14:	20a4      	movs	r0, #164	@ 0xa4
 8001f16:	f7ff ff8b 	bl	8001e30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001f1a:	20d3      	movs	r0, #211	@ 0xd3
 8001f1c:	f7ff ff88 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff ff85 	bl	8001e30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f26:	20d5      	movs	r0, #213	@ 0xd5
 8001f28:	f7ff ff82 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001f2c:	20f0      	movs	r0, #240	@ 0xf0
 8001f2e:	f7ff ff7f 	bl	8001e30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f32:	20d9      	movs	r0, #217	@ 0xd9
 8001f34:	f7ff ff7c 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f38:	2022      	movs	r0, #34	@ 0x22
 8001f3a:	f7ff ff79 	bl	8001e30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f3e:	20da      	movs	r0, #218	@ 0xda
 8001f40:	f7ff ff76 	bl	8001e30 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001f44:	2012      	movs	r0, #18
 8001f46:	f7ff ff73 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f4a:	20db      	movs	r0, #219	@ 0xdb
 8001f4c:	f7ff ff70 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f50:	2020      	movs	r0, #32
 8001f52:	f7ff ff6d 	bl	8001e30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f56:	208d      	movs	r0, #141	@ 0x8d
 8001f58:	f7ff ff6a 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f5c:	2014      	movs	r0, #20
 8001f5e:	f7ff ff67 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f62:	2001      	movs	r0, #1
 8001f64:	f000 f988 	bl	8002278 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f80f 	bl	8001f8c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f6e:	f000 f82f 	bl	8001fd0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <ssd1306_Init+0xd0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <ssd1306_Init+0xd0>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f7e:	4b02      	ldr	r3, [pc, #8]	@ (8001f88 <ssd1306_Init+0xd0>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	711a      	strb	r2, [r3, #4]
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200006ec 	.word	0x200006ec

08001f8c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e00d      	b.n	8001fb8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <ssd1306_Fill+0x1a>
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	e000      	b.n	8001fa8 <ssd1306_Fill+0x1c>
 8001fa6:	21ff      	movs	r1, #255	@ 0xff
 8001fa8:	4a08      	ldr	r2, [pc, #32]	@ (8001fcc <ssd1306_Fill+0x40>)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	460a      	mov	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fbe:	d3ed      	bcc.n	8001f9c <ssd1306_Fill+0x10>
    }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	200002ec 	.word	0x200002ec

08001fd0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	e016      	b.n	800200a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	3b50      	subs	r3, #80	@ 0x50
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff24 	bl	8001e30 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff ff21 	bl	8001e30 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001fee:	2010      	movs	r0, #16
 8001ff0:	f7ff ff1e 	bl	8001e30 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	4a08      	ldr	r2, [pc, #32]	@ (800201c <ssd1306_UpdateScreen+0x4c>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2180      	movs	r1, #128	@ 0x80
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff32 	bl	8001e68 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	3301      	adds	r3, #1
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b07      	cmp	r3, #7
 800200e:	d9e5      	bls.n	8001fdc <ssd1306_UpdateScreen+0xc>
    }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200002ec 	.word	0x200002ec

08002020 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	460b      	mov	r3, r1
 800202c:	71bb      	strb	r3, [r7, #6]
 800202e:	4613      	mov	r3, r2
 8002030:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db3d      	blt.n	80020b6 <ssd1306_DrawPixel+0x96>
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	2b3f      	cmp	r3, #63	@ 0x3f
 800203e:	d83a      	bhi.n	80020b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002040:	797b      	ldrb	r3, [r7, #5]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d11a      	bne.n	800207c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	b2d8      	uxtb	r0, r3
 800204e:	4603      	mov	r3, r0
 8002050:	01db      	lsls	r3, r3, #7
 8002052:	4413      	add	r3, r2
 8002054:	4a1a      	ldr	r2, [pc, #104]	@ (80020c0 <ssd1306_DrawPixel+0xa0>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	b25a      	sxtb	r2, r3
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	b25b      	sxtb	r3, r3
 8002068:	4313      	orrs	r3, r2
 800206a:	b259      	sxtb	r1, r3
 800206c:	79fa      	ldrb	r2, [r7, #7]
 800206e:	4603      	mov	r3, r0
 8002070:	01db      	lsls	r3, r3, #7
 8002072:	4413      	add	r3, r2
 8002074:	b2c9      	uxtb	r1, r1
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <ssd1306_DrawPixel+0xa0>)
 8002078:	54d1      	strb	r1, [r2, r3]
 800207a:	e01d      	b.n	80020b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	b2d8      	uxtb	r0, r3
 8002084:	4603      	mov	r3, r0
 8002086:	01db      	lsls	r3, r3, #7
 8002088:	4413      	add	r3, r2
 800208a:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <ssd1306_DrawPixel+0xa0>)
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	b25a      	sxtb	r2, r3
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	b25b      	sxtb	r3, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	4013      	ands	r3, r2
 80020a4:	b259      	sxtb	r1, r3
 80020a6:	79fa      	ldrb	r2, [r7, #7]
 80020a8:	4603      	mov	r3, r0
 80020aa:	01db      	lsls	r3, r3, #7
 80020ac:	4413      	add	r3, r2
 80020ae:	b2c9      	uxtb	r1, r1
 80020b0:	4a03      	ldr	r2, [pc, #12]	@ (80020c0 <ssd1306_DrawPixel+0xa0>)
 80020b2:	54d1      	strb	r1, [r2, r3]
 80020b4:	e000      	b.n	80020b8 <ssd1306_DrawPixel+0x98>
        return;
 80020b6:	bf00      	nop
    }
}
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	200002ec 	.word	0x200002ec

080020c4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4604      	mov	r4, r0
 80020cc:	1d38      	adds	r0, r7, #4
 80020ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80020d2:	461a      	mov	r2, r3
 80020d4:	4623      	mov	r3, r4
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	4613      	mov	r3, r2
 80020da:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b1f      	cmp	r3, #31
 80020e0:	d902      	bls.n	80020e8 <ssd1306_WriteChar+0x24>
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	2b7e      	cmp	r3, #126	@ 0x7e
 80020e6:	d901      	bls.n	80020ec <ssd1306_WriteChar+0x28>
        return 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e06c      	b.n	80021c6 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020ec:	4b38      	ldr	r3, [pc, #224]	@ (80021d0 <ssd1306_WriteChar+0x10c>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	793b      	ldrb	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	dc06      	bgt.n	8002108 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020fa:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <ssd1306_WriteChar+0x10c>)
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	461a      	mov	r2, r3
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002104:	2b40      	cmp	r3, #64	@ 0x40
 8002106:	dd01      	ble.n	800210c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002108:	2300      	movs	r3, #0
 800210a:	e05c      	b.n	80021c6 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	e04c      	b.n	80021ac <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3b20      	subs	r3, #32
 8002118:	7979      	ldrb	r1, [r7, #5]
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4619      	mov	r1, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	440b      	add	r3, r1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e034      	b.n	800219c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d012      	beq.n	8002168 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002142:	4b23      	ldr	r3, [pc, #140]	@ (80021d0 <ssd1306_WriteChar+0x10c>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4413      	add	r3, r2
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <ssd1306_WriteChar+0x10c>)
 8002152:	885b      	ldrh	r3, [r3, #2]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4413      	add	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	7bba      	ldrb	r2, [r7, #14]
 8002160:	4619      	mov	r1, r3
 8002162:	f7ff ff5d 	bl	8002020 <ssd1306_DrawPixel>
 8002166:	e016      	b.n	8002196 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <ssd1306_WriteChar+0x10c>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4413      	add	r3, r2
 8002174:	b2d8      	uxtb	r0, r3
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <ssd1306_WriteChar+0x10c>)
 8002178:	885b      	ldrh	r3, [r3, #2]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	4413      	add	r3, r2
 8002182:	b2d9      	uxtb	r1, r3
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	f7ff ff45 	bl	8002020 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3301      	adds	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	793b      	ldrb	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d3c5      	bcc.n	8002132 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	797b      	ldrb	r3, [r7, #5]
 80021ae:	461a      	mov	r2, r3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d3ad      	bcc.n	8002112 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <ssd1306_WriteChar+0x10c>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	793a      	ldrb	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <ssd1306_WriteChar+0x10c>)
 80021c2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200006ec 	.word	0x200006ec

080021d4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	1d38      	adds	r0, r7, #4
 80021de:	e880 0006 	stmia.w	r0, {r1, r2}
 80021e2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80021e4:	e012      	b.n	800220c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	7818      	ldrb	r0, [r3, #0]
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	1d3a      	adds	r2, r7, #4
 80021ee:	ca06      	ldmia	r2, {r1, r2}
 80021f0:	f7ff ff68 	bl	80020c4 <ssd1306_WriteChar>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d002      	beq.n	8002206 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	e008      	b.n	8002218 <ssd1306_WriteString+0x44>
        }
        str++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e8      	bne.n	80021e6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	460a      	mov	r2, r1
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	4613      	mov	r3, r2
 800222e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	b29a      	uxth	r2, r3
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <ssd1306_SetCursor+0x2c>)
 8002236:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002238:	79bb      	ldrb	r3, [r7, #6]
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <ssd1306_SetCursor+0x2c>)
 800223e:	805a      	strh	r2, [r3, #2]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	200006ec 	.word	0x200006ec

08002250 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800225a:	2381      	movs	r3, #129	@ 0x81
 800225c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fde5 	bl	8001e30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fde1 	bl	8001e30 <ssd1306_WriteCommand>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002288:	23af      	movs	r3, #175	@ 0xaf
 800228a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <ssd1306_SetDisplayOn+0x38>)
 800228e:	2201      	movs	r2, #1
 8002290:	715a      	strb	r2, [r3, #5]
 8002292:	e004      	b.n	800229e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002294:	23ae      	movs	r3, #174	@ 0xae
 8002296:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <ssd1306_SetDisplayOn+0x38>)
 800229a:	2200      	movs	r2, #0
 800229c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fdc5 	bl	8001e30 <ssd1306_WriteCommand>
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200006ec 	.word	0x200006ec

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <HAL_MspInit+0x5c>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <HAL_MspInit+0x5c>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_MspInit+0x5c>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <HAL_MspInit+0x5c>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002310 <HAL_MspInit+0x5c>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_MspInit+0x5c>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_MspInit+0x60>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_MspInit+0x60>)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <NMI_Handler+0x4>

08002320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <HardFault_Handler+0x4>

08002328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <MemManage_Handler+0x4>

08002330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <BusFault_Handler+0x4>

08002338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <UsageFault_Handler+0x4>

08002340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002368:	f000 fa80 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}

08002370 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_SW_Pin);
 8002374:	2001      	movs	r0, #1
 8002376:	f001 f805 	bl	8003384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}

0800237e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_SW_Pin);
 8002382:	2002      	movs	r0, #2
 8002384:	f000 fffe 	bl	8003384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_SW_Pin);
 8002390:	2010      	movs	r0, #16
 8002392:	f000 fff7 	bl	8003384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <DMA1_Channel6_IRQHandler+0x10>)
 80023a2:	f000 fce3 	bl	8002d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000268 	.word	0x20000268

080023b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_SW_Pin);
 80023b4:	2020      	movs	r0, #32
 80023b6:	f000 ffe5 	bl	8003384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <TIM3_IRQHandler+0x10>)
 80023c6:	f003 fedd 	bl	8006184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200006f8 	.word	0x200006f8

080023d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023d8:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <I2C1_EV_IRQHandler+0x10>)
 80023da:	f001 fa99 	bl	8003910 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000214 	.word	0x20000214

080023e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return 1;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <_kill>:

int _kill(int pid, int sig)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002400:	f005 faf6 	bl	80079f0 <__errno>
 8002404:	4603      	mov	r3, r0
 8002406:	2216      	movs	r2, #22
 8002408:	601a      	str	r2, [r3, #0]
  return -1;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <_exit>:

void _exit (int status)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800241e:	f04f 31ff 	mov.w	r1, #4294967295
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffe7 	bl	80023f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <_exit+0x12>

0800242c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e00a      	b.n	8002454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800243e:	f3af 8000 	nop.w
 8002442:	4601      	mov	r1, r0
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	60ba      	str	r2, [r7, #8]
 800244a:	b2ca      	uxtb	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	dbf0      	blt.n	800243e <_read+0x12>
  }

  return len;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e009      	b.n	800248c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	60ba      	str	r2, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe ff6f 	bl	8001364 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	dbf1      	blt.n	8002478 <_write+0x12>
  }
  return len;
 8002494:	687b      	ldr	r3, [r7, #4]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_close>:

int _close(int file)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c4:	605a      	str	r2, [r3, #4]
  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <_isatty>:

int _isatty(int file)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
	...

08002500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <_sbrk+0x5c>)
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <_sbrk+0x60>)
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800251c:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <_sbrk+0x64>)
 800251e:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <_sbrk+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d207      	bcs.n	8002540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002530:	f005 fa5e 	bl	80079f0 <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e009      	b.n	8002554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20005000 	.word	0x20005000
 8002560:	00000400 	.word	0x00000400
 8002564:	200006f4 	.word	0x200006f4
 8002568:	200008d8 	.word	0x200008d8

0800256c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	@ 0x30
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	2224      	movs	r2, #36	@ 0x24
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f005 f9df 	bl	800794a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002594:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <MX_TIM3_Init+0xa0>)
 8002596:	4a21      	ldr	r2, [pc, #132]	@ (800261c <MX_TIM3_Init+0xa4>)
 8002598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800259a:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <MX_TIM3_Init+0xa0>)
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <MX_TIM3_Init+0xa0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80025a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <MX_TIM3_Init+0xa0>)
 80025a8:	2263      	movs	r2, #99	@ 0x63
 80025aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <MX_TIM3_Init+0xa0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b2:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <MX_TIM3_Init+0xa0>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025b8:	2303      	movs	r3, #3
 80025ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025c0:	2301      	movs	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80025c8:	230a      	movs	r3, #10
 80025ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025d0:	2301      	movs	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	@ (8002618 <MX_TIM3_Init+0xa0>)
 80025e4:	f003 fc7e 	bl	8005ee4 <HAL_TIM_Encoder_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80025ee:	f7ff fc13 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4806      	ldr	r0, [pc, #24]	@ (8002618 <MX_TIM3_Init+0xa0>)
 8002600:	f003 ff72 	bl	80064e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800260a:	f7ff fc05 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	3730      	adds	r7, #48	@ 0x30
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200006f8 	.word	0x200006f8
 800261c:	40000400 	.word	0x40000400

08002620 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a19      	ldr	r2, [pc, #100]	@ (80026a0 <HAL_TIM_Encoder_MspInit+0x80>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d12b      	bne.n	8002698 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002640:	4b18      	ldr	r3, [pc, #96]	@ (80026a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	61d3      	str	r3, [r2, #28]
 800264c:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <HAL_TIM_Encoder_MspInit+0x84>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <HAL_TIM_Encoder_MspInit+0x84>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a11      	ldr	r2, [pc, #68]	@ (80026a4 <HAL_TIM_Encoder_MspInit+0x84>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ROT_A_Pin|ROT_B_Pin;
 8002670:	23c0      	movs	r3, #192	@ 0xc0
 8002672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	4619      	mov	r1, r3
 8002682:	4809      	ldr	r0, [pc, #36]	@ (80026a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002684:	f000 fcb2 	bl	8002fec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	201d      	movs	r0, #29
 800268e:	f000 fa04 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002692:	201d      	movs	r0, #29
 8002694:	f000 fa1d 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002698:	bf00      	nop
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40010800 	.word	0x40010800

080026ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <MX_USART2_UART_Init+0x50>)
 80026b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026be:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026d2:	220c      	movs	r2, #12
 80026d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026e4:	f003 ff70 	bl	80065c8 <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ee:	f7ff fb93 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000740 	.word	0x20000740
 80026fc:	40004400 	.word	0x40004400

08002700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1b      	ldr	r2, [pc, #108]	@ (8002788 <HAL_UART_MspInit+0x88>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d12f      	bne.n	8002780 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_UART_MspInit+0x8c>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	4a19      	ldr	r2, [pc, #100]	@ (800278c <HAL_UART_MspInit+0x8c>)
 8002726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272a:	61d3      	str	r3, [r2, #28]
 800272c:	4b17      	ldr	r3, [pc, #92]	@ (800278c <HAL_UART_MspInit+0x8c>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_UART_MspInit+0x8c>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a13      	ldr	r2, [pc, #76]	@ (800278c <HAL_UART_MspInit+0x8c>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <HAL_UART_MspInit+0x8c>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002750:	2304      	movs	r3, #4
 8002752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	480b      	ldr	r0, [pc, #44]	@ (8002790 <HAL_UART_MspInit+0x90>)
 8002764:	f000 fc42 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002768:	2308      	movs	r3, #8
 800276a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4619      	mov	r1, r3
 800277a:	4805      	ldr	r0, [pc, #20]	@ (8002790 <HAL_UART_MspInit+0x90>)
 800277c:	f000 fc36 	bl	8002fec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002780:	bf00      	nop
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40004400 	.word	0x40004400
 800278c:	40021000 	.word	0x40021000
 8002790:	40010800 	.word	0x40010800

08002794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002794:	f7ff feea 	bl	800256c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002798:	480b      	ldr	r0, [pc, #44]	@ (80027c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800279a:	490c      	ldr	r1, [pc, #48]	@ (80027cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800279c:	4a0c      	ldr	r2, [pc, #48]	@ (80027d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a0:	e002      	b.n	80027a8 <LoopCopyDataInit>

080027a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a6:	3304      	adds	r3, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ac:	d3f9      	bcc.n	80027a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ae:	4a09      	ldr	r2, [pc, #36]	@ (80027d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027b0:	4c09      	ldr	r4, [pc, #36]	@ (80027d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b4:	e001      	b.n	80027ba <LoopFillZerobss>

080027b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b8:	3204      	adds	r2, #4

080027ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027bc:	d3fb      	bcc.n	80027b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027be:	f005 f91d 	bl	80079fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027c2:	f7fe fde1 	bl	8001388 <main>
  bx lr
 80027c6:	4770      	bx	lr
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80027d0:	0800cc28 	.word	0x0800cc28
  ldr r2, =_sbss
 80027d4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80027d8:	200008d8 	.word	0x200008d8

080027dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC1_2_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_Init+0x28>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <HAL_Init+0x28>)
 80027ea:	f043 0310 	orr.w	r3, r3, #16
 80027ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f947 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f6:	200f      	movs	r0, #15
 80027f8:	f000 f808 	bl	800280c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fc:	f7ff fd5a 	bl	80022b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40022000 	.word	0x40022000

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002814:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <HAL_InitTick+0x54>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_InitTick+0x58>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002822:	fbb3 f3f1 	udiv	r3, r3, r1
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f95f 	bl	8002aee <HAL_SYSTICK_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00e      	b.n	8002858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d80a      	bhi.n	8002856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f000 f927 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800284c:	4a06      	ldr	r2, [pc, #24]	@ (8002868 <HAL_InitTick+0x5c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000010 	.word	0x20000010
 8002864:	20000018 	.word	0x20000018
 8002868:	20000014 	.word	0x20000014

0800286c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_IncTick+0x1c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_IncTick+0x20>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a03      	ldr	r2, [pc, #12]	@ (800288c <HAL_IncTick+0x20>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000018 	.word	0x20000018
 800288c:	20000788 	.word	0x20000788

08002890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return uwTick;
 8002894:	4b02      	ldr	r3, [pc, #8]	@ (80028a0 <HAL_GetTick+0x10>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000788 	.word	0x20000788

080028a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff fff0 	bl	8002890 <HAL_GetTick>
 80028b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d005      	beq.n	80028ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <HAL_Delay+0x44>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ca:	bf00      	nop
 80028cc:	f7ff ffe0 	bl	8002890 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d8f7      	bhi.n	80028cc <HAL_Delay+0x28>
  {
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000018 	.word	0x20000018

080028ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <__NVIC_GetPriorityGrouping+0x18>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0307 	and.w	r3, r3, #7
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	db0b      	blt.n	800297a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4906      	ldr	r1, [pc, #24]	@ (8002984 <__NVIC_EnableIRQ+0x34>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2001      	movs	r0, #1
 8002972:	fa00 f202 	lsl.w	r2, r0, r2
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100

08002988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db0a      	blt.n	80029b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	490c      	ldr	r1, [pc, #48]	@ (80029d4 <__NVIC_SetPriority+0x4c>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	440b      	add	r3, r1
 80029ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b0:	e00a      	b.n	80029c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4908      	ldr	r1, [pc, #32]	@ (80029d8 <__NVIC_SetPriority+0x50>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3b04      	subs	r3, #4
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	761a      	strb	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	@ 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	bf28      	it	cs
 80029fa:	2304      	movcs	r3, #4
 80029fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d902      	bls.n	8002a0c <NVIC_EncodePriority+0x30>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3b03      	subs	r3, #3
 8002a0a:	e000      	b.n	8002a0e <NVIC_EncodePriority+0x32>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a24:	f04f 31ff 	mov.w	r1, #4294967295
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43d9      	mvns	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	4313      	orrs	r3, r2
         );
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f7ff ff90 	bl	8002988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff2d 	bl	80028ec <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff42 	bl	8002934 <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff90 	bl	80029dc <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5f 	bl	8002988 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff35 	bl	8002950 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa2 	bl	8002a40 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e043      	b.n	8002ba6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_DMA_Init+0xa8>)
 8002b26:	4413      	add	r3, r2
 8002b28:	4a22      	ldr	r2, [pc, #136]	@ (8002bb4 <HAL_DMA_Init+0xac>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	009a      	lsls	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <HAL_DMA_Init+0xb0>)
 8002b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b52:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	bffdfff8 	.word	0xbffdfff8
 8002bb4:	cccccccd 	.word	0xcccccccd
 8002bb8:	40020000 	.word	0x40020000

08002bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_DMA_Start_IT+0x20>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e04b      	b.n	8002c74 <HAL_DMA_Start_IT+0xb8>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d13a      	bne.n	8002c66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f9bc 	bl	8002f92 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 020e 	orr.w	r2, r2, #14
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e00f      	b.n	8002c54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 020a 	orr.w	r2, r2, #10
 8002c52:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e005      	b.n	8002c72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d005      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2204      	movs	r2, #4
 8002c98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	e051      	b.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 020e 	bic.w	r2, r2, #14
 8002cae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a22      	ldr	r2, [pc, #136]	@ (8002d50 <HAL_DMA_Abort_IT+0xd4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d029      	beq.n	8002d1e <HAL_DMA_Abort_IT+0xa2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a21      	ldr	r2, [pc, #132]	@ (8002d54 <HAL_DMA_Abort_IT+0xd8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x9e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <HAL_DMA_Abort_IT+0xdc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01a      	beq.n	8002d14 <HAL_DMA_Abort_IT+0x98>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <HAL_DMA_Abort_IT+0xe0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d012      	beq.n	8002d0e <HAL_DMA_Abort_IT+0x92>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	@ (8002d60 <HAL_DMA_Abort_IT+0xe4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00a      	beq.n	8002d08 <HAL_DMA_Abort_IT+0x8c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <HAL_DMA_Abort_IT+0xe8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d102      	bne.n	8002d02 <HAL_DMA_Abort_IT+0x86>
 8002cfc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d00:	e00e      	b.n	8002d20 <HAL_DMA_Abort_IT+0xa4>
 8002d02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d06:	e00b      	b.n	8002d20 <HAL_DMA_Abort_IT+0xa4>
 8002d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d0c:	e008      	b.n	8002d20 <HAL_DMA_Abort_IT+0xa4>
 8002d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d12:	e005      	b.n	8002d20 <HAL_DMA_Abort_IT+0xa4>
 8002d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d18:	e002      	b.n	8002d20 <HAL_DMA_Abort_IT+0xa4>
 8002d1a:	2310      	movs	r3, #16
 8002d1c:	e000      	b.n	8002d20 <HAL_DMA_Abort_IT+0xa4>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	4a11      	ldr	r2, [pc, #68]	@ (8002d68 <HAL_DMA_Abort_IT+0xec>)
 8002d22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
    } 
  }
  return status;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40020008 	.word	0x40020008
 8002d54:	4002001c 	.word	0x4002001c
 8002d58:	40020030 	.word	0x40020030
 8002d5c:	40020044 	.word	0x40020044
 8002d60:	40020058 	.word	0x40020058
 8002d64:	4002006c 	.word	0x4002006c
 8002d68:	40020000 	.word	0x40020000

08002d6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	2204      	movs	r2, #4
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d04f      	beq.n	8002e34 <HAL_DMA_IRQHandler+0xc8>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d04a      	beq.n	8002e34 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0204 	bic.w	r2, r2, #4
 8002dba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a66      	ldr	r2, [pc, #408]	@ (8002f5c <HAL_DMA_IRQHandler+0x1f0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d029      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xae>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a65      	ldr	r2, [pc, #404]	@ (8002f60 <HAL_DMA_IRQHandler+0x1f4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xaa>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a63      	ldr	r2, [pc, #396]	@ (8002f64 <HAL_DMA_IRQHandler+0x1f8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01a      	beq.n	8002e10 <HAL_DMA_IRQHandler+0xa4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a62      	ldr	r2, [pc, #392]	@ (8002f68 <HAL_DMA_IRQHandler+0x1fc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d012      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x9e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a60      	ldr	r2, [pc, #384]	@ (8002f6c <HAL_DMA_IRQHandler+0x200>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x98>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5f      	ldr	r2, [pc, #380]	@ (8002f70 <HAL_DMA_IRQHandler+0x204>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x92>
 8002df8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dfc:	e00e      	b.n	8002e1c <HAL_DMA_IRQHandler+0xb0>
 8002dfe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e02:	e00b      	b.n	8002e1c <HAL_DMA_IRQHandler+0xb0>
 8002e04:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e08:	e008      	b.n	8002e1c <HAL_DMA_IRQHandler+0xb0>
 8002e0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e0e:	e005      	b.n	8002e1c <HAL_DMA_IRQHandler+0xb0>
 8002e10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e14:	e002      	b.n	8002e1c <HAL_DMA_IRQHandler+0xb0>
 8002e16:	2340      	movs	r3, #64	@ 0x40
 8002e18:	e000      	b.n	8002e1c <HAL_DMA_IRQHandler+0xb0>
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	4a55      	ldr	r2, [pc, #340]	@ (8002f74 <HAL_DMA_IRQHandler+0x208>)
 8002e1e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8094 	beq.w	8002f52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e32:	e08e      	b.n	8002f52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2202      	movs	r2, #2
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d056      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x186>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d051      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 020a 	bic.w	r2, r2, #10
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a38      	ldr	r2, [pc, #224]	@ (8002f5c <HAL_DMA_IRQHandler+0x1f0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d029      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x166>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a37      	ldr	r2, [pc, #220]	@ (8002f60 <HAL_DMA_IRQHandler+0x1f4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_IRQHandler+0x162>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a35      	ldr	r2, [pc, #212]	@ (8002f64 <HAL_DMA_IRQHandler+0x1f8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01a      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x15c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a34      	ldr	r2, [pc, #208]	@ (8002f68 <HAL_DMA_IRQHandler+0x1fc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d012      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x156>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a32      	ldr	r2, [pc, #200]	@ (8002f6c <HAL_DMA_IRQHandler+0x200>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00a      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x150>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a31      	ldr	r2, [pc, #196]	@ (8002f70 <HAL_DMA_IRQHandler+0x204>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d102      	bne.n	8002eb6 <HAL_DMA_IRQHandler+0x14a>
 8002eb0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002eb4:	e00e      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x168>
 8002eb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eba:	e00b      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x168>
 8002ebc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ec0:	e008      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x168>
 8002ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ec6:	e005      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x168>
 8002ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ecc:	e002      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x168>
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e000      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x168>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	4a27      	ldr	r2, [pc, #156]	@ (8002f74 <HAL_DMA_IRQHandler+0x208>)
 8002ed6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d034      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ef0:	e02f      	b.n	8002f52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d028      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x1e8>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d023      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 020e 	bic.w	r2, r2, #14
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
    }
  }
  return;
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
}
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40020008 	.word	0x40020008
 8002f60:	4002001c 	.word	0x4002001c
 8002f64:	40020030 	.word	0x40020030
 8002f68:	40020044 	.word	0x40020044
 8002f6c:	40020058 	.word	0x40020058
 8002f70:	4002006c 	.word	0x4002006c
 8002f74:	40020000 	.word	0x40020000

08002f78 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f86:	b2db      	uxtb	r3, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f202 	lsl.w	r2, r1, r2
 8002fae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d108      	bne.n	8002fd2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fd0:	e007      	b.n	8002fe2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	60da      	str	r2, [r3, #12]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b08b      	sub	sp, #44	@ 0x2c
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffe:	e169      	b.n	80032d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003000:	2201      	movs	r2, #1
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	429a      	cmp	r2, r3
 800301a:	f040 8158 	bne.w	80032ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a9a      	ldr	r2, [pc, #616]	@ (800328c <HAL_GPIO_Init+0x2a0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d05e      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 8003028:	4a98      	ldr	r2, [pc, #608]	@ (800328c <HAL_GPIO_Init+0x2a0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d875      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 800302e:	4a98      	ldr	r2, [pc, #608]	@ (8003290 <HAL_GPIO_Init+0x2a4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d058      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 8003034:	4a96      	ldr	r2, [pc, #600]	@ (8003290 <HAL_GPIO_Init+0x2a4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d86f      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 800303a:	4a96      	ldr	r2, [pc, #600]	@ (8003294 <HAL_GPIO_Init+0x2a8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d052      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 8003040:	4a94      	ldr	r2, [pc, #592]	@ (8003294 <HAL_GPIO_Init+0x2a8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d869      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 8003046:	4a94      	ldr	r2, [pc, #592]	@ (8003298 <HAL_GPIO_Init+0x2ac>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d04c      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 800304c:	4a92      	ldr	r2, [pc, #584]	@ (8003298 <HAL_GPIO_Init+0x2ac>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d863      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 8003052:	4a92      	ldr	r2, [pc, #584]	@ (800329c <HAL_GPIO_Init+0x2b0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d046      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 8003058:	4a90      	ldr	r2, [pc, #576]	@ (800329c <HAL_GPIO_Init+0x2b0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d85d      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 800305e:	2b12      	cmp	r3, #18
 8003060:	d82a      	bhi.n	80030b8 <HAL_GPIO_Init+0xcc>
 8003062:	2b12      	cmp	r3, #18
 8003064:	d859      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <HAL_GPIO_Init+0x80>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	080030e7 	.word	0x080030e7
 8003070:	080030c1 	.word	0x080030c1
 8003074:	080030d3 	.word	0x080030d3
 8003078:	08003115 	.word	0x08003115
 800307c:	0800311b 	.word	0x0800311b
 8003080:	0800311b 	.word	0x0800311b
 8003084:	0800311b 	.word	0x0800311b
 8003088:	0800311b 	.word	0x0800311b
 800308c:	0800311b 	.word	0x0800311b
 8003090:	0800311b 	.word	0x0800311b
 8003094:	0800311b 	.word	0x0800311b
 8003098:	0800311b 	.word	0x0800311b
 800309c:	0800311b 	.word	0x0800311b
 80030a0:	0800311b 	.word	0x0800311b
 80030a4:	0800311b 	.word	0x0800311b
 80030a8:	0800311b 	.word	0x0800311b
 80030ac:	0800311b 	.word	0x0800311b
 80030b0:	080030c9 	.word	0x080030c9
 80030b4:	080030dd 	.word	0x080030dd
 80030b8:	4a79      	ldr	r2, [pc, #484]	@ (80032a0 <HAL_GPIO_Init+0x2b4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030be:	e02c      	b.n	800311a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	623b      	str	r3, [r7, #32]
          break;
 80030c6:	e029      	b.n	800311c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	3304      	adds	r3, #4
 80030ce:	623b      	str	r3, [r7, #32]
          break;
 80030d0:	e024      	b.n	800311c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	3308      	adds	r3, #8
 80030d8:	623b      	str	r3, [r7, #32]
          break;
 80030da:	e01f      	b.n	800311c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	330c      	adds	r3, #12
 80030e2:	623b      	str	r3, [r7, #32]
          break;
 80030e4:	e01a      	b.n	800311c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ee:	2304      	movs	r3, #4
 80030f0:	623b      	str	r3, [r7, #32]
          break;
 80030f2:	e013      	b.n	800311c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030fc:	2308      	movs	r3, #8
 80030fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	611a      	str	r2, [r3, #16]
          break;
 8003106:	e009      	b.n	800311c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003108:	2308      	movs	r3, #8
 800310a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	615a      	str	r2, [r3, #20]
          break;
 8003112:	e003      	b.n	800311c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003114:	2300      	movs	r3, #0
 8003116:	623b      	str	r3, [r7, #32]
          break;
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x130>
          break;
 800311a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2bff      	cmp	r3, #255	@ 0xff
 8003120:	d801      	bhi.n	8003126 <HAL_GPIO_Init+0x13a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	e001      	b.n	800312a <HAL_GPIO_Init+0x13e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2bff      	cmp	r3, #255	@ 0xff
 8003130:	d802      	bhi.n	8003138 <HAL_GPIO_Init+0x14c>
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	e002      	b.n	800313e <HAL_GPIO_Init+0x152>
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	3b08      	subs	r3, #8
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	210f      	movs	r1, #15
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	431a      	orrs	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80b1 	beq.w	80032ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800316c:	4b4d      	ldr	r3, [pc, #308]	@ (80032a4 <HAL_GPIO_Init+0x2b8>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4a4c      	ldr	r2, [pc, #304]	@ (80032a4 <HAL_GPIO_Init+0x2b8>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6193      	str	r3, [r2, #24]
 8003178:	4b4a      	ldr	r3, [pc, #296]	@ (80032a4 <HAL_GPIO_Init+0x2b8>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003184:	4a48      	ldr	r2, [pc, #288]	@ (80032a8 <HAL_GPIO_Init+0x2bc>)
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a40      	ldr	r2, [pc, #256]	@ (80032ac <HAL_GPIO_Init+0x2c0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_GPIO_Init+0x1ec>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3f      	ldr	r2, [pc, #252]	@ (80032b0 <HAL_GPIO_Init+0x2c4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00d      	beq.n	80031d4 <HAL_GPIO_Init+0x1e8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a3e      	ldr	r2, [pc, #248]	@ (80032b4 <HAL_GPIO_Init+0x2c8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <HAL_GPIO_Init+0x1e4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a3d      	ldr	r2, [pc, #244]	@ (80032b8 <HAL_GPIO_Init+0x2cc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_GPIO_Init+0x1e0>
 80031c8:	2303      	movs	r3, #3
 80031ca:	e006      	b.n	80031da <HAL_GPIO_Init+0x1ee>
 80031cc:	2304      	movs	r3, #4
 80031ce:	e004      	b.n	80031da <HAL_GPIO_Init+0x1ee>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e002      	b.n	80031da <HAL_GPIO_Init+0x1ee>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_GPIO_Init+0x1ee>
 80031d8:	2300      	movs	r3, #0
 80031da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031dc:	f002 0203 	and.w	r2, r2, #3
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	4093      	lsls	r3, r2
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031ea:	492f      	ldr	r1, [pc, #188]	@ (80032a8 <HAL_GPIO_Init+0x2bc>)
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003204:	4b2d      	ldr	r3, [pc, #180]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	492c      	ldr	r1, [pc, #176]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003212:	4b2a      	ldr	r3, [pc, #168]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	43db      	mvns	r3, r3
 800321a:	4928      	ldr	r1, [pc, #160]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800321c:	4013      	ands	r3, r2
 800321e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800322c:	4b23      	ldr	r3, [pc, #140]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	4922      	ldr	r1, [pc, #136]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
 8003238:	e006      	b.n	8003248 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	43db      	mvns	r3, r3
 8003242:	491e      	ldr	r1, [pc, #120]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003244:	4013      	ands	r3, r2
 8003246:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003254:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	4918      	ldr	r1, [pc, #96]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
 8003260:	e006      	b.n	8003270 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003262:	4b16      	ldr	r3, [pc, #88]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	43db      	mvns	r3, r3
 800326a:	4914      	ldr	r1, [pc, #80]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800326c:	4013      	ands	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d021      	beq.n	80032c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800327c:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	490e      	ldr	r1, [pc, #56]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e021      	b.n	80032ce <HAL_GPIO_Init+0x2e2>
 800328a:	bf00      	nop
 800328c:	10320000 	.word	0x10320000
 8003290:	10310000 	.word	0x10310000
 8003294:	10220000 	.word	0x10220000
 8003298:	10210000 	.word	0x10210000
 800329c:	10120000 	.word	0x10120000
 80032a0:	10110000 	.word	0x10110000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40010800 	.word	0x40010800
 80032b0:	40010c00 	.word	0x40010c00
 80032b4:	40011000 	.word	0x40011000
 80032b8:	40011400 	.word	0x40011400
 80032bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	4909      	ldr	r1, [pc, #36]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	3301      	adds	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f47f ae8e 	bne.w	8003000 <HAL_GPIO_Init+0x14>
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	372c      	adds	r7, #44	@ 0x2c
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40010400 	.word	0x40010400

080032f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e001      	b.n	8003316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	807b      	strh	r3, [r7, #2]
 800332e:	4613      	mov	r3, r2
 8003330:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003332:	787b      	ldrb	r3, [r7, #1]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003338:	887a      	ldrh	r2, [r7, #2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800333e:	e003      	b.n	8003348 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	041a      	lsls	r2, r3, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	611a      	str	r2, [r3, #16]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003364:	887a      	ldrh	r2, [r7, #2]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4013      	ands	r3, r2
 800336a:	041a      	lsls	r2, r3, #16
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	43d9      	mvns	r1, r3
 8003370:	887b      	ldrh	r3, [r7, #2]
 8003372:	400b      	ands	r3, r1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	611a      	str	r2, [r3, #16]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800338e:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800339a:	4a05      	ldr	r2, [pc, #20]	@ (80033b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f8c2 	bl	800152c <HAL_GPIO_EXTI_Callback>
  }
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40010400 	.word	0x40010400

080033b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e12b      	b.n	800361e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd ff52 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	@ 0x24
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003418:	f002 fd1e 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 800341c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4a81      	ldr	r2, [pc, #516]	@ (8003628 <HAL_I2C_Init+0x274>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d807      	bhi.n	8003438 <HAL_I2C_Init+0x84>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a80      	ldr	r2, [pc, #512]	@ (800362c <HAL_I2C_Init+0x278>)
 800342c:	4293      	cmp	r3, r2
 800342e:	bf94      	ite	ls
 8003430:	2301      	movls	r3, #1
 8003432:	2300      	movhi	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e006      	b.n	8003446 <HAL_I2C_Init+0x92>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a7d      	ldr	r2, [pc, #500]	@ (8003630 <HAL_I2C_Init+0x27c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	bf94      	ite	ls
 8003440:	2301      	movls	r3, #1
 8003442:	2300      	movhi	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0e7      	b.n	800361e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a78      	ldr	r2, [pc, #480]	@ (8003634 <HAL_I2C_Init+0x280>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0c9b      	lsrs	r3, r3, #18
 8003458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a6a      	ldr	r2, [pc, #424]	@ (8003628 <HAL_I2C_Init+0x274>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d802      	bhi.n	8003488 <HAL_I2C_Init+0xd4>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3301      	adds	r3, #1
 8003486:	e009      	b.n	800349c <HAL_I2C_Init+0xe8>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	4a69      	ldr	r2, [pc, #420]	@ (8003638 <HAL_I2C_Init+0x284>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	3301      	adds	r3, #1
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	495c      	ldr	r1, [pc, #368]	@ (8003628 <HAL_I2C_Init+0x274>)
 80034b8:	428b      	cmp	r3, r1
 80034ba:	d819      	bhi.n	80034f0 <HAL_I2C_Init+0x13c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1e59      	subs	r1, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ca:	1c59      	adds	r1, r3, #1
 80034cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034d0:	400b      	ands	r3, r1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_I2C_Init+0x138>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e59      	subs	r1, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	e051      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 80034ec:	2304      	movs	r3, #4
 80034ee:	e04f      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d111      	bne.n	800351c <HAL_I2C_Init+0x168>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1e58      	subs	r0, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	440b      	add	r3, r1
 8003506:	fbb0 f3f3 	udiv	r3, r0, r3
 800350a:	3301      	adds	r3, #1
 800350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e012      	b.n	8003542 <HAL_I2C_Init+0x18e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1e58      	subs	r0, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	0099      	lsls	r1, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003532:	3301      	adds	r3, #1
 8003534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Init+0x196>
 8003546:	2301      	movs	r3, #1
 8003548:	e022      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10e      	bne.n	8003570 <HAL_I2C_Init+0x1bc>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1e58      	subs	r0, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	440b      	add	r3, r1
 8003560:	fbb0 f3f3 	udiv	r3, r0, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800356e:	e00f      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e58      	subs	r0, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	0099      	lsls	r1, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	6809      	ldr	r1, [r1, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6911      	ldr	r1, [r2, #16]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	000186a0 	.word	0x000186a0
 800362c:	001e847f 	.word	0x001e847f
 8003630:	003d08ff 	.word	0x003d08ff
 8003634:	431bde83 	.word	0x431bde83
 8003638:	10624dd3 	.word	0x10624dd3

0800363c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364e:	2b80      	cmp	r3, #128	@ 0x80
 8003650:	d103      	bne.n	800365a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
  }
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	@ 0x28
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4603      	mov	r3, r0
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	460b      	mov	r3, r1
 8003678:	813b      	strh	r3, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003682:	f7ff f905 	bl	8002890 <HAL_GetTick>
 8003686:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b20      	cmp	r3, #32
 8003692:	f040 812e 	bne.w	80038f2 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003696:	4b99      	ldr	r3, [pc, #612]	@ (80038fc <HAL_I2C_Mem_Write_DMA+0x298>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	08db      	lsrs	r3, r3, #3
 800369c:	4a98      	ldr	r2, [pc, #608]	@ (8003900 <HAL_I2C_Mem_Write_DMA+0x29c>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0a1a      	lsrs	r2, r3, #8
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009a      	lsls	r2, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d112      	bne.n	80036e2 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
 80036e0:	e108      	b.n	80038f4 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d0df      	beq.n	80036b0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_I2C_Mem_Write_DMA+0x9a>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e0fa      	b.n	80038f4 <HAL_I2C_Mem_Write_DMA+0x290>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d007      	beq.n	8003724 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2221      	movs	r2, #33	@ 0x21
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2240      	movs	r2, #64	@ 0x40
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800374e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003754:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a68      	ldr	r2, [pc, #416]	@ (8003904 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8003764:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003766:	897a      	ldrh	r2, [r7, #10]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800376c:	893a      	ldrh	r2, [r7, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80a1 	beq.w	80038ca <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378c:	2b00      	cmp	r3, #0
 800378e:	d022      	beq.n	80037d6 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003794:	4a5c      	ldr	r2, [pc, #368]	@ (8003908 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8003796:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379c:	4a5b      	ldr	r2, [pc, #364]	@ (800390c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a4:	2200      	movs	r2, #0
 80037a6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ac:	2200      	movs	r2, #0
 80037ae:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	4619      	mov	r1, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3310      	adds	r3, #16
 80037c0:	461a      	mov	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c6:	f7ff f9f9 	bl	8002bbc <HAL_DMA_Start_IT>
 80037ca:	4603      	mov	r3, r0
 80037cc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80037ce:	7efb      	ldrb	r3, [r7, #27]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d166      	bne.n	80038a2 <HAL_I2C_Mem_Write_DMA+0x23e>
 80037d4:	e013      	b.n	80037fe <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e07a      	b.n	80038f4 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80037fe:	88f8      	ldrh	r0, [r7, #6]
 8003800:	893a      	ldrh	r2, [r7, #8]
 8003802:	8979      	ldrh	r1, [r7, #10]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	2323      	movs	r3, #35	@ 0x23
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	4603      	mov	r3, r0
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f001 fb32 	bl	8004e78 <I2C_RequestMemoryWrite>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d022      	beq.n	8003860 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fa2c 	bl	8002c7c <HAL_DMA_Abort_IT>
 8003824:	4603      	mov	r3, r0
 8003826:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382c:	2200      	movs	r2, #0
 800382e:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e049      	b.n	80038f4 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800388c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800389c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e028      	b.n	80038f4 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e014      	b.n	80038f4 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3720      	adds	r7, #32
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000010 	.word	0x20000010
 8003900:	14f8b589 	.word	0x14f8b589
 8003904:	ffff0000 	.word	0xffff0000
 8003908:	08004fa5 	.word	0x08004fa5
 800390c:	0800514f 	.word	0x0800514f

08003910 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003930:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003938:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b10      	cmp	r3, #16
 800393e:	d003      	beq.n	8003948 <HAL_I2C_EV_IRQHandler+0x38>
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	f040 80b1 	bne.w	8003aaa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10d      	bne.n	800397e <HAL_I2C_EV_IRQHandler+0x6e>
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003968:	d003      	beq.n	8003972 <HAL_I2C_EV_IRQHandler+0x62>
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003970:	d101      	bne.n	8003976 <HAL_I2C_EV_IRQHandler+0x66>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_I2C_EV_IRQHandler+0x68>
 8003976:	2300      	movs	r3, #0
 8003978:	2b01      	cmp	r3, #1
 800397a:	f000 8114 	beq.w	8003ba6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x90>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f001 fe7c 	bl	8005690 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fcbd 	bl	8004318 <I2C_Master_SB>
 800399e:	e083      	b.n	8003aa8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_I2C_EV_IRQHandler+0xac>
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fd34 	bl	8004422 <I2C_Master_ADD10>
 80039ba:	e075      	b.n	8003aa8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_I2C_EV_IRQHandler+0xc8>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fd4f 	bl	8004474 <I2C_Master_ADDR>
 80039d6:	e067      	b.n	8003aa8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d036      	beq.n	8003a50 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f0:	f000 80db 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <HAL_I2C_EV_IRQHandler+0x10a>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_I2C_EV_IRQHandler+0x10a>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f931 	bl	8003c7a <I2C_MasterTransmit_TXE>
 8003a18:	e046      	b.n	8003aa8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80c2 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80bc 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a32:	7bbb      	ldrb	r3, [r7, #14]
 8003a34:	2b21      	cmp	r3, #33	@ 0x21
 8003a36:	d103      	bne.n	8003a40 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f9ba 	bl	8003db2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a3e:	e0b4      	b.n	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b40      	cmp	r3, #64	@ 0x40
 8003a44:	f040 80b1 	bne.w	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fa28 	bl	8003e9e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4e:	e0ac      	b.n	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a5e:	f000 80a4 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00d      	beq.n	8003a88 <HAL_I2C_EV_IRQHandler+0x178>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_I2C_EV_IRQHandler+0x178>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d103      	bne.n	8003a88 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 faa4 	bl	8003fce <I2C_MasterReceive_RXNE>
 8003a86:	e00f      	b.n	8003aa8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 808b 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8085 	beq.w	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fb4f 	bl	8004144 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa6:	e080      	b.n	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
 8003aa8:	e07f      	b.n	8003baa <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	e007      	b.n	8003acc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <HAL_I2C_EV_IRQHandler+0x1ea>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 ff15 	bl	8004922 <I2C_Slave_ADDR>
 8003af8:	e05a      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0x206>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 ff50 	bl	80049b4 <I2C_Slave_STOPF>
 8003b14:	e04c      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b16:	7bbb      	ldrb	r3, [r7, #14]
 8003b18:	2b21      	cmp	r3, #33	@ 0x21
 8003b1a:	d002      	beq.n	8003b22 <HAL_I2C_EV_IRQHandler+0x212>
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	2b29      	cmp	r3, #41	@ 0x29
 8003b20:	d120      	bne.n	8003b64 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <HAL_I2C_EV_IRQHandler+0x238>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_I2C_EV_IRQHandler+0x238>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d103      	bne.n	8003b48 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fe32 	bl	80047aa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b46:	e032      	b.n	8003bae <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02d      	beq.n	8003bae <HAL_I2C_EV_IRQHandler+0x29e>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d028      	beq.n	8003bae <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fe61 	bl	8004824 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b62:	e024      	b.n	8003bae <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <HAL_I2C_EV_IRQHandler+0x27a>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_I2C_EV_IRQHandler+0x27a>
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fe6e 	bl	8004864 <I2C_SlaveReceive_RXNE>
 8003b88:	e012      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fe9e 	bl	80048e0 <I2C_SlaveReceive_BTF>
 8003ba4:	e004      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c6e:	b2db      	uxtb	r3, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c88:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c90:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d150      	bne.n	8003d42 <I2C_MasterTransmit_TXE+0xc8>
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b21      	cmp	r3, #33	@ 0x21
 8003ca4:	d14d      	bne.n	8003d42 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d01d      	beq.n	8003ce8 <I2C_MasterTransmit_TXE+0x6e>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d01a      	beq.n	8003ce8 <I2C_MasterTransmit_TXE+0x6e>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cb8:	d016      	beq.n	8003ce8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cc8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2211      	movs	r2, #17
 8003cce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff68 	bl	8003bb6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ce6:	e060      	b.n	8003daa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cf6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d06:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b40      	cmp	r3, #64	@ 0x40
 8003d20:	d107      	bne.n	8003d32 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe f8ba 	bl	8001ea4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d30:	e03b      	b.n	8003daa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ff3b 	bl	8003bb6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d40:	e033      	b.n	8003daa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b21      	cmp	r3, #33	@ 0x21
 8003d46:	d005      	beq.n	8003d54 <I2C_MasterTransmit_TXE+0xda>
 8003d48:	7bbb      	ldrb	r3, [r7, #14]
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d12d      	bne.n	8003daa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b22      	cmp	r3, #34	@ 0x22
 8003d52:	d12a      	bne.n	8003daa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d6e:	e01c      	b.n	8003daa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	d103      	bne.n	8003d84 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f88e 	bl	8003e9e <I2C_MemoryTransmit_TXE_BTF>
}
 8003d82:	e012      	b.n	8003daa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003da8:	e7ff      	b.n	8003daa <I2C_MasterTransmit_TXE+0x130>
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b21      	cmp	r3, #33	@ 0x21
 8003dca:	d164      	bne.n	8003e96 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003dfa:	e04c      	b.n	8003e96 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d01d      	beq.n	8003e3e <I2C_MasterTransmit_BTF+0x8c>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d01a      	beq.n	8003e3e <I2C_MasterTransmit_BTF+0x8c>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e0e:	d016      	beq.n	8003e3e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e1e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2211      	movs	r2, #17
 8003e24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff febd 	bl	8003bb6 <HAL_I2C_MasterTxCpltCallback>
}
 8003e3c:	e02b      	b.n	8003e96 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e4c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b40      	cmp	r3, #64	@ 0x40
 8003e76:	d107      	bne.n	8003e88 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fe f80f 	bl	8001ea4 <HAL_I2C_MemTxCpltCallback>
}
 8003e86:	e006      	b.n	8003e96 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fe90 	bl	8003bb6 <HAL_I2C_MasterTxCpltCallback>
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11d      	bne.n	8003ef2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d10b      	bne.n	8003ed6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003ed4:	e077      	b.n	8003fc6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	121b      	asrs	r3, r3, #8
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ef0:	e069      	b.n	8003fc6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10b      	bne.n	8003f12 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f10:	e059      	b.n	8003fc6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d152      	bne.n	8003fc0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b22      	cmp	r3, #34	@ 0x22
 8003f1e:	d10d      	bne.n	8003f3c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f2e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f3a:	e044      	b.n	8003fc6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d015      	beq.n	8003f72 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b21      	cmp	r3, #33	@ 0x21
 8003f4a:	d112      	bne.n	8003f72 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f70:	e029      	b.n	8003fc6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d124      	bne.n	8003fc6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b21      	cmp	r3, #33	@ 0x21
 8003f80:	d121      	bne.n	8003fc6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f90:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fd ff73 	bl	8001ea4 <HAL_I2C_MemTxCpltCallback>
}
 8003fbe:	e002      	b.n	8003fc6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fb3b 	bl	800363c <I2C_Flush_DR>
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b22      	cmp	r3, #34	@ 0x22
 8003fe0:	f040 80ac 	bne.w	800413c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d921      	bls.n	8004036 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b03      	cmp	r3, #3
 8004020:	f040 808c 	bne.w	800413c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004032:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004034:	e082      	b.n	800413c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	2b02      	cmp	r3, #2
 800403c:	d075      	beq.n	800412a <I2C_MasterReceive_RXNE+0x15c>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d002      	beq.n	800404a <I2C_MasterReceive_RXNE+0x7c>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d16f      	bne.n	800412a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f001 fac0 	bl	80055d0 <I2C_WaitOnSTOPRequestThroughIT>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d142      	bne.n	80040dc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004064:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004074:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b40      	cmp	r3, #64	@ 0x40
 80040ae:	d10a      	bne.n	80040c6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fdb3 	bl	8003c2a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040c4:	e03a      	b.n	800413c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2212      	movs	r2, #18
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fd77 	bl	8003bc8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040da:	e02f      	b.n	800413c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fd8a 	bl	8003c3c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004128:	e008      	b.n	800413c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004138:	605a      	str	r2, [r3, #4]
}
 800413a:	e7ff      	b.n	800413c <I2C_MasterReceive_RXNE+0x16e>
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b04      	cmp	r3, #4
 800415a:	d11b      	bne.n	8004194 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004192:	e0bd      	b.n	8004310 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b03      	cmp	r3, #3
 800419c:	d129      	bne.n	80041f2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d00a      	beq.n	80041ca <I2C_MasterReceive_BTF+0x86>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d007      	beq.n	80041ca <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041f0:	e08e      	b.n	8004310 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d176      	bne.n	80042ea <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d002      	beq.n	8004208 <I2C_MasterReceive_BTF+0xc4>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b10      	cmp	r3, #16
 8004206:	d108      	bne.n	800421a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e019      	b.n	800424e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d002      	beq.n	8004226 <I2C_MasterReceive_BTF+0xe2>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d108      	bne.n	8004238 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e00a      	b.n	800424e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b10      	cmp	r3, #16
 800423c:	d007      	beq.n	800424e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80042a8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b40      	cmp	r3, #64	@ 0x40
 80042bc:	d10a      	bne.n	80042d4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fcac 	bl	8003c2a <HAL_I2C_MemRxCpltCallback>
}
 80042d2:	e01d      	b.n	8004310 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2212      	movs	r2, #18
 80042e0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff fc70 	bl	8003bc8 <HAL_I2C_MasterRxCpltCallback>
}
 80042e8:	e012      	b.n	8004310 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b40      	cmp	r3, #64	@ 0x40
 800432a:	d117      	bne.n	800435c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004344:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004346:	e067      	b.n	8004418 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	b2da      	uxtb	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	611a      	str	r2, [r3, #16]
}
 800435a:	e05d      	b.n	8004418 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004364:	d133      	bne.n	80043ce <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b21      	cmp	r3, #33	@ 0x21
 8004370:	d109      	bne.n	8004386 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004382:	611a      	str	r2, [r3, #16]
 8004384:	e008      	b.n	8004398 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439c:	2b00      	cmp	r3, #0
 800439e:	d004      	beq.n	80043aa <I2C_Master_SB+0x92>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d108      	bne.n	80043bc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d032      	beq.n	8004418 <I2C_Master_SB+0x100>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02d      	beq.n	8004418 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ca:	605a      	str	r2, [r3, #4]
}
 80043cc:	e024      	b.n	8004418 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10e      	bne.n	80043f4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	b29b      	uxth	r3, r3
 80043dc:	11db      	asrs	r3, r3, #7
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f003 0306 	and.w	r3, r3, #6
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f063 030f 	orn	r3, r3, #15
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	611a      	str	r2, [r3, #16]
}
 80043f2:	e011      	b.n	8004418 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10d      	bne.n	8004418 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	b29b      	uxth	r3, r3
 8004402:	11db      	asrs	r3, r3, #7
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f063 030e 	orn	r3, r3, #14
 8004410:	b2da      	uxtb	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	b2da      	uxtb	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443a:	2b00      	cmp	r3, #0
 800443c:	d004      	beq.n	8004448 <I2C_Master_ADD10+0x26>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	d108      	bne.n	800445a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <I2C_Master_ADD10+0x48>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004468:	605a      	str	r2, [r3, #4]
  }
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004474:	b480      	push	{r7}
 8004476:	b091      	sub	sp, #68	@ 0x44
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004482:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b22      	cmp	r3, #34	@ 0x22
 800449c:	f040 8174 	bne.w	8004788 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10f      	bne.n	80044c8 <I2C_Master_ADDR+0x54>
 80044a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d10b      	bne.n	80044c8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	e16b      	b.n	80047a0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d11d      	bne.n	800450c <I2C_Master_ADDR+0x98>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044d8:	d118      	bne.n	800450c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044fe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	651a      	str	r2, [r3, #80]	@ 0x50
 800450a:	e149      	b.n	80047a0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d113      	bne.n	800453e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e120      	b.n	8004780 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	f040 808a 	bne.w	800465e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800454a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004550:	d137      	bne.n	80045c2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004560:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004570:	d113      	bne.n	800459a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004580:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	e0f2      	b.n	8004780 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459a:	2300      	movs	r3, #0
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e0de      	b.n	8004780 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d02e      	beq.n	8004626 <I2C_Master_ADDR+0x1b2>
 80045c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d02b      	beq.n	8004626 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d0:	2b12      	cmp	r3, #18
 80045d2:	d102      	bne.n	80045da <I2C_Master_ADDR+0x166>
 80045d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d125      	bne.n	8004626 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d00e      	beq.n	80045fe <I2C_Master_ADDR+0x18a>
 80045e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d00b      	beq.n	80045fe <I2C_Master_ADDR+0x18a>
 80045e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d008      	beq.n	80045fe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e007      	b.n	800460e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800460c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	e0ac      	b.n	8004780 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004634:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e090      	b.n	8004780 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d158      	bne.n	800471a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466a:	2b04      	cmp	r3, #4
 800466c:	d021      	beq.n	80046b2 <I2C_Master_ADDR+0x23e>
 800466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004670:	2b02      	cmp	r3, #2
 8004672:	d01e      	beq.n	80046b2 <I2C_Master_ADDR+0x23e>
 8004674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004676:	2b10      	cmp	r3, #16
 8004678:	d01b      	beq.n	80046b2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004688:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e012      	b.n	80046d8 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046c0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e6:	d14b      	bne.n	8004780 <I2C_Master_ADDR+0x30c>
 80046e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046ee:	d00b      	beq.n	8004708 <I2C_Master_ADDR+0x294>
 80046f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d008      	beq.n	8004708 <I2C_Master_ADDR+0x294>
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d005      	beq.n	8004708 <I2C_Master_ADDR+0x294>
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d002      	beq.n	8004708 <I2C_Master_ADDR+0x294>
 8004702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004704:	2b20      	cmp	r3, #32
 8004706:	d13b      	bne.n	8004780 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	e032      	b.n	8004780 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004728:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004734:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004738:	d117      	bne.n	800476a <I2C_Master_ADDR+0x2f6>
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004740:	d00b      	beq.n	800475a <I2C_Master_ADDR+0x2e6>
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	2b01      	cmp	r3, #1
 8004746:	d008      	beq.n	800475a <I2C_Master_ADDR+0x2e6>
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	2b08      	cmp	r3, #8
 800474c:	d005      	beq.n	800475a <I2C_Master_ADDR+0x2e6>
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	2b10      	cmp	r3, #16
 8004752:	d002      	beq.n	800475a <I2C_Master_ADDR+0x2e6>
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	2b20      	cmp	r3, #32
 8004758:	d107      	bne.n	800476a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004768:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004786:	e00b      	b.n	80047a0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
}
 800479e:	e7ff      	b.n	80047a0 <I2C_Master_ADDR+0x32c>
 80047a0:	bf00      	nop
 80047a2:	3744      	adds	r7, #68	@ 0x44
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d02b      	beq.n	800481c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	781a      	ldrb	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d114      	bne.n	800481c <I2C_SlaveTransmit_TXE+0x72>
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	2b29      	cmp	r3, #41	@ 0x29
 80047f6:	d111      	bne.n	800481c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004806:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2221      	movs	r2, #33	@ 0x21
 800480c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2228      	movs	r2, #40	@ 0x28
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff f9df 	bl	8003bda <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d011      	beq.n	800485a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004872:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02c      	beq.n	80048d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d114      	bne.n	80048d8 <I2C_SlaveReceive_RXNE+0x74>
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048b2:	d111      	bne.n	80048d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2222      	movs	r2, #34	@ 0x22
 80048c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2228      	movs	r2, #40	@ 0x28
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff f98a 	bl	8003bec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d012      	beq.n	8004918 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800493c:	2b28      	cmp	r3, #40	@ 0x28
 800493e:	d125      	bne.n	800498c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800494e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	81bb      	strh	r3, [r7, #12]
 800496e:	e002      	b.n	8004976 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800497e:	89ba      	ldrh	r2, [r7, #12]
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff f93a 	bl	8003bfe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800498a:	e00e      	b.n	80049aa <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498c:	2300      	movs	r3, #0
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a10:	d172      	bne.n	8004af8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	2b22      	cmp	r3, #34	@ 0x22
 8004a16:	d002      	beq.n	8004a1e <I2C_Slave_STOPF+0x6a>
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a1c:	d135      	bne.n	8004a8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f043 0204 	orr.w	r2, r3, #4
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fa8e 	bl	8002f78 <HAL_DMA_GetState>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d049      	beq.n	8004af6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	4a69      	ldr	r2, [pc, #420]	@ (8004c0c <I2C_Slave_STOPF+0x258>)
 8004a68:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe f904 	bl	8002c7c <HAL_DMA_Abort_IT>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d03d      	beq.n	8004af6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a84:	4610      	mov	r0, r2
 8004a86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a88:	e035      	b.n	8004af6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004abc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fe fa58 	bl	8002f78 <HAL_DMA_GetState>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d014      	beq.n	8004af8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad2:	4a4e      	ldr	r2, [pc, #312]	@ (8004c0c <I2C_Slave_STOPF+0x258>)
 8004ad4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe f8ce 	bl	8002c7c <HAL_DMA_Abort_IT>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004af0:	4610      	mov	r0, r2
 8004af2:	4798      	blx	r3
 8004af4:	e000      	b.n	8004af8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004af6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03e      	beq.n	8004b80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d112      	bne.n	8004b36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b40:	2b40      	cmp	r3, #64	@ 0x40
 8004b42:	d112      	bne.n	8004b6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f843 	bl	8004c14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b8e:	e039      	b.n	8004c04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b94:	d109      	bne.n	8004baa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2228      	movs	r2, #40	@ 0x28
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff f821 	bl	8003bec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b28      	cmp	r3, #40	@ 0x28
 8004bb4:	d111      	bne.n	8004bda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a15      	ldr	r2, [pc, #84]	@ (8004c10 <I2C_Slave_STOPF+0x25c>)
 8004bba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff f820 	bl	8003c18 <HAL_I2C_ListenCpltCallback>
}
 8004bd8:	e014      	b.n	8004c04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bde:	2b22      	cmp	r3, #34	@ 0x22
 8004be0:	d002      	beq.n	8004be8 <I2C_Slave_STOPF+0x234>
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b22      	cmp	r3, #34	@ 0x22
 8004be6:	d10d      	bne.n	8004c04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fe fff4 	bl	8003bec <HAL_I2C_SlaveRxCpltCallback>
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	080051bd 	.word	0x080051bd
 8004c10:	ffff0000 	.word	0xffff0000

08004c14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c2c:	7bbb      	ldrb	r3, [r7, #14]
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d002      	beq.n	8004c38 <I2C_ITError+0x24>
 8004c32:	7bbb      	ldrb	r3, [r7, #14]
 8004c34:	2b40      	cmp	r3, #64	@ 0x40
 8004c36:	d10a      	bne.n	8004c4e <I2C_ITError+0x3a>
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	2b22      	cmp	r3, #34	@ 0x22
 8004c3c:	d107      	bne.n	8004c4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c54:	2b28      	cmp	r3, #40	@ 0x28
 8004c56:	d107      	bne.n	8004c68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2228      	movs	r2, #40	@ 0x28
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c66:	e015      	b.n	8004c94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c76:	d00a      	beq.n	8004c8e <I2C_ITError+0x7a>
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b60      	cmp	r3, #96	@ 0x60
 8004c7c:	d007      	beq.n	8004c8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca2:	d162      	bne.n	8004d6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d020      	beq.n	8004d04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc6:	4a6a      	ldr	r2, [pc, #424]	@ (8004e70 <I2C_ITError+0x25c>)
 8004cc8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fd ffd4 	bl	8002c7c <HAL_DMA_Abort_IT>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8089 	beq.w	8004dee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4798      	blx	r3
 8004d02:	e074      	b.n	8004dee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	4a59      	ldr	r2, [pc, #356]	@ (8004e70 <I2C_ITError+0x25c>)
 8004d0a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd ffb3 	bl	8002c7c <HAL_DMA_Abort_IT>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d068      	beq.n	8004dee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d26:	2b40      	cmp	r3, #64	@ 0x40
 8004d28:	d10b      	bne.n	8004d42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0201 	bic.w	r2, r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
 8004d68:	e041      	b.n	8004dee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b60      	cmp	r3, #96	@ 0x60
 8004d74:	d125      	bne.n	8004dc2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b40      	cmp	r3, #64	@ 0x40
 8004d90:	d10b      	bne.n	8004daa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fe ff47 	bl	8003c4e <HAL_I2C_AbortCpltCallback>
 8004dc0:	e015      	b.n	8004dee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	d10b      	bne.n	8004de8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fe ff27 	bl	8003c3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10e      	bne.n	8004e1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d113      	bne.n	8004e68 <I2C_ITError+0x254>
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b28      	cmp	r3, #40	@ 0x28
 8004e44:	d110      	bne.n	8004e68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a0a      	ldr	r2, [pc, #40]	@ (8004e74 <I2C_ITError+0x260>)
 8004e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fe fed8 	bl	8003c18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	080051bd 	.word	0x080051bd
 8004e74:	ffff0000 	.word	0xffff0000

08004e78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	813b      	strh	r3, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fa2c 	bl	800530c <I2C_WaitOnFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec8:	d103      	bne.n	8004ed2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ed0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e05f      	b.n	8004f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	492d      	ldr	r1, [pc, #180]	@ (8004fa0 <I2C_RequestMemoryWrite+0x128>)
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fa87 	bl	8005400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e04c      	b.n	8004f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f14:	6a39      	ldr	r1, [r7, #32]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fb12 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00d      	beq.n	8004f3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d107      	bne.n	8004f3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e02b      	b.n	8004f96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f44:	893b      	ldrh	r3, [r7, #8]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	611a      	str	r2, [r3, #16]
 8004f4e:	e021      	b.n	8004f94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f60:	6a39      	ldr	r1, [r7, #32]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 faec 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d107      	bne.n	8004f86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e005      	b.n	8004f96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f8a:	893b      	ldrh	r3, [r7, #8]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	00010002 	.word	0x00010002

08004fa4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fc0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004ffe:	2b21      	cmp	r3, #33	@ 0x21
 8005000:	d007      	beq.n	8005012 <I2C_DMAXferCplt+0x6e>
 8005002:	7cfb      	ldrb	r3, [r7, #19]
 8005004:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005008:	2b22      	cmp	r3, #34	@ 0x22
 800500a:	d131      	bne.n	8005070 <I2C_DMAXferCplt+0xcc>
 800500c:	7cbb      	ldrb	r3, [r7, #18]
 800500e:	2b20      	cmp	r3, #32
 8005010:	d12e      	bne.n	8005070 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005020:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	2b29      	cmp	r3, #41	@ 0x29
 800502c:	d10a      	bne.n	8005044 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2221      	movs	r2, #33	@ 0x21
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2228      	movs	r2, #40	@ 0x28
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800503c:	6978      	ldr	r0, [r7, #20]
 800503e:	f7fe fdcc 	bl	8003bda <HAL_I2C_SlaveTxCpltCallback>
 8005042:	e00c      	b.n	800505e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	2b2a      	cmp	r3, #42	@ 0x2a
 8005048:	d109      	bne.n	800505e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2222      	movs	r2, #34	@ 0x22
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2228      	movs	r2, #40	@ 0x28
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005058:	6978      	ldr	r0, [r7, #20]
 800505a:	f7fe fdc7 	bl	8003bec <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800506c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800506e:	e06a      	b.n	8005146 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d064      	beq.n	8005146 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005094:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80050a4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050ac:	d009      	beq.n	80050c2 <I2C_DMAXferCplt+0x11e>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d006      	beq.n	80050c2 <I2C_DMAXferCplt+0x11e>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80050ba:	d002      	beq.n	80050c2 <I2C_DMAXferCplt+0x11e>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d107      	bne.n	80050d2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050e0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050f0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005100:	6978      	ldr	r0, [r7, #20]
 8005102:	f7fe fd9b 	bl	8003c3c <HAL_I2C_ErrorCallback>
}
 8005106:	e01e      	b.n	8005146 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b40      	cmp	r3, #64	@ 0x40
 800511a:	d10a      	bne.n	8005132 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800512a:	6978      	ldr	r0, [r7, #20]
 800512c:	f7fe fd7d 	bl	8003c2a <HAL_I2C_MemRxCpltCallback>
}
 8005130:	e009      	b.n	8005146 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2212      	movs	r2, #18
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005140:	6978      	ldr	r0, [r7, #20]
 8005142:	f7fe fd41 	bl	8003bc8 <HAL_I2C_MasterRxCpltCallback>
}
 8005146:	bf00      	nop
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005168:	2200      	movs	r2, #0
 800516a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	2200      	movs	r2, #0
 800517a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800518a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	f043 0210 	orr.w	r2, r3, #16
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7fe fd44 	bl	8003c3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005304 <I2C_DMAAbort+0x148>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	08db      	lsrs	r3, r3, #3
 80051dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005308 <I2C_DMAAbort+0x14c>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0a1a      	lsrs	r2, r3, #8
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00da      	lsls	r2, r3, #3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005202:	e00a      	b.n	800521a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3b01      	subs	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005218:	d0ea      	beq.n	80051f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005226:	2200      	movs	r2, #0
 8005228:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005236:	2200      	movs	r2, #0
 8005238:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005248:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2200      	movs	r2, #0
 800524e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525c:	2200      	movs	r2, #0
 800525e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	2200      	movs	r2, #0
 800526e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b60      	cmp	r3, #96	@ 0x60
 800528a:	d10e      	bne.n	80052aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052a2:	6978      	ldr	r0, [r7, #20]
 80052a4:	f7fe fcd3 	bl	8003c4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052a8:	e027      	b.n	80052fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052b0:	2b28      	cmp	r3, #40	@ 0x28
 80052b2:	d117      	bne.n	80052e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2228      	movs	r2, #40	@ 0x28
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052e2:	e007      	b.n	80052f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052f4:	6978      	ldr	r0, [r7, #20]
 80052f6:	f7fe fca1 	bl	8003c3c <HAL_I2C_ErrorCallback>
}
 80052fa:	bf00      	nop
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000010 	.word	0x20000010
 8005308:	14f8b589 	.word	0x14f8b589

0800530c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800531c:	e048      	b.n	80053b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d044      	beq.n	80053b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fd fab3 	bl	8002890 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d139      	bne.n	80053b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10d      	bne.n	8005362 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	43da      	mvns	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	e00c      	b.n	800537c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	43da      	mvns	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	429a      	cmp	r2, r3
 8005380:	d116      	bne.n	80053b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e023      	b.n	80053f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10d      	bne.n	80053d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	43da      	mvns	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4013      	ands	r3, r2
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	e00c      	b.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	43da      	mvns	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4013      	ands	r3, r2
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d093      	beq.n	800531e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800540e:	e071      	b.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800541a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541e:	d123      	bne.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	f043 0204 	orr.w	r2, r3, #4
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e067      	b.n	8005538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d041      	beq.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005470:	f7fd fa0e 	bl	8002890 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d136      	bne.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	d10c      	bne.n	80054aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	43da      	mvns	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4013      	ands	r3, r2
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bf14      	ite	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	e00b      	b.n	80054c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	43da      	mvns	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d016      	beq.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e021      	b.n	8005538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d10c      	bne.n	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	43da      	mvns	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4013      	ands	r3, r2
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf14      	ite	ne
 8005510:	2301      	movne	r3, #1
 8005512:	2300      	moveq	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	e00b      	b.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	43da      	mvns	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4013      	ands	r3, r2
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	bf14      	ite	ne
 800552a:	2301      	movne	r3, #1
 800552c:	2300      	moveq	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af6d 	bne.w	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554c:	e034      	b.n	80055b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f870 	bl	8005634 <I2C_IsAcknowledgeFailed>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e034      	b.n	80055c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d028      	beq.n	80055b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fd f993 	bl	8002890 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d11d      	bne.n	80055b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	2b80      	cmp	r3, #128	@ 0x80
 8005588:	d016      	beq.n	80055b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	f043 0220 	orr.w	r2, r3, #32
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e007      	b.n	80055c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b80      	cmp	r3, #128	@ 0x80
 80055c4:	d1c3      	bne.n	800554e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80055dc:	4b13      	ldr	r3, [pc, #76]	@ (800562c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	08db      	lsrs	r3, r3, #3
 80055e2:	4a13      	ldr	r2, [pc, #76]	@ (8005630 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	0a1a      	lsrs	r2, r3, #8
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e008      	b.n	8005620 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800561c:	d0e9      	beq.n	80055f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000010 	.word	0x20000010
 8005630:	14f8b589 	.word	0x14f8b589

08005634 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800564a:	d11b      	bne.n	8005684 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005654:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005670:	f043 0204 	orr.w	r2, r3, #4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80056a0:	d103      	bne.n	80056aa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80056a8:	e007      	b.n	80056ba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ae:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056b2:	d102      	bne.n	80056ba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2208      	movs	r2, #8
 80056b8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e272      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8087 	beq.w	80057f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e4:	4b92      	ldr	r3, [pc, #584]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d00c      	beq.n	800570a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d112      	bne.n	8005722 <HAL_RCC_OscConfig+0x5e>
 80056fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005708:	d10b      	bne.n	8005722 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570a:	4b89      	ldr	r3, [pc, #548]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d06c      	beq.n	80057f0 <HAL_RCC_OscConfig+0x12c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d168      	bne.n	80057f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e24c      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572a:	d106      	bne.n	800573a <HAL_RCC_OscConfig+0x76>
 800572c:	4b80      	ldr	r3, [pc, #512]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a7f      	ldr	r2, [pc, #508]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e02e      	b.n	8005798 <HAL_RCC_OscConfig+0xd4>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10c      	bne.n	800575c <HAL_RCC_OscConfig+0x98>
 8005742:	4b7b      	ldr	r3, [pc, #492]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a7a      	ldr	r2, [pc, #488]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	4b78      	ldr	r3, [pc, #480]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a77      	ldr	r2, [pc, #476]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005754:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e01d      	b.n	8005798 <HAL_RCC_OscConfig+0xd4>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0xbc>
 8005766:	4b72      	ldr	r3, [pc, #456]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a71      	ldr	r2, [pc, #452]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 800576c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4b6f      	ldr	r3, [pc, #444]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a6e      	ldr	r2, [pc, #440]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e00b      	b.n	8005798 <HAL_RCC_OscConfig+0xd4>
 8005780:	4b6b      	ldr	r3, [pc, #428]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a6a      	ldr	r2, [pc, #424]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	4b68      	ldr	r3, [pc, #416]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a67      	ldr	r2, [pc, #412]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005796:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d013      	beq.n	80057c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fd f876 	bl	8002890 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fd f872 	bl	8002890 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	@ 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e200      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0xe4>
 80057c6:	e014      	b.n	80057f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fd f862 	bl	8002890 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fd f85e 	bl	8002890 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	@ 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e1ec      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e2:	4b53      	ldr	r3, [pc, #332]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x10c>
 80057ee:	e000      	b.n	80057f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d063      	beq.n	80058c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800580a:	4b49      	ldr	r3, [pc, #292]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b08      	cmp	r3, #8
 8005814:	d11c      	bne.n	8005850 <HAL_RCC_OscConfig+0x18c>
 8005816:	4b46      	ldr	r3, [pc, #280]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d116      	bne.n	8005850 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005822:	4b43      	ldr	r3, [pc, #268]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_RCC_OscConfig+0x176>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d001      	beq.n	800583a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e1c0      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583a:	4b3d      	ldr	r3, [pc, #244]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4939      	ldr	r1, [pc, #228]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584e:	e03a      	b.n	80058c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005858:	4b36      	ldr	r3, [pc, #216]	@ (8005934 <HAL_RCC_OscConfig+0x270>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585e:	f7fd f817 	bl	8002890 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005866:	f7fd f813 	bl	8002890 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e1a1      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005878:	4b2d      	ldr	r3, [pc, #180]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005884:	4b2a      	ldr	r3, [pc, #168]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	4927      	ldr	r1, [pc, #156]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 8005894:	4313      	orrs	r3, r2
 8005896:	600b      	str	r3, [r1, #0]
 8005898:	e015      	b.n	80058c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800589a:	4b26      	ldr	r3, [pc, #152]	@ (8005934 <HAL_RCC_OscConfig+0x270>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fc fff6 	bl	8002890 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a8:	f7fc fff2 	bl	8002890 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e180      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03a      	beq.n	8005948 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d019      	beq.n	800590e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058da:	4b17      	ldr	r3, [pc, #92]	@ (8005938 <HAL_RCC_OscConfig+0x274>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e0:	f7fc ffd6 	bl	8002890 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e8:	f7fc ffd2 	bl	8002890 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e160      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005930 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005906:	2001      	movs	r0, #1
 8005908:	f000 face 	bl	8005ea8 <RCC_Delay>
 800590c:	e01c      	b.n	8005948 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800590e:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <HAL_RCC_OscConfig+0x274>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005914:	f7fc ffbc 	bl	8002890 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591a:	e00f      	b.n	800593c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591c:	f7fc ffb8 	bl	8002890 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d908      	bls.n	800593c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e146      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000
 8005934:	42420000 	.word	0x42420000
 8005938:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593c:	4b92      	ldr	r3, [pc, #584]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e9      	bne.n	800591c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80a6 	beq.w	8005aa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800595a:	4b8b      	ldr	r3, [pc, #556]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005966:	4b88      	ldr	r3, [pc, #544]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	4a87      	ldr	r2, [pc, #540]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005970:	61d3      	str	r3, [r2, #28]
 8005972:	4b85      	ldr	r3, [pc, #532]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005982:	4b82      	ldr	r3, [pc, #520]	@ (8005b8c <HAL_RCC_OscConfig+0x4c8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d118      	bne.n	80059c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800598e:	4b7f      	ldr	r3, [pc, #508]	@ (8005b8c <HAL_RCC_OscConfig+0x4c8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a7e      	ldr	r2, [pc, #504]	@ (8005b8c <HAL_RCC_OscConfig+0x4c8>)
 8005994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800599a:	f7fc ff79 	bl	8002890 <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a2:	f7fc ff75 	bl	8002890 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b64      	cmp	r3, #100	@ 0x64
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e103      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b4:	4b75      	ldr	r3, [pc, #468]	@ (8005b8c <HAL_RCC_OscConfig+0x4c8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0f0      	beq.n	80059a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d106      	bne.n	80059d6 <HAL_RCC_OscConfig+0x312>
 80059c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6213      	str	r3, [r2, #32]
 80059d4:	e02d      	b.n	8005a32 <HAL_RCC_OscConfig+0x36e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCC_OscConfig+0x334>
 80059de:	4b6a      	ldr	r3, [pc, #424]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	4a69      	ldr	r2, [pc, #420]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	6213      	str	r3, [r2, #32]
 80059ea:	4b67      	ldr	r3, [pc, #412]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	4a66      	ldr	r2, [pc, #408]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 80059f0:	f023 0304 	bic.w	r3, r3, #4
 80059f4:	6213      	str	r3, [r2, #32]
 80059f6:	e01c      	b.n	8005a32 <HAL_RCC_OscConfig+0x36e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d10c      	bne.n	8005a1a <HAL_RCC_OscConfig+0x356>
 8005a00:	4b61      	ldr	r3, [pc, #388]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	4a60      	ldr	r2, [pc, #384]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	6213      	str	r3, [r2, #32]
 8005a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	4a5d      	ldr	r2, [pc, #372]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	6213      	str	r3, [r2, #32]
 8005a18:	e00b      	b.n	8005a32 <HAL_RCC_OscConfig+0x36e>
 8005a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4a5a      	ldr	r2, [pc, #360]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	6213      	str	r3, [r2, #32]
 8005a26:	4b58      	ldr	r3, [pc, #352]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	4a57      	ldr	r2, [pc, #348]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a2c:	f023 0304 	bic.w	r3, r3, #4
 8005a30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d015      	beq.n	8005a66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3a:	f7fc ff29 	bl	8002890 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a40:	e00a      	b.n	8005a58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a42:	f7fc ff25 	bl	8002890 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e0b1      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ee      	beq.n	8005a42 <HAL_RCC_OscConfig+0x37e>
 8005a64:	e014      	b.n	8005a90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a66:	f7fc ff13 	bl	8002890 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6e:	f7fc ff0f 	bl	8002890 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e09b      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a84:	4b40      	ldr	r3, [pc, #256]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1ee      	bne.n	8005a6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d105      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a96:	4b3c      	ldr	r3, [pc, #240]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8087 	beq.w	8005bba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aac:	4b36      	ldr	r3, [pc, #216]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 030c 	and.w	r3, r3, #12
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d061      	beq.n	8005b7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d146      	bne.n	8005b4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac0:	4b33      	ldr	r3, [pc, #204]	@ (8005b90 <HAL_RCC_OscConfig+0x4cc>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7fc fee3 	bl	8002890 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ace:	f7fc fedf 	bl	8002890 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e06d      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae0:	4b29      	ldr	r3, [pc, #164]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1f0      	bne.n	8005ace <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af4:	d108      	bne.n	8005b08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005af6:	4b24      	ldr	r3, [pc, #144]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	4921      	ldr	r1, [pc, #132]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b08:	4b1f      	ldr	r3, [pc, #124]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a19      	ldr	r1, [r3, #32]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	491b      	ldr	r1, [pc, #108]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b20:	4b1b      	ldr	r3, [pc, #108]	@ (8005b90 <HAL_RCC_OscConfig+0x4cc>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b26:	f7fc feb3 	bl	8002890 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2e:	f7fc feaf 	bl	8002890 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e03d      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b40:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x46a>
 8005b4c:	e035      	b.n	8005bba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4e:	4b10      	ldr	r3, [pc, #64]	@ (8005b90 <HAL_RCC_OscConfig+0x4cc>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b54:	f7fc fe9c 	bl	8002890 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fc fe98 	bl	8002890 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e026      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b6e:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <HAL_RCC_OscConfig+0x4c4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x498>
 8005b7a:	e01e      	b.n	8005bba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e019      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	40007000 	.word	0x40007000
 8005b90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b94:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <HAL_RCC_OscConfig+0x500>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40021000 	.word	0x40021000

08005bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0d0      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d910      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b67      	ldr	r3, [pc, #412]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 0207 	bic.w	r2, r3, #7
 8005bf2:	4965      	ldr	r1, [pc, #404]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b63      	ldr	r3, [pc, #396]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0b8      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d020      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c24:	4b59      	ldr	r3, [pc, #356]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4a58      	ldr	r2, [pc, #352]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c3c:	4b53      	ldr	r3, [pc, #332]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4a52      	ldr	r2, [pc, #328]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005c46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c48:	4b50      	ldr	r3, [pc, #320]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	494d      	ldr	r1, [pc, #308]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d040      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6e:	4b47      	ldr	r3, [pc, #284]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d115      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07f      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d107      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c86:	4b41      	ldr	r3, [pc, #260]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e073      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c96:	4b3d      	ldr	r3, [pc, #244]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e06b      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ca6:	4b39      	ldr	r3, [pc, #228]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f023 0203 	bic.w	r2, r3, #3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4936      	ldr	r1, [pc, #216]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb8:	f7fc fdea 	bl	8002890 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc0:	f7fc fde6 	bl	8002890 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e053      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 020c 	and.w	r2, r3, #12
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1eb      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d210      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b24      	ldr	r3, [pc, #144]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 0207 	bic.w	r2, r3, #7
 8005cfe:	4922      	ldr	r1, [pc, #136]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b20      	ldr	r3, [pc, #128]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e032      	b.n	8005d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d24:	4b19      	ldr	r3, [pc, #100]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4916      	ldr	r1, [pc, #88]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d42:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	490e      	ldr	r1, [pc, #56]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d56:	f000 f821 	bl	8005d9c <HAL_RCC_GetSysClockFreq>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	091b      	lsrs	r3, r3, #4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	490a      	ldr	r1, [pc, #40]	@ (8005d90 <HAL_RCC_ClockConfig+0x1c8>)
 8005d68:	5ccb      	ldrb	r3, [r1, r3]
 8005d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6e:	4a09      	ldr	r2, [pc, #36]	@ (8005d94 <HAL_RCC_ClockConfig+0x1cc>)
 8005d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d72:	4b09      	ldr	r3, [pc, #36]	@ (8005d98 <HAL_RCC_ClockConfig+0x1d0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fc fd48 	bl	800280c <HAL_InitTick>

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40022000 	.word	0x40022000
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	0800c78c 	.word	0x0800c78c
 8005d94:	20000010 	.word	0x20000010
 8005d98:	20000014 	.word	0x20000014

08005d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	2300      	movs	r3, #0
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005db6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d002      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x30>
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d003      	beq.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x36>
 8005dca:	e027      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dcc:	4b19      	ldr	r3, [pc, #100]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dce:	613b      	str	r3, [r7, #16]
      break;
 8005dd0:	e027      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	0c9b      	lsrs	r3, r3, #18
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ddc:	5cd3      	ldrb	r3, [r2, r3]
 8005dde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d010      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005dea:	4b11      	ldr	r3, [pc, #68]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	0c5b      	lsrs	r3, r3, #17
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	4a11      	ldr	r2, [pc, #68]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005df6:	5cd3      	ldrb	r3, [r2, r3]
 8005df8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dfe:	fb03 f202 	mul.w	r2, r3, r2
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	e004      	b.n	8005e16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	613b      	str	r3, [r7, #16]
      break;
 8005e1a:	e002      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e1c:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e1e:	613b      	str	r3, [r7, #16]
      break;
 8005e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e22:	693b      	ldr	r3, [r7, #16]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40021000 	.word	0x40021000
 8005e34:	007a1200 	.word	0x007a1200
 8005e38:	0800c7a4 	.word	0x0800c7a4
 8005e3c:	0800c7b4 	.word	0x0800c7b4
 8005e40:	003d0900 	.word	0x003d0900

08005e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e48:	4b02      	ldr	r3, [pc, #8]	@ (8005e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr
 8005e54:	20000010 	.word	0x20000010

08005e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e5c:	f7ff fff2 	bl	8005e44 <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b05      	ldr	r3, [pc, #20]	@ (8005e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4903      	ldr	r1, [pc, #12]	@ (8005e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	0800c79c 	.word	0x0800c79c

08005e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e84:	f7ff ffde 	bl	8005e44 <HAL_RCC_GetHCLKFreq>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	0adb      	lsrs	r3, r3, #11
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	4903      	ldr	r1, [pc, #12]	@ (8005ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e96:	5ccb      	ldrb	r3, [r1, r3]
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	0800c79c 	.word	0x0800c79c

08005ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <RCC_Delay+0x34>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee0 <RCC_Delay+0x38>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	0a5b      	lsrs	r3, r3, #9
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ec4:	bf00      	nop
  }
  while (Delay --);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	1e5a      	subs	r2, r3, #1
 8005eca:	60fa      	str	r2, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f9      	bne.n	8005ec4 <RCC_Delay+0x1c>
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	20000010 	.word	0x20000010
 8005ee0:	10624dd3 	.word	0x10624dd3

08005ee4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e093      	b.n	8006020 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7fc fb87 	bl	8002620 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f000 fa4f 	bl	80063dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	4313      	orrs	r3, r2
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f84:	f023 030c 	bic.w	r3, r3, #12
 8005f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	031b      	lsls	r3, r3, #12
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005fc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006038:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006040:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006048:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006050:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d110      	bne.n	800607a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d102      	bne.n	8006064 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800605e:	7b7b      	ldrb	r3, [r7, #13]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d001      	beq.n	8006068 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e089      	b.n	800617c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006078:	e031      	b.n	80060de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b04      	cmp	r3, #4
 800607e:	d110      	bne.n	80060a2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d102      	bne.n	800608c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006086:	7b3b      	ldrb	r3, [r7, #12]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d001      	beq.n	8006090 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e075      	b.n	800617c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060a0:	e01d      	b.n	80060de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d108      	bne.n	80060ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d105      	bne.n	80060ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ae:	7b7b      	ldrb	r3, [r7, #13]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d102      	bne.n	80060ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060b4:	7b3b      	ldrb	r3, [r7, #12]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d001      	beq.n	80060be <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e05e      	b.n	800617c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_TIM_Encoder_Start_IT+0xc4>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d010      	beq.n	800610c <HAL_TIM_Encoder_Start_IT+0xe4>
 80060ea:	e01f      	b.n	800612c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2201      	movs	r2, #1
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 f9d3 	bl	80064a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0202 	orr.w	r2, r2, #2
 8006108:	60da      	str	r2, [r3, #12]
      break;
 800610a:	e02e      	b.n	800616a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2201      	movs	r2, #1
 8006112:	2104      	movs	r1, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f000 f9c3 	bl	80064a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0204 	orr.w	r2, r2, #4
 8006128:	60da      	str	r2, [r3, #12]
      break;
 800612a:	e01e      	b.n	800616a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2201      	movs	r2, #1
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f000 f9b3 	bl	80064a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	2104      	movs	r1, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f9ac 	bl	80064a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0202 	orr.w	r2, r2, #2
 8006156:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0204 	orr.w	r2, r2, #4
 8006166:	60da      	str	r2, [r3, #12]
      break;
 8006168:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0202 	mvn.w	r2, #2
 80061b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fb f998 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f8e9 	bl	80063a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8ef 	bl	80063b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0204 	mvn.w	r2, #4
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fb f96e 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f8bf 	bl	80063a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f8c5 	bl	80063b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b08      	cmp	r3, #8
 8006240:	d122      	bne.n	8006288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d11b      	bne.n	8006288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0208 	mvn.w	r2, #8
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb f944 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f895 	bl	80063a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f89b 	bl	80063b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b10      	cmp	r3, #16
 8006294:	d122      	bne.n	80062dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0210 	mvn.w	r2, #16
 80062ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2208      	movs	r2, #8
 80062b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fb f91a 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 80062c8:	e005      	b.n	80062d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f86b 	bl	80063a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f871 	bl	80063b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10e      	bne.n	8006308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d107      	bne.n	8006308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0201 	mvn.w	r2, #1
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f846 	bl	8006394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006312:	2b80      	cmp	r3, #128	@ 0x80
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006320:	2b80      	cmp	r3, #128	@ 0x80
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f941 	bl	80065b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633e:	2b40      	cmp	r3, #64	@ 0x40
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f835 	bl	80063ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b20      	cmp	r3, #32
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0220 	mvn.w	r2, #32
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f90c 	bl	80065a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr

080063ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr

080063dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a29      	ldr	r2, [pc, #164]	@ (8006494 <TIM_Base_SetConfig+0xb8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00b      	beq.n	800640c <TIM_Base_SetConfig+0x30>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063fa:	d007      	beq.n	800640c <TIM_Base_SetConfig+0x30>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a26      	ldr	r2, [pc, #152]	@ (8006498 <TIM_Base_SetConfig+0xbc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_Base_SetConfig+0x30>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a25      	ldr	r2, [pc, #148]	@ (800649c <TIM_Base_SetConfig+0xc0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d108      	bne.n	800641e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <TIM_Base_SetConfig+0xb8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00b      	beq.n	800643e <TIM_Base_SetConfig+0x62>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642c:	d007      	beq.n	800643e <TIM_Base_SetConfig+0x62>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <TIM_Base_SetConfig+0xbc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d003      	beq.n	800643e <TIM_Base_SetConfig+0x62>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a18      	ldr	r2, [pc, #96]	@ (800649c <TIM_Base_SetConfig+0xc0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d108      	bne.n	8006450 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a07      	ldr	r2, [pc, #28]	@ (8006494 <TIM_Base_SetConfig+0xb8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d103      	bne.n	8006484 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	615a      	str	r2, [r3, #20]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800

080064a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	2201      	movs	r2, #1
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	43db      	mvns	r3, r3
 80064c2:	401a      	ands	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	431a      	orrs	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e046      	b.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a16      	ldr	r2, [pc, #88]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800654c:	d009      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a12      	ldr	r2, [pc, #72]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a10      	ldr	r2, [pc, #64]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d10c      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4313      	orrs	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800

080065a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr

080065b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e042      	b.n	8006660 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fc f886 	bl	8002700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2224      	movs	r2, #36	@ 0x24
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800660a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f91d 	bl	800684c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	@ 0x28
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b20      	cmp	r3, #32
 8006686:	d16d      	bne.n	8006764 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_UART_Transmit+0x2c>
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e066      	b.n	8006766 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2221      	movs	r2, #33	@ 0x21
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066a6:	f7fc f8f3 	bl	8002890 <HAL_GetTick>
 80066aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c0:	d108      	bne.n	80066d4 <HAL_UART_Transmit+0x6c>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e003      	b.n	80066dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066dc:	e02a      	b.n	8006734 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2200      	movs	r2, #0
 80066e6:	2180      	movs	r1, #128	@ 0x80
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f840 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e036      	b.n	8006766 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800670c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	3302      	adds	r3, #2
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	e007      	b.n	8006726 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	3301      	adds	r3, #1
 8006724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1cf      	bne.n	80066de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2200      	movs	r2, #0
 8006746:	2140      	movs	r1, #64	@ 0x40
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f810 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e006      	b.n	8006766 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	e000      	b.n	8006766 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006764:	2302      	movs	r3, #2
  }
}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b090      	sub	sp, #64	@ 0x40
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4613      	mov	r3, r2
 800677c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677e:	e050      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d04c      	beq.n	8006822 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x30>
 800678e:	f7fc f87f 	bl	8002890 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800679a:	429a      	cmp	r2, r3
 800679c:	d241      	bcs.n	8006822 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067be:	637a      	str	r2, [r7, #52]	@ 0x34
 80067c0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80067cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e5      	bne.n	800679e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3314      	adds	r3, #20
 80067d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	613b      	str	r3, [r7, #16]
   return(result);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067f2:	623a      	str	r2, [r7, #32]
 80067f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	69f9      	ldr	r1, [r7, #28]
 80067f8:	6a3a      	ldr	r2, [r7, #32]
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e5      	bne.n	80067d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e00f      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4013      	ands	r3, r2
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	429a      	cmp	r2, r3
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	429a      	cmp	r2, r3
 800683e:	d09f      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3740      	adds	r7, #64	@ 0x40
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006886:	f023 030c 	bic.w	r3, r3, #12
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	430b      	orrs	r3, r1
 8006892:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006960 <UART_SetConfig+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d103      	bne.n	80068bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068b4:	f7ff fae4 	bl	8005e80 <HAL_RCC_GetPCLK2Freq>
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	e002      	b.n	80068c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068bc:	f7ff facc 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 80068c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009a      	lsls	r2, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	4a22      	ldr	r2, [pc, #136]	@ (8006964 <UART_SetConfig+0x118>)
 80068da:	fba2 2303 	umull	r2, r3, r2, r3
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	0119      	lsls	r1, r3, #4
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009a      	lsls	r2, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006964 <UART_SetConfig+0x118>)
 80068fa:	fba3 0302 	umull	r0, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	2064      	movs	r0, #100	@ 0x64
 8006902:	fb00 f303 	mul.w	r3, r0, r3
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	3332      	adds	r3, #50	@ 0x32
 800690c:	4a15      	ldr	r2, [pc, #84]	@ (8006964 <UART_SetConfig+0x118>)
 800690e:	fba2 2303 	umull	r2, r3, r2, r3
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006918:	4419      	add	r1, r3
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009a      	lsls	r2, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006930:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <UART_SetConfig+0x118>)
 8006932:	fba3 0302 	umull	r0, r3, r3, r2
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	2064      	movs	r0, #100	@ 0x64
 800693a:	fb00 f303 	mul.w	r3, r0, r3
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	3332      	adds	r3, #50	@ 0x32
 8006944:	4a07      	ldr	r2, [pc, #28]	@ (8006964 <UART_SetConfig+0x118>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	f003 020f 	and.w	r2, r3, #15
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	440a      	add	r2, r1
 8006956:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40013800 	.word	0x40013800
 8006964:	51eb851f 	.word	0x51eb851f

08006968 <__cvt>:
 8006968:	2b00      	cmp	r3, #0
 800696a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696e:	461d      	mov	r5, r3
 8006970:	bfbb      	ittet	lt
 8006972:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006976:	461d      	movlt	r5, r3
 8006978:	2300      	movge	r3, #0
 800697a:	232d      	movlt	r3, #45	@ 0x2d
 800697c:	b088      	sub	sp, #32
 800697e:	4614      	mov	r4, r2
 8006980:	bfb8      	it	lt
 8006982:	4614      	movlt	r4, r2
 8006984:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006986:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006988:	7013      	strb	r3, [r2, #0]
 800698a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800698c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006990:	f023 0820 	bic.w	r8, r3, #32
 8006994:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006998:	d005      	beq.n	80069a6 <__cvt+0x3e>
 800699a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800699e:	d100      	bne.n	80069a2 <__cvt+0x3a>
 80069a0:	3601      	adds	r6, #1
 80069a2:	2302      	movs	r3, #2
 80069a4:	e000      	b.n	80069a8 <__cvt+0x40>
 80069a6:	2303      	movs	r3, #3
 80069a8:	aa07      	add	r2, sp, #28
 80069aa:	9204      	str	r2, [sp, #16]
 80069ac:	aa06      	add	r2, sp, #24
 80069ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80069b2:	e9cd 3600 	strd	r3, r6, [sp]
 80069b6:	4622      	mov	r2, r4
 80069b8:	462b      	mov	r3, r5
 80069ba:	f001 f8f1 	bl	8007ba0 <_dtoa_r>
 80069be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069c2:	4607      	mov	r7, r0
 80069c4:	d119      	bne.n	80069fa <__cvt+0x92>
 80069c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069c8:	07db      	lsls	r3, r3, #31
 80069ca:	d50e      	bpl.n	80069ea <__cvt+0x82>
 80069cc:	eb00 0906 	add.w	r9, r0, r6
 80069d0:	2200      	movs	r2, #0
 80069d2:	2300      	movs	r3, #0
 80069d4:	4620      	mov	r0, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	f7f9 ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 80069dc:	b108      	cbz	r0, 80069e2 <__cvt+0x7a>
 80069de:	f8cd 901c 	str.w	r9, [sp, #28]
 80069e2:	2230      	movs	r2, #48	@ 0x30
 80069e4:	9b07      	ldr	r3, [sp, #28]
 80069e6:	454b      	cmp	r3, r9
 80069e8:	d31e      	bcc.n	8006a28 <__cvt+0xc0>
 80069ea:	4638      	mov	r0, r7
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80069f0:	1bdb      	subs	r3, r3, r7
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	b008      	add	sp, #32
 80069f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069fe:	eb00 0906 	add.w	r9, r0, r6
 8006a02:	d1e5      	bne.n	80069d0 <__cvt+0x68>
 8006a04:	7803      	ldrb	r3, [r0, #0]
 8006a06:	2b30      	cmp	r3, #48	@ 0x30
 8006a08:	d10a      	bne.n	8006a20 <__cvt+0xb8>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7f9 ffc9 	bl	80009a8 <__aeabi_dcmpeq>
 8006a16:	b918      	cbnz	r0, 8006a20 <__cvt+0xb8>
 8006a18:	f1c6 0601 	rsb	r6, r6, #1
 8006a1c:	f8ca 6000 	str.w	r6, [sl]
 8006a20:	f8da 3000 	ldr.w	r3, [sl]
 8006a24:	4499      	add	r9, r3
 8006a26:	e7d3      	b.n	80069d0 <__cvt+0x68>
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	9107      	str	r1, [sp, #28]
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	e7d9      	b.n	80069e4 <__cvt+0x7c>

08006a30 <__exponent>:
 8006a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a32:	2900      	cmp	r1, #0
 8006a34:	bfb6      	itet	lt
 8006a36:	232d      	movlt	r3, #45	@ 0x2d
 8006a38:	232b      	movge	r3, #43	@ 0x2b
 8006a3a:	4249      	neglt	r1, r1
 8006a3c:	2909      	cmp	r1, #9
 8006a3e:	7002      	strb	r2, [r0, #0]
 8006a40:	7043      	strb	r3, [r0, #1]
 8006a42:	dd29      	ble.n	8006a98 <__exponent+0x68>
 8006a44:	f10d 0307 	add.w	r3, sp, #7
 8006a48:	461d      	mov	r5, r3
 8006a4a:	270a      	movs	r7, #10
 8006a4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a50:	461a      	mov	r2, r3
 8006a52:	fb07 1416 	mls	r4, r7, r6, r1
 8006a56:	3430      	adds	r4, #48	@ 0x30
 8006a58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	2c63      	cmp	r4, #99	@ 0x63
 8006a60:	4631      	mov	r1, r6
 8006a62:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a66:	dcf1      	bgt.n	8006a4c <__exponent+0x1c>
 8006a68:	3130      	adds	r1, #48	@ 0x30
 8006a6a:	1e94      	subs	r4, r2, #2
 8006a6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a70:	4623      	mov	r3, r4
 8006a72:	1c41      	adds	r1, r0, #1
 8006a74:	42ab      	cmp	r3, r5
 8006a76:	d30a      	bcc.n	8006a8e <__exponent+0x5e>
 8006a78:	f10d 0309 	add.w	r3, sp, #9
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	42ac      	cmp	r4, r5
 8006a80:	bf88      	it	hi
 8006a82:	2300      	movhi	r3, #0
 8006a84:	3302      	adds	r3, #2
 8006a86:	4403      	add	r3, r0
 8006a88:	1a18      	subs	r0, r3, r0
 8006a8a:	b003      	add	sp, #12
 8006a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a96:	e7ed      	b.n	8006a74 <__exponent+0x44>
 8006a98:	2330      	movs	r3, #48	@ 0x30
 8006a9a:	3130      	adds	r1, #48	@ 0x30
 8006a9c:	7083      	strb	r3, [r0, #2]
 8006a9e:	70c1      	strb	r1, [r0, #3]
 8006aa0:	1d03      	adds	r3, r0, #4
 8006aa2:	e7f1      	b.n	8006a88 <__exponent+0x58>

08006aa4 <_printf_float>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	b091      	sub	sp, #68	@ 0x44
 8006aaa:	460c      	mov	r4, r1
 8006aac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	461f      	mov	r7, r3
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	f000 ff51 	bl	800795c <_localeconv_r>
 8006aba:	6803      	ldr	r3, [r0, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	9308      	str	r3, [sp, #32]
 8006ac0:	f7f9 fb46 	bl	8000150 <strlen>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8006acc:	9009      	str	r0, [sp, #36]	@ 0x24
 8006ace:	3307      	adds	r3, #7
 8006ad0:	f023 0307 	bic.w	r3, r3, #7
 8006ad4:	f103 0208 	add.w	r2, r3, #8
 8006ad8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006adc:	f8d4 b000 	ldr.w	fp, [r4]
 8006ae0:	f8c8 2000 	str.w	r2, [r8]
 8006ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ae8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006aec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006af2:	f04f 32ff 	mov.w	r2, #4294967295
 8006af6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006afa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006afe:	4b9c      	ldr	r3, [pc, #624]	@ (8006d70 <_printf_float+0x2cc>)
 8006b00:	f7f9 ff84 	bl	8000a0c <__aeabi_dcmpun>
 8006b04:	bb70      	cbnz	r0, 8006b64 <_printf_float+0xc0>
 8006b06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0e:	4b98      	ldr	r3, [pc, #608]	@ (8006d70 <_printf_float+0x2cc>)
 8006b10:	f7f9 ff5e 	bl	80009d0 <__aeabi_dcmple>
 8006b14:	bb30      	cbnz	r0, 8006b64 <_printf_float+0xc0>
 8006b16:	2200      	movs	r2, #0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 ff4d 	bl	80009bc <__aeabi_dcmplt>
 8006b22:	b110      	cbz	r0, 8006b2a <_printf_float+0x86>
 8006b24:	232d      	movs	r3, #45	@ 0x2d
 8006b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b2a:	4a92      	ldr	r2, [pc, #584]	@ (8006d74 <_printf_float+0x2d0>)
 8006b2c:	4b92      	ldr	r3, [pc, #584]	@ (8006d78 <_printf_float+0x2d4>)
 8006b2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b32:	bf94      	ite	ls
 8006b34:	4690      	movls	r8, r2
 8006b36:	4698      	movhi	r8, r3
 8006b38:	2303      	movs	r3, #3
 8006b3a:	f04f 0900 	mov.w	r9, #0
 8006b3e:	6123      	str	r3, [r4, #16]
 8006b40:	f02b 0304 	bic.w	r3, fp, #4
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	4633      	mov	r3, r6
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	9700      	str	r7, [sp, #0]
 8006b4e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006b50:	f000 f9d4 	bl	8006efc <_printf_common>
 8006b54:	3001      	adds	r0, #1
 8006b56:	f040 8090 	bne.w	8006c7a <_printf_float+0x1d6>
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5e:	b011      	add	sp, #68	@ 0x44
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 ff4e 	bl	8000a0c <__aeabi_dcmpun>
 8006b70:	b148      	cbz	r0, 8006b86 <_printf_float+0xe2>
 8006b72:	464b      	mov	r3, r9
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bfb8      	it	lt
 8006b78:	232d      	movlt	r3, #45	@ 0x2d
 8006b7a:	4a80      	ldr	r2, [pc, #512]	@ (8006d7c <_printf_float+0x2d8>)
 8006b7c:	bfb8      	it	lt
 8006b7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b82:	4b7f      	ldr	r3, [pc, #508]	@ (8006d80 <_printf_float+0x2dc>)
 8006b84:	e7d3      	b.n	8006b2e <_printf_float+0x8a>
 8006b86:	6863      	ldr	r3, [r4, #4]
 8006b88:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	d13f      	bne.n	8006c10 <_printf_float+0x16c>
 8006b90:	2306      	movs	r3, #6
 8006b92:	6063      	str	r3, [r4, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	9206      	str	r2, [sp, #24]
 8006b9e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ba0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006ba4:	aa0d      	add	r2, sp, #52	@ 0x34
 8006ba6:	9203      	str	r2, [sp, #12]
 8006ba8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006bac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	464b      	mov	r3, r9
 8006bba:	910a      	str	r1, [sp, #40]	@ 0x28
 8006bbc:	f7ff fed4 	bl	8006968 <__cvt>
 8006bc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bc2:	4680      	mov	r8, r0
 8006bc4:	2947      	cmp	r1, #71	@ 0x47
 8006bc6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006bc8:	d128      	bne.n	8006c1c <_printf_float+0x178>
 8006bca:	1cc8      	adds	r0, r1, #3
 8006bcc:	db02      	blt.n	8006bd4 <_printf_float+0x130>
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	4299      	cmp	r1, r3
 8006bd2:	dd40      	ble.n	8006c56 <_printf_float+0x1b2>
 8006bd4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006bd8:	fa5f fa8a 	uxtb.w	sl, sl
 8006bdc:	4652      	mov	r2, sl
 8006bde:	3901      	subs	r1, #1
 8006be0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006be4:	910d      	str	r1, [sp, #52]	@ 0x34
 8006be6:	f7ff ff23 	bl	8006a30 <__exponent>
 8006bea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bec:	4681      	mov	r9, r0
 8006bee:	1813      	adds	r3, r2, r0
 8006bf0:	2a01      	cmp	r2, #1
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	dc02      	bgt.n	8006bfc <_printf_float+0x158>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	07d2      	lsls	r2, r2, #31
 8006bfa:	d501      	bpl.n	8006c00 <_printf_float+0x15c>
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d09e      	beq.n	8006b46 <_printf_float+0xa2>
 8006c08:	232d      	movs	r3, #45	@ 0x2d
 8006c0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c0e:	e79a      	b.n	8006b46 <_printf_float+0xa2>
 8006c10:	2947      	cmp	r1, #71	@ 0x47
 8006c12:	d1bf      	bne.n	8006b94 <_printf_float+0xf0>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1bd      	bne.n	8006b94 <_printf_float+0xf0>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e7ba      	b.n	8006b92 <_printf_float+0xee>
 8006c1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c20:	d9dc      	bls.n	8006bdc <_printf_float+0x138>
 8006c22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c26:	d118      	bne.n	8006c5a <_printf_float+0x1b6>
 8006c28:	2900      	cmp	r1, #0
 8006c2a:	6863      	ldr	r3, [r4, #4]
 8006c2c:	dd0b      	ble.n	8006c46 <_printf_float+0x1a2>
 8006c2e:	6121      	str	r1, [r4, #16]
 8006c30:	b913      	cbnz	r3, 8006c38 <_printf_float+0x194>
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	07d0      	lsls	r0, r2, #31
 8006c36:	d502      	bpl.n	8006c3e <_printf_float+0x19a>
 8006c38:	3301      	adds	r3, #1
 8006c3a:	440b      	add	r3, r1
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	f04f 0900 	mov.w	r9, #0
 8006c42:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c44:	e7dc      	b.n	8006c00 <_printf_float+0x15c>
 8006c46:	b913      	cbnz	r3, 8006c4e <_printf_float+0x1aa>
 8006c48:	6822      	ldr	r2, [r4, #0]
 8006c4a:	07d2      	lsls	r2, r2, #31
 8006c4c:	d501      	bpl.n	8006c52 <_printf_float+0x1ae>
 8006c4e:	3302      	adds	r3, #2
 8006c50:	e7f4      	b.n	8006c3c <_printf_float+0x198>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e7f2      	b.n	8006c3c <_printf_float+0x198>
 8006c56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c5c:	4299      	cmp	r1, r3
 8006c5e:	db05      	blt.n	8006c6c <_printf_float+0x1c8>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	6121      	str	r1, [r4, #16]
 8006c64:	07d8      	lsls	r0, r3, #31
 8006c66:	d5ea      	bpl.n	8006c3e <_printf_float+0x19a>
 8006c68:	1c4b      	adds	r3, r1, #1
 8006c6a:	e7e7      	b.n	8006c3c <_printf_float+0x198>
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	bfcc      	ite	gt
 8006c70:	2201      	movgt	r2, #1
 8006c72:	f1c1 0202 	rsble	r2, r1, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	e7e0      	b.n	8006c3c <_printf_float+0x198>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	055a      	lsls	r2, r3, #21
 8006c7e:	d407      	bmi.n	8006c90 <_printf_float+0x1ec>
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	4642      	mov	r2, r8
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d12b      	bne.n	8006ce6 <_printf_float+0x242>
 8006c8e:	e764      	b.n	8006b5a <_printf_float+0xb6>
 8006c90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c94:	f240 80dc 	bls.w	8006e50 <_printf_float+0x3ac>
 8006c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f7f9 fe82 	bl	80009a8 <__aeabi_dcmpeq>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d033      	beq.n	8006d10 <_printf_float+0x26c>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	4a35      	ldr	r2, [pc, #212]	@ (8006d84 <_printf_float+0x2e0>)
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	f43f af51 	beq.w	8006b5a <_printf_float+0xb6>
 8006cb8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006cbc:	4543      	cmp	r3, r8
 8006cbe:	db02      	blt.n	8006cc6 <_printf_float+0x222>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	07d8      	lsls	r0, r3, #31
 8006cc4:	d50f      	bpl.n	8006ce6 <_printf_float+0x242>
 8006cc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4628      	mov	r0, r5
 8006cce:	47b8      	blx	r7
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	f43f af42 	beq.w	8006b5a <_printf_float+0xb6>
 8006cd6:	f04f 0900 	mov.w	r9, #0
 8006cda:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cde:	f104 0a1a 	add.w	sl, r4, #26
 8006ce2:	45c8      	cmp	r8, r9
 8006ce4:	dc09      	bgt.n	8006cfa <_printf_float+0x256>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	079b      	lsls	r3, r3, #30
 8006cea:	f100 8102 	bmi.w	8006ef2 <_printf_float+0x44e>
 8006cee:	68e0      	ldr	r0, [r4, #12]
 8006cf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cf2:	4298      	cmp	r0, r3
 8006cf4:	bfb8      	it	lt
 8006cf6:	4618      	movlt	r0, r3
 8006cf8:	e731      	b.n	8006b5e <_printf_float+0xba>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	4652      	mov	r2, sl
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4628      	mov	r0, r5
 8006d02:	47b8      	blx	r7
 8006d04:	3001      	adds	r0, #1
 8006d06:	f43f af28 	beq.w	8006b5a <_printf_float+0xb6>
 8006d0a:	f109 0901 	add.w	r9, r9, #1
 8006d0e:	e7e8      	b.n	8006ce2 <_printf_float+0x23e>
 8006d10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	dc38      	bgt.n	8006d88 <_printf_float+0x2e4>
 8006d16:	2301      	movs	r3, #1
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4a19      	ldr	r2, [pc, #100]	@ (8006d84 <_printf_float+0x2e0>)
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f af1a 	beq.w	8006b5a <_printf_float+0xb6>
 8006d26:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006d2a:	ea59 0303 	orrs.w	r3, r9, r3
 8006d2e:	d102      	bne.n	8006d36 <_printf_float+0x292>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	07d9      	lsls	r1, r3, #31
 8006d34:	d5d7      	bpl.n	8006ce6 <_printf_float+0x242>
 8006d36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	f43f af0a 	beq.w	8006b5a <_printf_float+0xb6>
 8006d46:	f04f 0a00 	mov.w	sl, #0
 8006d4a:	f104 0b1a 	add.w	fp, r4, #26
 8006d4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d50:	425b      	negs	r3, r3
 8006d52:	4553      	cmp	r3, sl
 8006d54:	dc01      	bgt.n	8006d5a <_printf_float+0x2b6>
 8006d56:	464b      	mov	r3, r9
 8006d58:	e793      	b.n	8006c82 <_printf_float+0x1de>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	465a      	mov	r2, fp
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	f43f aef8 	beq.w	8006b5a <_printf_float+0xb6>
 8006d6a:	f10a 0a01 	add.w	sl, sl, #1
 8006d6e:	e7ee      	b.n	8006d4e <_printf_float+0x2aa>
 8006d70:	7fefffff 	.word	0x7fefffff
 8006d74:	0800c7b6 	.word	0x0800c7b6
 8006d78:	0800c7ba 	.word	0x0800c7ba
 8006d7c:	0800c7be 	.word	0x0800c7be
 8006d80:	0800c7c2 	.word	0x0800c7c2
 8006d84:	0800c7c6 	.word	0x0800c7c6
 8006d88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d8a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d8e:	4553      	cmp	r3, sl
 8006d90:	bfa8      	it	ge
 8006d92:	4653      	movge	r3, sl
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	4699      	mov	r9, r3
 8006d98:	dc36      	bgt.n	8006e08 <_printf_float+0x364>
 8006d9a:	f04f 0b00 	mov.w	fp, #0
 8006d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da2:	f104 021a 	add.w	r2, r4, #26
 8006da6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006daa:	eba3 0309 	sub.w	r3, r3, r9
 8006dae:	455b      	cmp	r3, fp
 8006db0:	dc31      	bgt.n	8006e16 <_printf_float+0x372>
 8006db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006db4:	459a      	cmp	sl, r3
 8006db6:	dc3a      	bgt.n	8006e2e <_printf_float+0x38a>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	07da      	lsls	r2, r3, #31
 8006dbc:	d437      	bmi.n	8006e2e <_printf_float+0x38a>
 8006dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dc0:	ebaa 0903 	sub.w	r9, sl, r3
 8006dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dc6:	ebaa 0303 	sub.w	r3, sl, r3
 8006dca:	4599      	cmp	r9, r3
 8006dcc:	bfa8      	it	ge
 8006dce:	4699      	movge	r9, r3
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	dc33      	bgt.n	8006e3e <_printf_float+0x39a>
 8006dd6:	f04f 0800 	mov.w	r8, #0
 8006dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dde:	f104 0b1a 	add.w	fp, r4, #26
 8006de2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006de4:	ebaa 0303 	sub.w	r3, sl, r3
 8006de8:	eba3 0309 	sub.w	r3, r3, r9
 8006dec:	4543      	cmp	r3, r8
 8006dee:	f77f af7a 	ble.w	8006ce6 <_printf_float+0x242>
 8006df2:	2301      	movs	r3, #1
 8006df4:	465a      	mov	r2, fp
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b8      	blx	r7
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	f43f aeac 	beq.w	8006b5a <_printf_float+0xb6>
 8006e02:	f108 0801 	add.w	r8, r8, #1
 8006e06:	e7ec      	b.n	8006de2 <_printf_float+0x33e>
 8006e08:	4642      	mov	r2, r8
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	d1c2      	bne.n	8006d9a <_printf_float+0x2f6>
 8006e14:	e6a1      	b.n	8006b5a <_printf_float+0xb6>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f ae9a 	beq.w	8006b5a <_printf_float+0xb6>
 8006e26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e28:	f10b 0b01 	add.w	fp, fp, #1
 8006e2c:	e7bb      	b.n	8006da6 <_printf_float+0x302>
 8006e2e:	4631      	mov	r1, r6
 8006e30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d1c0      	bne.n	8006dbe <_printf_float+0x31a>
 8006e3c:	e68d      	b.n	8006b5a <_printf_float+0xb6>
 8006e3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e40:	464b      	mov	r3, r9
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	4442      	add	r2, r8
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d1c3      	bne.n	8006dd6 <_printf_float+0x332>
 8006e4e:	e684      	b.n	8006b5a <_printf_float+0xb6>
 8006e50:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e54:	f1ba 0f01 	cmp.w	sl, #1
 8006e58:	dc01      	bgt.n	8006e5e <_printf_float+0x3ba>
 8006e5a:	07db      	lsls	r3, r3, #31
 8006e5c:	d536      	bpl.n	8006ecc <_printf_float+0x428>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4642      	mov	r2, r8
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f43f ae76 	beq.w	8006b5a <_printf_float+0xb6>
 8006e6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f43f ae6e 	beq.w	8006b5a <_printf_float+0xb6>
 8006e7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e82:	2200      	movs	r2, #0
 8006e84:	2300      	movs	r3, #0
 8006e86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e8a:	f7f9 fd8d 	bl	80009a8 <__aeabi_dcmpeq>
 8006e8e:	b9c0      	cbnz	r0, 8006ec2 <_printf_float+0x41e>
 8006e90:	4653      	mov	r3, sl
 8006e92:	f108 0201 	add.w	r2, r8, #1
 8006e96:	4631      	mov	r1, r6
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b8      	blx	r7
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d10c      	bne.n	8006eba <_printf_float+0x416>
 8006ea0:	e65b      	b.n	8006b5a <_printf_float+0xb6>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	465a      	mov	r2, fp
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f ae54 	beq.w	8006b5a <_printf_float+0xb6>
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	45d0      	cmp	r8, sl
 8006eb8:	dbf3      	blt.n	8006ea2 <_printf_float+0x3fe>
 8006eba:	464b      	mov	r3, r9
 8006ebc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ec0:	e6e0      	b.n	8006c84 <_printf_float+0x1e0>
 8006ec2:	f04f 0800 	mov.w	r8, #0
 8006ec6:	f104 0b1a 	add.w	fp, r4, #26
 8006eca:	e7f4      	b.n	8006eb6 <_printf_float+0x412>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4642      	mov	r2, r8
 8006ed0:	e7e1      	b.n	8006e96 <_printf_float+0x3f2>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	464a      	mov	r2, r9
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f ae3c 	beq.w	8006b5a <_printf_float+0xb6>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	68e3      	ldr	r3, [r4, #12]
 8006ee8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006eea:	1a5b      	subs	r3, r3, r1
 8006eec:	4543      	cmp	r3, r8
 8006eee:	dcf0      	bgt.n	8006ed2 <_printf_float+0x42e>
 8006ef0:	e6fd      	b.n	8006cee <_printf_float+0x24a>
 8006ef2:	f04f 0800 	mov.w	r8, #0
 8006ef6:	f104 0919 	add.w	r9, r4, #25
 8006efa:	e7f4      	b.n	8006ee6 <_printf_float+0x442>

08006efc <_printf_common>:
 8006efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f00:	4616      	mov	r6, r2
 8006f02:	4698      	mov	r8, r3
 8006f04:	688a      	ldr	r2, [r1, #8]
 8006f06:	690b      	ldr	r3, [r1, #16]
 8006f08:	4607      	mov	r7, r0
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	bfb8      	it	lt
 8006f0e:	4613      	movlt	r3, r2
 8006f10:	6033      	str	r3, [r6, #0]
 8006f12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f16:	460c      	mov	r4, r1
 8006f18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f1c:	b10a      	cbz	r2, 8006f22 <_printf_common+0x26>
 8006f1e:	3301      	adds	r3, #1
 8006f20:	6033      	str	r3, [r6, #0]
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	0699      	lsls	r1, r3, #26
 8006f26:	bf42      	ittt	mi
 8006f28:	6833      	ldrmi	r3, [r6, #0]
 8006f2a:	3302      	addmi	r3, #2
 8006f2c:	6033      	strmi	r3, [r6, #0]
 8006f2e:	6825      	ldr	r5, [r4, #0]
 8006f30:	f015 0506 	ands.w	r5, r5, #6
 8006f34:	d106      	bne.n	8006f44 <_printf_common+0x48>
 8006f36:	f104 0a19 	add.w	sl, r4, #25
 8006f3a:	68e3      	ldr	r3, [r4, #12]
 8006f3c:	6832      	ldr	r2, [r6, #0]
 8006f3e:	1a9b      	subs	r3, r3, r2
 8006f40:	42ab      	cmp	r3, r5
 8006f42:	dc2b      	bgt.n	8006f9c <_printf_common+0xa0>
 8006f44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f48:	6822      	ldr	r2, [r4, #0]
 8006f4a:	3b00      	subs	r3, #0
 8006f4c:	bf18      	it	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	0692      	lsls	r2, r2, #26
 8006f52:	d430      	bmi.n	8006fb6 <_printf_common+0xba>
 8006f54:	4641      	mov	r1, r8
 8006f56:	4638      	mov	r0, r7
 8006f58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f5c:	47c8      	blx	r9
 8006f5e:	3001      	adds	r0, #1
 8006f60:	d023      	beq.n	8006faa <_printf_common+0xae>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	6922      	ldr	r2, [r4, #16]
 8006f66:	f003 0306 	and.w	r3, r3, #6
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	bf14      	ite	ne
 8006f6e:	2500      	movne	r5, #0
 8006f70:	6833      	ldreq	r3, [r6, #0]
 8006f72:	f04f 0600 	mov.w	r6, #0
 8006f76:	bf08      	it	eq
 8006f78:	68e5      	ldreq	r5, [r4, #12]
 8006f7a:	f104 041a 	add.w	r4, r4, #26
 8006f7e:	bf08      	it	eq
 8006f80:	1aed      	subeq	r5, r5, r3
 8006f82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f86:	bf08      	it	eq
 8006f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	bfc4      	itt	gt
 8006f90:	1a9b      	subgt	r3, r3, r2
 8006f92:	18ed      	addgt	r5, r5, r3
 8006f94:	42b5      	cmp	r5, r6
 8006f96:	d11a      	bne.n	8006fce <_printf_common+0xd2>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	e008      	b.n	8006fae <_printf_common+0xb2>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	4652      	mov	r2, sl
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	47c8      	blx	r9
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d103      	bne.n	8006fb2 <_printf_common+0xb6>
 8006faa:	f04f 30ff 	mov.w	r0, #4294967295
 8006fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb2:	3501      	adds	r5, #1
 8006fb4:	e7c1      	b.n	8006f3a <_printf_common+0x3e>
 8006fb6:	2030      	movs	r0, #48	@ 0x30
 8006fb8:	18e1      	adds	r1, r4, r3
 8006fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fc4:	4422      	add	r2, r4
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fcc:	e7c2      	b.n	8006f54 <_printf_common+0x58>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	47c8      	blx	r9
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d0e6      	beq.n	8006faa <_printf_common+0xae>
 8006fdc:	3601      	adds	r6, #1
 8006fde:	e7d9      	b.n	8006f94 <_printf_common+0x98>

08006fe0 <_printf_i>:
 8006fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	7e0f      	ldrb	r7, [r1, #24]
 8006fe6:	4691      	mov	r9, r2
 8006fe8:	2f78      	cmp	r7, #120	@ 0x78
 8006fea:	4680      	mov	r8, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	469a      	mov	sl, r3
 8006ff0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ff6:	d807      	bhi.n	8007008 <_printf_i+0x28>
 8006ff8:	2f62      	cmp	r7, #98	@ 0x62
 8006ffa:	d80a      	bhi.n	8007012 <_printf_i+0x32>
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	f000 80d3 	beq.w	80071a8 <_printf_i+0x1c8>
 8007002:	2f58      	cmp	r7, #88	@ 0x58
 8007004:	f000 80ba 	beq.w	800717c <_printf_i+0x19c>
 8007008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800700c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007010:	e03a      	b.n	8007088 <_printf_i+0xa8>
 8007012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007016:	2b15      	cmp	r3, #21
 8007018:	d8f6      	bhi.n	8007008 <_printf_i+0x28>
 800701a:	a101      	add	r1, pc, #4	@ (adr r1, 8007020 <_printf_i+0x40>)
 800701c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007020:	08007079 	.word	0x08007079
 8007024:	0800708d 	.word	0x0800708d
 8007028:	08007009 	.word	0x08007009
 800702c:	08007009 	.word	0x08007009
 8007030:	08007009 	.word	0x08007009
 8007034:	08007009 	.word	0x08007009
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08007009 	.word	0x08007009
 8007040:	08007009 	.word	0x08007009
 8007044:	08007009 	.word	0x08007009
 8007048:	08007009 	.word	0x08007009
 800704c:	0800718f 	.word	0x0800718f
 8007050:	080070b7 	.word	0x080070b7
 8007054:	08007149 	.word	0x08007149
 8007058:	08007009 	.word	0x08007009
 800705c:	08007009 	.word	0x08007009
 8007060:	080071b1 	.word	0x080071b1
 8007064:	08007009 	.word	0x08007009
 8007068:	080070b7 	.word	0x080070b7
 800706c:	08007009 	.word	0x08007009
 8007070:	08007009 	.word	0x08007009
 8007074:	08007151 	.word	0x08007151
 8007078:	6833      	ldr	r3, [r6, #0]
 800707a:	1d1a      	adds	r2, r3, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6032      	str	r2, [r6, #0]
 8007080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007088:	2301      	movs	r3, #1
 800708a:	e09e      	b.n	80071ca <_printf_i+0x1ea>
 800708c:	6833      	ldr	r3, [r6, #0]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	6031      	str	r1, [r6, #0]
 8007094:	0606      	lsls	r6, r0, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0xbc>
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	e003      	b.n	80070a4 <_printf_i+0xc4>
 800709c:	0645      	lsls	r5, r0, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0xb8>
 80070a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070a4:	2d00      	cmp	r5, #0
 80070a6:	da03      	bge.n	80070b0 <_printf_i+0xd0>
 80070a8:	232d      	movs	r3, #45	@ 0x2d
 80070aa:	426d      	negs	r5, r5
 80070ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070b0:	230a      	movs	r3, #10
 80070b2:	4859      	ldr	r0, [pc, #356]	@ (8007218 <_printf_i+0x238>)
 80070b4:	e011      	b.n	80070da <_printf_i+0xfa>
 80070b6:	6821      	ldr	r1, [r4, #0]
 80070b8:	6833      	ldr	r3, [r6, #0]
 80070ba:	0608      	lsls	r0, r1, #24
 80070bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80070c0:	d402      	bmi.n	80070c8 <_printf_i+0xe8>
 80070c2:	0649      	lsls	r1, r1, #25
 80070c4:	bf48      	it	mi
 80070c6:	b2ad      	uxthmi	r5, r5
 80070c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80070ca:	6033      	str	r3, [r6, #0]
 80070cc:	bf14      	ite	ne
 80070ce:	230a      	movne	r3, #10
 80070d0:	2308      	moveq	r3, #8
 80070d2:	4851      	ldr	r0, [pc, #324]	@ (8007218 <_printf_i+0x238>)
 80070d4:	2100      	movs	r1, #0
 80070d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070da:	6866      	ldr	r6, [r4, #4]
 80070dc:	2e00      	cmp	r6, #0
 80070de:	bfa8      	it	ge
 80070e0:	6821      	ldrge	r1, [r4, #0]
 80070e2:	60a6      	str	r6, [r4, #8]
 80070e4:	bfa4      	itt	ge
 80070e6:	f021 0104 	bicge.w	r1, r1, #4
 80070ea:	6021      	strge	r1, [r4, #0]
 80070ec:	b90d      	cbnz	r5, 80070f2 <_printf_i+0x112>
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	d04b      	beq.n	800718a <_printf_i+0x1aa>
 80070f2:	4616      	mov	r6, r2
 80070f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80070f8:	fb03 5711 	mls	r7, r3, r1, r5
 80070fc:	5dc7      	ldrb	r7, [r0, r7]
 80070fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007102:	462f      	mov	r7, r5
 8007104:	42bb      	cmp	r3, r7
 8007106:	460d      	mov	r5, r1
 8007108:	d9f4      	bls.n	80070f4 <_printf_i+0x114>
 800710a:	2b08      	cmp	r3, #8
 800710c:	d10b      	bne.n	8007126 <_printf_i+0x146>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	07df      	lsls	r7, r3, #31
 8007112:	d508      	bpl.n	8007126 <_printf_i+0x146>
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	6861      	ldr	r1, [r4, #4]
 8007118:	4299      	cmp	r1, r3
 800711a:	bfde      	ittt	le
 800711c:	2330      	movle	r3, #48	@ 0x30
 800711e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007122:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007126:	1b92      	subs	r2, r2, r6
 8007128:	6122      	str	r2, [r4, #16]
 800712a:	464b      	mov	r3, r9
 800712c:	4621      	mov	r1, r4
 800712e:	4640      	mov	r0, r8
 8007130:	f8cd a000 	str.w	sl, [sp]
 8007134:	aa03      	add	r2, sp, #12
 8007136:	f7ff fee1 	bl	8006efc <_printf_common>
 800713a:	3001      	adds	r0, #1
 800713c:	d14a      	bne.n	80071d4 <_printf_i+0x1f4>
 800713e:	f04f 30ff 	mov.w	r0, #4294967295
 8007142:	b004      	add	sp, #16
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	f043 0320 	orr.w	r3, r3, #32
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	2778      	movs	r7, #120	@ 0x78
 8007152:	4832      	ldr	r0, [pc, #200]	@ (800721c <_printf_i+0x23c>)
 8007154:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	6831      	ldr	r1, [r6, #0]
 800715c:	061f      	lsls	r7, r3, #24
 800715e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007162:	d402      	bmi.n	800716a <_printf_i+0x18a>
 8007164:	065f      	lsls	r7, r3, #25
 8007166:	bf48      	it	mi
 8007168:	b2ad      	uxthmi	r5, r5
 800716a:	6031      	str	r1, [r6, #0]
 800716c:	07d9      	lsls	r1, r3, #31
 800716e:	bf44      	itt	mi
 8007170:	f043 0320 	orrmi.w	r3, r3, #32
 8007174:	6023      	strmi	r3, [r4, #0]
 8007176:	b11d      	cbz	r5, 8007180 <_printf_i+0x1a0>
 8007178:	2310      	movs	r3, #16
 800717a:	e7ab      	b.n	80070d4 <_printf_i+0xf4>
 800717c:	4826      	ldr	r0, [pc, #152]	@ (8007218 <_printf_i+0x238>)
 800717e:	e7e9      	b.n	8007154 <_printf_i+0x174>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	f023 0320 	bic.w	r3, r3, #32
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	e7f6      	b.n	8007178 <_printf_i+0x198>
 800718a:	4616      	mov	r6, r2
 800718c:	e7bd      	b.n	800710a <_printf_i+0x12a>
 800718e:	6833      	ldr	r3, [r6, #0]
 8007190:	6825      	ldr	r5, [r4, #0]
 8007192:	1d18      	adds	r0, r3, #4
 8007194:	6961      	ldr	r1, [r4, #20]
 8007196:	6030      	str	r0, [r6, #0]
 8007198:	062e      	lsls	r6, r5, #24
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	d501      	bpl.n	80071a2 <_printf_i+0x1c2>
 800719e:	6019      	str	r1, [r3, #0]
 80071a0:	e002      	b.n	80071a8 <_printf_i+0x1c8>
 80071a2:	0668      	lsls	r0, r5, #25
 80071a4:	d5fb      	bpl.n	800719e <_printf_i+0x1be>
 80071a6:	8019      	strh	r1, [r3, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	4616      	mov	r6, r2
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	e7bc      	b.n	800712a <_printf_i+0x14a>
 80071b0:	6833      	ldr	r3, [r6, #0]
 80071b2:	2100      	movs	r1, #0
 80071b4:	1d1a      	adds	r2, r3, #4
 80071b6:	6032      	str	r2, [r6, #0]
 80071b8:	681e      	ldr	r6, [r3, #0]
 80071ba:	6862      	ldr	r2, [r4, #4]
 80071bc:	4630      	mov	r0, r6
 80071be:	f000 fc44 	bl	8007a4a <memchr>
 80071c2:	b108      	cbz	r0, 80071c8 <_printf_i+0x1e8>
 80071c4:	1b80      	subs	r0, r0, r6
 80071c6:	6060      	str	r0, [r4, #4]
 80071c8:	6863      	ldr	r3, [r4, #4]
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	2300      	movs	r3, #0
 80071ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d2:	e7aa      	b.n	800712a <_printf_i+0x14a>
 80071d4:	4632      	mov	r2, r6
 80071d6:	4649      	mov	r1, r9
 80071d8:	4640      	mov	r0, r8
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	47d0      	blx	sl
 80071de:	3001      	adds	r0, #1
 80071e0:	d0ad      	beq.n	800713e <_printf_i+0x15e>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	079b      	lsls	r3, r3, #30
 80071e6:	d413      	bmi.n	8007210 <_printf_i+0x230>
 80071e8:	68e0      	ldr	r0, [r4, #12]
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	4298      	cmp	r0, r3
 80071ee:	bfb8      	it	lt
 80071f0:	4618      	movlt	r0, r3
 80071f2:	e7a6      	b.n	8007142 <_printf_i+0x162>
 80071f4:	2301      	movs	r3, #1
 80071f6:	4632      	mov	r2, r6
 80071f8:	4649      	mov	r1, r9
 80071fa:	4640      	mov	r0, r8
 80071fc:	47d0      	blx	sl
 80071fe:	3001      	adds	r0, #1
 8007200:	d09d      	beq.n	800713e <_printf_i+0x15e>
 8007202:	3501      	adds	r5, #1
 8007204:	68e3      	ldr	r3, [r4, #12]
 8007206:	9903      	ldr	r1, [sp, #12]
 8007208:	1a5b      	subs	r3, r3, r1
 800720a:	42ab      	cmp	r3, r5
 800720c:	dcf2      	bgt.n	80071f4 <_printf_i+0x214>
 800720e:	e7eb      	b.n	80071e8 <_printf_i+0x208>
 8007210:	2500      	movs	r5, #0
 8007212:	f104 0619 	add.w	r6, r4, #25
 8007216:	e7f5      	b.n	8007204 <_printf_i+0x224>
 8007218:	0800c7c8 	.word	0x0800c7c8
 800721c:	0800c7d9 	.word	0x0800c7d9

08007220 <_scanf_float>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	b087      	sub	sp, #28
 8007226:	9303      	str	r3, [sp, #12]
 8007228:	688b      	ldr	r3, [r1, #8]
 800722a:	4617      	mov	r7, r2
 800722c:	1e5a      	subs	r2, r3, #1
 800722e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007232:	bf82      	ittt	hi
 8007234:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007238:	eb03 0b05 	addhi.w	fp, r3, r5
 800723c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007240:	460a      	mov	r2, r1
 8007242:	f04f 0500 	mov.w	r5, #0
 8007246:	bf88      	it	hi
 8007248:	608b      	strhi	r3, [r1, #8]
 800724a:	680b      	ldr	r3, [r1, #0]
 800724c:	4680      	mov	r8, r0
 800724e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007252:	f842 3b1c 	str.w	r3, [r2], #28
 8007256:	460c      	mov	r4, r1
 8007258:	bf98      	it	ls
 800725a:	f04f 0b00 	movls.w	fp, #0
 800725e:	4616      	mov	r6, r2
 8007260:	46aa      	mov	sl, r5
 8007262:	46a9      	mov	r9, r5
 8007264:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007268:	9201      	str	r2, [sp, #4]
 800726a:	9502      	str	r5, [sp, #8]
 800726c:	68a2      	ldr	r2, [r4, #8]
 800726e:	b152      	cbz	r2, 8007286 <_scanf_float+0x66>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b4e      	cmp	r3, #78	@ 0x4e
 8007276:	d865      	bhi.n	8007344 <_scanf_float+0x124>
 8007278:	2b40      	cmp	r3, #64	@ 0x40
 800727a:	d83d      	bhi.n	80072f8 <_scanf_float+0xd8>
 800727c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007280:	b2c8      	uxtb	r0, r1
 8007282:	280e      	cmp	r0, #14
 8007284:	d93b      	bls.n	80072fe <_scanf_float+0xde>
 8007286:	f1b9 0f00 	cmp.w	r9, #0
 800728a:	d003      	beq.n	8007294 <_scanf_float+0x74>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007298:	f1ba 0f01 	cmp.w	sl, #1
 800729c:	f200 8118 	bhi.w	80074d0 <_scanf_float+0x2b0>
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	429e      	cmp	r6, r3
 80072a4:	f200 8109 	bhi.w	80074ba <_scanf_float+0x29a>
 80072a8:	2001      	movs	r0, #1
 80072aa:	b007      	add	sp, #28
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80072b4:	2a0d      	cmp	r2, #13
 80072b6:	d8e6      	bhi.n	8007286 <_scanf_float+0x66>
 80072b8:	a101      	add	r1, pc, #4	@ (adr r1, 80072c0 <_scanf_float+0xa0>)
 80072ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80072be:	bf00      	nop
 80072c0:	08007407 	.word	0x08007407
 80072c4:	08007287 	.word	0x08007287
 80072c8:	08007287 	.word	0x08007287
 80072cc:	08007287 	.word	0x08007287
 80072d0:	08007467 	.word	0x08007467
 80072d4:	0800743f 	.word	0x0800743f
 80072d8:	08007287 	.word	0x08007287
 80072dc:	08007287 	.word	0x08007287
 80072e0:	08007415 	.word	0x08007415
 80072e4:	08007287 	.word	0x08007287
 80072e8:	08007287 	.word	0x08007287
 80072ec:	08007287 	.word	0x08007287
 80072f0:	08007287 	.word	0x08007287
 80072f4:	080073cd 	.word	0x080073cd
 80072f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80072fc:	e7da      	b.n	80072b4 <_scanf_float+0x94>
 80072fe:	290e      	cmp	r1, #14
 8007300:	d8c1      	bhi.n	8007286 <_scanf_float+0x66>
 8007302:	a001      	add	r0, pc, #4	@ (adr r0, 8007308 <_scanf_float+0xe8>)
 8007304:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007308:	080073bd 	.word	0x080073bd
 800730c:	08007287 	.word	0x08007287
 8007310:	080073bd 	.word	0x080073bd
 8007314:	08007453 	.word	0x08007453
 8007318:	08007287 	.word	0x08007287
 800731c:	08007365 	.word	0x08007365
 8007320:	080073a3 	.word	0x080073a3
 8007324:	080073a3 	.word	0x080073a3
 8007328:	080073a3 	.word	0x080073a3
 800732c:	080073a3 	.word	0x080073a3
 8007330:	080073a3 	.word	0x080073a3
 8007334:	080073a3 	.word	0x080073a3
 8007338:	080073a3 	.word	0x080073a3
 800733c:	080073a3 	.word	0x080073a3
 8007340:	080073a3 	.word	0x080073a3
 8007344:	2b6e      	cmp	r3, #110	@ 0x6e
 8007346:	d809      	bhi.n	800735c <_scanf_float+0x13c>
 8007348:	2b60      	cmp	r3, #96	@ 0x60
 800734a:	d8b1      	bhi.n	80072b0 <_scanf_float+0x90>
 800734c:	2b54      	cmp	r3, #84	@ 0x54
 800734e:	d07b      	beq.n	8007448 <_scanf_float+0x228>
 8007350:	2b59      	cmp	r3, #89	@ 0x59
 8007352:	d198      	bne.n	8007286 <_scanf_float+0x66>
 8007354:	2d07      	cmp	r5, #7
 8007356:	d196      	bne.n	8007286 <_scanf_float+0x66>
 8007358:	2508      	movs	r5, #8
 800735a:	e02c      	b.n	80073b6 <_scanf_float+0x196>
 800735c:	2b74      	cmp	r3, #116	@ 0x74
 800735e:	d073      	beq.n	8007448 <_scanf_float+0x228>
 8007360:	2b79      	cmp	r3, #121	@ 0x79
 8007362:	e7f6      	b.n	8007352 <_scanf_float+0x132>
 8007364:	6821      	ldr	r1, [r4, #0]
 8007366:	05c8      	lsls	r0, r1, #23
 8007368:	d51b      	bpl.n	80073a2 <_scanf_float+0x182>
 800736a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800736e:	6021      	str	r1, [r4, #0]
 8007370:	f109 0901 	add.w	r9, r9, #1
 8007374:	f1bb 0f00 	cmp.w	fp, #0
 8007378:	d003      	beq.n	8007382 <_scanf_float+0x162>
 800737a:	3201      	adds	r2, #1
 800737c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007380:	60a2      	str	r2, [r4, #8]
 8007382:	68a3      	ldr	r3, [r4, #8]
 8007384:	3b01      	subs	r3, #1
 8007386:	60a3      	str	r3, [r4, #8]
 8007388:	6923      	ldr	r3, [r4, #16]
 800738a:	3301      	adds	r3, #1
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3b01      	subs	r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	607b      	str	r3, [r7, #4]
 8007396:	f340 8087 	ble.w	80074a8 <_scanf_float+0x288>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	e764      	b.n	800726c <_scanf_float+0x4c>
 80073a2:	eb1a 0105 	adds.w	r1, sl, r5
 80073a6:	f47f af6e 	bne.w	8007286 <_scanf_float+0x66>
 80073aa:	460d      	mov	r5, r1
 80073ac:	468a      	mov	sl, r1
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80073b4:	6022      	str	r2, [r4, #0]
 80073b6:	f806 3b01 	strb.w	r3, [r6], #1
 80073ba:	e7e2      	b.n	8007382 <_scanf_float+0x162>
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	0610      	lsls	r0, r2, #24
 80073c0:	f57f af61 	bpl.w	8007286 <_scanf_float+0x66>
 80073c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073c8:	6022      	str	r2, [r4, #0]
 80073ca:	e7f4      	b.n	80073b6 <_scanf_float+0x196>
 80073cc:	f1ba 0f00 	cmp.w	sl, #0
 80073d0:	d10e      	bne.n	80073f0 <_scanf_float+0x1d0>
 80073d2:	f1b9 0f00 	cmp.w	r9, #0
 80073d6:	d10e      	bne.n	80073f6 <_scanf_float+0x1d6>
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073e2:	d108      	bne.n	80073f6 <_scanf_float+0x1d6>
 80073e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073e8:	f04f 0a01 	mov.w	sl, #1
 80073ec:	6022      	str	r2, [r4, #0]
 80073ee:	e7e2      	b.n	80073b6 <_scanf_float+0x196>
 80073f0:	f1ba 0f02 	cmp.w	sl, #2
 80073f4:	d055      	beq.n	80074a2 <_scanf_float+0x282>
 80073f6:	2d01      	cmp	r5, #1
 80073f8:	d002      	beq.n	8007400 <_scanf_float+0x1e0>
 80073fa:	2d04      	cmp	r5, #4
 80073fc:	f47f af43 	bne.w	8007286 <_scanf_float+0x66>
 8007400:	3501      	adds	r5, #1
 8007402:	b2ed      	uxtb	r5, r5
 8007404:	e7d7      	b.n	80073b6 <_scanf_float+0x196>
 8007406:	f1ba 0f01 	cmp.w	sl, #1
 800740a:	f47f af3c 	bne.w	8007286 <_scanf_float+0x66>
 800740e:	f04f 0a02 	mov.w	sl, #2
 8007412:	e7d0      	b.n	80073b6 <_scanf_float+0x196>
 8007414:	b97d      	cbnz	r5, 8007436 <_scanf_float+0x216>
 8007416:	f1b9 0f00 	cmp.w	r9, #0
 800741a:	f47f af37 	bne.w	800728c <_scanf_float+0x6c>
 800741e:	6822      	ldr	r2, [r4, #0]
 8007420:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007424:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007428:	f040 8103 	bne.w	8007632 <_scanf_float+0x412>
 800742c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007430:	2501      	movs	r5, #1
 8007432:	6022      	str	r2, [r4, #0]
 8007434:	e7bf      	b.n	80073b6 <_scanf_float+0x196>
 8007436:	2d03      	cmp	r5, #3
 8007438:	d0e2      	beq.n	8007400 <_scanf_float+0x1e0>
 800743a:	2d05      	cmp	r5, #5
 800743c:	e7de      	b.n	80073fc <_scanf_float+0x1dc>
 800743e:	2d02      	cmp	r5, #2
 8007440:	f47f af21 	bne.w	8007286 <_scanf_float+0x66>
 8007444:	2503      	movs	r5, #3
 8007446:	e7b6      	b.n	80073b6 <_scanf_float+0x196>
 8007448:	2d06      	cmp	r5, #6
 800744a:	f47f af1c 	bne.w	8007286 <_scanf_float+0x66>
 800744e:	2507      	movs	r5, #7
 8007450:	e7b1      	b.n	80073b6 <_scanf_float+0x196>
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	0591      	lsls	r1, r2, #22
 8007456:	f57f af16 	bpl.w	8007286 <_scanf_float+0x66>
 800745a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800745e:	6022      	str	r2, [r4, #0]
 8007460:	f8cd 9008 	str.w	r9, [sp, #8]
 8007464:	e7a7      	b.n	80073b6 <_scanf_float+0x196>
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800746c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007470:	d006      	beq.n	8007480 <_scanf_float+0x260>
 8007472:	0550      	lsls	r0, r2, #21
 8007474:	f57f af07 	bpl.w	8007286 <_scanf_float+0x66>
 8007478:	f1b9 0f00 	cmp.w	r9, #0
 800747c:	f000 80d9 	beq.w	8007632 <_scanf_float+0x412>
 8007480:	0591      	lsls	r1, r2, #22
 8007482:	bf58      	it	pl
 8007484:	9902      	ldrpl	r1, [sp, #8]
 8007486:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800748a:	bf58      	it	pl
 800748c:	eba9 0101 	subpl.w	r1, r9, r1
 8007490:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	bf58      	it	pl
 800749a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	e789      	b.n	80073b6 <_scanf_float+0x196>
 80074a2:	f04f 0a03 	mov.w	sl, #3
 80074a6:	e786      	b.n	80073b6 <_scanf_float+0x196>
 80074a8:	4639      	mov	r1, r7
 80074aa:	4640      	mov	r0, r8
 80074ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80074b0:	4798      	blx	r3
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f43f aeda 	beq.w	800726c <_scanf_float+0x4c>
 80074b8:	e6e5      	b.n	8007286 <_scanf_float+0x66>
 80074ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074be:	463a      	mov	r2, r7
 80074c0:	4640      	mov	r0, r8
 80074c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074c6:	4798      	blx	r3
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	e6e7      	b.n	80072a0 <_scanf_float+0x80>
 80074d0:	1e6b      	subs	r3, r5, #1
 80074d2:	2b06      	cmp	r3, #6
 80074d4:	d824      	bhi.n	8007520 <_scanf_float+0x300>
 80074d6:	2d02      	cmp	r5, #2
 80074d8:	d836      	bhi.n	8007548 <_scanf_float+0x328>
 80074da:	9b01      	ldr	r3, [sp, #4]
 80074dc:	429e      	cmp	r6, r3
 80074de:	f67f aee3 	bls.w	80072a8 <_scanf_float+0x88>
 80074e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074e6:	463a      	mov	r2, r7
 80074e8:	4640      	mov	r0, r8
 80074ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074ee:	4798      	blx	r3
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	e7f0      	b.n	80074da <_scanf_float+0x2ba>
 80074f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074fc:	463a      	mov	r2, r7
 80074fe:	4640      	mov	r0, r8
 8007500:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007504:	4798      	blx	r3
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	3b01      	subs	r3, #1
 800750a:	6123      	str	r3, [r4, #16]
 800750c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007510:	fa5f fa8a 	uxtb.w	sl, sl
 8007514:	f1ba 0f02 	cmp.w	sl, #2
 8007518:	d1ee      	bne.n	80074f8 <_scanf_float+0x2d8>
 800751a:	3d03      	subs	r5, #3
 800751c:	b2ed      	uxtb	r5, r5
 800751e:	1b76      	subs	r6, r6, r5
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	05da      	lsls	r2, r3, #23
 8007524:	d530      	bpl.n	8007588 <_scanf_float+0x368>
 8007526:	055b      	lsls	r3, r3, #21
 8007528:	d511      	bpl.n	800754e <_scanf_float+0x32e>
 800752a:	9b01      	ldr	r3, [sp, #4]
 800752c:	429e      	cmp	r6, r3
 800752e:	f67f aebb 	bls.w	80072a8 <_scanf_float+0x88>
 8007532:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007536:	463a      	mov	r2, r7
 8007538:	4640      	mov	r0, r8
 800753a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800753e:	4798      	blx	r3
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	3b01      	subs	r3, #1
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	e7f0      	b.n	800752a <_scanf_float+0x30a>
 8007548:	46aa      	mov	sl, r5
 800754a:	46b3      	mov	fp, r6
 800754c:	e7de      	b.n	800750c <_scanf_float+0x2ec>
 800754e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	2965      	cmp	r1, #101	@ 0x65
 8007556:	f103 33ff 	add.w	r3, r3, #4294967295
 800755a:	f106 35ff 	add.w	r5, r6, #4294967295
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	d00c      	beq.n	800757c <_scanf_float+0x35c>
 8007562:	2945      	cmp	r1, #69	@ 0x45
 8007564:	d00a      	beq.n	800757c <_scanf_float+0x35c>
 8007566:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800756a:	463a      	mov	r2, r7
 800756c:	4640      	mov	r0, r8
 800756e:	4798      	blx	r3
 8007570:	6923      	ldr	r3, [r4, #16]
 8007572:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007576:	3b01      	subs	r3, #1
 8007578:	1eb5      	subs	r5, r6, #2
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	463a      	mov	r2, r7
 800757e:	4640      	mov	r0, r8
 8007580:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007584:	4798      	blx	r3
 8007586:	462e      	mov	r6, r5
 8007588:	6822      	ldr	r2, [r4, #0]
 800758a:	f012 0210 	ands.w	r2, r2, #16
 800758e:	d001      	beq.n	8007594 <_scanf_float+0x374>
 8007590:	2000      	movs	r0, #0
 8007592:	e68a      	b.n	80072aa <_scanf_float+0x8a>
 8007594:	7032      	strb	r2, [r6, #0]
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800759c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a0:	d11c      	bne.n	80075dc <_scanf_float+0x3bc>
 80075a2:	9b02      	ldr	r3, [sp, #8]
 80075a4:	454b      	cmp	r3, r9
 80075a6:	eba3 0209 	sub.w	r2, r3, r9
 80075aa:	d123      	bne.n	80075f4 <_scanf_float+0x3d4>
 80075ac:	2200      	movs	r2, #0
 80075ae:	4640      	mov	r0, r8
 80075b0:	9901      	ldr	r1, [sp, #4]
 80075b2:	f002 fc5d 	bl	8009e70 <_strtod_r>
 80075b6:	9b03      	ldr	r3, [sp, #12]
 80075b8:	6825      	ldr	r5, [r4, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f015 0f02 	tst.w	r5, #2
 80075c0:	4606      	mov	r6, r0
 80075c2:	460f      	mov	r7, r1
 80075c4:	f103 0204 	add.w	r2, r3, #4
 80075c8:	d01f      	beq.n	800760a <_scanf_float+0x3ea>
 80075ca:	9903      	ldr	r1, [sp, #12]
 80075cc:	600a      	str	r2, [r1, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	e9c3 6700 	strd	r6, r7, [r3]
 80075d4:	68e3      	ldr	r3, [r4, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60e3      	str	r3, [r4, #12]
 80075da:	e7d9      	b.n	8007590 <_scanf_float+0x370>
 80075dc:	9b04      	ldr	r3, [sp, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0e4      	beq.n	80075ac <_scanf_float+0x38c>
 80075e2:	9905      	ldr	r1, [sp, #20]
 80075e4:	230a      	movs	r3, #10
 80075e6:	4640      	mov	r0, r8
 80075e8:	3101      	adds	r1, #1
 80075ea:	f002 fcc1 	bl	8009f70 <_strtol_r>
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	9e05      	ldr	r6, [sp, #20]
 80075f2:	1ac2      	subs	r2, r0, r3
 80075f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80075f8:	429e      	cmp	r6, r3
 80075fa:	bf28      	it	cs
 80075fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007600:	4630      	mov	r0, r6
 8007602:	490d      	ldr	r1, [pc, #52]	@ (8007638 <_scanf_float+0x418>)
 8007604:	f000 f924 	bl	8007850 <siprintf>
 8007608:	e7d0      	b.n	80075ac <_scanf_float+0x38c>
 800760a:	076d      	lsls	r5, r5, #29
 800760c:	d4dd      	bmi.n	80075ca <_scanf_float+0x3aa>
 800760e:	9d03      	ldr	r5, [sp, #12]
 8007610:	602a      	str	r2, [r5, #0]
 8007612:	681d      	ldr	r5, [r3, #0]
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	f7f9 f9f8 	bl	8000a0c <__aeabi_dcmpun>
 800761c:	b120      	cbz	r0, 8007628 <_scanf_float+0x408>
 800761e:	4807      	ldr	r0, [pc, #28]	@ (800763c <_scanf_float+0x41c>)
 8007620:	f000 fa30 	bl	8007a84 <nanf>
 8007624:	6028      	str	r0, [r5, #0]
 8007626:	e7d5      	b.n	80075d4 <_scanf_float+0x3b4>
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f9 fa4c 	bl	8000ac8 <__aeabi_d2f>
 8007630:	e7f8      	b.n	8007624 <_scanf_float+0x404>
 8007632:	f04f 0900 	mov.w	r9, #0
 8007636:	e62d      	b.n	8007294 <_scanf_float+0x74>
 8007638:	0800c7ea 	.word	0x0800c7ea
 800763c:	0800cb85 	.word	0x0800cb85

08007640 <std>:
 8007640:	2300      	movs	r3, #0
 8007642:	b510      	push	{r4, lr}
 8007644:	4604      	mov	r4, r0
 8007646:	e9c0 3300 	strd	r3, r3, [r0]
 800764a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800764e:	6083      	str	r3, [r0, #8]
 8007650:	8181      	strh	r1, [r0, #12]
 8007652:	6643      	str	r3, [r0, #100]	@ 0x64
 8007654:	81c2      	strh	r2, [r0, #14]
 8007656:	6183      	str	r3, [r0, #24]
 8007658:	4619      	mov	r1, r3
 800765a:	2208      	movs	r2, #8
 800765c:	305c      	adds	r0, #92	@ 0x5c
 800765e:	f000 f974 	bl	800794a <memset>
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <std+0x58>)
 8007664:	6224      	str	r4, [r4, #32]
 8007666:	6263      	str	r3, [r4, #36]	@ 0x24
 8007668:	4b0c      	ldr	r3, [pc, #48]	@ (800769c <std+0x5c>)
 800766a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800766c:	4b0c      	ldr	r3, [pc, #48]	@ (80076a0 <std+0x60>)
 800766e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007670:	4b0c      	ldr	r3, [pc, #48]	@ (80076a4 <std+0x64>)
 8007672:	6323      	str	r3, [r4, #48]	@ 0x30
 8007674:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <std+0x68>)
 8007676:	429c      	cmp	r4, r3
 8007678:	d006      	beq.n	8007688 <std+0x48>
 800767a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800767e:	4294      	cmp	r4, r2
 8007680:	d002      	beq.n	8007688 <std+0x48>
 8007682:	33d0      	adds	r3, #208	@ 0xd0
 8007684:	429c      	cmp	r4, r3
 8007686:	d105      	bne.n	8007694 <std+0x54>
 8007688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007690:	f000 b9d8 	b.w	8007a44 <__retarget_lock_init_recursive>
 8007694:	bd10      	pop	{r4, pc}
 8007696:	bf00      	nop
 8007698:	08007891 	.word	0x08007891
 800769c:	080078b3 	.word	0x080078b3
 80076a0:	080078eb 	.word	0x080078eb
 80076a4:	0800790f 	.word	0x0800790f
 80076a8:	2000078c 	.word	0x2000078c

080076ac <stdio_exit_handler>:
 80076ac:	4a02      	ldr	r2, [pc, #8]	@ (80076b8 <stdio_exit_handler+0xc>)
 80076ae:	4903      	ldr	r1, [pc, #12]	@ (80076bc <stdio_exit_handler+0x10>)
 80076b0:	4803      	ldr	r0, [pc, #12]	@ (80076c0 <stdio_exit_handler+0x14>)
 80076b2:	f000 b869 	b.w	8007788 <_fwalk_sglue>
 80076b6:	bf00      	nop
 80076b8:	2000001c 	.word	0x2000001c
 80076bc:	0800a5a5 	.word	0x0800a5a5
 80076c0:	2000002c 	.word	0x2000002c

080076c4 <cleanup_stdio>:
 80076c4:	6841      	ldr	r1, [r0, #4]
 80076c6:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <cleanup_stdio+0x34>)
 80076c8:	b510      	push	{r4, lr}
 80076ca:	4299      	cmp	r1, r3
 80076cc:	4604      	mov	r4, r0
 80076ce:	d001      	beq.n	80076d4 <cleanup_stdio+0x10>
 80076d0:	f002 ff68 	bl	800a5a4 <_fflush_r>
 80076d4:	68a1      	ldr	r1, [r4, #8]
 80076d6:	4b09      	ldr	r3, [pc, #36]	@ (80076fc <cleanup_stdio+0x38>)
 80076d8:	4299      	cmp	r1, r3
 80076da:	d002      	beq.n	80076e2 <cleanup_stdio+0x1e>
 80076dc:	4620      	mov	r0, r4
 80076de:	f002 ff61 	bl	800a5a4 <_fflush_r>
 80076e2:	68e1      	ldr	r1, [r4, #12]
 80076e4:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <cleanup_stdio+0x3c>)
 80076e6:	4299      	cmp	r1, r3
 80076e8:	d004      	beq.n	80076f4 <cleanup_stdio+0x30>
 80076ea:	4620      	mov	r0, r4
 80076ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f0:	f002 bf58 	b.w	800a5a4 <_fflush_r>
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	bf00      	nop
 80076f8:	2000078c 	.word	0x2000078c
 80076fc:	200007f4 	.word	0x200007f4
 8007700:	2000085c 	.word	0x2000085c

08007704 <global_stdio_init.part.0>:
 8007704:	b510      	push	{r4, lr}
 8007706:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <global_stdio_init.part.0+0x30>)
 8007708:	4c0b      	ldr	r4, [pc, #44]	@ (8007738 <global_stdio_init.part.0+0x34>)
 800770a:	4a0c      	ldr	r2, [pc, #48]	@ (800773c <global_stdio_init.part.0+0x38>)
 800770c:	4620      	mov	r0, r4
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	2104      	movs	r1, #4
 8007712:	2200      	movs	r2, #0
 8007714:	f7ff ff94 	bl	8007640 <std>
 8007718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800771c:	2201      	movs	r2, #1
 800771e:	2109      	movs	r1, #9
 8007720:	f7ff ff8e 	bl	8007640 <std>
 8007724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007728:	2202      	movs	r2, #2
 800772a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800772e:	2112      	movs	r1, #18
 8007730:	f7ff bf86 	b.w	8007640 <std>
 8007734:	200008c4 	.word	0x200008c4
 8007738:	2000078c 	.word	0x2000078c
 800773c:	080076ad 	.word	0x080076ad

08007740 <__sfp_lock_acquire>:
 8007740:	4801      	ldr	r0, [pc, #4]	@ (8007748 <__sfp_lock_acquire+0x8>)
 8007742:	f000 b980 	b.w	8007a46 <__retarget_lock_acquire_recursive>
 8007746:	bf00      	nop
 8007748:	200008cd 	.word	0x200008cd

0800774c <__sfp_lock_release>:
 800774c:	4801      	ldr	r0, [pc, #4]	@ (8007754 <__sfp_lock_release+0x8>)
 800774e:	f000 b97b 	b.w	8007a48 <__retarget_lock_release_recursive>
 8007752:	bf00      	nop
 8007754:	200008cd 	.word	0x200008cd

08007758 <__sinit>:
 8007758:	b510      	push	{r4, lr}
 800775a:	4604      	mov	r4, r0
 800775c:	f7ff fff0 	bl	8007740 <__sfp_lock_acquire>
 8007760:	6a23      	ldr	r3, [r4, #32]
 8007762:	b11b      	cbz	r3, 800776c <__sinit+0x14>
 8007764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007768:	f7ff bff0 	b.w	800774c <__sfp_lock_release>
 800776c:	4b04      	ldr	r3, [pc, #16]	@ (8007780 <__sinit+0x28>)
 800776e:	6223      	str	r3, [r4, #32]
 8007770:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <__sinit+0x2c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f5      	bne.n	8007764 <__sinit+0xc>
 8007778:	f7ff ffc4 	bl	8007704 <global_stdio_init.part.0>
 800777c:	e7f2      	b.n	8007764 <__sinit+0xc>
 800777e:	bf00      	nop
 8007780:	080076c5 	.word	0x080076c5
 8007784:	200008c4 	.word	0x200008c4

08007788 <_fwalk_sglue>:
 8007788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800778c:	4607      	mov	r7, r0
 800778e:	4688      	mov	r8, r1
 8007790:	4614      	mov	r4, r2
 8007792:	2600      	movs	r6, #0
 8007794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007798:	f1b9 0901 	subs.w	r9, r9, #1
 800779c:	d505      	bpl.n	80077aa <_fwalk_sglue+0x22>
 800779e:	6824      	ldr	r4, [r4, #0]
 80077a0:	2c00      	cmp	r4, #0
 80077a2:	d1f7      	bne.n	8007794 <_fwalk_sglue+0xc>
 80077a4:	4630      	mov	r0, r6
 80077a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077aa:	89ab      	ldrh	r3, [r5, #12]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d907      	bls.n	80077c0 <_fwalk_sglue+0x38>
 80077b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077b4:	3301      	adds	r3, #1
 80077b6:	d003      	beq.n	80077c0 <_fwalk_sglue+0x38>
 80077b8:	4629      	mov	r1, r5
 80077ba:	4638      	mov	r0, r7
 80077bc:	47c0      	blx	r8
 80077be:	4306      	orrs	r6, r0
 80077c0:	3568      	adds	r5, #104	@ 0x68
 80077c2:	e7e9      	b.n	8007798 <_fwalk_sglue+0x10>

080077c4 <iprintf>:
 80077c4:	b40f      	push	{r0, r1, r2, r3}
 80077c6:	b507      	push	{r0, r1, r2, lr}
 80077c8:	4906      	ldr	r1, [pc, #24]	@ (80077e4 <iprintf+0x20>)
 80077ca:	ab04      	add	r3, sp, #16
 80077cc:	6808      	ldr	r0, [r1, #0]
 80077ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d2:	6881      	ldr	r1, [r0, #8]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	f002 fd4d 	bl	800a274 <_vfiprintf_r>
 80077da:	b003      	add	sp, #12
 80077dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e0:	b004      	add	sp, #16
 80077e2:	4770      	bx	lr
 80077e4:	20000028 	.word	0x20000028

080077e8 <sniprintf>:
 80077e8:	b40c      	push	{r2, r3}
 80077ea:	b530      	push	{r4, r5, lr}
 80077ec:	4b17      	ldr	r3, [pc, #92]	@ (800784c <sniprintf+0x64>)
 80077ee:	1e0c      	subs	r4, r1, #0
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	b09d      	sub	sp, #116	@ 0x74
 80077f4:	da08      	bge.n	8007808 <sniprintf+0x20>
 80077f6:	238b      	movs	r3, #139	@ 0x8b
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	b01d      	add	sp, #116	@ 0x74
 8007800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007804:	b002      	add	sp, #8
 8007806:	4770      	bx	lr
 8007808:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800780c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007810:	bf0c      	ite	eq
 8007812:	4623      	moveq	r3, r4
 8007814:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	9307      	str	r3, [sp, #28]
 800781c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007820:	9002      	str	r0, [sp, #8]
 8007822:	9006      	str	r0, [sp, #24]
 8007824:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007828:	4628      	mov	r0, r5
 800782a:	ab21      	add	r3, sp, #132	@ 0x84
 800782c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800782e:	a902      	add	r1, sp, #8
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	f002 fbfb 	bl	800a02c <_svfiprintf_r>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	bfbc      	itt	lt
 800783a:	238b      	movlt	r3, #139	@ 0x8b
 800783c:	602b      	strlt	r3, [r5, #0]
 800783e:	2c00      	cmp	r4, #0
 8007840:	d0dd      	beq.n	80077fe <sniprintf+0x16>
 8007842:	2200      	movs	r2, #0
 8007844:	9b02      	ldr	r3, [sp, #8]
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e7d9      	b.n	80077fe <sniprintf+0x16>
 800784a:	bf00      	nop
 800784c:	20000028 	.word	0x20000028

08007850 <siprintf>:
 8007850:	b40e      	push	{r1, r2, r3}
 8007852:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007856:	b500      	push	{lr}
 8007858:	b09c      	sub	sp, #112	@ 0x70
 800785a:	ab1d      	add	r3, sp, #116	@ 0x74
 800785c:	9002      	str	r0, [sp, #8]
 800785e:	9006      	str	r0, [sp, #24]
 8007860:	9107      	str	r1, [sp, #28]
 8007862:	9104      	str	r1, [sp, #16]
 8007864:	4808      	ldr	r0, [pc, #32]	@ (8007888 <siprintf+0x38>)
 8007866:	4909      	ldr	r1, [pc, #36]	@ (800788c <siprintf+0x3c>)
 8007868:	f853 2b04 	ldr.w	r2, [r3], #4
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	6800      	ldr	r0, [r0, #0]
 8007870:	a902      	add	r1, sp, #8
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	f002 fbda 	bl	800a02c <_svfiprintf_r>
 8007878:	2200      	movs	r2, #0
 800787a:	9b02      	ldr	r3, [sp, #8]
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	b01c      	add	sp, #112	@ 0x70
 8007880:	f85d eb04 	ldr.w	lr, [sp], #4
 8007884:	b003      	add	sp, #12
 8007886:	4770      	bx	lr
 8007888:	20000028 	.word	0x20000028
 800788c:	ffff0208 	.word	0xffff0208

08007890 <__sread>:
 8007890:	b510      	push	{r4, lr}
 8007892:	460c      	mov	r4, r1
 8007894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007898:	f000 f886 	bl	80079a8 <_read_r>
 800789c:	2800      	cmp	r0, #0
 800789e:	bfab      	itete	ge
 80078a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078a2:	89a3      	ldrhlt	r3, [r4, #12]
 80078a4:	181b      	addge	r3, r3, r0
 80078a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078aa:	bfac      	ite	ge
 80078ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078ae:	81a3      	strhlt	r3, [r4, #12]
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <__swrite>:
 80078b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b6:	461f      	mov	r7, r3
 80078b8:	898b      	ldrh	r3, [r1, #12]
 80078ba:	4605      	mov	r5, r0
 80078bc:	05db      	lsls	r3, r3, #23
 80078be:	460c      	mov	r4, r1
 80078c0:	4616      	mov	r6, r2
 80078c2:	d505      	bpl.n	80078d0 <__swrite+0x1e>
 80078c4:	2302      	movs	r3, #2
 80078c6:	2200      	movs	r2, #0
 80078c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078cc:	f000 f85a 	bl	8007984 <_lseek_r>
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	4632      	mov	r2, r6
 80078d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	4628      	mov	r0, r5
 80078dc:	463b      	mov	r3, r7
 80078de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078e6:	f000 b871 	b.w	80079cc <_write_r>

080078ea <__sseek>:
 80078ea:	b510      	push	{r4, lr}
 80078ec:	460c      	mov	r4, r1
 80078ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f2:	f000 f847 	bl	8007984 <_lseek_r>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	bf15      	itete	ne
 80078fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007906:	81a3      	strheq	r3, [r4, #12]
 8007908:	bf18      	it	ne
 800790a:	81a3      	strhne	r3, [r4, #12]
 800790c:	bd10      	pop	{r4, pc}

0800790e <__sclose>:
 800790e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007912:	f000 b827 	b.w	8007964 <_close_r>

08007916 <memmove>:
 8007916:	4288      	cmp	r0, r1
 8007918:	b510      	push	{r4, lr}
 800791a:	eb01 0402 	add.w	r4, r1, r2
 800791e:	d902      	bls.n	8007926 <memmove+0x10>
 8007920:	4284      	cmp	r4, r0
 8007922:	4623      	mov	r3, r4
 8007924:	d807      	bhi.n	8007936 <memmove+0x20>
 8007926:	1e43      	subs	r3, r0, #1
 8007928:	42a1      	cmp	r1, r4
 800792a:	d008      	beq.n	800793e <memmove+0x28>
 800792c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007930:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007934:	e7f8      	b.n	8007928 <memmove+0x12>
 8007936:	4601      	mov	r1, r0
 8007938:	4402      	add	r2, r0
 800793a:	428a      	cmp	r2, r1
 800793c:	d100      	bne.n	8007940 <memmove+0x2a>
 800793e:	bd10      	pop	{r4, pc}
 8007940:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007944:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007948:	e7f7      	b.n	800793a <memmove+0x24>

0800794a <memset>:
 800794a:	4603      	mov	r3, r0
 800794c:	4402      	add	r2, r0
 800794e:	4293      	cmp	r3, r2
 8007950:	d100      	bne.n	8007954 <memset+0xa>
 8007952:	4770      	bx	lr
 8007954:	f803 1b01 	strb.w	r1, [r3], #1
 8007958:	e7f9      	b.n	800794e <memset+0x4>
	...

0800795c <_localeconv_r>:
 800795c:	4800      	ldr	r0, [pc, #0]	@ (8007960 <_localeconv_r+0x4>)
 800795e:	4770      	bx	lr
 8007960:	20000168 	.word	0x20000168

08007964 <_close_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	2300      	movs	r3, #0
 8007968:	4d05      	ldr	r5, [pc, #20]	@ (8007980 <_close_r+0x1c>)
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	f7fa fd95 	bl	800249e <_close>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_close_r+0x1a>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_close_r+0x1a>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	200008c8 	.word	0x200008c8

08007984 <_lseek_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	4611      	mov	r1, r2
 800798c:	2200      	movs	r2, #0
 800798e:	4d05      	ldr	r5, [pc, #20]	@ (80079a4 <_lseek_r+0x20>)
 8007990:	602a      	str	r2, [r5, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f7fa fda7 	bl	80024e6 <_lseek>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_lseek_r+0x1e>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_lseek_r+0x1e>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	200008c8 	.word	0x200008c8

080079a8 <_read_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	4611      	mov	r1, r2
 80079b0:	2200      	movs	r2, #0
 80079b2:	4d05      	ldr	r5, [pc, #20]	@ (80079c8 <_read_r+0x20>)
 80079b4:	602a      	str	r2, [r5, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	f7fa fd38 	bl	800242c <_read>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_read_r+0x1e>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_read_r+0x1e>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	200008c8 	.word	0x200008c8

080079cc <_write_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4604      	mov	r4, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	4611      	mov	r1, r2
 80079d4:	2200      	movs	r2, #0
 80079d6:	4d05      	ldr	r5, [pc, #20]	@ (80079ec <_write_r+0x20>)
 80079d8:	602a      	str	r2, [r5, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	f7fa fd43 	bl	8002466 <_write>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_write_r+0x1e>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_write_r+0x1e>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	200008c8 	.word	0x200008c8

080079f0 <__errno>:
 80079f0:	4b01      	ldr	r3, [pc, #4]	@ (80079f8 <__errno+0x8>)
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	20000028 	.word	0x20000028

080079fc <__libc_init_array>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	2600      	movs	r6, #0
 8007a00:	4d0c      	ldr	r5, [pc, #48]	@ (8007a34 <__libc_init_array+0x38>)
 8007a02:	4c0d      	ldr	r4, [pc, #52]	@ (8007a38 <__libc_init_array+0x3c>)
 8007a04:	1b64      	subs	r4, r4, r5
 8007a06:	10a4      	asrs	r4, r4, #2
 8007a08:	42a6      	cmp	r6, r4
 8007a0a:	d109      	bne.n	8007a20 <__libc_init_array+0x24>
 8007a0c:	f004 fa60 	bl	800bed0 <_init>
 8007a10:	2600      	movs	r6, #0
 8007a12:	4d0a      	ldr	r5, [pc, #40]	@ (8007a3c <__libc_init_array+0x40>)
 8007a14:	4c0a      	ldr	r4, [pc, #40]	@ (8007a40 <__libc_init_array+0x44>)
 8007a16:	1b64      	subs	r4, r4, r5
 8007a18:	10a4      	asrs	r4, r4, #2
 8007a1a:	42a6      	cmp	r6, r4
 8007a1c:	d105      	bne.n	8007a2a <__libc_init_array+0x2e>
 8007a1e:	bd70      	pop	{r4, r5, r6, pc}
 8007a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a24:	4798      	blx	r3
 8007a26:	3601      	adds	r6, #1
 8007a28:	e7ee      	b.n	8007a08 <__libc_init_array+0xc>
 8007a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a2e:	4798      	blx	r3
 8007a30:	3601      	adds	r6, #1
 8007a32:	e7f2      	b.n	8007a1a <__libc_init_array+0x1e>
 8007a34:	0800cc20 	.word	0x0800cc20
 8007a38:	0800cc20 	.word	0x0800cc20
 8007a3c:	0800cc20 	.word	0x0800cc20
 8007a40:	0800cc24 	.word	0x0800cc24

08007a44 <__retarget_lock_init_recursive>:
 8007a44:	4770      	bx	lr

08007a46 <__retarget_lock_acquire_recursive>:
 8007a46:	4770      	bx	lr

08007a48 <__retarget_lock_release_recursive>:
 8007a48:	4770      	bx	lr

08007a4a <memchr>:
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	b2c9      	uxtb	r1, r1
 8007a50:	4402      	add	r2, r0
 8007a52:	4293      	cmp	r3, r2
 8007a54:	4618      	mov	r0, r3
 8007a56:	d101      	bne.n	8007a5c <memchr+0x12>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e003      	b.n	8007a64 <memchr+0x1a>
 8007a5c:	7804      	ldrb	r4, [r0, #0]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	428c      	cmp	r4, r1
 8007a62:	d1f6      	bne.n	8007a52 <memchr+0x8>
 8007a64:	bd10      	pop	{r4, pc}

08007a66 <memcpy>:
 8007a66:	440a      	add	r2, r1
 8007a68:	4291      	cmp	r1, r2
 8007a6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a6e:	d100      	bne.n	8007a72 <memcpy+0xc>
 8007a70:	4770      	bx	lr
 8007a72:	b510      	push	{r4, lr}
 8007a74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a78:	4291      	cmp	r1, r2
 8007a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a7e:	d1f9      	bne.n	8007a74 <memcpy+0xe>
 8007a80:	bd10      	pop	{r4, pc}
	...

08007a84 <nanf>:
 8007a84:	4800      	ldr	r0, [pc, #0]	@ (8007a88 <nanf+0x4>)
 8007a86:	4770      	bx	lr
 8007a88:	7fc00000 	.word	0x7fc00000

08007a8c <quorem>:
 8007a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	6903      	ldr	r3, [r0, #16]
 8007a92:	690c      	ldr	r4, [r1, #16]
 8007a94:	4607      	mov	r7, r0
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	db7e      	blt.n	8007b98 <quorem+0x10c>
 8007a9a:	3c01      	subs	r4, #1
 8007a9c:	00a3      	lsls	r3, r4, #2
 8007a9e:	f100 0514 	add.w	r5, r0, #20
 8007aa2:	f101 0814 	add.w	r8, r1, #20
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	fbb2 f6f3 	udiv	r6, r2, r3
 8007abe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ac2:	d32e      	bcc.n	8007b22 <quorem+0x96>
 8007ac4:	f04f 0a00 	mov.w	sl, #0
 8007ac8:	46c4      	mov	ip, r8
 8007aca:	46ae      	mov	lr, r5
 8007acc:	46d3      	mov	fp, sl
 8007ace:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ad2:	b298      	uxth	r0, r3
 8007ad4:	fb06 a000 	mla	r0, r6, r0, sl
 8007ad8:	0c1b      	lsrs	r3, r3, #16
 8007ada:	0c02      	lsrs	r2, r0, #16
 8007adc:	fb06 2303 	mla	r3, r6, r3, r2
 8007ae0:	f8de 2000 	ldr.w	r2, [lr]
 8007ae4:	b280      	uxth	r0, r0
 8007ae6:	b292      	uxth	r2, r2
 8007ae8:	1a12      	subs	r2, r2, r0
 8007aea:	445a      	add	r2, fp
 8007aec:	f8de 0000 	ldr.w	r0, [lr]
 8007af0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007afa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007afe:	b292      	uxth	r2, r2
 8007b00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b04:	45e1      	cmp	r9, ip
 8007b06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b0a:	f84e 2b04 	str.w	r2, [lr], #4
 8007b0e:	d2de      	bcs.n	8007ace <quorem+0x42>
 8007b10:	9b00      	ldr	r3, [sp, #0]
 8007b12:	58eb      	ldr	r3, [r5, r3]
 8007b14:	b92b      	cbnz	r3, 8007b22 <quorem+0x96>
 8007b16:	9b01      	ldr	r3, [sp, #4]
 8007b18:	3b04      	subs	r3, #4
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	d32f      	bcc.n	8007b80 <quorem+0xf4>
 8007b20:	613c      	str	r4, [r7, #16]
 8007b22:	4638      	mov	r0, r7
 8007b24:	f001 f9c4 	bl	8008eb0 <__mcmp>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	db25      	blt.n	8007b78 <quorem+0xec>
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	2000      	movs	r0, #0
 8007b30:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b34:	f8d1 c000 	ldr.w	ip, [r1]
 8007b38:	fa1f fe82 	uxth.w	lr, r2
 8007b3c:	fa1f f38c 	uxth.w	r3, ip
 8007b40:	eba3 030e 	sub.w	r3, r3, lr
 8007b44:	4403      	add	r3, r0
 8007b46:	0c12      	lsrs	r2, r2, #16
 8007b48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b56:	45c1      	cmp	r9, r8
 8007b58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b5c:	f841 3b04 	str.w	r3, [r1], #4
 8007b60:	d2e6      	bcs.n	8007b30 <quorem+0xa4>
 8007b62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b6a:	b922      	cbnz	r2, 8007b76 <quorem+0xea>
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	429d      	cmp	r5, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	d30b      	bcc.n	8007b8c <quorem+0x100>
 8007b74:	613c      	str	r4, [r7, #16]
 8007b76:	3601      	adds	r6, #1
 8007b78:	4630      	mov	r0, r6
 8007b7a:	b003      	add	sp, #12
 8007b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	3b04      	subs	r3, #4
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	d1cb      	bne.n	8007b20 <quorem+0x94>
 8007b88:	3c01      	subs	r4, #1
 8007b8a:	e7c6      	b.n	8007b1a <quorem+0x8e>
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	3b04      	subs	r3, #4
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	d1ef      	bne.n	8007b74 <quorem+0xe8>
 8007b94:	3c01      	subs	r4, #1
 8007b96:	e7ea      	b.n	8007b6e <quorem+0xe2>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e7ee      	b.n	8007b7a <quorem+0xee>
 8007b9c:	0000      	movs	r0, r0
	...

08007ba0 <_dtoa_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	461d      	mov	r5, r3
 8007ba8:	69c7      	ldr	r7, [r0, #28]
 8007baa:	b097      	sub	sp, #92	@ 0x5c
 8007bac:	4683      	mov	fp, r0
 8007bae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007bb2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007bb4:	b97f      	cbnz	r7, 8007bd6 <_dtoa_r+0x36>
 8007bb6:	2010      	movs	r0, #16
 8007bb8:	f000 fe02 	bl	80087c0 <malloc>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	f8cb 001c 	str.w	r0, [fp, #28]
 8007bc2:	b920      	cbnz	r0, 8007bce <_dtoa_r+0x2e>
 8007bc4:	21ef      	movs	r1, #239	@ 0xef
 8007bc6:	4ba8      	ldr	r3, [pc, #672]	@ (8007e68 <_dtoa_r+0x2c8>)
 8007bc8:	48a8      	ldr	r0, [pc, #672]	@ (8007e6c <_dtoa_r+0x2cc>)
 8007bca:	f002 fdcf 	bl	800a76c <__assert_func>
 8007bce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bd2:	6007      	str	r7, [r0, #0]
 8007bd4:	60c7      	str	r7, [r0, #12]
 8007bd6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bda:	6819      	ldr	r1, [r3, #0]
 8007bdc:	b159      	cbz	r1, 8007bf6 <_dtoa_r+0x56>
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	2301      	movs	r3, #1
 8007be2:	4093      	lsls	r3, r2
 8007be4:	604a      	str	r2, [r1, #4]
 8007be6:	608b      	str	r3, [r1, #8]
 8007be8:	4658      	mov	r0, fp
 8007bea:	f000 fedf 	bl	80089ac <_Bfree>
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	1e2b      	subs	r3, r5, #0
 8007bf8:	bfaf      	iteee	ge
 8007bfa:	2300      	movge	r3, #0
 8007bfc:	2201      	movlt	r2, #1
 8007bfe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c02:	9303      	strlt	r3, [sp, #12]
 8007c04:	bfa8      	it	ge
 8007c06:	6033      	strge	r3, [r6, #0]
 8007c08:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007c0c:	4b98      	ldr	r3, [pc, #608]	@ (8007e70 <_dtoa_r+0x2d0>)
 8007c0e:	bfb8      	it	lt
 8007c10:	6032      	strlt	r2, [r6, #0]
 8007c12:	ea33 0308 	bics.w	r3, r3, r8
 8007c16:	d112      	bne.n	8007c3e <_dtoa_r+0x9e>
 8007c18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007c24:	4323      	orrs	r3, r4
 8007c26:	f000 8550 	beq.w	80086ca <_dtoa_r+0xb2a>
 8007c2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c2c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007e74 <_dtoa_r+0x2d4>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8552 	beq.w	80086da <_dtoa_r+0xb3a>
 8007c36:	f10a 0303 	add.w	r3, sl, #3
 8007c3a:	f000 bd4c 	b.w	80086d6 <_dtoa_r+0xb36>
 8007c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f7f8 feab 	bl	80009a8 <__aeabi_dcmpeq>
 8007c52:	4607      	mov	r7, r0
 8007c54:	b158      	cbz	r0, 8007c6e <_dtoa_r+0xce>
 8007c56:	2301      	movs	r3, #1
 8007c58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c5e:	b113      	cbz	r3, 8007c66 <_dtoa_r+0xc6>
 8007c60:	4b85      	ldr	r3, [pc, #532]	@ (8007e78 <_dtoa_r+0x2d8>)
 8007c62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007e7c <_dtoa_r+0x2dc>
 8007c6a:	f000 bd36 	b.w	80086da <_dtoa_r+0xb3a>
 8007c6e:	ab14      	add	r3, sp, #80	@ 0x50
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	ab15      	add	r3, sp, #84	@ 0x54
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4658      	mov	r0, fp
 8007c78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c7c:	f001 fa30 	bl	80090e0 <__d2b>
 8007c80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007c84:	4681      	mov	r9, r0
 8007c86:	2e00      	cmp	r6, #0
 8007c88:	d077      	beq.n	8007d7a <_dtoa_r+0x1da>
 8007c8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ca0:	9712      	str	r7, [sp, #72]	@ 0x48
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4b76      	ldr	r3, [pc, #472]	@ (8007e80 <_dtoa_r+0x2e0>)
 8007ca8:	f7f8 fa5e 	bl	8000168 <__aeabi_dsub>
 8007cac:	a368      	add	r3, pc, #416	@ (adr r3, 8007e50 <_dtoa_r+0x2b0>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fc11 	bl	80004d8 <__aeabi_dmul>
 8007cb6:	a368      	add	r3, pc, #416	@ (adr r3, 8007e58 <_dtoa_r+0x2b8>)
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f7f8 fa56 	bl	800016c <__adddf3>
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	f7f8 fb9d 	bl	8000404 <__aeabi_i2d>
 8007cca:	a365      	add	r3, pc, #404	@ (adr r3, 8007e60 <_dtoa_r+0x2c0>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fc02 	bl	80004d8 <__aeabi_dmul>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7f8 fa46 	bl	800016c <__adddf3>
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	460d      	mov	r5, r1
 8007ce4:	f7f8 fea8 	bl	8000a38 <__aeabi_d2iz>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4607      	mov	r7, r0
 8007cec:	2300      	movs	r3, #0
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 fe63 	bl	80009bc <__aeabi_dcmplt>
 8007cf6:	b140      	cbz	r0, 8007d0a <_dtoa_r+0x16a>
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7f8 fb83 	bl	8000404 <__aeabi_i2d>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	462b      	mov	r3, r5
 8007d02:	f7f8 fe51 	bl	80009a8 <__aeabi_dcmpeq>
 8007d06:	b900      	cbnz	r0, 8007d0a <_dtoa_r+0x16a>
 8007d08:	3f01      	subs	r7, #1
 8007d0a:	2f16      	cmp	r7, #22
 8007d0c:	d853      	bhi.n	8007db6 <_dtoa_r+0x216>
 8007d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d12:	4b5c      	ldr	r3, [pc, #368]	@ (8007e84 <_dtoa_r+0x2e4>)
 8007d14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f7f8 fe4e 	bl	80009bc <__aeabi_dcmplt>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d04a      	beq.n	8007dba <_dtoa_r+0x21a>
 8007d24:	2300      	movs	r3, #0
 8007d26:	3f01      	subs	r7, #1
 8007d28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d2c:	1b9b      	subs	r3, r3, r6
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	bf46      	itte	mi
 8007d32:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d36:	2300      	movmi	r3, #0
 8007d38:	f04f 0800 	movpl.w	r8, #0
 8007d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d3e:	bf48      	it	mi
 8007d40:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007d42:	2f00      	cmp	r7, #0
 8007d44:	db3b      	blt.n	8007dbe <_dtoa_r+0x21e>
 8007d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d48:	970e      	str	r7, [sp, #56]	@ 0x38
 8007d4a:	443b      	add	r3, r7
 8007d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4e:	2300      	movs	r3, #0
 8007d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d54:	2b09      	cmp	r3, #9
 8007d56:	d866      	bhi.n	8007e26 <_dtoa_r+0x286>
 8007d58:	2b05      	cmp	r3, #5
 8007d5a:	bfc4      	itt	gt
 8007d5c:	3b04      	subgt	r3, #4
 8007d5e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007d60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d62:	bfc8      	it	gt
 8007d64:	2400      	movgt	r4, #0
 8007d66:	f1a3 0302 	sub.w	r3, r3, #2
 8007d6a:	bfd8      	it	le
 8007d6c:	2401      	movle	r4, #1
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d864      	bhi.n	8007e3c <_dtoa_r+0x29c>
 8007d72:	e8df f003 	tbb	[pc, r3]
 8007d76:	382b      	.short	0x382b
 8007d78:	5636      	.short	0x5636
 8007d7a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007d7e:	441e      	add	r6, r3
 8007d80:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	bfc1      	itttt	gt
 8007d88:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007d90:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d94:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d98:	bfd6      	itet	le
 8007d9a:	f1c3 0320 	rsble	r3, r3, #32
 8007d9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007da2:	fa04 f003 	lslle.w	r0, r4, r3
 8007da6:	f7f8 fb1d 	bl	80003e4 <__aeabi_ui2d>
 8007daa:	2201      	movs	r2, #1
 8007dac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007db0:	3e01      	subs	r6, #1
 8007db2:	9212      	str	r2, [sp, #72]	@ 0x48
 8007db4:	e775      	b.n	8007ca2 <_dtoa_r+0x102>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e7b6      	b.n	8007d28 <_dtoa_r+0x188>
 8007dba:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007dbc:	e7b5      	b.n	8007d2a <_dtoa_r+0x18a>
 8007dbe:	427b      	negs	r3, r7
 8007dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	eba8 0807 	sub.w	r8, r8, r7
 8007dc8:	930e      	str	r3, [sp, #56]	@ 0x38
 8007dca:	e7c2      	b.n	8007d52 <_dtoa_r+0x1b2>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dc35      	bgt.n	8007e42 <_dtoa_r+0x2a2>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	461a      	mov	r2, r3
 8007dda:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007dde:	9221      	str	r2, [sp, #132]	@ 0x84
 8007de0:	e00b      	b.n	8007dfa <_dtoa_r+0x25a>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e7f3      	b.n	8007dce <_dtoa_r+0x22e>
 8007de6:	2300      	movs	r3, #0
 8007de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	9308      	str	r3, [sp, #32]
 8007df0:	3301      	adds	r3, #1
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	9307      	str	r3, [sp, #28]
 8007df6:	bfb8      	it	lt
 8007df8:	2301      	movlt	r3, #1
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e02:	f102 0514 	add.w	r5, r2, #20
 8007e06:	429d      	cmp	r5, r3
 8007e08:	d91f      	bls.n	8007e4a <_dtoa_r+0x2aa>
 8007e0a:	6041      	str	r1, [r0, #4]
 8007e0c:	4658      	mov	r0, fp
 8007e0e:	f000 fd8d 	bl	800892c <_Balloc>
 8007e12:	4682      	mov	sl, r0
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d139      	bne.n	8007e8c <_dtoa_r+0x2ec>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007e88 <_dtoa_r+0x2e8>)
 8007e20:	e6d2      	b.n	8007bc8 <_dtoa_r+0x28>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e7e0      	b.n	8007de8 <_dtoa_r+0x248>
 8007e26:	2401      	movs	r4, #1
 8007e28:	2300      	movs	r3, #0
 8007e2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e32:	2200      	movs	r2, #0
 8007e34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007e38:	2312      	movs	r3, #18
 8007e3a:	e7d0      	b.n	8007dde <_dtoa_r+0x23e>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e40:	e7f5      	b.n	8007e2e <_dtoa_r+0x28e>
 8007e42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e44:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007e48:	e7d7      	b.n	8007dfa <_dtoa_r+0x25a>
 8007e4a:	3101      	adds	r1, #1
 8007e4c:	0052      	lsls	r2, r2, #1
 8007e4e:	e7d8      	b.n	8007e02 <_dtoa_r+0x262>
 8007e50:	636f4361 	.word	0x636f4361
 8007e54:	3fd287a7 	.word	0x3fd287a7
 8007e58:	8b60c8b3 	.word	0x8b60c8b3
 8007e5c:	3fc68a28 	.word	0x3fc68a28
 8007e60:	509f79fb 	.word	0x509f79fb
 8007e64:	3fd34413 	.word	0x3fd34413
 8007e68:	0800c7fc 	.word	0x0800c7fc
 8007e6c:	0800c813 	.word	0x0800c813
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	0800c7f8 	.word	0x0800c7f8
 8007e78:	0800c7c7 	.word	0x0800c7c7
 8007e7c:	0800c7c6 	.word	0x0800c7c6
 8007e80:	3ff80000 	.word	0x3ff80000
 8007e84:	0800c910 	.word	0x0800c910
 8007e88:	0800c86b 	.word	0x0800c86b
 8007e8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e90:	6018      	str	r0, [r3, #0]
 8007e92:	9b07      	ldr	r3, [sp, #28]
 8007e94:	2b0e      	cmp	r3, #14
 8007e96:	f200 80a4 	bhi.w	8007fe2 <_dtoa_r+0x442>
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	f000 80a1 	beq.w	8007fe2 <_dtoa_r+0x442>
 8007ea0:	2f00      	cmp	r7, #0
 8007ea2:	dd33      	ble.n	8007f0c <_dtoa_r+0x36c>
 8007ea4:	4b86      	ldr	r3, [pc, #536]	@ (80080c0 <_dtoa_r+0x520>)
 8007ea6:	f007 020f 	and.w	r2, r7, #15
 8007eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eae:	05f8      	lsls	r0, r7, #23
 8007eb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007eb4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007eb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ebc:	d516      	bpl.n	8007eec <_dtoa_r+0x34c>
 8007ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ec2:	4b80      	ldr	r3, [pc, #512]	@ (80080c4 <_dtoa_r+0x524>)
 8007ec4:	2603      	movs	r6, #3
 8007ec6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eca:	f7f8 fc2f 	bl	800072c <__aeabi_ddiv>
 8007ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed2:	f004 040f 	and.w	r4, r4, #15
 8007ed6:	4d7b      	ldr	r5, [pc, #492]	@ (80080c4 <_dtoa_r+0x524>)
 8007ed8:	b954      	cbnz	r4, 8007ef0 <_dtoa_r+0x350>
 8007eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee2:	f7f8 fc23 	bl	800072c <__aeabi_ddiv>
 8007ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eea:	e028      	b.n	8007f3e <_dtoa_r+0x39e>
 8007eec:	2602      	movs	r6, #2
 8007eee:	e7f2      	b.n	8007ed6 <_dtoa_r+0x336>
 8007ef0:	07e1      	lsls	r1, r4, #31
 8007ef2:	d508      	bpl.n	8007f06 <_dtoa_r+0x366>
 8007ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007efc:	f7f8 faec 	bl	80004d8 <__aeabi_dmul>
 8007f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f04:	3601      	adds	r6, #1
 8007f06:	1064      	asrs	r4, r4, #1
 8007f08:	3508      	adds	r5, #8
 8007f0a:	e7e5      	b.n	8007ed8 <_dtoa_r+0x338>
 8007f0c:	f000 80d2 	beq.w	80080b4 <_dtoa_r+0x514>
 8007f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f14:	427c      	negs	r4, r7
 8007f16:	4b6a      	ldr	r3, [pc, #424]	@ (80080c0 <_dtoa_r+0x520>)
 8007f18:	f004 020f 	and.w	r2, r4, #15
 8007f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 fad8 	bl	80004d8 <__aeabi_dmul>
 8007f28:	2602      	movs	r6, #2
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f30:	4d64      	ldr	r5, [pc, #400]	@ (80080c4 <_dtoa_r+0x524>)
 8007f32:	1124      	asrs	r4, r4, #4
 8007f34:	2c00      	cmp	r4, #0
 8007f36:	f040 80b2 	bne.w	800809e <_dtoa_r+0x4fe>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1d3      	bne.n	8007ee6 <_dtoa_r+0x346>
 8007f3e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 80b7 	beq.w	80080b8 <_dtoa_r+0x518>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4b5d      	ldr	r3, [pc, #372]	@ (80080c8 <_dtoa_r+0x528>)
 8007f52:	f7f8 fd33 	bl	80009bc <__aeabi_dcmplt>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f000 80ae 	beq.w	80080b8 <_dtoa_r+0x518>
 8007f5c:	9b07      	ldr	r3, [sp, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 80aa 	beq.w	80080b8 <_dtoa_r+0x518>
 8007f64:	9b08      	ldr	r3, [sp, #32]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dd37      	ble.n	8007fda <_dtoa_r+0x43a>
 8007f6a:	1e7b      	subs	r3, r7, #1
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	9304      	str	r3, [sp, #16]
 8007f70:	2200      	movs	r2, #0
 8007f72:	4629      	mov	r1, r5
 8007f74:	4b55      	ldr	r3, [pc, #340]	@ (80080cc <_dtoa_r+0x52c>)
 8007f76:	f7f8 faaf 	bl	80004d8 <__aeabi_dmul>
 8007f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f7e:	9c08      	ldr	r4, [sp, #32]
 8007f80:	3601      	adds	r6, #1
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7f8 fa3e 	bl	8000404 <__aeabi_i2d>
 8007f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f8c:	f7f8 faa4 	bl	80004d8 <__aeabi_dmul>
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b4f      	ldr	r3, [pc, #316]	@ (80080d0 <_dtoa_r+0x530>)
 8007f94:	f7f8 f8ea 	bl	800016c <__adddf3>
 8007f98:	4605      	mov	r5, r0
 8007f9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	f040 809a 	bne.w	80080d8 <_dtoa_r+0x538>
 8007fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4b4a      	ldr	r3, [pc, #296]	@ (80080d4 <_dtoa_r+0x534>)
 8007fac:	f7f8 f8dc 	bl	8000168 <__aeabi_dsub>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4633      	mov	r3, r6
 8007fbc:	f7f8 fd1c 	bl	80009f8 <__aeabi_dcmpgt>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	f040 828e 	bne.w	80084e2 <_dtoa_r+0x942>
 8007fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fca:	462a      	mov	r2, r5
 8007fcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fd0:	f7f8 fcf4 	bl	80009bc <__aeabi_dcmplt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f040 8127 	bne.w	8008228 <_dtoa_r+0x688>
 8007fda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007fde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007fe2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f2c0 8163 	blt.w	80082b0 <_dtoa_r+0x710>
 8007fea:	2f0e      	cmp	r7, #14
 8007fec:	f300 8160 	bgt.w	80082b0 <_dtoa_r+0x710>
 8007ff0:	4b33      	ldr	r3, [pc, #204]	@ (80080c0 <_dtoa_r+0x520>)
 8007ff2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ff6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ffa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ffe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008000:	2b00      	cmp	r3, #0
 8008002:	da03      	bge.n	800800c <_dtoa_r+0x46c>
 8008004:	9b07      	ldr	r3, [sp, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	f340 8100 	ble.w	800820c <_dtoa_r+0x66c>
 800800c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008010:	4656      	mov	r6, sl
 8008012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	f7f8 fb87 	bl	800072c <__aeabi_ddiv>
 800801e:	f7f8 fd0b 	bl	8000a38 <__aeabi_d2iz>
 8008022:	4680      	mov	r8, r0
 8008024:	f7f8 f9ee 	bl	8000404 <__aeabi_i2d>
 8008028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802c:	f7f8 fa54 	bl	80004d8 <__aeabi_dmul>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 f896 	bl	8000168 <__aeabi_dsub>
 800803c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008040:	9d07      	ldr	r5, [sp, #28]
 8008042:	f806 4b01 	strb.w	r4, [r6], #1
 8008046:	eba6 040a 	sub.w	r4, r6, sl
 800804a:	42a5      	cmp	r5, r4
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	f040 8116 	bne.w	8008280 <_dtoa_r+0x6e0>
 8008054:	f7f8 f88a 	bl	800016c <__adddf3>
 8008058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800805c:	4604      	mov	r4, r0
 800805e:	460d      	mov	r5, r1
 8008060:	f7f8 fcca 	bl	80009f8 <__aeabi_dcmpgt>
 8008064:	2800      	cmp	r0, #0
 8008066:	f040 80f8 	bne.w	800825a <_dtoa_r+0x6ba>
 800806a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806e:	4620      	mov	r0, r4
 8008070:	4629      	mov	r1, r5
 8008072:	f7f8 fc99 	bl	80009a8 <__aeabi_dcmpeq>
 8008076:	b118      	cbz	r0, 8008080 <_dtoa_r+0x4e0>
 8008078:	f018 0f01 	tst.w	r8, #1
 800807c:	f040 80ed 	bne.w	800825a <_dtoa_r+0x6ba>
 8008080:	4649      	mov	r1, r9
 8008082:	4658      	mov	r0, fp
 8008084:	f000 fc92 	bl	80089ac <_Bfree>
 8008088:	2300      	movs	r3, #0
 800808a:	7033      	strb	r3, [r6, #0]
 800808c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800808e:	3701      	adds	r7, #1
 8008090:	601f      	str	r7, [r3, #0]
 8008092:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8320 	beq.w	80086da <_dtoa_r+0xb3a>
 800809a:	601e      	str	r6, [r3, #0]
 800809c:	e31d      	b.n	80086da <_dtoa_r+0xb3a>
 800809e:	07e2      	lsls	r2, r4, #31
 80080a0:	d505      	bpl.n	80080ae <_dtoa_r+0x50e>
 80080a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080a6:	f7f8 fa17 	bl	80004d8 <__aeabi_dmul>
 80080aa:	2301      	movs	r3, #1
 80080ac:	3601      	adds	r6, #1
 80080ae:	1064      	asrs	r4, r4, #1
 80080b0:	3508      	adds	r5, #8
 80080b2:	e73f      	b.n	8007f34 <_dtoa_r+0x394>
 80080b4:	2602      	movs	r6, #2
 80080b6:	e742      	b.n	8007f3e <_dtoa_r+0x39e>
 80080b8:	9c07      	ldr	r4, [sp, #28]
 80080ba:	9704      	str	r7, [sp, #16]
 80080bc:	e761      	b.n	8007f82 <_dtoa_r+0x3e2>
 80080be:	bf00      	nop
 80080c0:	0800c910 	.word	0x0800c910
 80080c4:	0800c8e8 	.word	0x0800c8e8
 80080c8:	3ff00000 	.word	0x3ff00000
 80080cc:	40240000 	.word	0x40240000
 80080d0:	401c0000 	.word	0x401c0000
 80080d4:	40140000 	.word	0x40140000
 80080d8:	4b70      	ldr	r3, [pc, #448]	@ (800829c <_dtoa_r+0x6fc>)
 80080da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080e4:	4454      	add	r4, sl
 80080e6:	2900      	cmp	r1, #0
 80080e8:	d045      	beq.n	8008176 <_dtoa_r+0x5d6>
 80080ea:	2000      	movs	r0, #0
 80080ec:	496c      	ldr	r1, [pc, #432]	@ (80082a0 <_dtoa_r+0x700>)
 80080ee:	f7f8 fb1d 	bl	800072c <__aeabi_ddiv>
 80080f2:	4633      	mov	r3, r6
 80080f4:	462a      	mov	r2, r5
 80080f6:	f7f8 f837 	bl	8000168 <__aeabi_dsub>
 80080fa:	4656      	mov	r6, sl
 80080fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008104:	f7f8 fc98 	bl	8000a38 <__aeabi_d2iz>
 8008108:	4605      	mov	r5, r0
 800810a:	f7f8 f97b 	bl	8000404 <__aeabi_i2d>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008116:	f7f8 f827 	bl	8000168 <__aeabi_dsub>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	3530      	adds	r5, #48	@ 0x30
 8008120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008124:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008128:	f806 5b01 	strb.w	r5, [r6], #1
 800812c:	f7f8 fc46 	bl	80009bc <__aeabi_dcmplt>
 8008130:	2800      	cmp	r0, #0
 8008132:	d163      	bne.n	80081fc <_dtoa_r+0x65c>
 8008134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008138:	2000      	movs	r0, #0
 800813a:	495a      	ldr	r1, [pc, #360]	@ (80082a4 <_dtoa_r+0x704>)
 800813c:	f7f8 f814 	bl	8000168 <__aeabi_dsub>
 8008140:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008144:	f7f8 fc3a 	bl	80009bc <__aeabi_dcmplt>
 8008148:	2800      	cmp	r0, #0
 800814a:	f040 8087 	bne.w	800825c <_dtoa_r+0x6bc>
 800814e:	42a6      	cmp	r6, r4
 8008150:	f43f af43 	beq.w	8007fda <_dtoa_r+0x43a>
 8008154:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008158:	2200      	movs	r2, #0
 800815a:	4b53      	ldr	r3, [pc, #332]	@ (80082a8 <_dtoa_r+0x708>)
 800815c:	f7f8 f9bc 	bl	80004d8 <__aeabi_dmul>
 8008160:	2200      	movs	r2, #0
 8008162:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	4b4f      	ldr	r3, [pc, #316]	@ (80082a8 <_dtoa_r+0x708>)
 800816c:	f7f8 f9b4 	bl	80004d8 <__aeabi_dmul>
 8008170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008174:	e7c4      	b.n	8008100 <_dtoa_r+0x560>
 8008176:	4631      	mov	r1, r6
 8008178:	4628      	mov	r0, r5
 800817a:	f7f8 f9ad 	bl	80004d8 <__aeabi_dmul>
 800817e:	4656      	mov	r6, sl
 8008180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008184:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818a:	f7f8 fc55 	bl	8000a38 <__aeabi_d2iz>
 800818e:	4605      	mov	r5, r0
 8008190:	f7f8 f938 	bl	8000404 <__aeabi_i2d>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800819c:	f7f7 ffe4 	bl	8000168 <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	3530      	adds	r5, #48	@ 0x30
 80081a6:	f806 5b01 	strb.w	r5, [r6], #1
 80081aa:	42a6      	cmp	r6, r4
 80081ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	d124      	bne.n	8008200 <_dtoa_r+0x660>
 80081b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081ba:	4b39      	ldr	r3, [pc, #228]	@ (80082a0 <_dtoa_r+0x700>)
 80081bc:	f7f7 ffd6 	bl	800016c <__adddf3>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081c8:	f7f8 fc16 	bl	80009f8 <__aeabi_dcmpgt>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d145      	bne.n	800825c <_dtoa_r+0x6bc>
 80081d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081d4:	2000      	movs	r0, #0
 80081d6:	4932      	ldr	r1, [pc, #200]	@ (80082a0 <_dtoa_r+0x700>)
 80081d8:	f7f7 ffc6 	bl	8000168 <__aeabi_dsub>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e4:	f7f8 fbea 	bl	80009bc <__aeabi_dcmplt>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f43f aef6 	beq.w	8007fda <_dtoa_r+0x43a>
 80081ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80081f0:	1e73      	subs	r3, r6, #1
 80081f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081f8:	2b30      	cmp	r3, #48	@ 0x30
 80081fa:	d0f8      	beq.n	80081ee <_dtoa_r+0x64e>
 80081fc:	9f04      	ldr	r7, [sp, #16]
 80081fe:	e73f      	b.n	8008080 <_dtoa_r+0x4e0>
 8008200:	4b29      	ldr	r3, [pc, #164]	@ (80082a8 <_dtoa_r+0x708>)
 8008202:	f7f8 f969 	bl	80004d8 <__aeabi_dmul>
 8008206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800820a:	e7bc      	b.n	8008186 <_dtoa_r+0x5e6>
 800820c:	d10c      	bne.n	8008228 <_dtoa_r+0x688>
 800820e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008212:	2200      	movs	r2, #0
 8008214:	4b25      	ldr	r3, [pc, #148]	@ (80082ac <_dtoa_r+0x70c>)
 8008216:	f7f8 f95f 	bl	80004d8 <__aeabi_dmul>
 800821a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800821e:	f7f8 fbe1 	bl	80009e4 <__aeabi_dcmpge>
 8008222:	2800      	cmp	r0, #0
 8008224:	f000 815b 	beq.w	80084de <_dtoa_r+0x93e>
 8008228:	2400      	movs	r4, #0
 800822a:	4625      	mov	r5, r4
 800822c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800822e:	4656      	mov	r6, sl
 8008230:	43db      	mvns	r3, r3
 8008232:	9304      	str	r3, [sp, #16]
 8008234:	2700      	movs	r7, #0
 8008236:	4621      	mov	r1, r4
 8008238:	4658      	mov	r0, fp
 800823a:	f000 fbb7 	bl	80089ac <_Bfree>
 800823e:	2d00      	cmp	r5, #0
 8008240:	d0dc      	beq.n	80081fc <_dtoa_r+0x65c>
 8008242:	b12f      	cbz	r7, 8008250 <_dtoa_r+0x6b0>
 8008244:	42af      	cmp	r7, r5
 8008246:	d003      	beq.n	8008250 <_dtoa_r+0x6b0>
 8008248:	4639      	mov	r1, r7
 800824a:	4658      	mov	r0, fp
 800824c:	f000 fbae 	bl	80089ac <_Bfree>
 8008250:	4629      	mov	r1, r5
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fbaa 	bl	80089ac <_Bfree>
 8008258:	e7d0      	b.n	80081fc <_dtoa_r+0x65c>
 800825a:	9704      	str	r7, [sp, #16]
 800825c:	4633      	mov	r3, r6
 800825e:	461e      	mov	r6, r3
 8008260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008264:	2a39      	cmp	r2, #57	@ 0x39
 8008266:	d107      	bne.n	8008278 <_dtoa_r+0x6d8>
 8008268:	459a      	cmp	sl, r3
 800826a:	d1f8      	bne.n	800825e <_dtoa_r+0x6be>
 800826c:	9a04      	ldr	r2, [sp, #16]
 800826e:	3201      	adds	r2, #1
 8008270:	9204      	str	r2, [sp, #16]
 8008272:	2230      	movs	r2, #48	@ 0x30
 8008274:	f88a 2000 	strb.w	r2, [sl]
 8008278:	781a      	ldrb	r2, [r3, #0]
 800827a:	3201      	adds	r2, #1
 800827c:	701a      	strb	r2, [r3, #0]
 800827e:	e7bd      	b.n	80081fc <_dtoa_r+0x65c>
 8008280:	2200      	movs	r2, #0
 8008282:	4b09      	ldr	r3, [pc, #36]	@ (80082a8 <_dtoa_r+0x708>)
 8008284:	f7f8 f928 	bl	80004d8 <__aeabi_dmul>
 8008288:	2200      	movs	r2, #0
 800828a:	2300      	movs	r3, #0
 800828c:	4604      	mov	r4, r0
 800828e:	460d      	mov	r5, r1
 8008290:	f7f8 fb8a 	bl	80009a8 <__aeabi_dcmpeq>
 8008294:	2800      	cmp	r0, #0
 8008296:	f43f aebc 	beq.w	8008012 <_dtoa_r+0x472>
 800829a:	e6f1      	b.n	8008080 <_dtoa_r+0x4e0>
 800829c:	0800c910 	.word	0x0800c910
 80082a0:	3fe00000 	.word	0x3fe00000
 80082a4:	3ff00000 	.word	0x3ff00000
 80082a8:	40240000 	.word	0x40240000
 80082ac:	40140000 	.word	0x40140000
 80082b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	f000 80db 	beq.w	800846e <_dtoa_r+0x8ce>
 80082b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80082ba:	2a01      	cmp	r2, #1
 80082bc:	f300 80bf 	bgt.w	800843e <_dtoa_r+0x89e>
 80082c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	f000 80b7 	beq.w	8008436 <_dtoa_r+0x896>
 80082c8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082cc:	4646      	mov	r6, r8
 80082ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082d2:	2101      	movs	r1, #1
 80082d4:	441a      	add	r2, r3
 80082d6:	4658      	mov	r0, fp
 80082d8:	4498      	add	r8, r3
 80082da:	9209      	str	r2, [sp, #36]	@ 0x24
 80082dc:	f000 fc64 	bl	8008ba8 <__i2b>
 80082e0:	4605      	mov	r5, r0
 80082e2:	b15e      	cbz	r6, 80082fc <_dtoa_r+0x75c>
 80082e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd08      	ble.n	80082fc <_dtoa_r+0x75c>
 80082ea:	42b3      	cmp	r3, r6
 80082ec:	bfa8      	it	ge
 80082ee:	4633      	movge	r3, r6
 80082f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082f2:	eba8 0803 	sub.w	r8, r8, r3
 80082f6:	1af6      	subs	r6, r6, r3
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082fe:	b1f3      	cbz	r3, 800833e <_dtoa_r+0x79e>
 8008300:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 80b7 	beq.w	8008476 <_dtoa_r+0x8d6>
 8008308:	b18c      	cbz	r4, 800832e <_dtoa_r+0x78e>
 800830a:	4629      	mov	r1, r5
 800830c:	4622      	mov	r2, r4
 800830e:	4658      	mov	r0, fp
 8008310:	f000 fd08 	bl	8008d24 <__pow5mult>
 8008314:	464a      	mov	r2, r9
 8008316:	4601      	mov	r1, r0
 8008318:	4605      	mov	r5, r0
 800831a:	4658      	mov	r0, fp
 800831c:	f000 fc5a 	bl	8008bd4 <__multiply>
 8008320:	4649      	mov	r1, r9
 8008322:	9004      	str	r0, [sp, #16]
 8008324:	4658      	mov	r0, fp
 8008326:	f000 fb41 	bl	80089ac <_Bfree>
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	4699      	mov	r9, r3
 800832e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008330:	1b1a      	subs	r2, r3, r4
 8008332:	d004      	beq.n	800833e <_dtoa_r+0x79e>
 8008334:	4649      	mov	r1, r9
 8008336:	4658      	mov	r0, fp
 8008338:	f000 fcf4 	bl	8008d24 <__pow5mult>
 800833c:	4681      	mov	r9, r0
 800833e:	2101      	movs	r1, #1
 8008340:	4658      	mov	r0, fp
 8008342:	f000 fc31 	bl	8008ba8 <__i2b>
 8008346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008348:	4604      	mov	r4, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 81c9 	beq.w	80086e2 <_dtoa_r+0xb42>
 8008350:	461a      	mov	r2, r3
 8008352:	4601      	mov	r1, r0
 8008354:	4658      	mov	r0, fp
 8008356:	f000 fce5 	bl	8008d24 <__pow5mult>
 800835a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800835c:	4604      	mov	r4, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	f300 808f 	bgt.w	8008482 <_dtoa_r+0x8e2>
 8008364:	9b02      	ldr	r3, [sp, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 8087 	bne.w	800847a <_dtoa_r+0x8da>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008372:	2b00      	cmp	r3, #0
 8008374:	f040 8083 	bne.w	800847e <_dtoa_r+0x8de>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800837e:	0d1b      	lsrs	r3, r3, #20
 8008380:	051b      	lsls	r3, r3, #20
 8008382:	b12b      	cbz	r3, 8008390 <_dtoa_r+0x7f0>
 8008384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008386:	f108 0801 	add.w	r8, r8, #1
 800838a:	3301      	adds	r3, #1
 800838c:	9309      	str	r3, [sp, #36]	@ 0x24
 800838e:	2301      	movs	r3, #1
 8008390:	930a      	str	r3, [sp, #40]	@ 0x28
 8008392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 81aa 	beq.w	80086ee <_dtoa_r+0xb4e>
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a0:	6918      	ldr	r0, [r3, #16]
 80083a2:	f000 fbb5 	bl	8008b10 <__hi0bits>
 80083a6:	f1c0 0020 	rsb	r0, r0, #32
 80083aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ac:	4418      	add	r0, r3
 80083ae:	f010 001f 	ands.w	r0, r0, #31
 80083b2:	d071      	beq.n	8008498 <_dtoa_r+0x8f8>
 80083b4:	f1c0 0320 	rsb	r3, r0, #32
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	dd65      	ble.n	8008488 <_dtoa_r+0x8e8>
 80083bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083be:	f1c0 001c 	rsb	r0, r0, #28
 80083c2:	4403      	add	r3, r0
 80083c4:	4480      	add	r8, r0
 80083c6:	4406      	add	r6, r0
 80083c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ca:	f1b8 0f00 	cmp.w	r8, #0
 80083ce:	dd05      	ble.n	80083dc <_dtoa_r+0x83c>
 80083d0:	4649      	mov	r1, r9
 80083d2:	4642      	mov	r2, r8
 80083d4:	4658      	mov	r0, fp
 80083d6:	f000 fcff 	bl	8008dd8 <__lshift>
 80083da:	4681      	mov	r9, r0
 80083dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd05      	ble.n	80083ee <_dtoa_r+0x84e>
 80083e2:	4621      	mov	r1, r4
 80083e4:	461a      	mov	r2, r3
 80083e6:	4658      	mov	r0, fp
 80083e8:	f000 fcf6 	bl	8008dd8 <__lshift>
 80083ec:	4604      	mov	r4, r0
 80083ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d053      	beq.n	800849c <_dtoa_r+0x8fc>
 80083f4:	4621      	mov	r1, r4
 80083f6:	4648      	mov	r0, r9
 80083f8:	f000 fd5a 	bl	8008eb0 <__mcmp>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	da4d      	bge.n	800849c <_dtoa_r+0x8fc>
 8008400:	1e7b      	subs	r3, r7, #1
 8008402:	4649      	mov	r1, r9
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	220a      	movs	r2, #10
 8008408:	2300      	movs	r3, #0
 800840a:	4658      	mov	r0, fp
 800840c:	f000 faf0 	bl	80089f0 <__multadd>
 8008410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008412:	4681      	mov	r9, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 816c 	beq.w	80086f2 <_dtoa_r+0xb52>
 800841a:	2300      	movs	r3, #0
 800841c:	4629      	mov	r1, r5
 800841e:	220a      	movs	r2, #10
 8008420:	4658      	mov	r0, fp
 8008422:	f000 fae5 	bl	80089f0 <__multadd>
 8008426:	9b08      	ldr	r3, [sp, #32]
 8008428:	4605      	mov	r5, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	dc61      	bgt.n	80084f2 <_dtoa_r+0x952>
 800842e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008430:	2b02      	cmp	r3, #2
 8008432:	dc3b      	bgt.n	80084ac <_dtoa_r+0x90c>
 8008434:	e05d      	b.n	80084f2 <_dtoa_r+0x952>
 8008436:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008438:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800843c:	e746      	b.n	80082cc <_dtoa_r+0x72c>
 800843e:	9b07      	ldr	r3, [sp, #28]
 8008440:	1e5c      	subs	r4, r3, #1
 8008442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008444:	42a3      	cmp	r3, r4
 8008446:	bfbf      	itttt	lt
 8008448:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800844a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800844c:	1ae3      	sublt	r3, r4, r3
 800844e:	18d2      	addlt	r2, r2, r3
 8008450:	bfa8      	it	ge
 8008452:	1b1c      	subge	r4, r3, r4
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	bfbe      	ittt	lt
 8008458:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800845a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800845c:	2400      	movlt	r4, #0
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfb5      	itete	lt
 8008462:	eba8 0603 	sublt.w	r6, r8, r3
 8008466:	4646      	movge	r6, r8
 8008468:	2300      	movlt	r3, #0
 800846a:	9b07      	ldrge	r3, [sp, #28]
 800846c:	e730      	b.n	80082d0 <_dtoa_r+0x730>
 800846e:	4646      	mov	r6, r8
 8008470:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008472:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008474:	e735      	b.n	80082e2 <_dtoa_r+0x742>
 8008476:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008478:	e75c      	b.n	8008334 <_dtoa_r+0x794>
 800847a:	2300      	movs	r3, #0
 800847c:	e788      	b.n	8008390 <_dtoa_r+0x7f0>
 800847e:	9b02      	ldr	r3, [sp, #8]
 8008480:	e786      	b.n	8008390 <_dtoa_r+0x7f0>
 8008482:	2300      	movs	r3, #0
 8008484:	930a      	str	r3, [sp, #40]	@ 0x28
 8008486:	e788      	b.n	800839a <_dtoa_r+0x7fa>
 8008488:	d09f      	beq.n	80083ca <_dtoa_r+0x82a>
 800848a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800848c:	331c      	adds	r3, #28
 800848e:	441a      	add	r2, r3
 8008490:	4498      	add	r8, r3
 8008492:	441e      	add	r6, r3
 8008494:	9209      	str	r2, [sp, #36]	@ 0x24
 8008496:	e798      	b.n	80083ca <_dtoa_r+0x82a>
 8008498:	4603      	mov	r3, r0
 800849a:	e7f6      	b.n	800848a <_dtoa_r+0x8ea>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	9704      	str	r7, [sp, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	dc20      	bgt.n	80084e6 <_dtoa_r+0x946>
 80084a4:	9308      	str	r3, [sp, #32]
 80084a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	dd1e      	ble.n	80084ea <_dtoa_r+0x94a>
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f47f aebc 	bne.w	800822c <_dtoa_r+0x68c>
 80084b4:	4621      	mov	r1, r4
 80084b6:	2205      	movs	r2, #5
 80084b8:	4658      	mov	r0, fp
 80084ba:	f000 fa99 	bl	80089f0 <__multadd>
 80084be:	4601      	mov	r1, r0
 80084c0:	4604      	mov	r4, r0
 80084c2:	4648      	mov	r0, r9
 80084c4:	f000 fcf4 	bl	8008eb0 <__mcmp>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	f77f aeaf 	ble.w	800822c <_dtoa_r+0x68c>
 80084ce:	2331      	movs	r3, #49	@ 0x31
 80084d0:	4656      	mov	r6, sl
 80084d2:	f806 3b01 	strb.w	r3, [r6], #1
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	3301      	adds	r3, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	e6aa      	b.n	8008234 <_dtoa_r+0x694>
 80084de:	9c07      	ldr	r4, [sp, #28]
 80084e0:	9704      	str	r7, [sp, #16]
 80084e2:	4625      	mov	r5, r4
 80084e4:	e7f3      	b.n	80084ce <_dtoa_r+0x92e>
 80084e6:	9b07      	ldr	r3, [sp, #28]
 80084e8:	9308      	str	r3, [sp, #32]
 80084ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8104 	beq.w	80086fa <_dtoa_r+0xb5a>
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	dd05      	ble.n	8008502 <_dtoa_r+0x962>
 80084f6:	4629      	mov	r1, r5
 80084f8:	4632      	mov	r2, r6
 80084fa:	4658      	mov	r0, fp
 80084fc:	f000 fc6c 	bl	8008dd8 <__lshift>
 8008500:	4605      	mov	r5, r0
 8008502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008504:	2b00      	cmp	r3, #0
 8008506:	d05a      	beq.n	80085be <_dtoa_r+0xa1e>
 8008508:	4658      	mov	r0, fp
 800850a:	6869      	ldr	r1, [r5, #4]
 800850c:	f000 fa0e 	bl	800892c <_Balloc>
 8008510:	4606      	mov	r6, r0
 8008512:	b928      	cbnz	r0, 8008520 <_dtoa_r+0x980>
 8008514:	4602      	mov	r2, r0
 8008516:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800851a:	4b83      	ldr	r3, [pc, #524]	@ (8008728 <_dtoa_r+0xb88>)
 800851c:	f7ff bb54 	b.w	8007bc8 <_dtoa_r+0x28>
 8008520:	692a      	ldr	r2, [r5, #16]
 8008522:	f105 010c 	add.w	r1, r5, #12
 8008526:	3202      	adds	r2, #2
 8008528:	0092      	lsls	r2, r2, #2
 800852a:	300c      	adds	r0, #12
 800852c:	f7ff fa9b 	bl	8007a66 <memcpy>
 8008530:	2201      	movs	r2, #1
 8008532:	4631      	mov	r1, r6
 8008534:	4658      	mov	r0, fp
 8008536:	f000 fc4f 	bl	8008dd8 <__lshift>
 800853a:	462f      	mov	r7, r5
 800853c:	4605      	mov	r5, r0
 800853e:	f10a 0301 	add.w	r3, sl, #1
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	9b08      	ldr	r3, [sp, #32]
 8008546:	4453      	add	r3, sl
 8008548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800854a:	9b02      	ldr	r3, [sp, #8]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	930a      	str	r3, [sp, #40]	@ 0x28
 8008552:	9b07      	ldr	r3, [sp, #28]
 8008554:	4621      	mov	r1, r4
 8008556:	3b01      	subs	r3, #1
 8008558:	4648      	mov	r0, r9
 800855a:	9302      	str	r3, [sp, #8]
 800855c:	f7ff fa96 	bl	8007a8c <quorem>
 8008560:	4639      	mov	r1, r7
 8008562:	9008      	str	r0, [sp, #32]
 8008564:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008568:	4648      	mov	r0, r9
 800856a:	f000 fca1 	bl	8008eb0 <__mcmp>
 800856e:	462a      	mov	r2, r5
 8008570:	9009      	str	r0, [sp, #36]	@ 0x24
 8008572:	4621      	mov	r1, r4
 8008574:	4658      	mov	r0, fp
 8008576:	f000 fcb7 	bl	8008ee8 <__mdiff>
 800857a:	68c2      	ldr	r2, [r0, #12]
 800857c:	4606      	mov	r6, r0
 800857e:	bb02      	cbnz	r2, 80085c2 <_dtoa_r+0xa22>
 8008580:	4601      	mov	r1, r0
 8008582:	4648      	mov	r0, r9
 8008584:	f000 fc94 	bl	8008eb0 <__mcmp>
 8008588:	4602      	mov	r2, r0
 800858a:	4631      	mov	r1, r6
 800858c:	4658      	mov	r0, fp
 800858e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008590:	f000 fa0c 	bl	80089ac <_Bfree>
 8008594:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008596:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008598:	9e07      	ldr	r6, [sp, #28]
 800859a:	ea43 0102 	orr.w	r1, r3, r2
 800859e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085a0:	4319      	orrs	r1, r3
 80085a2:	d110      	bne.n	80085c6 <_dtoa_r+0xa26>
 80085a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085a8:	d029      	beq.n	80085fe <_dtoa_r+0xa5e>
 80085aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd02      	ble.n	80085b6 <_dtoa_r+0xa16>
 80085b0:	9b08      	ldr	r3, [sp, #32]
 80085b2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80085b6:	9b02      	ldr	r3, [sp, #8]
 80085b8:	f883 8000 	strb.w	r8, [r3]
 80085bc:	e63b      	b.n	8008236 <_dtoa_r+0x696>
 80085be:	4628      	mov	r0, r5
 80085c0:	e7bb      	b.n	800853a <_dtoa_r+0x99a>
 80085c2:	2201      	movs	r2, #1
 80085c4:	e7e1      	b.n	800858a <_dtoa_r+0x9ea>
 80085c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db04      	blt.n	80085d6 <_dtoa_r+0xa36>
 80085cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80085ce:	430b      	orrs	r3, r1
 80085d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085d2:	430b      	orrs	r3, r1
 80085d4:	d120      	bne.n	8008618 <_dtoa_r+0xa78>
 80085d6:	2a00      	cmp	r2, #0
 80085d8:	dded      	ble.n	80085b6 <_dtoa_r+0xa16>
 80085da:	4649      	mov	r1, r9
 80085dc:	2201      	movs	r2, #1
 80085de:	4658      	mov	r0, fp
 80085e0:	f000 fbfa 	bl	8008dd8 <__lshift>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4681      	mov	r9, r0
 80085e8:	f000 fc62 	bl	8008eb0 <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	dc03      	bgt.n	80085f8 <_dtoa_r+0xa58>
 80085f0:	d1e1      	bne.n	80085b6 <_dtoa_r+0xa16>
 80085f2:	f018 0f01 	tst.w	r8, #1
 80085f6:	d0de      	beq.n	80085b6 <_dtoa_r+0xa16>
 80085f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085fc:	d1d8      	bne.n	80085b0 <_dtoa_r+0xa10>
 80085fe:	2339      	movs	r3, #57	@ 0x39
 8008600:	9a02      	ldr	r2, [sp, #8]
 8008602:	7013      	strb	r3, [r2, #0]
 8008604:	4633      	mov	r3, r6
 8008606:	461e      	mov	r6, r3
 8008608:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800860c:	3b01      	subs	r3, #1
 800860e:	2a39      	cmp	r2, #57	@ 0x39
 8008610:	d052      	beq.n	80086b8 <_dtoa_r+0xb18>
 8008612:	3201      	adds	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	e60e      	b.n	8008236 <_dtoa_r+0x696>
 8008618:	2a00      	cmp	r2, #0
 800861a:	dd07      	ble.n	800862c <_dtoa_r+0xa8c>
 800861c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008620:	d0ed      	beq.n	80085fe <_dtoa_r+0xa5e>
 8008622:	9a02      	ldr	r2, [sp, #8]
 8008624:	f108 0301 	add.w	r3, r8, #1
 8008628:	7013      	strb	r3, [r2, #0]
 800862a:	e604      	b.n	8008236 <_dtoa_r+0x696>
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	9a07      	ldr	r2, [sp, #28]
 8008630:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008636:	4293      	cmp	r3, r2
 8008638:	d028      	beq.n	800868c <_dtoa_r+0xaec>
 800863a:	4649      	mov	r1, r9
 800863c:	2300      	movs	r3, #0
 800863e:	220a      	movs	r2, #10
 8008640:	4658      	mov	r0, fp
 8008642:	f000 f9d5 	bl	80089f0 <__multadd>
 8008646:	42af      	cmp	r7, r5
 8008648:	4681      	mov	r9, r0
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	f04f 020a 	mov.w	r2, #10
 8008652:	4639      	mov	r1, r7
 8008654:	4658      	mov	r0, fp
 8008656:	d107      	bne.n	8008668 <_dtoa_r+0xac8>
 8008658:	f000 f9ca 	bl	80089f0 <__multadd>
 800865c:	4607      	mov	r7, r0
 800865e:	4605      	mov	r5, r0
 8008660:	9b07      	ldr	r3, [sp, #28]
 8008662:	3301      	adds	r3, #1
 8008664:	9307      	str	r3, [sp, #28]
 8008666:	e774      	b.n	8008552 <_dtoa_r+0x9b2>
 8008668:	f000 f9c2 	bl	80089f0 <__multadd>
 800866c:	4629      	mov	r1, r5
 800866e:	4607      	mov	r7, r0
 8008670:	2300      	movs	r3, #0
 8008672:	220a      	movs	r2, #10
 8008674:	4658      	mov	r0, fp
 8008676:	f000 f9bb 	bl	80089f0 <__multadd>
 800867a:	4605      	mov	r5, r0
 800867c:	e7f0      	b.n	8008660 <_dtoa_r+0xac0>
 800867e:	9b08      	ldr	r3, [sp, #32]
 8008680:	2700      	movs	r7, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	bfcc      	ite	gt
 8008686:	461e      	movgt	r6, r3
 8008688:	2601      	movle	r6, #1
 800868a:	4456      	add	r6, sl
 800868c:	4649      	mov	r1, r9
 800868e:	2201      	movs	r2, #1
 8008690:	4658      	mov	r0, fp
 8008692:	f000 fba1 	bl	8008dd8 <__lshift>
 8008696:	4621      	mov	r1, r4
 8008698:	4681      	mov	r9, r0
 800869a:	f000 fc09 	bl	8008eb0 <__mcmp>
 800869e:	2800      	cmp	r0, #0
 80086a0:	dcb0      	bgt.n	8008604 <_dtoa_r+0xa64>
 80086a2:	d102      	bne.n	80086aa <_dtoa_r+0xb0a>
 80086a4:	f018 0f01 	tst.w	r8, #1
 80086a8:	d1ac      	bne.n	8008604 <_dtoa_r+0xa64>
 80086aa:	4633      	mov	r3, r6
 80086ac:	461e      	mov	r6, r3
 80086ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b2:	2a30      	cmp	r2, #48	@ 0x30
 80086b4:	d0fa      	beq.n	80086ac <_dtoa_r+0xb0c>
 80086b6:	e5be      	b.n	8008236 <_dtoa_r+0x696>
 80086b8:	459a      	cmp	sl, r3
 80086ba:	d1a4      	bne.n	8008606 <_dtoa_r+0xa66>
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	3301      	adds	r3, #1
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	2331      	movs	r3, #49	@ 0x31
 80086c4:	f88a 3000 	strb.w	r3, [sl]
 80086c8:	e5b5      	b.n	8008236 <_dtoa_r+0x696>
 80086ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80086cc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800872c <_dtoa_r+0xb8c>
 80086d0:	b11b      	cbz	r3, 80086da <_dtoa_r+0xb3a>
 80086d2:	f10a 0308 	add.w	r3, sl, #8
 80086d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	4650      	mov	r0, sl
 80086dc:	b017      	add	sp, #92	@ 0x5c
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	f77f ae3d 	ble.w	8008364 <_dtoa_r+0x7c4>
 80086ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80086ee:	2001      	movs	r0, #1
 80086f0:	e65b      	b.n	80083aa <_dtoa_r+0x80a>
 80086f2:	9b08      	ldr	r3, [sp, #32]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f77f aed6 	ble.w	80084a6 <_dtoa_r+0x906>
 80086fa:	4656      	mov	r6, sl
 80086fc:	4621      	mov	r1, r4
 80086fe:	4648      	mov	r0, r9
 8008700:	f7ff f9c4 	bl	8007a8c <quorem>
 8008704:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008708:	9b08      	ldr	r3, [sp, #32]
 800870a:	f806 8b01 	strb.w	r8, [r6], #1
 800870e:	eba6 020a 	sub.w	r2, r6, sl
 8008712:	4293      	cmp	r3, r2
 8008714:	ddb3      	ble.n	800867e <_dtoa_r+0xade>
 8008716:	4649      	mov	r1, r9
 8008718:	2300      	movs	r3, #0
 800871a:	220a      	movs	r2, #10
 800871c:	4658      	mov	r0, fp
 800871e:	f000 f967 	bl	80089f0 <__multadd>
 8008722:	4681      	mov	r9, r0
 8008724:	e7ea      	b.n	80086fc <_dtoa_r+0xb5c>
 8008726:	bf00      	nop
 8008728:	0800c86b 	.word	0x0800c86b
 800872c:	0800c7ef 	.word	0x0800c7ef

08008730 <_free_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4605      	mov	r5, r0
 8008734:	2900      	cmp	r1, #0
 8008736:	d040      	beq.n	80087ba <_free_r+0x8a>
 8008738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873c:	1f0c      	subs	r4, r1, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfb8      	it	lt
 8008742:	18e4      	addlt	r4, r4, r3
 8008744:	f000 f8e6 	bl	8008914 <__malloc_lock>
 8008748:	4a1c      	ldr	r2, [pc, #112]	@ (80087bc <_free_r+0x8c>)
 800874a:	6813      	ldr	r3, [r2, #0]
 800874c:	b933      	cbnz	r3, 800875c <_free_r+0x2c>
 800874e:	6063      	str	r3, [r4, #4]
 8008750:	6014      	str	r4, [r2, #0]
 8008752:	4628      	mov	r0, r5
 8008754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008758:	f000 b8e2 	b.w	8008920 <__malloc_unlock>
 800875c:	42a3      	cmp	r3, r4
 800875e:	d908      	bls.n	8008772 <_free_r+0x42>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	1821      	adds	r1, r4, r0
 8008764:	428b      	cmp	r3, r1
 8008766:	bf01      	itttt	eq
 8008768:	6819      	ldreq	r1, [r3, #0]
 800876a:	685b      	ldreq	r3, [r3, #4]
 800876c:	1809      	addeq	r1, r1, r0
 800876e:	6021      	streq	r1, [r4, #0]
 8008770:	e7ed      	b.n	800874e <_free_r+0x1e>
 8008772:	461a      	mov	r2, r3
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	b10b      	cbz	r3, 800877c <_free_r+0x4c>
 8008778:	42a3      	cmp	r3, r4
 800877a:	d9fa      	bls.n	8008772 <_free_r+0x42>
 800877c:	6811      	ldr	r1, [r2, #0]
 800877e:	1850      	adds	r0, r2, r1
 8008780:	42a0      	cmp	r0, r4
 8008782:	d10b      	bne.n	800879c <_free_r+0x6c>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	4401      	add	r1, r0
 8008788:	1850      	adds	r0, r2, r1
 800878a:	4283      	cmp	r3, r0
 800878c:	6011      	str	r1, [r2, #0]
 800878e:	d1e0      	bne.n	8008752 <_free_r+0x22>
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	4408      	add	r0, r1
 8008796:	6010      	str	r0, [r2, #0]
 8008798:	6053      	str	r3, [r2, #4]
 800879a:	e7da      	b.n	8008752 <_free_r+0x22>
 800879c:	d902      	bls.n	80087a4 <_free_r+0x74>
 800879e:	230c      	movs	r3, #12
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	e7d6      	b.n	8008752 <_free_r+0x22>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	1821      	adds	r1, r4, r0
 80087a8:	428b      	cmp	r3, r1
 80087aa:	bf01      	itttt	eq
 80087ac:	6819      	ldreq	r1, [r3, #0]
 80087ae:	685b      	ldreq	r3, [r3, #4]
 80087b0:	1809      	addeq	r1, r1, r0
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	6054      	str	r4, [r2, #4]
 80087b8:	e7cb      	b.n	8008752 <_free_r+0x22>
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	200008d4 	.word	0x200008d4

080087c0 <malloc>:
 80087c0:	4b02      	ldr	r3, [pc, #8]	@ (80087cc <malloc+0xc>)
 80087c2:	4601      	mov	r1, r0
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	f000 b825 	b.w	8008814 <_malloc_r>
 80087ca:	bf00      	nop
 80087cc:	20000028 	.word	0x20000028

080087d0 <sbrk_aligned>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008810 <sbrk_aligned+0x40>)
 80087d4:	460c      	mov	r4, r1
 80087d6:	6831      	ldr	r1, [r6, #0]
 80087d8:	4605      	mov	r5, r0
 80087da:	b911      	cbnz	r1, 80087e2 <sbrk_aligned+0x12>
 80087dc:	f001 ffb0 	bl	800a740 <_sbrk_r>
 80087e0:	6030      	str	r0, [r6, #0]
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f001 ffab 	bl	800a740 <_sbrk_r>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d103      	bne.n	80087f6 <sbrk_aligned+0x26>
 80087ee:	f04f 34ff 	mov.w	r4, #4294967295
 80087f2:	4620      	mov	r0, r4
 80087f4:	bd70      	pop	{r4, r5, r6, pc}
 80087f6:	1cc4      	adds	r4, r0, #3
 80087f8:	f024 0403 	bic.w	r4, r4, #3
 80087fc:	42a0      	cmp	r0, r4
 80087fe:	d0f8      	beq.n	80087f2 <sbrk_aligned+0x22>
 8008800:	1a21      	subs	r1, r4, r0
 8008802:	4628      	mov	r0, r5
 8008804:	f001 ff9c 	bl	800a740 <_sbrk_r>
 8008808:	3001      	adds	r0, #1
 800880a:	d1f2      	bne.n	80087f2 <sbrk_aligned+0x22>
 800880c:	e7ef      	b.n	80087ee <sbrk_aligned+0x1e>
 800880e:	bf00      	nop
 8008810:	200008d0 	.word	0x200008d0

08008814 <_malloc_r>:
 8008814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008818:	1ccd      	adds	r5, r1, #3
 800881a:	f025 0503 	bic.w	r5, r5, #3
 800881e:	3508      	adds	r5, #8
 8008820:	2d0c      	cmp	r5, #12
 8008822:	bf38      	it	cc
 8008824:	250c      	movcc	r5, #12
 8008826:	2d00      	cmp	r5, #0
 8008828:	4606      	mov	r6, r0
 800882a:	db01      	blt.n	8008830 <_malloc_r+0x1c>
 800882c:	42a9      	cmp	r1, r5
 800882e:	d904      	bls.n	800883a <_malloc_r+0x26>
 8008830:	230c      	movs	r3, #12
 8008832:	6033      	str	r3, [r6, #0]
 8008834:	2000      	movs	r0, #0
 8008836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008910 <_malloc_r+0xfc>
 800883e:	f000 f869 	bl	8008914 <__malloc_lock>
 8008842:	f8d8 3000 	ldr.w	r3, [r8]
 8008846:	461c      	mov	r4, r3
 8008848:	bb44      	cbnz	r4, 800889c <_malloc_r+0x88>
 800884a:	4629      	mov	r1, r5
 800884c:	4630      	mov	r0, r6
 800884e:	f7ff ffbf 	bl	80087d0 <sbrk_aligned>
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	4604      	mov	r4, r0
 8008856:	d158      	bne.n	800890a <_malloc_r+0xf6>
 8008858:	f8d8 4000 	ldr.w	r4, [r8]
 800885c:	4627      	mov	r7, r4
 800885e:	2f00      	cmp	r7, #0
 8008860:	d143      	bne.n	80088ea <_malloc_r+0xd6>
 8008862:	2c00      	cmp	r4, #0
 8008864:	d04b      	beq.n	80088fe <_malloc_r+0xea>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	4639      	mov	r1, r7
 800886a:	4630      	mov	r0, r6
 800886c:	eb04 0903 	add.w	r9, r4, r3
 8008870:	f001 ff66 	bl	800a740 <_sbrk_r>
 8008874:	4581      	cmp	r9, r0
 8008876:	d142      	bne.n	80088fe <_malloc_r+0xea>
 8008878:	6821      	ldr	r1, [r4, #0]
 800887a:	4630      	mov	r0, r6
 800887c:	1a6d      	subs	r5, r5, r1
 800887e:	4629      	mov	r1, r5
 8008880:	f7ff ffa6 	bl	80087d0 <sbrk_aligned>
 8008884:	3001      	adds	r0, #1
 8008886:	d03a      	beq.n	80088fe <_malloc_r+0xea>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	442b      	add	r3, r5
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	f8d8 3000 	ldr.w	r3, [r8]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	bb62      	cbnz	r2, 80088f0 <_malloc_r+0xdc>
 8008896:	f8c8 7000 	str.w	r7, [r8]
 800889a:	e00f      	b.n	80088bc <_malloc_r+0xa8>
 800889c:	6822      	ldr	r2, [r4, #0]
 800889e:	1b52      	subs	r2, r2, r5
 80088a0:	d420      	bmi.n	80088e4 <_malloc_r+0xd0>
 80088a2:	2a0b      	cmp	r2, #11
 80088a4:	d917      	bls.n	80088d6 <_malloc_r+0xc2>
 80088a6:	1961      	adds	r1, r4, r5
 80088a8:	42a3      	cmp	r3, r4
 80088aa:	6025      	str	r5, [r4, #0]
 80088ac:	bf18      	it	ne
 80088ae:	6059      	strne	r1, [r3, #4]
 80088b0:	6863      	ldr	r3, [r4, #4]
 80088b2:	bf08      	it	eq
 80088b4:	f8c8 1000 	streq.w	r1, [r8]
 80088b8:	5162      	str	r2, [r4, r5]
 80088ba:	604b      	str	r3, [r1, #4]
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 f82f 	bl	8008920 <__malloc_unlock>
 80088c2:	f104 000b 	add.w	r0, r4, #11
 80088c6:	1d23      	adds	r3, r4, #4
 80088c8:	f020 0007 	bic.w	r0, r0, #7
 80088cc:	1ac2      	subs	r2, r0, r3
 80088ce:	bf1c      	itt	ne
 80088d0:	1a1b      	subne	r3, r3, r0
 80088d2:	50a3      	strne	r3, [r4, r2]
 80088d4:	e7af      	b.n	8008836 <_malloc_r+0x22>
 80088d6:	6862      	ldr	r2, [r4, #4]
 80088d8:	42a3      	cmp	r3, r4
 80088da:	bf0c      	ite	eq
 80088dc:	f8c8 2000 	streq.w	r2, [r8]
 80088e0:	605a      	strne	r2, [r3, #4]
 80088e2:	e7eb      	b.n	80088bc <_malloc_r+0xa8>
 80088e4:	4623      	mov	r3, r4
 80088e6:	6864      	ldr	r4, [r4, #4]
 80088e8:	e7ae      	b.n	8008848 <_malloc_r+0x34>
 80088ea:	463c      	mov	r4, r7
 80088ec:	687f      	ldr	r7, [r7, #4]
 80088ee:	e7b6      	b.n	800885e <_malloc_r+0x4a>
 80088f0:	461a      	mov	r2, r3
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	d1fb      	bne.n	80088f0 <_malloc_r+0xdc>
 80088f8:	2300      	movs	r3, #0
 80088fa:	6053      	str	r3, [r2, #4]
 80088fc:	e7de      	b.n	80088bc <_malloc_r+0xa8>
 80088fe:	230c      	movs	r3, #12
 8008900:	4630      	mov	r0, r6
 8008902:	6033      	str	r3, [r6, #0]
 8008904:	f000 f80c 	bl	8008920 <__malloc_unlock>
 8008908:	e794      	b.n	8008834 <_malloc_r+0x20>
 800890a:	6005      	str	r5, [r0, #0]
 800890c:	e7d6      	b.n	80088bc <_malloc_r+0xa8>
 800890e:	bf00      	nop
 8008910:	200008d4 	.word	0x200008d4

08008914 <__malloc_lock>:
 8008914:	4801      	ldr	r0, [pc, #4]	@ (800891c <__malloc_lock+0x8>)
 8008916:	f7ff b896 	b.w	8007a46 <__retarget_lock_acquire_recursive>
 800891a:	bf00      	nop
 800891c:	200008cc 	.word	0x200008cc

08008920 <__malloc_unlock>:
 8008920:	4801      	ldr	r0, [pc, #4]	@ (8008928 <__malloc_unlock+0x8>)
 8008922:	f7ff b891 	b.w	8007a48 <__retarget_lock_release_recursive>
 8008926:	bf00      	nop
 8008928:	200008cc 	.word	0x200008cc

0800892c <_Balloc>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	69c6      	ldr	r6, [r0, #28]
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	b976      	cbnz	r6, 8008954 <_Balloc+0x28>
 8008936:	2010      	movs	r0, #16
 8008938:	f7ff ff42 	bl	80087c0 <malloc>
 800893c:	4602      	mov	r2, r0
 800893e:	61e0      	str	r0, [r4, #28]
 8008940:	b920      	cbnz	r0, 800894c <_Balloc+0x20>
 8008942:	216b      	movs	r1, #107	@ 0x6b
 8008944:	4b17      	ldr	r3, [pc, #92]	@ (80089a4 <_Balloc+0x78>)
 8008946:	4818      	ldr	r0, [pc, #96]	@ (80089a8 <_Balloc+0x7c>)
 8008948:	f001 ff10 	bl	800a76c <__assert_func>
 800894c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008950:	6006      	str	r6, [r0, #0]
 8008952:	60c6      	str	r6, [r0, #12]
 8008954:	69e6      	ldr	r6, [r4, #28]
 8008956:	68f3      	ldr	r3, [r6, #12]
 8008958:	b183      	cbz	r3, 800897c <_Balloc+0x50>
 800895a:	69e3      	ldr	r3, [r4, #28]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008962:	b9b8      	cbnz	r0, 8008994 <_Balloc+0x68>
 8008964:	2101      	movs	r1, #1
 8008966:	fa01 f605 	lsl.w	r6, r1, r5
 800896a:	1d72      	adds	r2, r6, #5
 800896c:	4620      	mov	r0, r4
 800896e:	0092      	lsls	r2, r2, #2
 8008970:	f001 ff1a 	bl	800a7a8 <_calloc_r>
 8008974:	b160      	cbz	r0, 8008990 <_Balloc+0x64>
 8008976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800897a:	e00e      	b.n	800899a <_Balloc+0x6e>
 800897c:	2221      	movs	r2, #33	@ 0x21
 800897e:	2104      	movs	r1, #4
 8008980:	4620      	mov	r0, r4
 8008982:	f001 ff11 	bl	800a7a8 <_calloc_r>
 8008986:	69e3      	ldr	r3, [r4, #28]
 8008988:	60f0      	str	r0, [r6, #12]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e4      	bne.n	800895a <_Balloc+0x2e>
 8008990:	2000      	movs	r0, #0
 8008992:	bd70      	pop	{r4, r5, r6, pc}
 8008994:	6802      	ldr	r2, [r0, #0]
 8008996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800899a:	2300      	movs	r3, #0
 800899c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089a0:	e7f7      	b.n	8008992 <_Balloc+0x66>
 80089a2:	bf00      	nop
 80089a4:	0800c7fc 	.word	0x0800c7fc
 80089a8:	0800c87c 	.word	0x0800c87c

080089ac <_Bfree>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	69c6      	ldr	r6, [r0, #28]
 80089b0:	4605      	mov	r5, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	b976      	cbnz	r6, 80089d4 <_Bfree+0x28>
 80089b6:	2010      	movs	r0, #16
 80089b8:	f7ff ff02 	bl	80087c0 <malloc>
 80089bc:	4602      	mov	r2, r0
 80089be:	61e8      	str	r0, [r5, #28]
 80089c0:	b920      	cbnz	r0, 80089cc <_Bfree+0x20>
 80089c2:	218f      	movs	r1, #143	@ 0x8f
 80089c4:	4b08      	ldr	r3, [pc, #32]	@ (80089e8 <_Bfree+0x3c>)
 80089c6:	4809      	ldr	r0, [pc, #36]	@ (80089ec <_Bfree+0x40>)
 80089c8:	f001 fed0 	bl	800a76c <__assert_func>
 80089cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d0:	6006      	str	r6, [r0, #0]
 80089d2:	60c6      	str	r6, [r0, #12]
 80089d4:	b13c      	cbz	r4, 80089e6 <_Bfree+0x3a>
 80089d6:	69eb      	ldr	r3, [r5, #28]
 80089d8:	6862      	ldr	r2, [r4, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089e0:	6021      	str	r1, [r4, #0]
 80089e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	0800c7fc 	.word	0x0800c7fc
 80089ec:	0800c87c 	.word	0x0800c87c

080089f0 <__multadd>:
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	4607      	mov	r7, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	461e      	mov	r6, r3
 80089fa:	2000      	movs	r0, #0
 80089fc:	690d      	ldr	r5, [r1, #16]
 80089fe:	f101 0c14 	add.w	ip, r1, #20
 8008a02:	f8dc 3000 	ldr.w	r3, [ip]
 8008a06:	3001      	adds	r0, #1
 8008a08:	b299      	uxth	r1, r3
 8008a0a:	fb02 6101 	mla	r1, r2, r1, r6
 8008a0e:	0c1e      	lsrs	r6, r3, #16
 8008a10:	0c0b      	lsrs	r3, r1, #16
 8008a12:	fb02 3306 	mla	r3, r2, r6, r3
 8008a16:	b289      	uxth	r1, r1
 8008a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a1c:	4285      	cmp	r5, r0
 8008a1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a22:	f84c 1b04 	str.w	r1, [ip], #4
 8008a26:	dcec      	bgt.n	8008a02 <__multadd+0x12>
 8008a28:	b30e      	cbz	r6, 8008a6e <__multadd+0x7e>
 8008a2a:	68a3      	ldr	r3, [r4, #8]
 8008a2c:	42ab      	cmp	r3, r5
 8008a2e:	dc19      	bgt.n	8008a64 <__multadd+0x74>
 8008a30:	6861      	ldr	r1, [r4, #4]
 8008a32:	4638      	mov	r0, r7
 8008a34:	3101      	adds	r1, #1
 8008a36:	f7ff ff79 	bl	800892c <_Balloc>
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	b928      	cbnz	r0, 8008a4a <__multadd+0x5a>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	21ba      	movs	r1, #186	@ 0xba
 8008a42:	4b0c      	ldr	r3, [pc, #48]	@ (8008a74 <__multadd+0x84>)
 8008a44:	480c      	ldr	r0, [pc, #48]	@ (8008a78 <__multadd+0x88>)
 8008a46:	f001 fe91 	bl	800a76c <__assert_func>
 8008a4a:	6922      	ldr	r2, [r4, #16]
 8008a4c:	f104 010c 	add.w	r1, r4, #12
 8008a50:	3202      	adds	r2, #2
 8008a52:	0092      	lsls	r2, r2, #2
 8008a54:	300c      	adds	r0, #12
 8008a56:	f7ff f806 	bl	8007a66 <memcpy>
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f7ff ffa5 	bl	80089ac <_Bfree>
 8008a62:	4644      	mov	r4, r8
 8008a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a68:	3501      	adds	r5, #1
 8008a6a:	615e      	str	r6, [r3, #20]
 8008a6c:	6125      	str	r5, [r4, #16]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a74:	0800c86b 	.word	0x0800c86b
 8008a78:	0800c87c 	.word	0x0800c87c

08008a7c <__s2b>:
 8008a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a80:	4615      	mov	r5, r2
 8008a82:	2209      	movs	r2, #9
 8008a84:	461f      	mov	r7, r3
 8008a86:	3308      	adds	r3, #8
 8008a88:	460c      	mov	r4, r1
 8008a8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a8e:	4606      	mov	r6, r0
 8008a90:	2201      	movs	r2, #1
 8008a92:	2100      	movs	r1, #0
 8008a94:	429a      	cmp	r2, r3
 8008a96:	db09      	blt.n	8008aac <__s2b+0x30>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ff47 	bl	800892c <_Balloc>
 8008a9e:	b940      	cbnz	r0, 8008ab2 <__s2b+0x36>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	21d3      	movs	r1, #211	@ 0xd3
 8008aa4:	4b18      	ldr	r3, [pc, #96]	@ (8008b08 <__s2b+0x8c>)
 8008aa6:	4819      	ldr	r0, [pc, #100]	@ (8008b0c <__s2b+0x90>)
 8008aa8:	f001 fe60 	bl	800a76c <__assert_func>
 8008aac:	0052      	lsls	r2, r2, #1
 8008aae:	3101      	adds	r1, #1
 8008ab0:	e7f0      	b.n	8008a94 <__s2b+0x18>
 8008ab2:	9b08      	ldr	r3, [sp, #32]
 8008ab4:	2d09      	cmp	r5, #9
 8008ab6:	6143      	str	r3, [r0, #20]
 8008ab8:	f04f 0301 	mov.w	r3, #1
 8008abc:	6103      	str	r3, [r0, #16]
 8008abe:	dd16      	ble.n	8008aee <__s2b+0x72>
 8008ac0:	f104 0909 	add.w	r9, r4, #9
 8008ac4:	46c8      	mov	r8, r9
 8008ac6:	442c      	add	r4, r5
 8008ac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008acc:	4601      	mov	r1, r0
 8008ace:	220a      	movs	r2, #10
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	3b30      	subs	r3, #48	@ 0x30
 8008ad4:	f7ff ff8c 	bl	80089f0 <__multadd>
 8008ad8:	45a0      	cmp	r8, r4
 8008ada:	d1f5      	bne.n	8008ac8 <__s2b+0x4c>
 8008adc:	f1a5 0408 	sub.w	r4, r5, #8
 8008ae0:	444c      	add	r4, r9
 8008ae2:	1b2d      	subs	r5, r5, r4
 8008ae4:	1963      	adds	r3, r4, r5
 8008ae6:	42bb      	cmp	r3, r7
 8008ae8:	db04      	blt.n	8008af4 <__s2b+0x78>
 8008aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aee:	2509      	movs	r5, #9
 8008af0:	340a      	adds	r4, #10
 8008af2:	e7f6      	b.n	8008ae2 <__s2b+0x66>
 8008af4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008af8:	4601      	mov	r1, r0
 8008afa:	220a      	movs	r2, #10
 8008afc:	4630      	mov	r0, r6
 8008afe:	3b30      	subs	r3, #48	@ 0x30
 8008b00:	f7ff ff76 	bl	80089f0 <__multadd>
 8008b04:	e7ee      	b.n	8008ae4 <__s2b+0x68>
 8008b06:	bf00      	nop
 8008b08:	0800c86b 	.word	0x0800c86b
 8008b0c:	0800c87c 	.word	0x0800c87c

08008b10 <__hi0bits>:
 8008b10:	4603      	mov	r3, r0
 8008b12:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b16:	bf3a      	itte	cc
 8008b18:	0403      	lslcc	r3, r0, #16
 8008b1a:	2010      	movcc	r0, #16
 8008b1c:	2000      	movcs	r0, #0
 8008b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b22:	bf3c      	itt	cc
 8008b24:	021b      	lslcc	r3, r3, #8
 8008b26:	3008      	addcc	r0, #8
 8008b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b2c:	bf3c      	itt	cc
 8008b2e:	011b      	lslcc	r3, r3, #4
 8008b30:	3004      	addcc	r0, #4
 8008b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b36:	bf3c      	itt	cc
 8008b38:	009b      	lslcc	r3, r3, #2
 8008b3a:	3002      	addcc	r0, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	db05      	blt.n	8008b4c <__hi0bits+0x3c>
 8008b40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b44:	f100 0001 	add.w	r0, r0, #1
 8008b48:	bf08      	it	eq
 8008b4a:	2020      	moveq	r0, #32
 8008b4c:	4770      	bx	lr

08008b4e <__lo0bits>:
 8008b4e:	6803      	ldr	r3, [r0, #0]
 8008b50:	4602      	mov	r2, r0
 8008b52:	f013 0007 	ands.w	r0, r3, #7
 8008b56:	d00b      	beq.n	8008b70 <__lo0bits+0x22>
 8008b58:	07d9      	lsls	r1, r3, #31
 8008b5a:	d421      	bmi.n	8008ba0 <__lo0bits+0x52>
 8008b5c:	0798      	lsls	r0, r3, #30
 8008b5e:	bf49      	itett	mi
 8008b60:	085b      	lsrmi	r3, r3, #1
 8008b62:	089b      	lsrpl	r3, r3, #2
 8008b64:	2001      	movmi	r0, #1
 8008b66:	6013      	strmi	r3, [r2, #0]
 8008b68:	bf5c      	itt	pl
 8008b6a:	2002      	movpl	r0, #2
 8008b6c:	6013      	strpl	r3, [r2, #0]
 8008b6e:	4770      	bx	lr
 8008b70:	b299      	uxth	r1, r3
 8008b72:	b909      	cbnz	r1, 8008b78 <__lo0bits+0x2a>
 8008b74:	2010      	movs	r0, #16
 8008b76:	0c1b      	lsrs	r3, r3, #16
 8008b78:	b2d9      	uxtb	r1, r3
 8008b7a:	b909      	cbnz	r1, 8008b80 <__lo0bits+0x32>
 8008b7c:	3008      	adds	r0, #8
 8008b7e:	0a1b      	lsrs	r3, r3, #8
 8008b80:	0719      	lsls	r1, r3, #28
 8008b82:	bf04      	itt	eq
 8008b84:	091b      	lsreq	r3, r3, #4
 8008b86:	3004      	addeq	r0, #4
 8008b88:	0799      	lsls	r1, r3, #30
 8008b8a:	bf04      	itt	eq
 8008b8c:	089b      	lsreq	r3, r3, #2
 8008b8e:	3002      	addeq	r0, #2
 8008b90:	07d9      	lsls	r1, r3, #31
 8008b92:	d403      	bmi.n	8008b9c <__lo0bits+0x4e>
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	f100 0001 	add.w	r0, r0, #1
 8008b9a:	d003      	beq.n	8008ba4 <__lo0bits+0x56>
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	4770      	bx	lr
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	4770      	bx	lr
 8008ba4:	2020      	movs	r0, #32
 8008ba6:	4770      	bx	lr

08008ba8 <__i2b>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	460c      	mov	r4, r1
 8008bac:	2101      	movs	r1, #1
 8008bae:	f7ff febd 	bl	800892c <_Balloc>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	b928      	cbnz	r0, 8008bc2 <__i2b+0x1a>
 8008bb6:	f240 1145 	movw	r1, #325	@ 0x145
 8008bba:	4b04      	ldr	r3, [pc, #16]	@ (8008bcc <__i2b+0x24>)
 8008bbc:	4804      	ldr	r0, [pc, #16]	@ (8008bd0 <__i2b+0x28>)
 8008bbe:	f001 fdd5 	bl	800a76c <__assert_func>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	6144      	str	r4, [r0, #20]
 8008bc6:	6103      	str	r3, [r0, #16]
 8008bc8:	bd10      	pop	{r4, pc}
 8008bca:	bf00      	nop
 8008bcc:	0800c86b 	.word	0x0800c86b
 8008bd0:	0800c87c 	.word	0x0800c87c

08008bd4 <__multiply>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	4614      	mov	r4, r2
 8008bda:	690a      	ldr	r2, [r1, #16]
 8008bdc:	6923      	ldr	r3, [r4, #16]
 8008bde:	460f      	mov	r7, r1
 8008be0:	429a      	cmp	r2, r3
 8008be2:	bfa2      	ittt	ge
 8008be4:	4623      	movge	r3, r4
 8008be6:	460c      	movge	r4, r1
 8008be8:	461f      	movge	r7, r3
 8008bea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008bee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	6861      	ldr	r1, [r4, #4]
 8008bf6:	eb0a 0609 	add.w	r6, sl, r9
 8008bfa:	42b3      	cmp	r3, r6
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	bfb8      	it	lt
 8008c00:	3101      	addlt	r1, #1
 8008c02:	f7ff fe93 	bl	800892c <_Balloc>
 8008c06:	b930      	cbnz	r0, 8008c16 <__multiply+0x42>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c0e:	4b43      	ldr	r3, [pc, #268]	@ (8008d1c <__multiply+0x148>)
 8008c10:	4843      	ldr	r0, [pc, #268]	@ (8008d20 <__multiply+0x14c>)
 8008c12:	f001 fdab 	bl	800a76c <__assert_func>
 8008c16:	f100 0514 	add.w	r5, r0, #20
 8008c1a:	462b      	mov	r3, r5
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c22:	4543      	cmp	r3, r8
 8008c24:	d321      	bcc.n	8008c6a <__multiply+0x96>
 8008c26:	f107 0114 	add.w	r1, r7, #20
 8008c2a:	f104 0214 	add.w	r2, r4, #20
 8008c2e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c32:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	1b13      	subs	r3, r2, r4
 8008c3a:	3b15      	subs	r3, #21
 8008c3c:	f023 0303 	bic.w	r3, r3, #3
 8008c40:	3304      	adds	r3, #4
 8008c42:	f104 0715 	add.w	r7, r4, #21
 8008c46:	42ba      	cmp	r2, r7
 8008c48:	bf38      	it	cc
 8008c4a:	2304      	movcc	r3, #4
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	9103      	str	r1, [sp, #12]
 8008c52:	428b      	cmp	r3, r1
 8008c54:	d80c      	bhi.n	8008c70 <__multiply+0x9c>
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	dd03      	ble.n	8008c62 <__multiply+0x8e>
 8008c5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d05a      	beq.n	8008d18 <__multiply+0x144>
 8008c62:	6106      	str	r6, [r0, #16]
 8008c64:	b005      	add	sp, #20
 8008c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	f843 2b04 	str.w	r2, [r3], #4
 8008c6e:	e7d8      	b.n	8008c22 <__multiply+0x4e>
 8008c70:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c74:	f1ba 0f00 	cmp.w	sl, #0
 8008c78:	d023      	beq.n	8008cc2 <__multiply+0xee>
 8008c7a:	46a9      	mov	r9, r5
 8008c7c:	f04f 0c00 	mov.w	ip, #0
 8008c80:	f104 0e14 	add.w	lr, r4, #20
 8008c84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c88:	f8d9 3000 	ldr.w	r3, [r9]
 8008c8c:	fa1f fb87 	uxth.w	fp, r7
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c96:	4463      	add	r3, ip
 8008c98:	f8d9 c000 	ldr.w	ip, [r9]
 8008c9c:	0c3f      	lsrs	r7, r7, #16
 8008c9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008ca2:	fb0a c707 	mla	r7, sl, r7, ip
 8008ca6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cb0:	4572      	cmp	r2, lr
 8008cb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cb6:	f849 3b04 	str.w	r3, [r9], #4
 8008cba:	d8e3      	bhi.n	8008c84 <__multiply+0xb0>
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	f845 c003 	str.w	ip, [r5, r3]
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	3104      	adds	r1, #4
 8008cc6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008cca:	f1b9 0f00 	cmp.w	r9, #0
 8008cce:	d021      	beq.n	8008d14 <__multiply+0x140>
 8008cd0:	46ae      	mov	lr, r5
 8008cd2:	f04f 0a00 	mov.w	sl, #0
 8008cd6:	682b      	ldr	r3, [r5, #0]
 8008cd8:	f104 0c14 	add.w	ip, r4, #20
 8008cdc:	f8bc b000 	ldrh.w	fp, [ip]
 8008ce0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	fb09 770b 	mla	r7, r9, fp, r7
 8008cea:	4457      	add	r7, sl
 8008cec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cf0:	f84e 3b04 	str.w	r3, [lr], #4
 8008cf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cfc:	f8be 3000 	ldrh.w	r3, [lr]
 8008d00:	4562      	cmp	r2, ip
 8008d02:	fb09 330a 	mla	r3, r9, sl, r3
 8008d06:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d0e:	d8e5      	bhi.n	8008cdc <__multiply+0x108>
 8008d10:	9f01      	ldr	r7, [sp, #4]
 8008d12:	51eb      	str	r3, [r5, r7]
 8008d14:	3504      	adds	r5, #4
 8008d16:	e79a      	b.n	8008c4e <__multiply+0x7a>
 8008d18:	3e01      	subs	r6, #1
 8008d1a:	e79c      	b.n	8008c56 <__multiply+0x82>
 8008d1c:	0800c86b 	.word	0x0800c86b
 8008d20:	0800c87c 	.word	0x0800c87c

08008d24 <__pow5mult>:
 8008d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d28:	4615      	mov	r5, r2
 8008d2a:	f012 0203 	ands.w	r2, r2, #3
 8008d2e:	4607      	mov	r7, r0
 8008d30:	460e      	mov	r6, r1
 8008d32:	d007      	beq.n	8008d44 <__pow5mult+0x20>
 8008d34:	4c25      	ldr	r4, [pc, #148]	@ (8008dcc <__pow5mult+0xa8>)
 8008d36:	3a01      	subs	r2, #1
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d3e:	f7ff fe57 	bl	80089f0 <__multadd>
 8008d42:	4606      	mov	r6, r0
 8008d44:	10ad      	asrs	r5, r5, #2
 8008d46:	d03d      	beq.n	8008dc4 <__pow5mult+0xa0>
 8008d48:	69fc      	ldr	r4, [r7, #28]
 8008d4a:	b97c      	cbnz	r4, 8008d6c <__pow5mult+0x48>
 8008d4c:	2010      	movs	r0, #16
 8008d4e:	f7ff fd37 	bl	80087c0 <malloc>
 8008d52:	4602      	mov	r2, r0
 8008d54:	61f8      	str	r0, [r7, #28]
 8008d56:	b928      	cbnz	r0, 8008d64 <__pow5mult+0x40>
 8008d58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8008dd0 <__pow5mult+0xac>)
 8008d5e:	481d      	ldr	r0, [pc, #116]	@ (8008dd4 <__pow5mult+0xb0>)
 8008d60:	f001 fd04 	bl	800a76c <__assert_func>
 8008d64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d68:	6004      	str	r4, [r0, #0]
 8008d6a:	60c4      	str	r4, [r0, #12]
 8008d6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d74:	b94c      	cbnz	r4, 8008d8a <__pow5mult+0x66>
 8008d76:	f240 2171 	movw	r1, #625	@ 0x271
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	f7ff ff14 	bl	8008ba8 <__i2b>
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d88:	6003      	str	r3, [r0, #0]
 8008d8a:	f04f 0900 	mov.w	r9, #0
 8008d8e:	07eb      	lsls	r3, r5, #31
 8008d90:	d50a      	bpl.n	8008da8 <__pow5mult+0x84>
 8008d92:	4631      	mov	r1, r6
 8008d94:	4622      	mov	r2, r4
 8008d96:	4638      	mov	r0, r7
 8008d98:	f7ff ff1c 	bl	8008bd4 <__multiply>
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff fe03 	bl	80089ac <_Bfree>
 8008da6:	4646      	mov	r6, r8
 8008da8:	106d      	asrs	r5, r5, #1
 8008daa:	d00b      	beq.n	8008dc4 <__pow5mult+0xa0>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	b938      	cbnz	r0, 8008dc0 <__pow5mult+0x9c>
 8008db0:	4622      	mov	r2, r4
 8008db2:	4621      	mov	r1, r4
 8008db4:	4638      	mov	r0, r7
 8008db6:	f7ff ff0d 	bl	8008bd4 <__multiply>
 8008dba:	6020      	str	r0, [r4, #0]
 8008dbc:	f8c0 9000 	str.w	r9, [r0]
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	e7e4      	b.n	8008d8e <__pow5mult+0x6a>
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dca:	bf00      	nop
 8008dcc:	0800c8d8 	.word	0x0800c8d8
 8008dd0:	0800c7fc 	.word	0x0800c7fc
 8008dd4:	0800c87c 	.word	0x0800c87c

08008dd8 <__lshift>:
 8008dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	4607      	mov	r7, r0
 8008de0:	4691      	mov	r9, r2
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	6849      	ldr	r1, [r1, #4]
 8008de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008df0:	f108 0601 	add.w	r6, r8, #1
 8008df4:	42b3      	cmp	r3, r6
 8008df6:	db0b      	blt.n	8008e10 <__lshift+0x38>
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff fd97 	bl	800892c <_Balloc>
 8008dfe:	4605      	mov	r5, r0
 8008e00:	b948      	cbnz	r0, 8008e16 <__lshift+0x3e>
 8008e02:	4602      	mov	r2, r0
 8008e04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e08:	4b27      	ldr	r3, [pc, #156]	@ (8008ea8 <__lshift+0xd0>)
 8008e0a:	4828      	ldr	r0, [pc, #160]	@ (8008eac <__lshift+0xd4>)
 8008e0c:	f001 fcae 	bl	800a76c <__assert_func>
 8008e10:	3101      	adds	r1, #1
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	e7ee      	b.n	8008df4 <__lshift+0x1c>
 8008e16:	2300      	movs	r3, #0
 8008e18:	f100 0114 	add.w	r1, r0, #20
 8008e1c:	f100 0210 	add.w	r2, r0, #16
 8008e20:	4618      	mov	r0, r3
 8008e22:	4553      	cmp	r3, sl
 8008e24:	db33      	blt.n	8008e8e <__lshift+0xb6>
 8008e26:	6920      	ldr	r0, [r4, #16]
 8008e28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e2c:	f104 0314 	add.w	r3, r4, #20
 8008e30:	f019 091f 	ands.w	r9, r9, #31
 8008e34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e3c:	d02b      	beq.n	8008e96 <__lshift+0xbe>
 8008e3e:	468a      	mov	sl, r1
 8008e40:	2200      	movs	r2, #0
 8008e42:	f1c9 0e20 	rsb	lr, r9, #32
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	fa00 f009 	lsl.w	r0, r0, r9
 8008e4c:	4310      	orrs	r0, r2
 8008e4e:	f84a 0b04 	str.w	r0, [sl], #4
 8008e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e56:	459c      	cmp	ip, r3
 8008e58:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e5c:	d8f3      	bhi.n	8008e46 <__lshift+0x6e>
 8008e5e:	ebac 0304 	sub.w	r3, ip, r4
 8008e62:	3b15      	subs	r3, #21
 8008e64:	f023 0303 	bic.w	r3, r3, #3
 8008e68:	3304      	adds	r3, #4
 8008e6a:	f104 0015 	add.w	r0, r4, #21
 8008e6e:	4584      	cmp	ip, r0
 8008e70:	bf38      	it	cc
 8008e72:	2304      	movcc	r3, #4
 8008e74:	50ca      	str	r2, [r1, r3]
 8008e76:	b10a      	cbz	r2, 8008e7c <__lshift+0xa4>
 8008e78:	f108 0602 	add.w	r6, r8, #2
 8008e7c:	3e01      	subs	r6, #1
 8008e7e:	4638      	mov	r0, r7
 8008e80:	4621      	mov	r1, r4
 8008e82:	612e      	str	r6, [r5, #16]
 8008e84:	f7ff fd92 	bl	80089ac <_Bfree>
 8008e88:	4628      	mov	r0, r5
 8008e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e92:	3301      	adds	r3, #1
 8008e94:	e7c5      	b.n	8008e22 <__lshift+0x4a>
 8008e96:	3904      	subs	r1, #4
 8008e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9c:	459c      	cmp	ip, r3
 8008e9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ea2:	d8f9      	bhi.n	8008e98 <__lshift+0xc0>
 8008ea4:	e7ea      	b.n	8008e7c <__lshift+0xa4>
 8008ea6:	bf00      	nop
 8008ea8:	0800c86b 	.word	0x0800c86b
 8008eac:	0800c87c 	.word	0x0800c87c

08008eb0 <__mcmp>:
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	690a      	ldr	r2, [r1, #16]
 8008eb4:	6900      	ldr	r0, [r0, #16]
 8008eb6:	b530      	push	{r4, r5, lr}
 8008eb8:	1a80      	subs	r0, r0, r2
 8008eba:	d10e      	bne.n	8008eda <__mcmp+0x2a>
 8008ebc:	3314      	adds	r3, #20
 8008ebe:	3114      	adds	r1, #20
 8008ec0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ec4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ec8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ecc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ed0:	4295      	cmp	r5, r2
 8008ed2:	d003      	beq.n	8008edc <__mcmp+0x2c>
 8008ed4:	d205      	bcs.n	8008ee2 <__mcmp+0x32>
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eda:	bd30      	pop	{r4, r5, pc}
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d3f3      	bcc.n	8008ec8 <__mcmp+0x18>
 8008ee0:	e7fb      	b.n	8008eda <__mcmp+0x2a>
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	e7f9      	b.n	8008eda <__mcmp+0x2a>
	...

08008ee8 <__mdiff>:
 8008ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	4689      	mov	r9, r1
 8008eee:	4606      	mov	r6, r0
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4648      	mov	r0, r9
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	f7ff ffdb 	bl	8008eb0 <__mcmp>
 8008efa:	1e05      	subs	r5, r0, #0
 8008efc:	d112      	bne.n	8008f24 <__mdiff+0x3c>
 8008efe:	4629      	mov	r1, r5
 8008f00:	4630      	mov	r0, r6
 8008f02:	f7ff fd13 	bl	800892c <_Balloc>
 8008f06:	4602      	mov	r2, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <__mdiff+0x2e>
 8008f0a:	f240 2137 	movw	r1, #567	@ 0x237
 8008f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009008 <__mdiff+0x120>)
 8008f10:	483e      	ldr	r0, [pc, #248]	@ (800900c <__mdiff+0x124>)
 8008f12:	f001 fc2b 	bl	800a76c <__assert_func>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	b003      	add	sp, #12
 8008f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f24:	bfbc      	itt	lt
 8008f26:	464b      	movlt	r3, r9
 8008f28:	46a1      	movlt	r9, r4
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f30:	bfba      	itte	lt
 8008f32:	461c      	movlt	r4, r3
 8008f34:	2501      	movlt	r5, #1
 8008f36:	2500      	movge	r5, #0
 8008f38:	f7ff fcf8 	bl	800892c <_Balloc>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	b918      	cbnz	r0, 8008f48 <__mdiff+0x60>
 8008f40:	f240 2145 	movw	r1, #581	@ 0x245
 8008f44:	4b30      	ldr	r3, [pc, #192]	@ (8009008 <__mdiff+0x120>)
 8008f46:	e7e3      	b.n	8008f10 <__mdiff+0x28>
 8008f48:	f100 0b14 	add.w	fp, r0, #20
 8008f4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f50:	f109 0310 	add.w	r3, r9, #16
 8008f54:	60c5      	str	r5, [r0, #12]
 8008f56:	f04f 0c00 	mov.w	ip, #0
 8008f5a:	f109 0514 	add.w	r5, r9, #20
 8008f5e:	46d9      	mov	r9, fp
 8008f60:	6926      	ldr	r6, [r4, #16]
 8008f62:	f104 0e14 	add.w	lr, r4, #20
 8008f66:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f6a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f7a:	b281      	uxth	r1, r0
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	fa1f f38a 	uxth.w	r3, sl
 8008f82:	1a5b      	subs	r3, r3, r1
 8008f84:	0c00      	lsrs	r0, r0, #16
 8008f86:	4463      	add	r3, ip
 8008f88:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f8c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f96:	4576      	cmp	r6, lr
 8008f98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f9c:	f849 3b04 	str.w	r3, [r9], #4
 8008fa0:	d8e6      	bhi.n	8008f70 <__mdiff+0x88>
 8008fa2:	1b33      	subs	r3, r6, r4
 8008fa4:	3b15      	subs	r3, #21
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	3415      	adds	r4, #21
 8008fac:	3304      	adds	r3, #4
 8008fae:	42a6      	cmp	r6, r4
 8008fb0:	bf38      	it	cc
 8008fb2:	2304      	movcc	r3, #4
 8008fb4:	441d      	add	r5, r3
 8008fb6:	445b      	add	r3, fp
 8008fb8:	461e      	mov	r6, r3
 8008fba:	462c      	mov	r4, r5
 8008fbc:	4544      	cmp	r4, r8
 8008fbe:	d30e      	bcc.n	8008fde <__mdiff+0xf6>
 8008fc0:	f108 0103 	add.w	r1, r8, #3
 8008fc4:	1b49      	subs	r1, r1, r5
 8008fc6:	f021 0103 	bic.w	r1, r1, #3
 8008fca:	3d03      	subs	r5, #3
 8008fcc:	45a8      	cmp	r8, r5
 8008fce:	bf38      	it	cc
 8008fd0:	2100      	movcc	r1, #0
 8008fd2:	440b      	add	r3, r1
 8008fd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fd8:	b199      	cbz	r1, 8009002 <__mdiff+0x11a>
 8008fda:	6117      	str	r7, [r2, #16]
 8008fdc:	e79e      	b.n	8008f1c <__mdiff+0x34>
 8008fde:	46e6      	mov	lr, ip
 8008fe0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008fe4:	fa1f fc81 	uxth.w	ip, r1
 8008fe8:	44f4      	add	ip, lr
 8008fea:	0c08      	lsrs	r0, r1, #16
 8008fec:	4471      	add	r1, lr
 8008fee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ff2:	b289      	uxth	r1, r1
 8008ff4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ff8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ffc:	f846 1b04 	str.w	r1, [r6], #4
 8009000:	e7dc      	b.n	8008fbc <__mdiff+0xd4>
 8009002:	3f01      	subs	r7, #1
 8009004:	e7e6      	b.n	8008fd4 <__mdiff+0xec>
 8009006:	bf00      	nop
 8009008:	0800c86b 	.word	0x0800c86b
 800900c:	0800c87c 	.word	0x0800c87c

08009010 <__ulp>:
 8009010:	4b0e      	ldr	r3, [pc, #56]	@ (800904c <__ulp+0x3c>)
 8009012:	400b      	ands	r3, r1
 8009014:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009018:	2b00      	cmp	r3, #0
 800901a:	dc08      	bgt.n	800902e <__ulp+0x1e>
 800901c:	425b      	negs	r3, r3
 800901e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009022:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009026:	da04      	bge.n	8009032 <__ulp+0x22>
 8009028:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800902c:	4113      	asrs	r3, r2
 800902e:	2200      	movs	r2, #0
 8009030:	e008      	b.n	8009044 <__ulp+0x34>
 8009032:	f1a2 0314 	sub.w	r3, r2, #20
 8009036:	2b1e      	cmp	r3, #30
 8009038:	bfd6      	itet	le
 800903a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800903e:	2201      	movgt	r2, #1
 8009040:	40da      	lsrle	r2, r3
 8009042:	2300      	movs	r3, #0
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	7ff00000 	.word	0x7ff00000

08009050 <__b2d>:
 8009050:	6902      	ldr	r2, [r0, #16]
 8009052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009054:	f100 0614 	add.w	r6, r0, #20
 8009058:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800905c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009060:	4f1e      	ldr	r7, [pc, #120]	@ (80090dc <__b2d+0x8c>)
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff fd54 	bl	8008b10 <__hi0bits>
 8009068:	4603      	mov	r3, r0
 800906a:	f1c0 0020 	rsb	r0, r0, #32
 800906e:	2b0a      	cmp	r3, #10
 8009070:	f1a2 0504 	sub.w	r5, r2, #4
 8009074:	6008      	str	r0, [r1, #0]
 8009076:	dc12      	bgt.n	800909e <__b2d+0x4e>
 8009078:	42ae      	cmp	r6, r5
 800907a:	bf2c      	ite	cs
 800907c:	2200      	movcs	r2, #0
 800907e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009082:	f1c3 0c0b 	rsb	ip, r3, #11
 8009086:	3315      	adds	r3, #21
 8009088:	fa24 fe0c 	lsr.w	lr, r4, ip
 800908c:	fa04 f303 	lsl.w	r3, r4, r3
 8009090:	fa22 f20c 	lsr.w	r2, r2, ip
 8009094:	ea4e 0107 	orr.w	r1, lr, r7
 8009098:	431a      	orrs	r2, r3
 800909a:	4610      	mov	r0, r2
 800909c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800909e:	42ae      	cmp	r6, r5
 80090a0:	bf36      	itet	cc
 80090a2:	f1a2 0508 	subcc.w	r5, r2, #8
 80090a6:	2200      	movcs	r2, #0
 80090a8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80090ac:	3b0b      	subs	r3, #11
 80090ae:	d012      	beq.n	80090d6 <__b2d+0x86>
 80090b0:	f1c3 0720 	rsb	r7, r3, #32
 80090b4:	fa22 f107 	lsr.w	r1, r2, r7
 80090b8:	409c      	lsls	r4, r3
 80090ba:	430c      	orrs	r4, r1
 80090bc:	42b5      	cmp	r5, r6
 80090be:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80090c2:	bf94      	ite	ls
 80090c4:	2400      	movls	r4, #0
 80090c6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80090ca:	409a      	lsls	r2, r3
 80090cc:	40fc      	lsrs	r4, r7
 80090ce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80090d2:	4322      	orrs	r2, r4
 80090d4:	e7e1      	b.n	800909a <__b2d+0x4a>
 80090d6:	ea44 0107 	orr.w	r1, r4, r7
 80090da:	e7de      	b.n	800909a <__b2d+0x4a>
 80090dc:	3ff00000 	.word	0x3ff00000

080090e0 <__d2b>:
 80090e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80090e4:	2101      	movs	r1, #1
 80090e6:	4690      	mov	r8, r2
 80090e8:	4699      	mov	r9, r3
 80090ea:	9e08      	ldr	r6, [sp, #32]
 80090ec:	f7ff fc1e 	bl	800892c <_Balloc>
 80090f0:	4604      	mov	r4, r0
 80090f2:	b930      	cbnz	r0, 8009102 <__d2b+0x22>
 80090f4:	4602      	mov	r2, r0
 80090f6:	f240 310f 	movw	r1, #783	@ 0x30f
 80090fa:	4b23      	ldr	r3, [pc, #140]	@ (8009188 <__d2b+0xa8>)
 80090fc:	4823      	ldr	r0, [pc, #140]	@ (800918c <__d2b+0xac>)
 80090fe:	f001 fb35 	bl	800a76c <__assert_func>
 8009102:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009106:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800910a:	b10d      	cbz	r5, 8009110 <__d2b+0x30>
 800910c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	f1b8 0300 	subs.w	r3, r8, #0
 8009116:	d024      	beq.n	8009162 <__d2b+0x82>
 8009118:	4668      	mov	r0, sp
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	f7ff fd17 	bl	8008b4e <__lo0bits>
 8009120:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009124:	b1d8      	cbz	r0, 800915e <__d2b+0x7e>
 8009126:	f1c0 0320 	rsb	r3, r0, #32
 800912a:	fa02 f303 	lsl.w	r3, r2, r3
 800912e:	430b      	orrs	r3, r1
 8009130:	40c2      	lsrs	r2, r0
 8009132:	6163      	str	r3, [r4, #20]
 8009134:	9201      	str	r2, [sp, #4]
 8009136:	9b01      	ldr	r3, [sp, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	bf0c      	ite	eq
 800913c:	2201      	moveq	r2, #1
 800913e:	2202      	movne	r2, #2
 8009140:	61a3      	str	r3, [r4, #24]
 8009142:	6122      	str	r2, [r4, #16]
 8009144:	b1ad      	cbz	r5, 8009172 <__d2b+0x92>
 8009146:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800914a:	4405      	add	r5, r0
 800914c:	6035      	str	r5, [r6, #0]
 800914e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009154:	6018      	str	r0, [r3, #0]
 8009156:	4620      	mov	r0, r4
 8009158:	b002      	add	sp, #8
 800915a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800915e:	6161      	str	r1, [r4, #20]
 8009160:	e7e9      	b.n	8009136 <__d2b+0x56>
 8009162:	a801      	add	r0, sp, #4
 8009164:	f7ff fcf3 	bl	8008b4e <__lo0bits>
 8009168:	9b01      	ldr	r3, [sp, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	6163      	str	r3, [r4, #20]
 800916e:	3020      	adds	r0, #32
 8009170:	e7e7      	b.n	8009142 <__d2b+0x62>
 8009172:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009176:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800917a:	6030      	str	r0, [r6, #0]
 800917c:	6918      	ldr	r0, [r3, #16]
 800917e:	f7ff fcc7 	bl	8008b10 <__hi0bits>
 8009182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009186:	e7e4      	b.n	8009152 <__d2b+0x72>
 8009188:	0800c86b 	.word	0x0800c86b
 800918c:	0800c87c 	.word	0x0800c87c

08009190 <__ratio>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	b085      	sub	sp, #20
 8009196:	e9cd 1000 	strd	r1, r0, [sp]
 800919a:	a902      	add	r1, sp, #8
 800919c:	f7ff ff58 	bl	8009050 <__b2d>
 80091a0:	468b      	mov	fp, r1
 80091a2:	4606      	mov	r6, r0
 80091a4:	460f      	mov	r7, r1
 80091a6:	9800      	ldr	r0, [sp, #0]
 80091a8:	a903      	add	r1, sp, #12
 80091aa:	f7ff ff51 	bl	8009050 <__b2d>
 80091ae:	460d      	mov	r5, r1
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	4689      	mov	r9, r1
 80091b4:	6919      	ldr	r1, [r3, #16]
 80091b6:	9b00      	ldr	r3, [sp, #0]
 80091b8:	4604      	mov	r4, r0
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	4630      	mov	r0, r6
 80091be:	1ac9      	subs	r1, r1, r3
 80091c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80091c4:	1a9b      	subs	r3, r3, r2
 80091c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	bfcd      	iteet	gt
 80091ce:	463a      	movgt	r2, r7
 80091d0:	462a      	movle	r2, r5
 80091d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091d6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80091da:	bfd8      	it	le
 80091dc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80091e0:	464b      	mov	r3, r9
 80091e2:	4622      	mov	r2, r4
 80091e4:	4659      	mov	r1, fp
 80091e6:	f7f7 faa1 	bl	800072c <__aeabi_ddiv>
 80091ea:	b005      	add	sp, #20
 80091ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091f0 <__copybits>:
 80091f0:	3901      	subs	r1, #1
 80091f2:	b570      	push	{r4, r5, r6, lr}
 80091f4:	1149      	asrs	r1, r1, #5
 80091f6:	6914      	ldr	r4, [r2, #16]
 80091f8:	3101      	adds	r1, #1
 80091fa:	f102 0314 	add.w	r3, r2, #20
 80091fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009202:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009206:	1f05      	subs	r5, r0, #4
 8009208:	42a3      	cmp	r3, r4
 800920a:	d30c      	bcc.n	8009226 <__copybits+0x36>
 800920c:	1aa3      	subs	r3, r4, r2
 800920e:	3b11      	subs	r3, #17
 8009210:	f023 0303 	bic.w	r3, r3, #3
 8009214:	3211      	adds	r2, #17
 8009216:	42a2      	cmp	r2, r4
 8009218:	bf88      	it	hi
 800921a:	2300      	movhi	r3, #0
 800921c:	4418      	add	r0, r3
 800921e:	2300      	movs	r3, #0
 8009220:	4288      	cmp	r0, r1
 8009222:	d305      	bcc.n	8009230 <__copybits+0x40>
 8009224:	bd70      	pop	{r4, r5, r6, pc}
 8009226:	f853 6b04 	ldr.w	r6, [r3], #4
 800922a:	f845 6f04 	str.w	r6, [r5, #4]!
 800922e:	e7eb      	b.n	8009208 <__copybits+0x18>
 8009230:	f840 3b04 	str.w	r3, [r0], #4
 8009234:	e7f4      	b.n	8009220 <__copybits+0x30>

08009236 <__any_on>:
 8009236:	f100 0214 	add.w	r2, r0, #20
 800923a:	6900      	ldr	r0, [r0, #16]
 800923c:	114b      	asrs	r3, r1, #5
 800923e:	4298      	cmp	r0, r3
 8009240:	b510      	push	{r4, lr}
 8009242:	db11      	blt.n	8009268 <__any_on+0x32>
 8009244:	dd0a      	ble.n	800925c <__any_on+0x26>
 8009246:	f011 011f 	ands.w	r1, r1, #31
 800924a:	d007      	beq.n	800925c <__any_on+0x26>
 800924c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009250:	fa24 f001 	lsr.w	r0, r4, r1
 8009254:	fa00 f101 	lsl.w	r1, r0, r1
 8009258:	428c      	cmp	r4, r1
 800925a:	d10b      	bne.n	8009274 <__any_on+0x3e>
 800925c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009260:	4293      	cmp	r3, r2
 8009262:	d803      	bhi.n	800926c <__any_on+0x36>
 8009264:	2000      	movs	r0, #0
 8009266:	bd10      	pop	{r4, pc}
 8009268:	4603      	mov	r3, r0
 800926a:	e7f7      	b.n	800925c <__any_on+0x26>
 800926c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009270:	2900      	cmp	r1, #0
 8009272:	d0f5      	beq.n	8009260 <__any_on+0x2a>
 8009274:	2001      	movs	r0, #1
 8009276:	e7f6      	b.n	8009266 <__any_on+0x30>

08009278 <sulp>:
 8009278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927c:	460f      	mov	r7, r1
 800927e:	4690      	mov	r8, r2
 8009280:	f7ff fec6 	bl	8009010 <__ulp>
 8009284:	4604      	mov	r4, r0
 8009286:	460d      	mov	r5, r1
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	d011      	beq.n	80092b2 <sulp+0x3a>
 800928e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009292:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009296:	2b00      	cmp	r3, #0
 8009298:	dd0b      	ble.n	80092b2 <sulp+0x3a>
 800929a:	2400      	movs	r4, #0
 800929c:	051b      	lsls	r3, r3, #20
 800929e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80092a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80092a6:	4622      	mov	r2, r4
 80092a8:	462b      	mov	r3, r5
 80092aa:	f7f7 f915 	bl	80004d8 <__aeabi_dmul>
 80092ae:	4604      	mov	r4, r0
 80092b0:	460d      	mov	r5, r1
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ba:	0000      	movs	r0, r0
 80092bc:	0000      	movs	r0, r0
	...

080092c0 <_strtod_l>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	b09f      	sub	sp, #124	@ 0x7c
 80092c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80092c8:	2200      	movs	r2, #0
 80092ca:	460c      	mov	r4, r1
 80092cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80092ce:	f04f 0a00 	mov.w	sl, #0
 80092d2:	f04f 0b00 	mov.w	fp, #0
 80092d6:	460a      	mov	r2, r1
 80092d8:	9005      	str	r0, [sp, #20]
 80092da:	9219      	str	r2, [sp, #100]	@ 0x64
 80092dc:	7811      	ldrb	r1, [r2, #0]
 80092de:	292b      	cmp	r1, #43	@ 0x2b
 80092e0:	d048      	beq.n	8009374 <_strtod_l+0xb4>
 80092e2:	d836      	bhi.n	8009352 <_strtod_l+0x92>
 80092e4:	290d      	cmp	r1, #13
 80092e6:	d830      	bhi.n	800934a <_strtod_l+0x8a>
 80092e8:	2908      	cmp	r1, #8
 80092ea:	d830      	bhi.n	800934e <_strtod_l+0x8e>
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d039      	beq.n	8009364 <_strtod_l+0xa4>
 80092f0:	2200      	movs	r2, #0
 80092f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80092f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80092f6:	782a      	ldrb	r2, [r5, #0]
 80092f8:	2a30      	cmp	r2, #48	@ 0x30
 80092fa:	f040 80b1 	bne.w	8009460 <_strtod_l+0x1a0>
 80092fe:	786a      	ldrb	r2, [r5, #1]
 8009300:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009304:	2a58      	cmp	r2, #88	@ 0x58
 8009306:	d16c      	bne.n	80093e2 <_strtod_l+0x122>
 8009308:	9302      	str	r3, [sp, #8]
 800930a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800930c:	4a8e      	ldr	r2, [pc, #568]	@ (8009548 <_strtod_l+0x288>)
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	ab1a      	add	r3, sp, #104	@ 0x68
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	9805      	ldr	r0, [sp, #20]
 8009316:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009318:	a919      	add	r1, sp, #100	@ 0x64
 800931a:	f001 fac1 	bl	800a8a0 <__gethex>
 800931e:	f010 060f 	ands.w	r6, r0, #15
 8009322:	4604      	mov	r4, r0
 8009324:	d005      	beq.n	8009332 <_strtod_l+0x72>
 8009326:	2e06      	cmp	r6, #6
 8009328:	d126      	bne.n	8009378 <_strtod_l+0xb8>
 800932a:	2300      	movs	r3, #0
 800932c:	3501      	adds	r5, #1
 800932e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009330:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009332:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009334:	2b00      	cmp	r3, #0
 8009336:	f040 8584 	bne.w	8009e42 <_strtod_l+0xb82>
 800933a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800933c:	b1bb      	cbz	r3, 800936e <_strtod_l+0xae>
 800933e:	4650      	mov	r0, sl
 8009340:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009344:	b01f      	add	sp, #124	@ 0x7c
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	2920      	cmp	r1, #32
 800934c:	d1d0      	bne.n	80092f0 <_strtod_l+0x30>
 800934e:	3201      	adds	r2, #1
 8009350:	e7c3      	b.n	80092da <_strtod_l+0x1a>
 8009352:	292d      	cmp	r1, #45	@ 0x2d
 8009354:	d1cc      	bne.n	80092f0 <_strtod_l+0x30>
 8009356:	2101      	movs	r1, #1
 8009358:	910b      	str	r1, [sp, #44]	@ 0x2c
 800935a:	1c51      	adds	r1, r2, #1
 800935c:	9119      	str	r1, [sp, #100]	@ 0x64
 800935e:	7852      	ldrb	r2, [r2, #1]
 8009360:	2a00      	cmp	r2, #0
 8009362:	d1c7      	bne.n	80092f4 <_strtod_l+0x34>
 8009364:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009366:	9419      	str	r4, [sp, #100]	@ 0x64
 8009368:	2b00      	cmp	r3, #0
 800936a:	f040 8568 	bne.w	8009e3e <_strtod_l+0xb7e>
 800936e:	4650      	mov	r0, sl
 8009370:	4659      	mov	r1, fp
 8009372:	e7e7      	b.n	8009344 <_strtod_l+0x84>
 8009374:	2100      	movs	r1, #0
 8009376:	e7ef      	b.n	8009358 <_strtod_l+0x98>
 8009378:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800937a:	b13a      	cbz	r2, 800938c <_strtod_l+0xcc>
 800937c:	2135      	movs	r1, #53	@ 0x35
 800937e:	a81c      	add	r0, sp, #112	@ 0x70
 8009380:	f7ff ff36 	bl	80091f0 <__copybits>
 8009384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009386:	9805      	ldr	r0, [sp, #20]
 8009388:	f7ff fb10 	bl	80089ac <_Bfree>
 800938c:	3e01      	subs	r6, #1
 800938e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009390:	2e04      	cmp	r6, #4
 8009392:	d806      	bhi.n	80093a2 <_strtod_l+0xe2>
 8009394:	e8df f006 	tbb	[pc, r6]
 8009398:	201d0314 	.word	0x201d0314
 800939c:	14          	.byte	0x14
 800939d:	00          	.byte	0x00
 800939e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80093a2:	05e1      	lsls	r1, r4, #23
 80093a4:	bf48      	it	mi
 80093a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80093aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ae:	0d1b      	lsrs	r3, r3, #20
 80093b0:	051b      	lsls	r3, r3, #20
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1bd      	bne.n	8009332 <_strtod_l+0x72>
 80093b6:	f7fe fb1b 	bl	80079f0 <__errno>
 80093ba:	2322      	movs	r3, #34	@ 0x22
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	e7b8      	b.n	8009332 <_strtod_l+0x72>
 80093c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80093c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80093c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80093cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093d0:	e7e7      	b.n	80093a2 <_strtod_l+0xe2>
 80093d2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800954c <_strtod_l+0x28c>
 80093d6:	e7e4      	b.n	80093a2 <_strtod_l+0xe2>
 80093d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80093dc:	f04f 3aff 	mov.w	sl, #4294967295
 80093e0:	e7df      	b.n	80093a2 <_strtod_l+0xe2>
 80093e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	2b30      	cmp	r3, #48	@ 0x30
 80093ec:	d0f9      	beq.n	80093e2 <_strtod_l+0x122>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d09f      	beq.n	8009332 <_strtod_l+0x72>
 80093f2:	2301      	movs	r3, #1
 80093f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093f8:	220a      	movs	r2, #10
 80093fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80093fc:	2300      	movs	r3, #0
 80093fe:	461f      	mov	r7, r3
 8009400:	9308      	str	r3, [sp, #32]
 8009402:	930a      	str	r3, [sp, #40]	@ 0x28
 8009404:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009406:	7805      	ldrb	r5, [r0, #0]
 8009408:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800940c:	b2d9      	uxtb	r1, r3
 800940e:	2909      	cmp	r1, #9
 8009410:	d928      	bls.n	8009464 <_strtod_l+0x1a4>
 8009412:	2201      	movs	r2, #1
 8009414:	494e      	ldr	r1, [pc, #312]	@ (8009550 <_strtod_l+0x290>)
 8009416:	f001 f981 	bl	800a71c <strncmp>
 800941a:	2800      	cmp	r0, #0
 800941c:	d032      	beq.n	8009484 <_strtod_l+0x1c4>
 800941e:	2000      	movs	r0, #0
 8009420:	462a      	mov	r2, r5
 8009422:	4681      	mov	r9, r0
 8009424:	463d      	mov	r5, r7
 8009426:	4603      	mov	r3, r0
 8009428:	2a65      	cmp	r2, #101	@ 0x65
 800942a:	d001      	beq.n	8009430 <_strtod_l+0x170>
 800942c:	2a45      	cmp	r2, #69	@ 0x45
 800942e:	d114      	bne.n	800945a <_strtod_l+0x19a>
 8009430:	b91d      	cbnz	r5, 800943a <_strtod_l+0x17a>
 8009432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009434:	4302      	orrs	r2, r0
 8009436:	d095      	beq.n	8009364 <_strtod_l+0xa4>
 8009438:	2500      	movs	r5, #0
 800943a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800943c:	1c62      	adds	r2, r4, #1
 800943e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009440:	7862      	ldrb	r2, [r4, #1]
 8009442:	2a2b      	cmp	r2, #43	@ 0x2b
 8009444:	d077      	beq.n	8009536 <_strtod_l+0x276>
 8009446:	2a2d      	cmp	r2, #45	@ 0x2d
 8009448:	d07b      	beq.n	8009542 <_strtod_l+0x282>
 800944a:	f04f 0c00 	mov.w	ip, #0
 800944e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009452:	2909      	cmp	r1, #9
 8009454:	f240 8082 	bls.w	800955c <_strtod_l+0x29c>
 8009458:	9419      	str	r4, [sp, #100]	@ 0x64
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	e0a2      	b.n	80095a6 <_strtod_l+0x2e6>
 8009460:	2300      	movs	r3, #0
 8009462:	e7c7      	b.n	80093f4 <_strtod_l+0x134>
 8009464:	2f08      	cmp	r7, #8
 8009466:	bfd5      	itete	le
 8009468:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800946a:	9908      	ldrgt	r1, [sp, #32]
 800946c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009470:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009474:	f100 0001 	add.w	r0, r0, #1
 8009478:	bfd4      	ite	le
 800947a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800947c:	9308      	strgt	r3, [sp, #32]
 800947e:	3701      	adds	r7, #1
 8009480:	9019      	str	r0, [sp, #100]	@ 0x64
 8009482:	e7bf      	b.n	8009404 <_strtod_l+0x144>
 8009484:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	9219      	str	r2, [sp, #100]	@ 0x64
 800948a:	785a      	ldrb	r2, [r3, #1]
 800948c:	b37f      	cbz	r7, 80094ee <_strtod_l+0x22e>
 800948e:	4681      	mov	r9, r0
 8009490:	463d      	mov	r5, r7
 8009492:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009496:	2b09      	cmp	r3, #9
 8009498:	d912      	bls.n	80094c0 <_strtod_l+0x200>
 800949a:	2301      	movs	r3, #1
 800949c:	e7c4      	b.n	8009428 <_strtod_l+0x168>
 800949e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094a0:	3001      	adds	r0, #1
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80094a6:	785a      	ldrb	r2, [r3, #1]
 80094a8:	2a30      	cmp	r2, #48	@ 0x30
 80094aa:	d0f8      	beq.n	800949e <_strtod_l+0x1de>
 80094ac:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	f200 84cb 	bhi.w	8009e4c <_strtod_l+0xb8c>
 80094b6:	4681      	mov	r9, r0
 80094b8:	2000      	movs	r0, #0
 80094ba:	4605      	mov	r5, r0
 80094bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094be:	930c      	str	r3, [sp, #48]	@ 0x30
 80094c0:	3a30      	subs	r2, #48	@ 0x30
 80094c2:	f100 0301 	add.w	r3, r0, #1
 80094c6:	d02a      	beq.n	800951e <_strtod_l+0x25e>
 80094c8:	4499      	add	r9, r3
 80094ca:	210a      	movs	r1, #10
 80094cc:	462b      	mov	r3, r5
 80094ce:	eb00 0c05 	add.w	ip, r0, r5
 80094d2:	4563      	cmp	r3, ip
 80094d4:	d10d      	bne.n	80094f2 <_strtod_l+0x232>
 80094d6:	1c69      	adds	r1, r5, #1
 80094d8:	4401      	add	r1, r0
 80094da:	4428      	add	r0, r5
 80094dc:	2808      	cmp	r0, #8
 80094de:	dc16      	bgt.n	800950e <_strtod_l+0x24e>
 80094e0:	230a      	movs	r3, #10
 80094e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094e4:	fb03 2300 	mla	r3, r3, r0, r2
 80094e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094ea:	2300      	movs	r3, #0
 80094ec:	e018      	b.n	8009520 <_strtod_l+0x260>
 80094ee:	4638      	mov	r0, r7
 80094f0:	e7da      	b.n	80094a8 <_strtod_l+0x1e8>
 80094f2:	2b08      	cmp	r3, #8
 80094f4:	f103 0301 	add.w	r3, r3, #1
 80094f8:	dc03      	bgt.n	8009502 <_strtod_l+0x242>
 80094fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80094fc:	434e      	muls	r6, r1
 80094fe:	960a      	str	r6, [sp, #40]	@ 0x28
 8009500:	e7e7      	b.n	80094d2 <_strtod_l+0x212>
 8009502:	2b10      	cmp	r3, #16
 8009504:	bfde      	ittt	le
 8009506:	9e08      	ldrle	r6, [sp, #32]
 8009508:	434e      	mulle	r6, r1
 800950a:	9608      	strle	r6, [sp, #32]
 800950c:	e7e1      	b.n	80094d2 <_strtod_l+0x212>
 800950e:	280f      	cmp	r0, #15
 8009510:	dceb      	bgt.n	80094ea <_strtod_l+0x22a>
 8009512:	230a      	movs	r3, #10
 8009514:	9808      	ldr	r0, [sp, #32]
 8009516:	fb03 2300 	mla	r3, r3, r0, r2
 800951a:	9308      	str	r3, [sp, #32]
 800951c:	e7e5      	b.n	80094ea <_strtod_l+0x22a>
 800951e:	4629      	mov	r1, r5
 8009520:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009522:	460d      	mov	r5, r1
 8009524:	1c50      	adds	r0, r2, #1
 8009526:	9019      	str	r0, [sp, #100]	@ 0x64
 8009528:	7852      	ldrb	r2, [r2, #1]
 800952a:	4618      	mov	r0, r3
 800952c:	e7b1      	b.n	8009492 <_strtod_l+0x1d2>
 800952e:	f04f 0900 	mov.w	r9, #0
 8009532:	2301      	movs	r3, #1
 8009534:	e77d      	b.n	8009432 <_strtod_l+0x172>
 8009536:	f04f 0c00 	mov.w	ip, #0
 800953a:	1ca2      	adds	r2, r4, #2
 800953c:	9219      	str	r2, [sp, #100]	@ 0x64
 800953e:	78a2      	ldrb	r2, [r4, #2]
 8009540:	e785      	b.n	800944e <_strtod_l+0x18e>
 8009542:	f04f 0c01 	mov.w	ip, #1
 8009546:	e7f8      	b.n	800953a <_strtod_l+0x27a>
 8009548:	0800c9f0 	.word	0x0800c9f0
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	0800c9d8 	.word	0x0800c9d8
 8009554:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009556:	1c51      	adds	r1, r2, #1
 8009558:	9119      	str	r1, [sp, #100]	@ 0x64
 800955a:	7852      	ldrb	r2, [r2, #1]
 800955c:	2a30      	cmp	r2, #48	@ 0x30
 800955e:	d0f9      	beq.n	8009554 <_strtod_l+0x294>
 8009560:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009564:	2908      	cmp	r1, #8
 8009566:	f63f af78 	bhi.w	800945a <_strtod_l+0x19a>
 800956a:	f04f 080a 	mov.w	r8, #10
 800956e:	3a30      	subs	r2, #48	@ 0x30
 8009570:	920e      	str	r2, [sp, #56]	@ 0x38
 8009572:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009574:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009576:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009578:	1c56      	adds	r6, r2, #1
 800957a:	9619      	str	r6, [sp, #100]	@ 0x64
 800957c:	7852      	ldrb	r2, [r2, #1]
 800957e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009582:	f1be 0f09 	cmp.w	lr, #9
 8009586:	d939      	bls.n	80095fc <_strtod_l+0x33c>
 8009588:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800958a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800958e:	1a76      	subs	r6, r6, r1
 8009590:	2e08      	cmp	r6, #8
 8009592:	dc03      	bgt.n	800959c <_strtod_l+0x2dc>
 8009594:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009596:	4588      	cmp	r8, r1
 8009598:	bfa8      	it	ge
 800959a:	4688      	movge	r8, r1
 800959c:	f1bc 0f00 	cmp.w	ip, #0
 80095a0:	d001      	beq.n	80095a6 <_strtod_l+0x2e6>
 80095a2:	f1c8 0800 	rsb	r8, r8, #0
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	d14e      	bne.n	8009648 <_strtod_l+0x388>
 80095aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095ac:	4308      	orrs	r0, r1
 80095ae:	f47f aec0 	bne.w	8009332 <_strtod_l+0x72>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f47f aed6 	bne.w	8009364 <_strtod_l+0xa4>
 80095b8:	2a69      	cmp	r2, #105	@ 0x69
 80095ba:	d028      	beq.n	800960e <_strtod_l+0x34e>
 80095bc:	dc25      	bgt.n	800960a <_strtod_l+0x34a>
 80095be:	2a49      	cmp	r2, #73	@ 0x49
 80095c0:	d025      	beq.n	800960e <_strtod_l+0x34e>
 80095c2:	2a4e      	cmp	r2, #78	@ 0x4e
 80095c4:	f47f aece 	bne.w	8009364 <_strtod_l+0xa4>
 80095c8:	499a      	ldr	r1, [pc, #616]	@ (8009834 <_strtod_l+0x574>)
 80095ca:	a819      	add	r0, sp, #100	@ 0x64
 80095cc:	f001 fb8a 	bl	800ace4 <__match>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f43f aec7 	beq.w	8009364 <_strtod_l+0xa4>
 80095d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b28      	cmp	r3, #40	@ 0x28
 80095dc:	d12e      	bne.n	800963c <_strtod_l+0x37c>
 80095de:	4996      	ldr	r1, [pc, #600]	@ (8009838 <_strtod_l+0x578>)
 80095e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80095e2:	a819      	add	r0, sp, #100	@ 0x64
 80095e4:	f001 fb92 	bl	800ad0c <__hexnan>
 80095e8:	2805      	cmp	r0, #5
 80095ea:	d127      	bne.n	800963c <_strtod_l+0x37c>
 80095ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80095f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80095f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80095fa:	e69a      	b.n	8009332 <_strtod_l+0x72>
 80095fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80095fe:	fb08 2101 	mla	r1, r8, r1, r2
 8009602:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009606:	920e      	str	r2, [sp, #56]	@ 0x38
 8009608:	e7b5      	b.n	8009576 <_strtod_l+0x2b6>
 800960a:	2a6e      	cmp	r2, #110	@ 0x6e
 800960c:	e7da      	b.n	80095c4 <_strtod_l+0x304>
 800960e:	498b      	ldr	r1, [pc, #556]	@ (800983c <_strtod_l+0x57c>)
 8009610:	a819      	add	r0, sp, #100	@ 0x64
 8009612:	f001 fb67 	bl	800ace4 <__match>
 8009616:	2800      	cmp	r0, #0
 8009618:	f43f aea4 	beq.w	8009364 <_strtod_l+0xa4>
 800961c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800961e:	4988      	ldr	r1, [pc, #544]	@ (8009840 <_strtod_l+0x580>)
 8009620:	3b01      	subs	r3, #1
 8009622:	a819      	add	r0, sp, #100	@ 0x64
 8009624:	9319      	str	r3, [sp, #100]	@ 0x64
 8009626:	f001 fb5d 	bl	800ace4 <__match>
 800962a:	b910      	cbnz	r0, 8009632 <_strtod_l+0x372>
 800962c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800962e:	3301      	adds	r3, #1
 8009630:	9319      	str	r3, [sp, #100]	@ 0x64
 8009632:	f04f 0a00 	mov.w	sl, #0
 8009636:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009844 <_strtod_l+0x584>
 800963a:	e67a      	b.n	8009332 <_strtod_l+0x72>
 800963c:	4882      	ldr	r0, [pc, #520]	@ (8009848 <_strtod_l+0x588>)
 800963e:	f001 f88f 	bl	800a760 <nan>
 8009642:	4682      	mov	sl, r0
 8009644:	468b      	mov	fp, r1
 8009646:	e674      	b.n	8009332 <_strtod_l+0x72>
 8009648:	eba8 0309 	sub.w	r3, r8, r9
 800964c:	2f00      	cmp	r7, #0
 800964e:	bf08      	it	eq
 8009650:	462f      	moveq	r7, r5
 8009652:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009654:	2d10      	cmp	r5, #16
 8009656:	462c      	mov	r4, r5
 8009658:	9309      	str	r3, [sp, #36]	@ 0x24
 800965a:	bfa8      	it	ge
 800965c:	2410      	movge	r4, #16
 800965e:	f7f6 fec1 	bl	80003e4 <__aeabi_ui2d>
 8009662:	2d09      	cmp	r5, #9
 8009664:	4682      	mov	sl, r0
 8009666:	468b      	mov	fp, r1
 8009668:	dc11      	bgt.n	800968e <_strtod_l+0x3ce>
 800966a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966c:	2b00      	cmp	r3, #0
 800966e:	f43f ae60 	beq.w	8009332 <_strtod_l+0x72>
 8009672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009674:	dd76      	ble.n	8009764 <_strtod_l+0x4a4>
 8009676:	2b16      	cmp	r3, #22
 8009678:	dc5d      	bgt.n	8009736 <_strtod_l+0x476>
 800967a:	4974      	ldr	r1, [pc, #464]	@ (800984c <_strtod_l+0x58c>)
 800967c:	4652      	mov	r2, sl
 800967e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009682:	465b      	mov	r3, fp
 8009684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009688:	f7f6 ff26 	bl	80004d8 <__aeabi_dmul>
 800968c:	e7d9      	b.n	8009642 <_strtod_l+0x382>
 800968e:	4b6f      	ldr	r3, [pc, #444]	@ (800984c <_strtod_l+0x58c>)
 8009690:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009694:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009698:	f7f6 ff1e 	bl	80004d8 <__aeabi_dmul>
 800969c:	4682      	mov	sl, r0
 800969e:	9808      	ldr	r0, [sp, #32]
 80096a0:	468b      	mov	fp, r1
 80096a2:	f7f6 fe9f 	bl	80003e4 <__aeabi_ui2d>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4650      	mov	r0, sl
 80096ac:	4659      	mov	r1, fp
 80096ae:	f7f6 fd5d 	bl	800016c <__adddf3>
 80096b2:	2d0f      	cmp	r5, #15
 80096b4:	4682      	mov	sl, r0
 80096b6:	468b      	mov	fp, r1
 80096b8:	ddd7      	ble.n	800966a <_strtod_l+0x3aa>
 80096ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096bc:	1b2c      	subs	r4, r5, r4
 80096be:	441c      	add	r4, r3
 80096c0:	2c00      	cmp	r4, #0
 80096c2:	f340 8096 	ble.w	80097f2 <_strtod_l+0x532>
 80096c6:	f014 030f 	ands.w	r3, r4, #15
 80096ca:	d00a      	beq.n	80096e2 <_strtod_l+0x422>
 80096cc:	495f      	ldr	r1, [pc, #380]	@ (800984c <_strtod_l+0x58c>)
 80096ce:	4652      	mov	r2, sl
 80096d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096d8:	465b      	mov	r3, fp
 80096da:	f7f6 fefd 	bl	80004d8 <__aeabi_dmul>
 80096de:	4682      	mov	sl, r0
 80096e0:	468b      	mov	fp, r1
 80096e2:	f034 040f 	bics.w	r4, r4, #15
 80096e6:	d073      	beq.n	80097d0 <_strtod_l+0x510>
 80096e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80096ec:	dd48      	ble.n	8009780 <_strtod_l+0x4c0>
 80096ee:	2400      	movs	r4, #0
 80096f0:	46a0      	mov	r8, r4
 80096f2:	46a1      	mov	r9, r4
 80096f4:	940a      	str	r4, [sp, #40]	@ 0x28
 80096f6:	2322      	movs	r3, #34	@ 0x22
 80096f8:	f04f 0a00 	mov.w	sl, #0
 80096fc:	9a05      	ldr	r2, [sp, #20]
 80096fe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009844 <_strtod_l+0x584>
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009706:	2b00      	cmp	r3, #0
 8009708:	f43f ae13 	beq.w	8009332 <_strtod_l+0x72>
 800970c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800970e:	9805      	ldr	r0, [sp, #20]
 8009710:	f7ff f94c 	bl	80089ac <_Bfree>
 8009714:	4649      	mov	r1, r9
 8009716:	9805      	ldr	r0, [sp, #20]
 8009718:	f7ff f948 	bl	80089ac <_Bfree>
 800971c:	4641      	mov	r1, r8
 800971e:	9805      	ldr	r0, [sp, #20]
 8009720:	f7ff f944 	bl	80089ac <_Bfree>
 8009724:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009726:	9805      	ldr	r0, [sp, #20]
 8009728:	f7ff f940 	bl	80089ac <_Bfree>
 800972c:	4621      	mov	r1, r4
 800972e:	9805      	ldr	r0, [sp, #20]
 8009730:	f7ff f93c 	bl	80089ac <_Bfree>
 8009734:	e5fd      	b.n	8009332 <_strtod_l+0x72>
 8009736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009738:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800973c:	4293      	cmp	r3, r2
 800973e:	dbbc      	blt.n	80096ba <_strtod_l+0x3fa>
 8009740:	4c42      	ldr	r4, [pc, #264]	@ (800984c <_strtod_l+0x58c>)
 8009742:	f1c5 050f 	rsb	r5, r5, #15
 8009746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800974a:	4652      	mov	r2, sl
 800974c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009750:	465b      	mov	r3, fp
 8009752:	f7f6 fec1 	bl	80004d8 <__aeabi_dmul>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	1b5d      	subs	r5, r3, r5
 800975a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800975e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009762:	e791      	b.n	8009688 <_strtod_l+0x3c8>
 8009764:	3316      	adds	r3, #22
 8009766:	dba8      	blt.n	80096ba <_strtod_l+0x3fa>
 8009768:	4b38      	ldr	r3, [pc, #224]	@ (800984c <_strtod_l+0x58c>)
 800976a:	eba9 0808 	sub.w	r8, r9, r8
 800976e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009772:	4650      	mov	r0, sl
 8009774:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009778:	4659      	mov	r1, fp
 800977a:	f7f6 ffd7 	bl	800072c <__aeabi_ddiv>
 800977e:	e760      	b.n	8009642 <_strtod_l+0x382>
 8009780:	4b33      	ldr	r3, [pc, #204]	@ (8009850 <_strtod_l+0x590>)
 8009782:	4650      	mov	r0, sl
 8009784:	9308      	str	r3, [sp, #32]
 8009786:	2300      	movs	r3, #0
 8009788:	4659      	mov	r1, fp
 800978a:	461e      	mov	r6, r3
 800978c:	1124      	asrs	r4, r4, #4
 800978e:	2c01      	cmp	r4, #1
 8009790:	dc21      	bgt.n	80097d6 <_strtod_l+0x516>
 8009792:	b10b      	cbz	r3, 8009798 <_strtod_l+0x4d8>
 8009794:	4682      	mov	sl, r0
 8009796:	468b      	mov	fp, r1
 8009798:	492d      	ldr	r1, [pc, #180]	@ (8009850 <_strtod_l+0x590>)
 800979a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800979e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80097a2:	4652      	mov	r2, sl
 80097a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a8:	465b      	mov	r3, fp
 80097aa:	f7f6 fe95 	bl	80004d8 <__aeabi_dmul>
 80097ae:	4b25      	ldr	r3, [pc, #148]	@ (8009844 <_strtod_l+0x584>)
 80097b0:	460a      	mov	r2, r1
 80097b2:	400b      	ands	r3, r1
 80097b4:	4927      	ldr	r1, [pc, #156]	@ (8009854 <_strtod_l+0x594>)
 80097b6:	4682      	mov	sl, r0
 80097b8:	428b      	cmp	r3, r1
 80097ba:	d898      	bhi.n	80096ee <_strtod_l+0x42e>
 80097bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80097c0:	428b      	cmp	r3, r1
 80097c2:	bf86      	itte	hi
 80097c4:	f04f 3aff 	movhi.w	sl, #4294967295
 80097c8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009858 <_strtod_l+0x598>
 80097cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80097d0:	2300      	movs	r3, #0
 80097d2:	9308      	str	r3, [sp, #32]
 80097d4:	e07a      	b.n	80098cc <_strtod_l+0x60c>
 80097d6:	07e2      	lsls	r2, r4, #31
 80097d8:	d505      	bpl.n	80097e6 <_strtod_l+0x526>
 80097da:	9b08      	ldr	r3, [sp, #32]
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f7f6 fe7a 	bl	80004d8 <__aeabi_dmul>
 80097e4:	2301      	movs	r3, #1
 80097e6:	9a08      	ldr	r2, [sp, #32]
 80097e8:	3601      	adds	r6, #1
 80097ea:	3208      	adds	r2, #8
 80097ec:	1064      	asrs	r4, r4, #1
 80097ee:	9208      	str	r2, [sp, #32]
 80097f0:	e7cd      	b.n	800978e <_strtod_l+0x4ce>
 80097f2:	d0ed      	beq.n	80097d0 <_strtod_l+0x510>
 80097f4:	4264      	negs	r4, r4
 80097f6:	f014 020f 	ands.w	r2, r4, #15
 80097fa:	d00a      	beq.n	8009812 <_strtod_l+0x552>
 80097fc:	4b13      	ldr	r3, [pc, #76]	@ (800984c <_strtod_l+0x58c>)
 80097fe:	4650      	mov	r0, sl
 8009800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009804:	4659      	mov	r1, fp
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f7f6 ff8f 	bl	800072c <__aeabi_ddiv>
 800980e:	4682      	mov	sl, r0
 8009810:	468b      	mov	fp, r1
 8009812:	1124      	asrs	r4, r4, #4
 8009814:	d0dc      	beq.n	80097d0 <_strtod_l+0x510>
 8009816:	2c1f      	cmp	r4, #31
 8009818:	dd20      	ble.n	800985c <_strtod_l+0x59c>
 800981a:	2400      	movs	r4, #0
 800981c:	46a0      	mov	r8, r4
 800981e:	46a1      	mov	r9, r4
 8009820:	940a      	str	r4, [sp, #40]	@ 0x28
 8009822:	2322      	movs	r3, #34	@ 0x22
 8009824:	9a05      	ldr	r2, [sp, #20]
 8009826:	f04f 0a00 	mov.w	sl, #0
 800982a:	f04f 0b00 	mov.w	fp, #0
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	e768      	b.n	8009704 <_strtod_l+0x444>
 8009832:	bf00      	nop
 8009834:	0800c7c3 	.word	0x0800c7c3
 8009838:	0800c9dc 	.word	0x0800c9dc
 800983c:	0800c7bb 	.word	0x0800c7bb
 8009840:	0800c7f2 	.word	0x0800c7f2
 8009844:	7ff00000 	.word	0x7ff00000
 8009848:	0800cb85 	.word	0x0800cb85
 800984c:	0800c910 	.word	0x0800c910
 8009850:	0800c8e8 	.word	0x0800c8e8
 8009854:	7ca00000 	.word	0x7ca00000
 8009858:	7fefffff 	.word	0x7fefffff
 800985c:	f014 0310 	ands.w	r3, r4, #16
 8009860:	bf18      	it	ne
 8009862:	236a      	movne	r3, #106	@ 0x6a
 8009864:	4650      	mov	r0, sl
 8009866:	9308      	str	r3, [sp, #32]
 8009868:	4659      	mov	r1, fp
 800986a:	2300      	movs	r3, #0
 800986c:	4ea9      	ldr	r6, [pc, #676]	@ (8009b14 <_strtod_l+0x854>)
 800986e:	07e2      	lsls	r2, r4, #31
 8009870:	d504      	bpl.n	800987c <_strtod_l+0x5bc>
 8009872:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009876:	f7f6 fe2f 	bl	80004d8 <__aeabi_dmul>
 800987a:	2301      	movs	r3, #1
 800987c:	1064      	asrs	r4, r4, #1
 800987e:	f106 0608 	add.w	r6, r6, #8
 8009882:	d1f4      	bne.n	800986e <_strtod_l+0x5ae>
 8009884:	b10b      	cbz	r3, 800988a <_strtod_l+0x5ca>
 8009886:	4682      	mov	sl, r0
 8009888:	468b      	mov	fp, r1
 800988a:	9b08      	ldr	r3, [sp, #32]
 800988c:	b1b3      	cbz	r3, 80098bc <_strtod_l+0x5fc>
 800988e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009892:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009896:	2b00      	cmp	r3, #0
 8009898:	4659      	mov	r1, fp
 800989a:	dd0f      	ble.n	80098bc <_strtod_l+0x5fc>
 800989c:	2b1f      	cmp	r3, #31
 800989e:	dd57      	ble.n	8009950 <_strtod_l+0x690>
 80098a0:	2b34      	cmp	r3, #52	@ 0x34
 80098a2:	bfd8      	it	le
 80098a4:	f04f 33ff 	movle.w	r3, #4294967295
 80098a8:	f04f 0a00 	mov.w	sl, #0
 80098ac:	bfcf      	iteee	gt
 80098ae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80098b2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80098b6:	4093      	lslle	r3, r2
 80098b8:	ea03 0b01 	andle.w	fp, r3, r1
 80098bc:	2200      	movs	r2, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	4650      	mov	r0, sl
 80098c2:	4659      	mov	r1, fp
 80098c4:	f7f7 f870 	bl	80009a8 <__aeabi_dcmpeq>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d1a6      	bne.n	800981a <_strtod_l+0x55a>
 80098cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ce:	463a      	mov	r2, r7
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80098d4:	462b      	mov	r3, r5
 80098d6:	9805      	ldr	r0, [sp, #20]
 80098d8:	f7ff f8d0 	bl	8008a7c <__s2b>
 80098dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f af05 	beq.w	80096ee <_strtod_l+0x42e>
 80098e4:	2400      	movs	r4, #0
 80098e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098e8:	eba9 0308 	sub.w	r3, r9, r8
 80098ec:	2a00      	cmp	r2, #0
 80098ee:	bfa8      	it	ge
 80098f0:	2300      	movge	r3, #0
 80098f2:	46a0      	mov	r8, r4
 80098f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80098f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80098fa:	9316      	str	r3, [sp, #88]	@ 0x58
 80098fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098fe:	9805      	ldr	r0, [sp, #20]
 8009900:	6859      	ldr	r1, [r3, #4]
 8009902:	f7ff f813 	bl	800892c <_Balloc>
 8009906:	4681      	mov	r9, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	f43f aef4 	beq.w	80096f6 <_strtod_l+0x436>
 800990e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009910:	300c      	adds	r0, #12
 8009912:	691a      	ldr	r2, [r3, #16]
 8009914:	f103 010c 	add.w	r1, r3, #12
 8009918:	3202      	adds	r2, #2
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	f7fe f8a3 	bl	8007a66 <memcpy>
 8009920:	ab1c      	add	r3, sp, #112	@ 0x70
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	4652      	mov	r2, sl
 800992a:	465b      	mov	r3, fp
 800992c:	9805      	ldr	r0, [sp, #20]
 800992e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009932:	f7ff fbd5 	bl	80090e0 <__d2b>
 8009936:	901a      	str	r0, [sp, #104]	@ 0x68
 8009938:	2800      	cmp	r0, #0
 800993a:	f43f aedc 	beq.w	80096f6 <_strtod_l+0x436>
 800993e:	2101      	movs	r1, #1
 8009940:	9805      	ldr	r0, [sp, #20]
 8009942:	f7ff f931 	bl	8008ba8 <__i2b>
 8009946:	4680      	mov	r8, r0
 8009948:	b948      	cbnz	r0, 800995e <_strtod_l+0x69e>
 800994a:	f04f 0800 	mov.w	r8, #0
 800994e:	e6d2      	b.n	80096f6 <_strtod_l+0x436>
 8009950:	f04f 32ff 	mov.w	r2, #4294967295
 8009954:	fa02 f303 	lsl.w	r3, r2, r3
 8009958:	ea03 0a0a 	and.w	sl, r3, sl
 800995c:	e7ae      	b.n	80098bc <_strtod_l+0x5fc>
 800995e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009960:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009962:	2d00      	cmp	r5, #0
 8009964:	bfab      	itete	ge
 8009966:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009968:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800996a:	18ef      	addge	r7, r5, r3
 800996c:	1b5e      	sublt	r6, r3, r5
 800996e:	9b08      	ldr	r3, [sp, #32]
 8009970:	bfa8      	it	ge
 8009972:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009974:	eba5 0503 	sub.w	r5, r5, r3
 8009978:	4415      	add	r5, r2
 800997a:	4b67      	ldr	r3, [pc, #412]	@ (8009b18 <_strtod_l+0x858>)
 800997c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009980:	bfb8      	it	lt
 8009982:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009984:	429d      	cmp	r5, r3
 8009986:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800998a:	da50      	bge.n	8009a2e <_strtod_l+0x76e>
 800998c:	1b5b      	subs	r3, r3, r5
 800998e:	2b1f      	cmp	r3, #31
 8009990:	f04f 0101 	mov.w	r1, #1
 8009994:	eba2 0203 	sub.w	r2, r2, r3
 8009998:	dc3d      	bgt.n	8009a16 <_strtod_l+0x756>
 800999a:	fa01 f303 	lsl.w	r3, r1, r3
 800999e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099a0:	2300      	movs	r3, #0
 80099a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80099a4:	18bd      	adds	r5, r7, r2
 80099a6:	9b08      	ldr	r3, [sp, #32]
 80099a8:	42af      	cmp	r7, r5
 80099aa:	4416      	add	r6, r2
 80099ac:	441e      	add	r6, r3
 80099ae:	463b      	mov	r3, r7
 80099b0:	bfa8      	it	ge
 80099b2:	462b      	movge	r3, r5
 80099b4:	42b3      	cmp	r3, r6
 80099b6:	bfa8      	it	ge
 80099b8:	4633      	movge	r3, r6
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfc2      	ittt	gt
 80099be:	1aed      	subgt	r5, r5, r3
 80099c0:	1af6      	subgt	r6, r6, r3
 80099c2:	1aff      	subgt	r7, r7, r3
 80099c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dd16      	ble.n	80099f8 <_strtod_l+0x738>
 80099ca:	4641      	mov	r1, r8
 80099cc:	461a      	mov	r2, r3
 80099ce:	9805      	ldr	r0, [sp, #20]
 80099d0:	f7ff f9a8 	bl	8008d24 <__pow5mult>
 80099d4:	4680      	mov	r8, r0
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d0b7      	beq.n	800994a <_strtod_l+0x68a>
 80099da:	4601      	mov	r1, r0
 80099dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099de:	9805      	ldr	r0, [sp, #20]
 80099e0:	f7ff f8f8 	bl	8008bd4 <__multiply>
 80099e4:	900e      	str	r0, [sp, #56]	@ 0x38
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f ae85 	beq.w	80096f6 <_strtod_l+0x436>
 80099ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ee:	9805      	ldr	r0, [sp, #20]
 80099f0:	f7fe ffdc 	bl	80089ac <_Bfree>
 80099f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80099f8:	2d00      	cmp	r5, #0
 80099fa:	dc1d      	bgt.n	8009a38 <_strtod_l+0x778>
 80099fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dd23      	ble.n	8009a4a <_strtod_l+0x78a>
 8009a02:	4649      	mov	r1, r9
 8009a04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009a06:	9805      	ldr	r0, [sp, #20]
 8009a08:	f7ff f98c 	bl	8008d24 <__pow5mult>
 8009a0c:	4681      	mov	r9, r0
 8009a0e:	b9e0      	cbnz	r0, 8009a4a <_strtod_l+0x78a>
 8009a10:	f04f 0900 	mov.w	r9, #0
 8009a14:	e66f      	b.n	80096f6 <_strtod_l+0x436>
 8009a16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009a1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009a1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009a22:	35e2      	adds	r5, #226	@ 0xe2
 8009a24:	fa01 f305 	lsl.w	r3, r1, r5
 8009a28:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009a2c:	e7ba      	b.n	80099a4 <_strtod_l+0x6e4>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a32:	2301      	movs	r3, #1
 8009a34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a36:	e7b5      	b.n	80099a4 <_strtod_l+0x6e4>
 8009a38:	462a      	mov	r2, r5
 8009a3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a3c:	9805      	ldr	r0, [sp, #20]
 8009a3e:	f7ff f9cb 	bl	8008dd8 <__lshift>
 8009a42:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d1d9      	bne.n	80099fc <_strtod_l+0x73c>
 8009a48:	e655      	b.n	80096f6 <_strtod_l+0x436>
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	dd07      	ble.n	8009a5e <_strtod_l+0x79e>
 8009a4e:	4649      	mov	r1, r9
 8009a50:	4632      	mov	r2, r6
 8009a52:	9805      	ldr	r0, [sp, #20]
 8009a54:	f7ff f9c0 	bl	8008dd8 <__lshift>
 8009a58:	4681      	mov	r9, r0
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0d8      	beq.n	8009a10 <_strtod_l+0x750>
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	dd08      	ble.n	8009a74 <_strtod_l+0x7b4>
 8009a62:	4641      	mov	r1, r8
 8009a64:	463a      	mov	r2, r7
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	f7ff f9b6 	bl	8008dd8 <__lshift>
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f43f ae41 	beq.w	80096f6 <_strtod_l+0x436>
 8009a74:	464a      	mov	r2, r9
 8009a76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a78:	9805      	ldr	r0, [sp, #20]
 8009a7a:	f7ff fa35 	bl	8008ee8 <__mdiff>
 8009a7e:	4604      	mov	r4, r0
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f43f ae38 	beq.w	80096f6 <_strtod_l+0x436>
 8009a86:	68c3      	ldr	r3, [r0, #12]
 8009a88:	4641      	mov	r1, r8
 8009a8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60c3      	str	r3, [r0, #12]
 8009a90:	f7ff fa0e 	bl	8008eb0 <__mcmp>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	da45      	bge.n	8009b24 <_strtod_l+0x864>
 8009a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a9a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a9e:	d16b      	bne.n	8009b78 <_strtod_l+0x8b8>
 8009aa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d167      	bne.n	8009b78 <_strtod_l+0x8b8>
 8009aa8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009aac:	0d1b      	lsrs	r3, r3, #20
 8009aae:	051b      	lsls	r3, r3, #20
 8009ab0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ab4:	d960      	bls.n	8009b78 <_strtod_l+0x8b8>
 8009ab6:	6963      	ldr	r3, [r4, #20]
 8009ab8:	b913      	cbnz	r3, 8009ac0 <_strtod_l+0x800>
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	dd5b      	ble.n	8009b78 <_strtod_l+0x8b8>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	9805      	ldr	r0, [sp, #20]
 8009ac6:	f7ff f987 	bl	8008dd8 <__lshift>
 8009aca:	4641      	mov	r1, r8
 8009acc:	4604      	mov	r4, r0
 8009ace:	f7ff f9ef 	bl	8008eb0 <__mcmp>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	dd50      	ble.n	8009b78 <_strtod_l+0x8b8>
 8009ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ada:	9a08      	ldr	r2, [sp, #32]
 8009adc:	0d1b      	lsrs	r3, r3, #20
 8009ade:	051b      	lsls	r3, r3, #20
 8009ae0:	2a00      	cmp	r2, #0
 8009ae2:	d06a      	beq.n	8009bba <_strtod_l+0x8fa>
 8009ae4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ae8:	d867      	bhi.n	8009bba <_strtod_l+0x8fa>
 8009aea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009aee:	f67f ae98 	bls.w	8009822 <_strtod_l+0x562>
 8009af2:	4650      	mov	r0, sl
 8009af4:	4659      	mov	r1, fp
 8009af6:	4b09      	ldr	r3, [pc, #36]	@ (8009b1c <_strtod_l+0x85c>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	f7f6 fced 	bl	80004d8 <__aeabi_dmul>
 8009afe:	4b08      	ldr	r3, [pc, #32]	@ (8009b20 <_strtod_l+0x860>)
 8009b00:	4682      	mov	sl, r0
 8009b02:	400b      	ands	r3, r1
 8009b04:	468b      	mov	fp, r1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f47f ae00 	bne.w	800970c <_strtod_l+0x44c>
 8009b0c:	2322      	movs	r3, #34	@ 0x22
 8009b0e:	9a05      	ldr	r2, [sp, #20]
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	e5fb      	b.n	800970c <_strtod_l+0x44c>
 8009b14:	0800ca08 	.word	0x0800ca08
 8009b18:	fffffc02 	.word	0xfffffc02
 8009b1c:	39500000 	.word	0x39500000
 8009b20:	7ff00000 	.word	0x7ff00000
 8009b24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b28:	d165      	bne.n	8009bf6 <_strtod_l+0x936>
 8009b2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b30:	b35a      	cbz	r2, 8009b8a <_strtod_l+0x8ca>
 8009b32:	4a99      	ldr	r2, [pc, #612]	@ (8009d98 <_strtod_l+0xad8>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d12b      	bne.n	8009b90 <_strtod_l+0x8d0>
 8009b38:	9b08      	ldr	r3, [sp, #32]
 8009b3a:	4651      	mov	r1, sl
 8009b3c:	b303      	cbz	r3, 8009b80 <_strtod_l+0x8c0>
 8009b3e:	465a      	mov	r2, fp
 8009b40:	4b96      	ldr	r3, [pc, #600]	@ (8009d9c <_strtod_l+0xadc>)
 8009b42:	4013      	ands	r3, r2
 8009b44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009b48:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4c:	d81b      	bhi.n	8009b86 <_strtod_l+0x8c6>
 8009b4e:	0d1b      	lsrs	r3, r3, #20
 8009b50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b54:	fa02 f303 	lsl.w	r3, r2, r3
 8009b58:	4299      	cmp	r1, r3
 8009b5a:	d119      	bne.n	8009b90 <_strtod_l+0x8d0>
 8009b5c:	4b90      	ldr	r3, [pc, #576]	@ (8009da0 <_strtod_l+0xae0>)
 8009b5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d102      	bne.n	8009b6a <_strtod_l+0x8aa>
 8009b64:	3101      	adds	r1, #1
 8009b66:	f43f adc6 	beq.w	80096f6 <_strtod_l+0x436>
 8009b6a:	f04f 0a00 	mov.w	sl, #0
 8009b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8009d9c <_strtod_l+0xadc>)
 8009b70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b72:	401a      	ands	r2, r3
 8009b74:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1b9      	bne.n	8009af2 <_strtod_l+0x832>
 8009b7e:	e5c5      	b.n	800970c <_strtod_l+0x44c>
 8009b80:	f04f 33ff 	mov.w	r3, #4294967295
 8009b84:	e7e8      	b.n	8009b58 <_strtod_l+0x898>
 8009b86:	4613      	mov	r3, r2
 8009b88:	e7e6      	b.n	8009b58 <_strtod_l+0x898>
 8009b8a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b8e:	d0a2      	beq.n	8009ad6 <_strtod_l+0x816>
 8009b90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b92:	b1db      	cbz	r3, 8009bcc <_strtod_l+0x90c>
 8009b94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b96:	4213      	tst	r3, r2
 8009b98:	d0ee      	beq.n	8009b78 <_strtod_l+0x8b8>
 8009b9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	4659      	mov	r1, fp
 8009ba0:	9a08      	ldr	r2, [sp, #32]
 8009ba2:	b1bb      	cbz	r3, 8009bd4 <_strtod_l+0x914>
 8009ba4:	f7ff fb68 	bl	8009278 <sulp>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bb0:	f7f6 fadc 	bl	800016c <__adddf3>
 8009bb4:	4682      	mov	sl, r0
 8009bb6:	468b      	mov	fp, r1
 8009bb8:	e7de      	b.n	8009b78 <_strtod_l+0x8b8>
 8009bba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009bbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8009bc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bca:	e7d5      	b.n	8009b78 <_strtod_l+0x8b8>
 8009bcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bce:	ea13 0f0a 	tst.w	r3, sl
 8009bd2:	e7e1      	b.n	8009b98 <_strtod_l+0x8d8>
 8009bd4:	f7ff fb50 	bl	8009278 <sulp>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009be0:	f7f6 fac2 	bl	8000168 <__aeabi_dsub>
 8009be4:	2200      	movs	r2, #0
 8009be6:	2300      	movs	r3, #0
 8009be8:	4682      	mov	sl, r0
 8009bea:	468b      	mov	fp, r1
 8009bec:	f7f6 fedc 	bl	80009a8 <__aeabi_dcmpeq>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d0c1      	beq.n	8009b78 <_strtod_l+0x8b8>
 8009bf4:	e615      	b.n	8009822 <_strtod_l+0x562>
 8009bf6:	4641      	mov	r1, r8
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff fac9 	bl	8009190 <__ratio>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009c04:	4606      	mov	r6, r0
 8009c06:	460f      	mov	r7, r1
 8009c08:	f7f6 fee2 	bl	80009d0 <__aeabi_dcmple>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d06d      	beq.n	8009cec <_strtod_l+0xa2c>
 8009c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d178      	bne.n	8009d08 <_strtod_l+0xa48>
 8009c16:	f1ba 0f00 	cmp.w	sl, #0
 8009c1a:	d156      	bne.n	8009cca <_strtod_l+0xa0a>
 8009c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d158      	bne.n	8009cd8 <_strtod_l+0xa18>
 8009c26:	2200      	movs	r2, #0
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	4b5d      	ldr	r3, [pc, #372]	@ (8009da4 <_strtod_l+0xae4>)
 8009c2e:	f7f6 fec5 	bl	80009bc <__aeabi_dcmplt>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d157      	bne.n	8009ce6 <_strtod_l+0xa26>
 8009c36:	4630      	mov	r0, r6
 8009c38:	4639      	mov	r1, r7
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8009da8 <_strtod_l+0xae8>)
 8009c3e:	f7f6 fc4b 	bl	80004d8 <__aeabi_dmul>
 8009c42:	4606      	mov	r6, r0
 8009c44:	460f      	mov	r7, r1
 8009c46:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009c4a:	9606      	str	r6, [sp, #24]
 8009c4c:	9307      	str	r3, [sp, #28]
 8009c4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c52:	4d52      	ldr	r5, [pc, #328]	@ (8009d9c <_strtod_l+0xadc>)
 8009c54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c5a:	401d      	ands	r5, r3
 8009c5c:	4b53      	ldr	r3, [pc, #332]	@ (8009dac <_strtod_l+0xaec>)
 8009c5e:	429d      	cmp	r5, r3
 8009c60:	f040 80aa 	bne.w	8009db8 <_strtod_l+0xaf8>
 8009c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c66:	4650      	mov	r0, sl
 8009c68:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009c6c:	4659      	mov	r1, fp
 8009c6e:	f7ff f9cf 	bl	8009010 <__ulp>
 8009c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c76:	f7f6 fc2f 	bl	80004d8 <__aeabi_dmul>
 8009c7a:	4652      	mov	r2, sl
 8009c7c:	465b      	mov	r3, fp
 8009c7e:	f7f6 fa75 	bl	800016c <__adddf3>
 8009c82:	460b      	mov	r3, r1
 8009c84:	4945      	ldr	r1, [pc, #276]	@ (8009d9c <_strtod_l+0xadc>)
 8009c86:	4a4a      	ldr	r2, [pc, #296]	@ (8009db0 <_strtod_l+0xaf0>)
 8009c88:	4019      	ands	r1, r3
 8009c8a:	4291      	cmp	r1, r2
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	d942      	bls.n	8009d16 <_strtod_l+0xa56>
 8009c90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c92:	4b43      	ldr	r3, [pc, #268]	@ (8009da0 <_strtod_l+0xae0>)
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d103      	bne.n	8009ca0 <_strtod_l+0x9e0>
 8009c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	f43f ad2b 	beq.w	80096f6 <_strtod_l+0x436>
 8009ca0:	f04f 3aff 	mov.w	sl, #4294967295
 8009ca4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009da0 <_strtod_l+0xae0>
 8009ca8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009caa:	9805      	ldr	r0, [sp, #20]
 8009cac:	f7fe fe7e 	bl	80089ac <_Bfree>
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	9805      	ldr	r0, [sp, #20]
 8009cb4:	f7fe fe7a 	bl	80089ac <_Bfree>
 8009cb8:	4641      	mov	r1, r8
 8009cba:	9805      	ldr	r0, [sp, #20]
 8009cbc:	f7fe fe76 	bl	80089ac <_Bfree>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	f7fe fe72 	bl	80089ac <_Bfree>
 8009cc8:	e618      	b.n	80098fc <_strtod_l+0x63c>
 8009cca:	f1ba 0f01 	cmp.w	sl, #1
 8009cce:	d103      	bne.n	8009cd8 <_strtod_l+0xa18>
 8009cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f43f ada5 	beq.w	8009822 <_strtod_l+0x562>
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4b36      	ldr	r3, [pc, #216]	@ (8009db4 <_strtod_l+0xaf4>)
 8009cdc:	2600      	movs	r6, #0
 8009cde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ce2:	4f30      	ldr	r7, [pc, #192]	@ (8009da4 <_strtod_l+0xae4>)
 8009ce4:	e7b3      	b.n	8009c4e <_strtod_l+0x98e>
 8009ce6:	2600      	movs	r6, #0
 8009ce8:	4f2f      	ldr	r7, [pc, #188]	@ (8009da8 <_strtod_l+0xae8>)
 8009cea:	e7ac      	b.n	8009c46 <_strtod_l+0x986>
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8009da8 <_strtod_l+0xae8>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f7f6 fbf0 	bl	80004d8 <__aeabi_dmul>
 8009cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	460f      	mov	r7, r1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0a1      	beq.n	8009c46 <_strtod_l+0x986>
 8009d02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009d06:	e7a2      	b.n	8009c4e <_strtod_l+0x98e>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4b26      	ldr	r3, [pc, #152]	@ (8009da4 <_strtod_l+0xae4>)
 8009d0c:	4616      	mov	r6, r2
 8009d0e:	461f      	mov	r7, r3
 8009d10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d14:	e79b      	b.n	8009c4e <_strtod_l+0x98e>
 8009d16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1c1      	bne.n	8009ca8 <_strtod_l+0x9e8>
 8009d24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d28:	0d1b      	lsrs	r3, r3, #20
 8009d2a:	051b      	lsls	r3, r3, #20
 8009d2c:	429d      	cmp	r5, r3
 8009d2e:	d1bb      	bne.n	8009ca8 <_strtod_l+0x9e8>
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f7 f99c 	bl	8001070 <__aeabi_d2lz>
 8009d38:	f7f6 fba0 	bl	800047c <__aeabi_l2d>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f6 fa10 	bl	8000168 <__aeabi_dsub>
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009d50:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d56:	ea46 060a 	orr.w	r6, r6, sl
 8009d5a:	431e      	orrs	r6, r3
 8009d5c:	d069      	beq.n	8009e32 <_strtod_l+0xb72>
 8009d5e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009d88 <_strtod_l+0xac8>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fe2a 	bl	80009bc <__aeabi_dcmplt>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f47f accf 	bne.w	800970c <_strtod_l+0x44c>
 8009d6e:	a308      	add	r3, pc, #32	@ (adr r3, 8009d90 <_strtod_l+0xad0>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d78:	f7f6 fe3e 	bl	80009f8 <__aeabi_dcmpgt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d093      	beq.n	8009ca8 <_strtod_l+0x9e8>
 8009d80:	e4c4      	b.n	800970c <_strtod_l+0x44c>
 8009d82:	bf00      	nop
 8009d84:	f3af 8000 	nop.w
 8009d88:	94a03595 	.word	0x94a03595
 8009d8c:	3fdfffff 	.word	0x3fdfffff
 8009d90:	35afe535 	.word	0x35afe535
 8009d94:	3fe00000 	.word	0x3fe00000
 8009d98:	000fffff 	.word	0x000fffff
 8009d9c:	7ff00000 	.word	0x7ff00000
 8009da0:	7fefffff 	.word	0x7fefffff
 8009da4:	3ff00000 	.word	0x3ff00000
 8009da8:	3fe00000 	.word	0x3fe00000
 8009dac:	7fe00000 	.word	0x7fe00000
 8009db0:	7c9fffff 	.word	0x7c9fffff
 8009db4:	bff00000 	.word	0xbff00000
 8009db8:	9b08      	ldr	r3, [sp, #32]
 8009dba:	b323      	cbz	r3, 8009e06 <_strtod_l+0xb46>
 8009dbc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009dc0:	d821      	bhi.n	8009e06 <_strtod_l+0xb46>
 8009dc2:	a327      	add	r3, pc, #156	@ (adr r3, 8009e60 <_strtod_l+0xba0>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fe00 	bl	80009d0 <__aeabi_dcmple>
 8009dd0:	b1a0      	cbz	r0, 8009dfc <_strtod_l+0xb3c>
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7f6 fe57 	bl	8000a88 <__aeabi_d2uiz>
 8009dda:	2801      	cmp	r0, #1
 8009ddc:	bf38      	it	cc
 8009dde:	2001      	movcc	r0, #1
 8009de0:	f7f6 fb00 	bl	80003e4 <__aeabi_ui2d>
 8009de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de6:	4606      	mov	r6, r0
 8009de8:	460f      	mov	r7, r1
 8009dea:	b9fb      	cbnz	r3, 8009e2c <_strtod_l+0xb6c>
 8009dec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009df0:	9014      	str	r0, [sp, #80]	@ 0x50
 8009df2:	9315      	str	r3, [sp, #84]	@ 0x54
 8009df4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009df8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009dfc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009dfe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009e02:	1b5b      	subs	r3, r3, r5
 8009e04:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e0a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009e0e:	f7ff f8ff 	bl	8009010 <__ulp>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4650      	mov	r0, sl
 8009e18:	4659      	mov	r1, fp
 8009e1a:	f7f6 fb5d 	bl	80004d8 <__aeabi_dmul>
 8009e1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e22:	f7f6 f9a3 	bl	800016c <__adddf3>
 8009e26:	4682      	mov	sl, r0
 8009e28:	468b      	mov	fp, r1
 8009e2a:	e776      	b.n	8009d1a <_strtod_l+0xa5a>
 8009e2c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009e30:	e7e0      	b.n	8009df4 <_strtod_l+0xb34>
 8009e32:	a30d      	add	r3, pc, #52	@ (adr r3, 8009e68 <_strtod_l+0xba8>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fdc0 	bl	80009bc <__aeabi_dcmplt>
 8009e3c:	e79e      	b.n	8009d7c <_strtod_l+0xabc>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e44:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	f7ff ba77 	b.w	800933a <_strtod_l+0x7a>
 8009e4c:	2a65      	cmp	r2, #101	@ 0x65
 8009e4e:	f43f ab6e 	beq.w	800952e <_strtod_l+0x26e>
 8009e52:	2a45      	cmp	r2, #69	@ 0x45
 8009e54:	f43f ab6b 	beq.w	800952e <_strtod_l+0x26e>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f7ff bba6 	b.w	80095aa <_strtod_l+0x2ea>
 8009e5e:	bf00      	nop
 8009e60:	ffc00000 	.word	0xffc00000
 8009e64:	41dfffff 	.word	0x41dfffff
 8009e68:	94a03595 	.word	0x94a03595
 8009e6c:	3fcfffff 	.word	0x3fcfffff

08009e70 <_strtod_r>:
 8009e70:	4b01      	ldr	r3, [pc, #4]	@ (8009e78 <_strtod_r+0x8>)
 8009e72:	f7ff ba25 	b.w	80092c0 <_strtod_l>
 8009e76:	bf00      	nop
 8009e78:	20000078 	.word	0x20000078

08009e7c <_strtol_l.constprop.0>:
 8009e7c:	2b24      	cmp	r3, #36	@ 0x24
 8009e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e82:	4686      	mov	lr, r0
 8009e84:	4690      	mov	r8, r2
 8009e86:	d801      	bhi.n	8009e8c <_strtol_l.constprop.0+0x10>
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d106      	bne.n	8009e9a <_strtol_l.constprop.0+0x1e>
 8009e8c:	f7fd fdb0 	bl	80079f0 <__errno>
 8009e90:	2316      	movs	r3, #22
 8009e92:	6003      	str	r3, [r0, #0]
 8009e94:	2000      	movs	r0, #0
 8009e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	4833      	ldr	r0, [pc, #204]	@ (8009f6c <_strtol_l.constprop.0+0xf0>)
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ea4:	5d06      	ldrb	r6, [r0, r4]
 8009ea6:	f016 0608 	ands.w	r6, r6, #8
 8009eaa:	d1f8      	bne.n	8009e9e <_strtol_l.constprop.0+0x22>
 8009eac:	2c2d      	cmp	r4, #45	@ 0x2d
 8009eae:	d12d      	bne.n	8009f0c <_strtol_l.constprop.0+0x90>
 8009eb0:	2601      	movs	r6, #1
 8009eb2:	782c      	ldrb	r4, [r5, #0]
 8009eb4:	1c95      	adds	r5, r2, #2
 8009eb6:	f033 0210 	bics.w	r2, r3, #16
 8009eba:	d109      	bne.n	8009ed0 <_strtol_l.constprop.0+0x54>
 8009ebc:	2c30      	cmp	r4, #48	@ 0x30
 8009ebe:	d12a      	bne.n	8009f16 <_strtol_l.constprop.0+0x9a>
 8009ec0:	782a      	ldrb	r2, [r5, #0]
 8009ec2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ec6:	2a58      	cmp	r2, #88	@ 0x58
 8009ec8:	d125      	bne.n	8009f16 <_strtol_l.constprop.0+0x9a>
 8009eca:	2310      	movs	r3, #16
 8009ecc:	786c      	ldrb	r4, [r5, #1]
 8009ece:	3502      	adds	r5, #2
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ed6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009eda:	fbbc f9f3 	udiv	r9, ip, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ee4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ee8:	2f09      	cmp	r7, #9
 8009eea:	d81b      	bhi.n	8009f24 <_strtol_l.constprop.0+0xa8>
 8009eec:	463c      	mov	r4, r7
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	dd27      	ble.n	8009f42 <_strtol_l.constprop.0+0xc6>
 8009ef2:	1c57      	adds	r7, r2, #1
 8009ef4:	d007      	beq.n	8009f06 <_strtol_l.constprop.0+0x8a>
 8009ef6:	4581      	cmp	r9, r0
 8009ef8:	d320      	bcc.n	8009f3c <_strtol_l.constprop.0+0xc0>
 8009efa:	d101      	bne.n	8009f00 <_strtol_l.constprop.0+0x84>
 8009efc:	45a2      	cmp	sl, r4
 8009efe:	db1d      	blt.n	8009f3c <_strtol_l.constprop.0+0xc0>
 8009f00:	2201      	movs	r2, #1
 8009f02:	fb00 4003 	mla	r0, r0, r3, r4
 8009f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f0a:	e7eb      	b.n	8009ee4 <_strtol_l.constprop.0+0x68>
 8009f0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009f0e:	bf04      	itt	eq
 8009f10:	782c      	ldrbeq	r4, [r5, #0]
 8009f12:	1c95      	addeq	r5, r2, #2
 8009f14:	e7cf      	b.n	8009eb6 <_strtol_l.constprop.0+0x3a>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1da      	bne.n	8009ed0 <_strtol_l.constprop.0+0x54>
 8009f1a:	2c30      	cmp	r4, #48	@ 0x30
 8009f1c:	bf0c      	ite	eq
 8009f1e:	2308      	moveq	r3, #8
 8009f20:	230a      	movne	r3, #10
 8009f22:	e7d5      	b.n	8009ed0 <_strtol_l.constprop.0+0x54>
 8009f24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009f28:	2f19      	cmp	r7, #25
 8009f2a:	d801      	bhi.n	8009f30 <_strtol_l.constprop.0+0xb4>
 8009f2c:	3c37      	subs	r4, #55	@ 0x37
 8009f2e:	e7de      	b.n	8009eee <_strtol_l.constprop.0+0x72>
 8009f30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009f34:	2f19      	cmp	r7, #25
 8009f36:	d804      	bhi.n	8009f42 <_strtol_l.constprop.0+0xc6>
 8009f38:	3c57      	subs	r4, #87	@ 0x57
 8009f3a:	e7d8      	b.n	8009eee <_strtol_l.constprop.0+0x72>
 8009f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f40:	e7e1      	b.n	8009f06 <_strtol_l.constprop.0+0x8a>
 8009f42:	1c53      	adds	r3, r2, #1
 8009f44:	d108      	bne.n	8009f58 <_strtol_l.constprop.0+0xdc>
 8009f46:	2322      	movs	r3, #34	@ 0x22
 8009f48:	4660      	mov	r0, ip
 8009f4a:	f8ce 3000 	str.w	r3, [lr]
 8009f4e:	f1b8 0f00 	cmp.w	r8, #0
 8009f52:	d0a0      	beq.n	8009e96 <_strtol_l.constprop.0+0x1a>
 8009f54:	1e69      	subs	r1, r5, #1
 8009f56:	e006      	b.n	8009f66 <_strtol_l.constprop.0+0xea>
 8009f58:	b106      	cbz	r6, 8009f5c <_strtol_l.constprop.0+0xe0>
 8009f5a:	4240      	negs	r0, r0
 8009f5c:	f1b8 0f00 	cmp.w	r8, #0
 8009f60:	d099      	beq.n	8009e96 <_strtol_l.constprop.0+0x1a>
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	d1f6      	bne.n	8009f54 <_strtol_l.constprop.0+0xd8>
 8009f66:	f8c8 1000 	str.w	r1, [r8]
 8009f6a:	e794      	b.n	8009e96 <_strtol_l.constprop.0+0x1a>
 8009f6c:	0800ca31 	.word	0x0800ca31

08009f70 <_strtol_r>:
 8009f70:	f7ff bf84 	b.w	8009e7c <_strtol_l.constprop.0>

08009f74 <__ssputs_r>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	461f      	mov	r7, r3
 8009f7a:	688e      	ldr	r6, [r1, #8]
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	42be      	cmp	r6, r7
 8009f80:	460c      	mov	r4, r1
 8009f82:	4690      	mov	r8, r2
 8009f84:	680b      	ldr	r3, [r1, #0]
 8009f86:	d82d      	bhi.n	8009fe4 <__ssputs_r+0x70>
 8009f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f90:	d026      	beq.n	8009fe0 <__ssputs_r+0x6c>
 8009f92:	6965      	ldr	r5, [r4, #20]
 8009f94:	6909      	ldr	r1, [r1, #16]
 8009f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f9a:	eba3 0901 	sub.w	r9, r3, r1
 8009f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fa2:	1c7b      	adds	r3, r7, #1
 8009fa4:	444b      	add	r3, r9
 8009fa6:	106d      	asrs	r5, r5, #1
 8009fa8:	429d      	cmp	r5, r3
 8009faa:	bf38      	it	cc
 8009fac:	461d      	movcc	r5, r3
 8009fae:	0553      	lsls	r3, r2, #21
 8009fb0:	d527      	bpl.n	800a002 <__ssputs_r+0x8e>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	f7fe fc2e 	bl	8008814 <_malloc_r>
 8009fb8:	4606      	mov	r6, r0
 8009fba:	b360      	cbz	r0, 800a016 <__ssputs_r+0xa2>
 8009fbc:	464a      	mov	r2, r9
 8009fbe:	6921      	ldr	r1, [r4, #16]
 8009fc0:	f7fd fd51 	bl	8007a66 <memcpy>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	6126      	str	r6, [r4, #16]
 8009fd2:	444e      	add	r6, r9
 8009fd4:	6026      	str	r6, [r4, #0]
 8009fd6:	463e      	mov	r6, r7
 8009fd8:	6165      	str	r5, [r4, #20]
 8009fda:	eba5 0509 	sub.w	r5, r5, r9
 8009fde:	60a5      	str	r5, [r4, #8]
 8009fe0:	42be      	cmp	r6, r7
 8009fe2:	d900      	bls.n	8009fe6 <__ssputs_r+0x72>
 8009fe4:	463e      	mov	r6, r7
 8009fe6:	4632      	mov	r2, r6
 8009fe8:	4641      	mov	r1, r8
 8009fea:	6820      	ldr	r0, [r4, #0]
 8009fec:	f7fd fc93 	bl	8007916 <memmove>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	68a3      	ldr	r3, [r4, #8]
 8009ff4:	1b9b      	subs	r3, r3, r6
 8009ff6:	60a3      	str	r3, [r4, #8]
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	4433      	add	r3, r6
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a002:	462a      	mov	r2, r5
 800a004:	f000 ff2f 	bl	800ae66 <_realloc_r>
 800a008:	4606      	mov	r6, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d1e0      	bne.n	8009fd0 <__ssputs_r+0x5c>
 800a00e:	4650      	mov	r0, sl
 800a010:	6921      	ldr	r1, [r4, #16]
 800a012:	f7fe fb8d 	bl	8008730 <_free_r>
 800a016:	230c      	movs	r3, #12
 800a018:	f8ca 3000 	str.w	r3, [sl]
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f04f 30ff 	mov.w	r0, #4294967295
 800a022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	e7e9      	b.n	8009ffe <__ssputs_r+0x8a>
	...

0800a02c <_svfiprintf_r>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	4698      	mov	r8, r3
 800a032:	898b      	ldrh	r3, [r1, #12]
 800a034:	4607      	mov	r7, r0
 800a036:	061b      	lsls	r3, r3, #24
 800a038:	460d      	mov	r5, r1
 800a03a:	4614      	mov	r4, r2
 800a03c:	b09d      	sub	sp, #116	@ 0x74
 800a03e:	d510      	bpl.n	800a062 <_svfiprintf_r+0x36>
 800a040:	690b      	ldr	r3, [r1, #16]
 800a042:	b973      	cbnz	r3, 800a062 <_svfiprintf_r+0x36>
 800a044:	2140      	movs	r1, #64	@ 0x40
 800a046:	f7fe fbe5 	bl	8008814 <_malloc_r>
 800a04a:	6028      	str	r0, [r5, #0]
 800a04c:	6128      	str	r0, [r5, #16]
 800a04e:	b930      	cbnz	r0, 800a05e <_svfiprintf_r+0x32>
 800a050:	230c      	movs	r3, #12
 800a052:	603b      	str	r3, [r7, #0]
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	b01d      	add	sp, #116	@ 0x74
 800a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05e:	2340      	movs	r3, #64	@ 0x40
 800a060:	616b      	str	r3, [r5, #20]
 800a062:	2300      	movs	r3, #0
 800a064:	9309      	str	r3, [sp, #36]	@ 0x24
 800a066:	2320      	movs	r3, #32
 800a068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a06c:	2330      	movs	r3, #48	@ 0x30
 800a06e:	f04f 0901 	mov.w	r9, #1
 800a072:	f8cd 800c 	str.w	r8, [sp, #12]
 800a076:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a210 <_svfiprintf_r+0x1e4>
 800a07a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a07e:	4623      	mov	r3, r4
 800a080:	469a      	mov	sl, r3
 800a082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a086:	b10a      	cbz	r2, 800a08c <_svfiprintf_r+0x60>
 800a088:	2a25      	cmp	r2, #37	@ 0x25
 800a08a:	d1f9      	bne.n	800a080 <_svfiprintf_r+0x54>
 800a08c:	ebba 0b04 	subs.w	fp, sl, r4
 800a090:	d00b      	beq.n	800a0aa <_svfiprintf_r+0x7e>
 800a092:	465b      	mov	r3, fp
 800a094:	4622      	mov	r2, r4
 800a096:	4629      	mov	r1, r5
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff ff6b 	bl	8009f74 <__ssputs_r>
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f000 80a7 	beq.w	800a1f2 <_svfiprintf_r+0x1c6>
 800a0a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a6:	445a      	add	r2, fp
 800a0a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 809f 	beq.w	800a1f2 <_svfiprintf_r+0x1c6>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0be:	f10a 0a01 	add.w	sl, sl, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	9307      	str	r3, [sp, #28]
 800a0c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0cc:	4654      	mov	r4, sl
 800a0ce:	2205      	movs	r2, #5
 800a0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d4:	484e      	ldr	r0, [pc, #312]	@ (800a210 <_svfiprintf_r+0x1e4>)
 800a0d6:	f7fd fcb8 	bl	8007a4a <memchr>
 800a0da:	9a04      	ldr	r2, [sp, #16]
 800a0dc:	b9d8      	cbnz	r0, 800a116 <_svfiprintf_r+0xea>
 800a0de:	06d0      	lsls	r0, r2, #27
 800a0e0:	bf44      	itt	mi
 800a0e2:	2320      	movmi	r3, #32
 800a0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e8:	0711      	lsls	r1, r2, #28
 800a0ea:	bf44      	itt	mi
 800a0ec:	232b      	movmi	r3, #43	@ 0x2b
 800a0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f8:	d015      	beq.n	800a126 <_svfiprintf_r+0xfa>
 800a0fa:	4654      	mov	r4, sl
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	9a07      	ldr	r2, [sp, #28]
 800a104:	4621      	mov	r1, r4
 800a106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10a:	3b30      	subs	r3, #48	@ 0x30
 800a10c:	2b09      	cmp	r3, #9
 800a10e:	d94b      	bls.n	800a1a8 <_svfiprintf_r+0x17c>
 800a110:	b1b0      	cbz	r0, 800a140 <_svfiprintf_r+0x114>
 800a112:	9207      	str	r2, [sp, #28]
 800a114:	e014      	b.n	800a140 <_svfiprintf_r+0x114>
 800a116:	eba0 0308 	sub.w	r3, r0, r8
 800a11a:	fa09 f303 	lsl.w	r3, r9, r3
 800a11e:	4313      	orrs	r3, r2
 800a120:	46a2      	mov	sl, r4
 800a122:	9304      	str	r3, [sp, #16]
 800a124:	e7d2      	b.n	800a0cc <_svfiprintf_r+0xa0>
 800a126:	9b03      	ldr	r3, [sp, #12]
 800a128:	1d19      	adds	r1, r3, #4
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	9103      	str	r1, [sp, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bfbb      	ittet	lt
 800a132:	425b      	neglt	r3, r3
 800a134:	f042 0202 	orrlt.w	r2, r2, #2
 800a138:	9307      	strge	r3, [sp, #28]
 800a13a:	9307      	strlt	r3, [sp, #28]
 800a13c:	bfb8      	it	lt
 800a13e:	9204      	strlt	r2, [sp, #16]
 800a140:	7823      	ldrb	r3, [r4, #0]
 800a142:	2b2e      	cmp	r3, #46	@ 0x2e
 800a144:	d10a      	bne.n	800a15c <_svfiprintf_r+0x130>
 800a146:	7863      	ldrb	r3, [r4, #1]
 800a148:	2b2a      	cmp	r3, #42	@ 0x2a
 800a14a:	d132      	bne.n	800a1b2 <_svfiprintf_r+0x186>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	3402      	adds	r4, #2
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9203      	str	r2, [sp, #12]
 800a156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a15a:	9305      	str	r3, [sp, #20]
 800a15c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a214 <_svfiprintf_r+0x1e8>
 800a160:	2203      	movs	r2, #3
 800a162:	4650      	mov	r0, sl
 800a164:	7821      	ldrb	r1, [r4, #0]
 800a166:	f7fd fc70 	bl	8007a4a <memchr>
 800a16a:	b138      	cbz	r0, 800a17c <_svfiprintf_r+0x150>
 800a16c:	2240      	movs	r2, #64	@ 0x40
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	eba0 000a 	sub.w	r0, r0, sl
 800a174:	4082      	lsls	r2, r0
 800a176:	4313      	orrs	r3, r2
 800a178:	3401      	adds	r4, #1
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a180:	2206      	movs	r2, #6
 800a182:	4825      	ldr	r0, [pc, #148]	@ (800a218 <_svfiprintf_r+0x1ec>)
 800a184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a188:	f7fd fc5f 	bl	8007a4a <memchr>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d036      	beq.n	800a1fe <_svfiprintf_r+0x1d2>
 800a190:	4b22      	ldr	r3, [pc, #136]	@ (800a21c <_svfiprintf_r+0x1f0>)
 800a192:	bb1b      	cbnz	r3, 800a1dc <_svfiprintf_r+0x1b0>
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	3307      	adds	r3, #7
 800a198:	f023 0307 	bic.w	r3, r3, #7
 800a19c:	3308      	adds	r3, #8
 800a19e:	9303      	str	r3, [sp, #12]
 800a1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a2:	4433      	add	r3, r6
 800a1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a6:	e76a      	b.n	800a07e <_svfiprintf_r+0x52>
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b0:	e7a8      	b.n	800a104 <_svfiprintf_r+0xd8>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f04f 0c0a 	mov.w	ip, #10
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	3401      	adds	r4, #1
 800a1bc:	9305      	str	r3, [sp, #20]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c4:	3a30      	subs	r2, #48	@ 0x30
 800a1c6:	2a09      	cmp	r2, #9
 800a1c8:	d903      	bls.n	800a1d2 <_svfiprintf_r+0x1a6>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0c6      	beq.n	800a15c <_svfiprintf_r+0x130>
 800a1ce:	9105      	str	r1, [sp, #20]
 800a1d0:	e7c4      	b.n	800a15c <_svfiprintf_r+0x130>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1da:	e7f0      	b.n	800a1be <_svfiprintf_r+0x192>
 800a1dc:	ab03      	add	r3, sp, #12
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a220 <_svfiprintf_r+0x1f4>)
 800a1e6:	a904      	add	r1, sp, #16
 800a1e8:	f7fc fc5c 	bl	8006aa4 <_printf_float>
 800a1ec:	1c42      	adds	r2, r0, #1
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	d1d6      	bne.n	800a1a0 <_svfiprintf_r+0x174>
 800a1f2:	89ab      	ldrh	r3, [r5, #12]
 800a1f4:	065b      	lsls	r3, r3, #25
 800a1f6:	f53f af2d 	bmi.w	800a054 <_svfiprintf_r+0x28>
 800a1fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1fc:	e72c      	b.n	800a058 <_svfiprintf_r+0x2c>
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	462a      	mov	r2, r5
 800a204:	4638      	mov	r0, r7
 800a206:	4b06      	ldr	r3, [pc, #24]	@ (800a220 <_svfiprintf_r+0x1f4>)
 800a208:	a904      	add	r1, sp, #16
 800a20a:	f7fc fee9 	bl	8006fe0 <_printf_i>
 800a20e:	e7ed      	b.n	800a1ec <_svfiprintf_r+0x1c0>
 800a210:	0800cb31 	.word	0x0800cb31
 800a214:	0800cb37 	.word	0x0800cb37
 800a218:	0800cb3b 	.word	0x0800cb3b
 800a21c:	08006aa5 	.word	0x08006aa5
 800a220:	08009f75 	.word	0x08009f75

0800a224 <__sfputc_r>:
 800a224:	6893      	ldr	r3, [r2, #8]
 800a226:	b410      	push	{r4}
 800a228:	3b01      	subs	r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	6093      	str	r3, [r2, #8]
 800a22e:	da07      	bge.n	800a240 <__sfputc_r+0x1c>
 800a230:	6994      	ldr	r4, [r2, #24]
 800a232:	42a3      	cmp	r3, r4
 800a234:	db01      	blt.n	800a23a <__sfputc_r+0x16>
 800a236:	290a      	cmp	r1, #10
 800a238:	d102      	bne.n	800a240 <__sfputc_r+0x1c>
 800a23a:	bc10      	pop	{r4}
 800a23c:	f000 b9da 	b.w	800a5f4 <__swbuf_r>
 800a240:	6813      	ldr	r3, [r2, #0]
 800a242:	1c58      	adds	r0, r3, #1
 800a244:	6010      	str	r0, [r2, #0]
 800a246:	7019      	strb	r1, [r3, #0]
 800a248:	4608      	mov	r0, r1
 800a24a:	bc10      	pop	{r4}
 800a24c:	4770      	bx	lr

0800a24e <__sfputs_r>:
 800a24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a250:	4606      	mov	r6, r0
 800a252:	460f      	mov	r7, r1
 800a254:	4614      	mov	r4, r2
 800a256:	18d5      	adds	r5, r2, r3
 800a258:	42ac      	cmp	r4, r5
 800a25a:	d101      	bne.n	800a260 <__sfputs_r+0x12>
 800a25c:	2000      	movs	r0, #0
 800a25e:	e007      	b.n	800a270 <__sfputs_r+0x22>
 800a260:	463a      	mov	r2, r7
 800a262:	4630      	mov	r0, r6
 800a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a268:	f7ff ffdc 	bl	800a224 <__sfputc_r>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d1f3      	bne.n	800a258 <__sfputs_r+0xa>
 800a270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a274 <_vfiprintf_r>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	460d      	mov	r5, r1
 800a27a:	4614      	mov	r4, r2
 800a27c:	4698      	mov	r8, r3
 800a27e:	4606      	mov	r6, r0
 800a280:	b09d      	sub	sp, #116	@ 0x74
 800a282:	b118      	cbz	r0, 800a28c <_vfiprintf_r+0x18>
 800a284:	6a03      	ldr	r3, [r0, #32]
 800a286:	b90b      	cbnz	r3, 800a28c <_vfiprintf_r+0x18>
 800a288:	f7fd fa66 	bl	8007758 <__sinit>
 800a28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a28e:	07d9      	lsls	r1, r3, #31
 800a290:	d405      	bmi.n	800a29e <_vfiprintf_r+0x2a>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	059a      	lsls	r2, r3, #22
 800a296:	d402      	bmi.n	800a29e <_vfiprintf_r+0x2a>
 800a298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a29a:	f7fd fbd4 	bl	8007a46 <__retarget_lock_acquire_recursive>
 800a29e:	89ab      	ldrh	r3, [r5, #12]
 800a2a0:	071b      	lsls	r3, r3, #28
 800a2a2:	d501      	bpl.n	800a2a8 <_vfiprintf_r+0x34>
 800a2a4:	692b      	ldr	r3, [r5, #16]
 800a2a6:	b99b      	cbnz	r3, 800a2d0 <_vfiprintf_r+0x5c>
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f000 f9e0 	bl	800a670 <__swsetup_r>
 800a2b0:	b170      	cbz	r0, 800a2d0 <_vfiprintf_r+0x5c>
 800a2b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2b4:	07dc      	lsls	r4, r3, #31
 800a2b6:	d504      	bpl.n	800a2c2 <_vfiprintf_r+0x4e>
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2bc:	b01d      	add	sp, #116	@ 0x74
 800a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	0598      	lsls	r0, r3, #22
 800a2c6:	d4f7      	bmi.n	800a2b8 <_vfiprintf_r+0x44>
 800a2c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ca:	f7fd fbbd 	bl	8007a48 <__retarget_lock_release_recursive>
 800a2ce:	e7f3      	b.n	800a2b8 <_vfiprintf_r+0x44>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d4:	2320      	movs	r3, #32
 800a2d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2da:	2330      	movs	r3, #48	@ 0x30
 800a2dc:	f04f 0901 	mov.w	r9, #1
 800a2e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a490 <_vfiprintf_r+0x21c>
 800a2e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	469a      	mov	sl, r3
 800a2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f4:	b10a      	cbz	r2, 800a2fa <_vfiprintf_r+0x86>
 800a2f6:	2a25      	cmp	r2, #37	@ 0x25
 800a2f8:	d1f9      	bne.n	800a2ee <_vfiprintf_r+0x7a>
 800a2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a2fe:	d00b      	beq.n	800a318 <_vfiprintf_r+0xa4>
 800a300:	465b      	mov	r3, fp
 800a302:	4622      	mov	r2, r4
 800a304:	4629      	mov	r1, r5
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ffa1 	bl	800a24e <__sfputs_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	f000 80a7 	beq.w	800a460 <_vfiprintf_r+0x1ec>
 800a312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a314:	445a      	add	r2, fp
 800a316:	9209      	str	r2, [sp, #36]	@ 0x24
 800a318:	f89a 3000 	ldrb.w	r3, [sl]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 809f 	beq.w	800a460 <_vfiprintf_r+0x1ec>
 800a322:	2300      	movs	r3, #0
 800a324:	f04f 32ff 	mov.w	r2, #4294967295
 800a328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a32c:	f10a 0a01 	add.w	sl, sl, #1
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	9307      	str	r3, [sp, #28]
 800a334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a338:	931a      	str	r3, [sp, #104]	@ 0x68
 800a33a:	4654      	mov	r4, sl
 800a33c:	2205      	movs	r2, #5
 800a33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a342:	4853      	ldr	r0, [pc, #332]	@ (800a490 <_vfiprintf_r+0x21c>)
 800a344:	f7fd fb81 	bl	8007a4a <memchr>
 800a348:	9a04      	ldr	r2, [sp, #16]
 800a34a:	b9d8      	cbnz	r0, 800a384 <_vfiprintf_r+0x110>
 800a34c:	06d1      	lsls	r1, r2, #27
 800a34e:	bf44      	itt	mi
 800a350:	2320      	movmi	r3, #32
 800a352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a356:	0713      	lsls	r3, r2, #28
 800a358:	bf44      	itt	mi
 800a35a:	232b      	movmi	r3, #43	@ 0x2b
 800a35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a360:	f89a 3000 	ldrb.w	r3, [sl]
 800a364:	2b2a      	cmp	r3, #42	@ 0x2a
 800a366:	d015      	beq.n	800a394 <_vfiprintf_r+0x120>
 800a368:	4654      	mov	r4, sl
 800a36a:	2000      	movs	r0, #0
 800a36c:	f04f 0c0a 	mov.w	ip, #10
 800a370:	9a07      	ldr	r2, [sp, #28]
 800a372:	4621      	mov	r1, r4
 800a374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a378:	3b30      	subs	r3, #48	@ 0x30
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	d94b      	bls.n	800a416 <_vfiprintf_r+0x1a2>
 800a37e:	b1b0      	cbz	r0, 800a3ae <_vfiprintf_r+0x13a>
 800a380:	9207      	str	r2, [sp, #28]
 800a382:	e014      	b.n	800a3ae <_vfiprintf_r+0x13a>
 800a384:	eba0 0308 	sub.w	r3, r0, r8
 800a388:	fa09 f303 	lsl.w	r3, r9, r3
 800a38c:	4313      	orrs	r3, r2
 800a38e:	46a2      	mov	sl, r4
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	e7d2      	b.n	800a33a <_vfiprintf_r+0xc6>
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	1d19      	adds	r1, r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	9103      	str	r1, [sp, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bfbb      	ittet	lt
 800a3a0:	425b      	neglt	r3, r3
 800a3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a6:	9307      	strge	r3, [sp, #28]
 800a3a8:	9307      	strlt	r3, [sp, #28]
 800a3aa:	bfb8      	it	lt
 800a3ac:	9204      	strlt	r2, [sp, #16]
 800a3ae:	7823      	ldrb	r3, [r4, #0]
 800a3b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3b2:	d10a      	bne.n	800a3ca <_vfiprintf_r+0x156>
 800a3b4:	7863      	ldrb	r3, [r4, #1]
 800a3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3b8:	d132      	bne.n	800a420 <_vfiprintf_r+0x1ac>
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	3402      	adds	r4, #2
 800a3be:	1d1a      	adds	r2, r3, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	9203      	str	r2, [sp, #12]
 800a3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a494 <_vfiprintf_r+0x220>
 800a3ce:	2203      	movs	r2, #3
 800a3d0:	4650      	mov	r0, sl
 800a3d2:	7821      	ldrb	r1, [r4, #0]
 800a3d4:	f7fd fb39 	bl	8007a4a <memchr>
 800a3d8:	b138      	cbz	r0, 800a3ea <_vfiprintf_r+0x176>
 800a3da:	2240      	movs	r2, #64	@ 0x40
 800a3dc:	9b04      	ldr	r3, [sp, #16]
 800a3de:	eba0 000a 	sub.w	r0, r0, sl
 800a3e2:	4082      	lsls	r2, r0
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	3401      	adds	r4, #1
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ee:	2206      	movs	r2, #6
 800a3f0:	4829      	ldr	r0, [pc, #164]	@ (800a498 <_vfiprintf_r+0x224>)
 800a3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3f6:	f7fd fb28 	bl	8007a4a <memchr>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d03f      	beq.n	800a47e <_vfiprintf_r+0x20a>
 800a3fe:	4b27      	ldr	r3, [pc, #156]	@ (800a49c <_vfiprintf_r+0x228>)
 800a400:	bb1b      	cbnz	r3, 800a44a <_vfiprintf_r+0x1d6>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	3307      	adds	r3, #7
 800a406:	f023 0307 	bic.w	r3, r3, #7
 800a40a:	3308      	adds	r3, #8
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a410:	443b      	add	r3, r7
 800a412:	9309      	str	r3, [sp, #36]	@ 0x24
 800a414:	e76a      	b.n	800a2ec <_vfiprintf_r+0x78>
 800a416:	460c      	mov	r4, r1
 800a418:	2001      	movs	r0, #1
 800a41a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a41e:	e7a8      	b.n	800a372 <_vfiprintf_r+0xfe>
 800a420:	2300      	movs	r3, #0
 800a422:	f04f 0c0a 	mov.w	ip, #10
 800a426:	4619      	mov	r1, r3
 800a428:	3401      	adds	r4, #1
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	4620      	mov	r0, r4
 800a42e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a432:	3a30      	subs	r2, #48	@ 0x30
 800a434:	2a09      	cmp	r2, #9
 800a436:	d903      	bls.n	800a440 <_vfiprintf_r+0x1cc>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0c6      	beq.n	800a3ca <_vfiprintf_r+0x156>
 800a43c:	9105      	str	r1, [sp, #20]
 800a43e:	e7c4      	b.n	800a3ca <_vfiprintf_r+0x156>
 800a440:	4604      	mov	r4, r0
 800a442:	2301      	movs	r3, #1
 800a444:	fb0c 2101 	mla	r1, ip, r1, r2
 800a448:	e7f0      	b.n	800a42c <_vfiprintf_r+0x1b8>
 800a44a:	ab03      	add	r3, sp, #12
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	462a      	mov	r2, r5
 800a450:	4630      	mov	r0, r6
 800a452:	4b13      	ldr	r3, [pc, #76]	@ (800a4a0 <_vfiprintf_r+0x22c>)
 800a454:	a904      	add	r1, sp, #16
 800a456:	f7fc fb25 	bl	8006aa4 <_printf_float>
 800a45a:	4607      	mov	r7, r0
 800a45c:	1c78      	adds	r0, r7, #1
 800a45e:	d1d6      	bne.n	800a40e <_vfiprintf_r+0x19a>
 800a460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a462:	07d9      	lsls	r1, r3, #31
 800a464:	d405      	bmi.n	800a472 <_vfiprintf_r+0x1fe>
 800a466:	89ab      	ldrh	r3, [r5, #12]
 800a468:	059a      	lsls	r2, r3, #22
 800a46a:	d402      	bmi.n	800a472 <_vfiprintf_r+0x1fe>
 800a46c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a46e:	f7fd faeb 	bl	8007a48 <__retarget_lock_release_recursive>
 800a472:	89ab      	ldrh	r3, [r5, #12]
 800a474:	065b      	lsls	r3, r3, #25
 800a476:	f53f af1f 	bmi.w	800a2b8 <_vfiprintf_r+0x44>
 800a47a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a47c:	e71e      	b.n	800a2bc <_vfiprintf_r+0x48>
 800a47e:	ab03      	add	r3, sp, #12
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	462a      	mov	r2, r5
 800a484:	4630      	mov	r0, r6
 800a486:	4b06      	ldr	r3, [pc, #24]	@ (800a4a0 <_vfiprintf_r+0x22c>)
 800a488:	a904      	add	r1, sp, #16
 800a48a:	f7fc fda9 	bl	8006fe0 <_printf_i>
 800a48e:	e7e4      	b.n	800a45a <_vfiprintf_r+0x1e6>
 800a490:	0800cb31 	.word	0x0800cb31
 800a494:	0800cb37 	.word	0x0800cb37
 800a498:	0800cb3b 	.word	0x0800cb3b
 800a49c:	08006aa5 	.word	0x08006aa5
 800a4a0:	0800a24f 	.word	0x0800a24f

0800a4a4 <__sflush_r>:
 800a4a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	0716      	lsls	r6, r2, #28
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	d454      	bmi.n	800a55c <__sflush_r+0xb8>
 800a4b2:	684b      	ldr	r3, [r1, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dc02      	bgt.n	800a4be <__sflush_r+0x1a>
 800a4b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dd48      	ble.n	800a550 <__sflush_r+0xac>
 800a4be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4c0:	2e00      	cmp	r6, #0
 800a4c2:	d045      	beq.n	800a550 <__sflush_r+0xac>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4ca:	682f      	ldr	r7, [r5, #0]
 800a4cc:	6a21      	ldr	r1, [r4, #32]
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	d030      	beq.n	800a534 <__sflush_r+0x90>
 800a4d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	0759      	lsls	r1, r3, #29
 800a4d8:	d505      	bpl.n	800a4e6 <__sflush_r+0x42>
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	1ad2      	subs	r2, r2, r3
 800a4de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4e0:	b10b      	cbz	r3, 800a4e6 <__sflush_r+0x42>
 800a4e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4e4:	1ad2      	subs	r2, r2, r3
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4ec:	6a21      	ldr	r1, [r4, #32]
 800a4ee:	47b0      	blx	r6
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	d106      	bne.n	800a504 <__sflush_r+0x60>
 800a4f6:	6829      	ldr	r1, [r5, #0]
 800a4f8:	291d      	cmp	r1, #29
 800a4fa:	d82b      	bhi.n	800a554 <__sflush_r+0xb0>
 800a4fc:	4a28      	ldr	r2, [pc, #160]	@ (800a5a0 <__sflush_r+0xfc>)
 800a4fe:	410a      	asrs	r2, r1
 800a500:	07d6      	lsls	r6, r2, #31
 800a502:	d427      	bmi.n	800a554 <__sflush_r+0xb0>
 800a504:	2200      	movs	r2, #0
 800a506:	6062      	str	r2, [r4, #4]
 800a508:	6922      	ldr	r2, [r4, #16]
 800a50a:	04d9      	lsls	r1, r3, #19
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	d504      	bpl.n	800a51a <__sflush_r+0x76>
 800a510:	1c42      	adds	r2, r0, #1
 800a512:	d101      	bne.n	800a518 <__sflush_r+0x74>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	b903      	cbnz	r3, 800a51a <__sflush_r+0x76>
 800a518:	6560      	str	r0, [r4, #84]	@ 0x54
 800a51a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a51c:	602f      	str	r7, [r5, #0]
 800a51e:	b1b9      	cbz	r1, 800a550 <__sflush_r+0xac>
 800a520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a524:	4299      	cmp	r1, r3
 800a526:	d002      	beq.n	800a52e <__sflush_r+0x8a>
 800a528:	4628      	mov	r0, r5
 800a52a:	f7fe f901 	bl	8008730 <_free_r>
 800a52e:	2300      	movs	r3, #0
 800a530:	6363      	str	r3, [r4, #52]	@ 0x34
 800a532:	e00d      	b.n	800a550 <__sflush_r+0xac>
 800a534:	2301      	movs	r3, #1
 800a536:	4628      	mov	r0, r5
 800a538:	47b0      	blx	r6
 800a53a:	4602      	mov	r2, r0
 800a53c:	1c50      	adds	r0, r2, #1
 800a53e:	d1c9      	bne.n	800a4d4 <__sflush_r+0x30>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0c6      	beq.n	800a4d4 <__sflush_r+0x30>
 800a546:	2b1d      	cmp	r3, #29
 800a548:	d001      	beq.n	800a54e <__sflush_r+0xaa>
 800a54a:	2b16      	cmp	r3, #22
 800a54c:	d11d      	bne.n	800a58a <__sflush_r+0xe6>
 800a54e:	602f      	str	r7, [r5, #0]
 800a550:	2000      	movs	r0, #0
 800a552:	e021      	b.n	800a598 <__sflush_r+0xf4>
 800a554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a558:	b21b      	sxth	r3, r3
 800a55a:	e01a      	b.n	800a592 <__sflush_r+0xee>
 800a55c:	690f      	ldr	r7, [r1, #16]
 800a55e:	2f00      	cmp	r7, #0
 800a560:	d0f6      	beq.n	800a550 <__sflush_r+0xac>
 800a562:	0793      	lsls	r3, r2, #30
 800a564:	bf18      	it	ne
 800a566:	2300      	movne	r3, #0
 800a568:	680e      	ldr	r6, [r1, #0]
 800a56a:	bf08      	it	eq
 800a56c:	694b      	ldreq	r3, [r1, #20]
 800a56e:	1bf6      	subs	r6, r6, r7
 800a570:	600f      	str	r7, [r1, #0]
 800a572:	608b      	str	r3, [r1, #8]
 800a574:	2e00      	cmp	r6, #0
 800a576:	ddeb      	ble.n	800a550 <__sflush_r+0xac>
 800a578:	4633      	mov	r3, r6
 800a57a:	463a      	mov	r2, r7
 800a57c:	4628      	mov	r0, r5
 800a57e:	6a21      	ldr	r1, [r4, #32]
 800a580:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a584:	47e0      	blx	ip
 800a586:	2800      	cmp	r0, #0
 800a588:	dc07      	bgt.n	800a59a <__sflush_r+0xf6>
 800a58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a58e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a592:	f04f 30ff 	mov.w	r0, #4294967295
 800a596:	81a3      	strh	r3, [r4, #12]
 800a598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a59a:	4407      	add	r7, r0
 800a59c:	1a36      	subs	r6, r6, r0
 800a59e:	e7e9      	b.n	800a574 <__sflush_r+0xd0>
 800a5a0:	dfbffffe 	.word	0xdfbffffe

0800a5a4 <_fflush_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	690b      	ldr	r3, [r1, #16]
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	b913      	cbnz	r3, 800a5b4 <_fflush_r+0x10>
 800a5ae:	2500      	movs	r5, #0
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	b118      	cbz	r0, 800a5be <_fflush_r+0x1a>
 800a5b6:	6a03      	ldr	r3, [r0, #32]
 800a5b8:	b90b      	cbnz	r3, 800a5be <_fflush_r+0x1a>
 800a5ba:	f7fd f8cd 	bl	8007758 <__sinit>
 800a5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0f3      	beq.n	800a5ae <_fflush_r+0xa>
 800a5c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5c8:	07d0      	lsls	r0, r2, #31
 800a5ca:	d404      	bmi.n	800a5d6 <_fflush_r+0x32>
 800a5cc:	0599      	lsls	r1, r3, #22
 800a5ce:	d402      	bmi.n	800a5d6 <_fflush_r+0x32>
 800a5d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5d2:	f7fd fa38 	bl	8007a46 <__retarget_lock_acquire_recursive>
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	4621      	mov	r1, r4
 800a5da:	f7ff ff63 	bl	800a4a4 <__sflush_r>
 800a5de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	07da      	lsls	r2, r3, #31
 800a5e4:	d4e4      	bmi.n	800a5b0 <_fflush_r+0xc>
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	059b      	lsls	r3, r3, #22
 800a5ea:	d4e1      	bmi.n	800a5b0 <_fflush_r+0xc>
 800a5ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ee:	f7fd fa2b 	bl	8007a48 <__retarget_lock_release_recursive>
 800a5f2:	e7dd      	b.n	800a5b0 <_fflush_r+0xc>

0800a5f4 <__swbuf_r>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	460e      	mov	r6, r1
 800a5f8:	4614      	mov	r4, r2
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	b118      	cbz	r0, 800a606 <__swbuf_r+0x12>
 800a5fe:	6a03      	ldr	r3, [r0, #32]
 800a600:	b90b      	cbnz	r3, 800a606 <__swbuf_r+0x12>
 800a602:	f7fd f8a9 	bl	8007758 <__sinit>
 800a606:	69a3      	ldr	r3, [r4, #24]
 800a608:	60a3      	str	r3, [r4, #8]
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	071a      	lsls	r2, r3, #28
 800a60e:	d501      	bpl.n	800a614 <__swbuf_r+0x20>
 800a610:	6923      	ldr	r3, [r4, #16]
 800a612:	b943      	cbnz	r3, 800a626 <__swbuf_r+0x32>
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f82a 	bl	800a670 <__swsetup_r>
 800a61c:	b118      	cbz	r0, 800a626 <__swbuf_r+0x32>
 800a61e:	f04f 37ff 	mov.w	r7, #4294967295
 800a622:	4638      	mov	r0, r7
 800a624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	6922      	ldr	r2, [r4, #16]
 800a62a:	b2f6      	uxtb	r6, r6
 800a62c:	1a98      	subs	r0, r3, r2
 800a62e:	6963      	ldr	r3, [r4, #20]
 800a630:	4637      	mov	r7, r6
 800a632:	4283      	cmp	r3, r0
 800a634:	dc05      	bgt.n	800a642 <__swbuf_r+0x4e>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f7ff ffb3 	bl	800a5a4 <_fflush_r>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d1ed      	bne.n	800a61e <__swbuf_r+0x2a>
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	3b01      	subs	r3, #1
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	6022      	str	r2, [r4, #0]
 800a64e:	701e      	strb	r6, [r3, #0]
 800a650:	6962      	ldr	r2, [r4, #20]
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	429a      	cmp	r2, r3
 800a656:	d004      	beq.n	800a662 <__swbuf_r+0x6e>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	07db      	lsls	r3, r3, #31
 800a65c:	d5e1      	bpl.n	800a622 <__swbuf_r+0x2e>
 800a65e:	2e0a      	cmp	r6, #10
 800a660:	d1df      	bne.n	800a622 <__swbuf_r+0x2e>
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f7ff ff9d 	bl	800a5a4 <_fflush_r>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0d9      	beq.n	800a622 <__swbuf_r+0x2e>
 800a66e:	e7d6      	b.n	800a61e <__swbuf_r+0x2a>

0800a670 <__swsetup_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4b29      	ldr	r3, [pc, #164]	@ (800a718 <__swsetup_r+0xa8>)
 800a674:	4605      	mov	r5, r0
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	460c      	mov	r4, r1
 800a67a:	b118      	cbz	r0, 800a684 <__swsetup_r+0x14>
 800a67c:	6a03      	ldr	r3, [r0, #32]
 800a67e:	b90b      	cbnz	r3, 800a684 <__swsetup_r+0x14>
 800a680:	f7fd f86a 	bl	8007758 <__sinit>
 800a684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a688:	0719      	lsls	r1, r3, #28
 800a68a:	d422      	bmi.n	800a6d2 <__swsetup_r+0x62>
 800a68c:	06da      	lsls	r2, r3, #27
 800a68e:	d407      	bmi.n	800a6a0 <__swsetup_r+0x30>
 800a690:	2209      	movs	r2, #9
 800a692:	602a      	str	r2, [r5, #0]
 800a694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	e033      	b.n	800a708 <__swsetup_r+0x98>
 800a6a0:	0758      	lsls	r0, r3, #29
 800a6a2:	d512      	bpl.n	800a6ca <__swsetup_r+0x5a>
 800a6a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6a6:	b141      	cbz	r1, 800a6ba <__swsetup_r+0x4a>
 800a6a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6ac:	4299      	cmp	r1, r3
 800a6ae:	d002      	beq.n	800a6b6 <__swsetup_r+0x46>
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f7fe f83d 	bl	8008730 <_free_r>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6063      	str	r3, [r4, #4]
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f043 0308 	orr.w	r3, r3, #8
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	b94b      	cbnz	r3, 800a6ea <__swsetup_r+0x7a>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6e0:	d003      	beq.n	800a6ea <__swsetup_r+0x7a>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f000 fc30 	bl	800af4a <__smakebuf_r>
 800a6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ee:	f013 0201 	ands.w	r2, r3, #1
 800a6f2:	d00a      	beq.n	800a70a <__swsetup_r+0x9a>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	60a2      	str	r2, [r4, #8]
 800a6f8:	6962      	ldr	r2, [r4, #20]
 800a6fa:	4252      	negs	r2, r2
 800a6fc:	61a2      	str	r2, [r4, #24]
 800a6fe:	6922      	ldr	r2, [r4, #16]
 800a700:	b942      	cbnz	r2, 800a714 <__swsetup_r+0xa4>
 800a702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a706:	d1c5      	bne.n	800a694 <__swsetup_r+0x24>
 800a708:	bd38      	pop	{r3, r4, r5, pc}
 800a70a:	0799      	lsls	r1, r3, #30
 800a70c:	bf58      	it	pl
 800a70e:	6962      	ldrpl	r2, [r4, #20]
 800a710:	60a2      	str	r2, [r4, #8]
 800a712:	e7f4      	b.n	800a6fe <__swsetup_r+0x8e>
 800a714:	2000      	movs	r0, #0
 800a716:	e7f7      	b.n	800a708 <__swsetup_r+0x98>
 800a718:	20000028 	.word	0x20000028

0800a71c <strncmp>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	b16a      	cbz	r2, 800a73c <strncmp+0x20>
 800a720:	3901      	subs	r1, #1
 800a722:	1884      	adds	r4, r0, r2
 800a724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a728:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d103      	bne.n	800a738 <strncmp+0x1c>
 800a730:	42a0      	cmp	r0, r4
 800a732:	d001      	beq.n	800a738 <strncmp+0x1c>
 800a734:	2a00      	cmp	r2, #0
 800a736:	d1f5      	bne.n	800a724 <strncmp+0x8>
 800a738:	1ad0      	subs	r0, r2, r3
 800a73a:	bd10      	pop	{r4, pc}
 800a73c:	4610      	mov	r0, r2
 800a73e:	e7fc      	b.n	800a73a <strncmp+0x1e>

0800a740 <_sbrk_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	2300      	movs	r3, #0
 800a744:	4d05      	ldr	r5, [pc, #20]	@ (800a75c <_sbrk_r+0x1c>)
 800a746:	4604      	mov	r4, r0
 800a748:	4608      	mov	r0, r1
 800a74a:	602b      	str	r3, [r5, #0]
 800a74c:	f7f7 fed8 	bl	8002500 <_sbrk>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_sbrk_r+0x1a>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_sbrk_r+0x1a>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	200008c8 	.word	0x200008c8

0800a760 <nan>:
 800a760:	2000      	movs	r0, #0
 800a762:	4901      	ldr	r1, [pc, #4]	@ (800a768 <nan+0x8>)
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	7ff80000 	.word	0x7ff80000

0800a76c <__assert_func>:
 800a76c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a76e:	4614      	mov	r4, r2
 800a770:	461a      	mov	r2, r3
 800a772:	4b09      	ldr	r3, [pc, #36]	@ (800a798 <__assert_func+0x2c>)
 800a774:	4605      	mov	r5, r0
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68d8      	ldr	r0, [r3, #12]
 800a77a:	b954      	cbnz	r4, 800a792 <__assert_func+0x26>
 800a77c:	4b07      	ldr	r3, [pc, #28]	@ (800a79c <__assert_func+0x30>)
 800a77e:	461c      	mov	r4, r3
 800a780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a784:	9100      	str	r1, [sp, #0]
 800a786:	462b      	mov	r3, r5
 800a788:	4905      	ldr	r1, [pc, #20]	@ (800a7a0 <__assert_func+0x34>)
 800a78a:	f000 fba7 	bl	800aedc <fiprintf>
 800a78e:	f000 fc3b 	bl	800b008 <abort>
 800a792:	4b04      	ldr	r3, [pc, #16]	@ (800a7a4 <__assert_func+0x38>)
 800a794:	e7f4      	b.n	800a780 <__assert_func+0x14>
 800a796:	bf00      	nop
 800a798:	20000028 	.word	0x20000028
 800a79c:	0800cb85 	.word	0x0800cb85
 800a7a0:	0800cb57 	.word	0x0800cb57
 800a7a4:	0800cb4a 	.word	0x0800cb4a

0800a7a8 <_calloc_r>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	fba1 5402 	umull	r5, r4, r1, r2
 800a7ae:	b93c      	cbnz	r4, 800a7c0 <_calloc_r+0x18>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	f7fe f82f 	bl	8008814 <_malloc_r>
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	b928      	cbnz	r0, 800a7c6 <_calloc_r+0x1e>
 800a7ba:	2600      	movs	r6, #0
 800a7bc:	4630      	mov	r0, r6
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	220c      	movs	r2, #12
 800a7c2:	6002      	str	r2, [r0, #0]
 800a7c4:	e7f9      	b.n	800a7ba <_calloc_r+0x12>
 800a7c6:	462a      	mov	r2, r5
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	f7fd f8be 	bl	800794a <memset>
 800a7ce:	e7f5      	b.n	800a7bc <_calloc_r+0x14>

0800a7d0 <rshift>:
 800a7d0:	6903      	ldr	r3, [r0, #16]
 800a7d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a7da:	f100 0414 	add.w	r4, r0, #20
 800a7de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a7e2:	dd46      	ble.n	800a872 <rshift+0xa2>
 800a7e4:	f011 011f 	ands.w	r1, r1, #31
 800a7e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7f0:	d10c      	bne.n	800a80c <rshift+0x3c>
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	f100 0710 	add.w	r7, r0, #16
 800a7f8:	42b1      	cmp	r1, r6
 800a7fa:	d335      	bcc.n	800a868 <rshift+0x98>
 800a7fc:	1a9b      	subs	r3, r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	1eea      	subs	r2, r5, #3
 800a802:	4296      	cmp	r6, r2
 800a804:	bf38      	it	cc
 800a806:	2300      	movcc	r3, #0
 800a808:	4423      	add	r3, r4
 800a80a:	e015      	b.n	800a838 <rshift+0x68>
 800a80c:	46a1      	mov	r9, r4
 800a80e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a812:	f1c1 0820 	rsb	r8, r1, #32
 800a816:	40cf      	lsrs	r7, r1
 800a818:	f105 0e04 	add.w	lr, r5, #4
 800a81c:	4576      	cmp	r6, lr
 800a81e:	46f4      	mov	ip, lr
 800a820:	d816      	bhi.n	800a850 <rshift+0x80>
 800a822:	1a9a      	subs	r2, r3, r2
 800a824:	0092      	lsls	r2, r2, #2
 800a826:	3a04      	subs	r2, #4
 800a828:	3501      	adds	r5, #1
 800a82a:	42ae      	cmp	r6, r5
 800a82c:	bf38      	it	cc
 800a82e:	2200      	movcc	r2, #0
 800a830:	18a3      	adds	r3, r4, r2
 800a832:	50a7      	str	r7, [r4, r2]
 800a834:	b107      	cbz	r7, 800a838 <rshift+0x68>
 800a836:	3304      	adds	r3, #4
 800a838:	42a3      	cmp	r3, r4
 800a83a:	eba3 0204 	sub.w	r2, r3, r4
 800a83e:	bf08      	it	eq
 800a840:	2300      	moveq	r3, #0
 800a842:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a846:	6102      	str	r2, [r0, #16]
 800a848:	bf08      	it	eq
 800a84a:	6143      	streq	r3, [r0, #20]
 800a84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a850:	f8dc c000 	ldr.w	ip, [ip]
 800a854:	fa0c fc08 	lsl.w	ip, ip, r8
 800a858:	ea4c 0707 	orr.w	r7, ip, r7
 800a85c:	f849 7b04 	str.w	r7, [r9], #4
 800a860:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a864:	40cf      	lsrs	r7, r1
 800a866:	e7d9      	b.n	800a81c <rshift+0x4c>
 800a868:	f851 cb04 	ldr.w	ip, [r1], #4
 800a86c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a870:	e7c2      	b.n	800a7f8 <rshift+0x28>
 800a872:	4623      	mov	r3, r4
 800a874:	e7e0      	b.n	800a838 <rshift+0x68>

0800a876 <__hexdig_fun>:
 800a876:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a87a:	2b09      	cmp	r3, #9
 800a87c:	d802      	bhi.n	800a884 <__hexdig_fun+0xe>
 800a87e:	3820      	subs	r0, #32
 800a880:	b2c0      	uxtb	r0, r0
 800a882:	4770      	bx	lr
 800a884:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a888:	2b05      	cmp	r3, #5
 800a88a:	d801      	bhi.n	800a890 <__hexdig_fun+0x1a>
 800a88c:	3847      	subs	r0, #71	@ 0x47
 800a88e:	e7f7      	b.n	800a880 <__hexdig_fun+0xa>
 800a890:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a894:	2b05      	cmp	r3, #5
 800a896:	d801      	bhi.n	800a89c <__hexdig_fun+0x26>
 800a898:	3827      	subs	r0, #39	@ 0x27
 800a89a:	e7f1      	b.n	800a880 <__hexdig_fun+0xa>
 800a89c:	2000      	movs	r0, #0
 800a89e:	4770      	bx	lr

0800a8a0 <__gethex>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	468a      	mov	sl, r1
 800a8a6:	4690      	mov	r8, r2
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	9302      	str	r3, [sp, #8]
 800a8ac:	680b      	ldr	r3, [r1, #0]
 800a8ae:	9001      	str	r0, [sp, #4]
 800a8b0:	1c9c      	adds	r4, r3, #2
 800a8b2:	46a1      	mov	r9, r4
 800a8b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a8b8:	2830      	cmp	r0, #48	@ 0x30
 800a8ba:	d0fa      	beq.n	800a8b2 <__gethex+0x12>
 800a8bc:	eba9 0303 	sub.w	r3, r9, r3
 800a8c0:	f1a3 0b02 	sub.w	fp, r3, #2
 800a8c4:	f7ff ffd7 	bl	800a876 <__hexdig_fun>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d168      	bne.n	800a9a0 <__gethex+0x100>
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4648      	mov	r0, r9
 800a8d2:	499f      	ldr	r1, [pc, #636]	@ (800ab50 <__gethex+0x2b0>)
 800a8d4:	f7ff ff22 	bl	800a71c <strncmp>
 800a8d8:	4607      	mov	r7, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d167      	bne.n	800a9ae <__gethex+0x10e>
 800a8de:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a8e2:	4626      	mov	r6, r4
 800a8e4:	f7ff ffc7 	bl	800a876 <__hexdig_fun>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d062      	beq.n	800a9b2 <__gethex+0x112>
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	7818      	ldrb	r0, [r3, #0]
 800a8f0:	4699      	mov	r9, r3
 800a8f2:	2830      	cmp	r0, #48	@ 0x30
 800a8f4:	f103 0301 	add.w	r3, r3, #1
 800a8f8:	d0f9      	beq.n	800a8ee <__gethex+0x4e>
 800a8fa:	f7ff ffbc 	bl	800a876 <__hexdig_fun>
 800a8fe:	fab0 f580 	clz	r5, r0
 800a902:	f04f 0b01 	mov.w	fp, #1
 800a906:	096d      	lsrs	r5, r5, #5
 800a908:	464a      	mov	r2, r9
 800a90a:	4616      	mov	r6, r2
 800a90c:	7830      	ldrb	r0, [r6, #0]
 800a90e:	3201      	adds	r2, #1
 800a910:	f7ff ffb1 	bl	800a876 <__hexdig_fun>
 800a914:	2800      	cmp	r0, #0
 800a916:	d1f8      	bne.n	800a90a <__gethex+0x6a>
 800a918:	2201      	movs	r2, #1
 800a91a:	4630      	mov	r0, r6
 800a91c:	498c      	ldr	r1, [pc, #560]	@ (800ab50 <__gethex+0x2b0>)
 800a91e:	f7ff fefd 	bl	800a71c <strncmp>
 800a922:	2800      	cmp	r0, #0
 800a924:	d13f      	bne.n	800a9a6 <__gethex+0x106>
 800a926:	b944      	cbnz	r4, 800a93a <__gethex+0x9a>
 800a928:	1c74      	adds	r4, r6, #1
 800a92a:	4622      	mov	r2, r4
 800a92c:	4616      	mov	r6, r2
 800a92e:	7830      	ldrb	r0, [r6, #0]
 800a930:	3201      	adds	r2, #1
 800a932:	f7ff ffa0 	bl	800a876 <__hexdig_fun>
 800a936:	2800      	cmp	r0, #0
 800a938:	d1f8      	bne.n	800a92c <__gethex+0x8c>
 800a93a:	1ba4      	subs	r4, r4, r6
 800a93c:	00a7      	lsls	r7, r4, #2
 800a93e:	7833      	ldrb	r3, [r6, #0]
 800a940:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a944:	2b50      	cmp	r3, #80	@ 0x50
 800a946:	d13e      	bne.n	800a9c6 <__gethex+0x126>
 800a948:	7873      	ldrb	r3, [r6, #1]
 800a94a:	2b2b      	cmp	r3, #43	@ 0x2b
 800a94c:	d033      	beq.n	800a9b6 <__gethex+0x116>
 800a94e:	2b2d      	cmp	r3, #45	@ 0x2d
 800a950:	d034      	beq.n	800a9bc <__gethex+0x11c>
 800a952:	2400      	movs	r4, #0
 800a954:	1c71      	adds	r1, r6, #1
 800a956:	7808      	ldrb	r0, [r1, #0]
 800a958:	f7ff ff8d 	bl	800a876 <__hexdig_fun>
 800a95c:	1e43      	subs	r3, r0, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b18      	cmp	r3, #24
 800a962:	d830      	bhi.n	800a9c6 <__gethex+0x126>
 800a964:	f1a0 0210 	sub.w	r2, r0, #16
 800a968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a96c:	f7ff ff83 	bl	800a876 <__hexdig_fun>
 800a970:	f100 3cff 	add.w	ip, r0, #4294967295
 800a974:	fa5f fc8c 	uxtb.w	ip, ip
 800a978:	f1bc 0f18 	cmp.w	ip, #24
 800a97c:	f04f 030a 	mov.w	r3, #10
 800a980:	d91e      	bls.n	800a9c0 <__gethex+0x120>
 800a982:	b104      	cbz	r4, 800a986 <__gethex+0xe6>
 800a984:	4252      	negs	r2, r2
 800a986:	4417      	add	r7, r2
 800a988:	f8ca 1000 	str.w	r1, [sl]
 800a98c:	b1ed      	cbz	r5, 800a9ca <__gethex+0x12a>
 800a98e:	f1bb 0f00 	cmp.w	fp, #0
 800a992:	bf0c      	ite	eq
 800a994:	2506      	moveq	r5, #6
 800a996:	2500      	movne	r5, #0
 800a998:	4628      	mov	r0, r5
 800a99a:	b005      	add	sp, #20
 800a99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a0:	2500      	movs	r5, #0
 800a9a2:	462c      	mov	r4, r5
 800a9a4:	e7b0      	b.n	800a908 <__gethex+0x68>
 800a9a6:	2c00      	cmp	r4, #0
 800a9a8:	d1c7      	bne.n	800a93a <__gethex+0x9a>
 800a9aa:	4627      	mov	r7, r4
 800a9ac:	e7c7      	b.n	800a93e <__gethex+0x9e>
 800a9ae:	464e      	mov	r6, r9
 800a9b0:	462f      	mov	r7, r5
 800a9b2:	2501      	movs	r5, #1
 800a9b4:	e7c3      	b.n	800a93e <__gethex+0x9e>
 800a9b6:	2400      	movs	r4, #0
 800a9b8:	1cb1      	adds	r1, r6, #2
 800a9ba:	e7cc      	b.n	800a956 <__gethex+0xb6>
 800a9bc:	2401      	movs	r4, #1
 800a9be:	e7fb      	b.n	800a9b8 <__gethex+0x118>
 800a9c0:	fb03 0002 	mla	r0, r3, r2, r0
 800a9c4:	e7ce      	b.n	800a964 <__gethex+0xc4>
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	e7de      	b.n	800a988 <__gethex+0xe8>
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	eba6 0309 	sub.w	r3, r6, r9
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	2b07      	cmp	r3, #7
 800a9d4:	dc0a      	bgt.n	800a9ec <__gethex+0x14c>
 800a9d6:	9801      	ldr	r0, [sp, #4]
 800a9d8:	f7fd ffa8 	bl	800892c <_Balloc>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	b940      	cbnz	r0, 800a9f2 <__gethex+0x152>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	21e4      	movs	r1, #228	@ 0xe4
 800a9e4:	4b5b      	ldr	r3, [pc, #364]	@ (800ab54 <__gethex+0x2b4>)
 800a9e6:	485c      	ldr	r0, [pc, #368]	@ (800ab58 <__gethex+0x2b8>)
 800a9e8:	f7ff fec0 	bl	800a76c <__assert_func>
 800a9ec:	3101      	adds	r1, #1
 800a9ee:	105b      	asrs	r3, r3, #1
 800a9f0:	e7ef      	b.n	800a9d2 <__gethex+0x132>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f100 0a14 	add.w	sl, r0, #20
 800a9f8:	4655      	mov	r5, sl
 800a9fa:	469b      	mov	fp, r3
 800a9fc:	45b1      	cmp	r9, r6
 800a9fe:	d337      	bcc.n	800aa70 <__gethex+0x1d0>
 800aa00:	f845 bb04 	str.w	fp, [r5], #4
 800aa04:	eba5 050a 	sub.w	r5, r5, sl
 800aa08:	10ad      	asrs	r5, r5, #2
 800aa0a:	6125      	str	r5, [r4, #16]
 800aa0c:	4658      	mov	r0, fp
 800aa0e:	f7fe f87f 	bl	8008b10 <__hi0bits>
 800aa12:	016d      	lsls	r5, r5, #5
 800aa14:	f8d8 6000 	ldr.w	r6, [r8]
 800aa18:	1a2d      	subs	r5, r5, r0
 800aa1a:	42b5      	cmp	r5, r6
 800aa1c:	dd54      	ble.n	800aac8 <__gethex+0x228>
 800aa1e:	1bad      	subs	r5, r5, r6
 800aa20:	4629      	mov	r1, r5
 800aa22:	4620      	mov	r0, r4
 800aa24:	f7fe fc07 	bl	8009236 <__any_on>
 800aa28:	4681      	mov	r9, r0
 800aa2a:	b178      	cbz	r0, 800aa4c <__gethex+0x1ac>
 800aa2c:	f04f 0901 	mov.w	r9, #1
 800aa30:	1e6b      	subs	r3, r5, #1
 800aa32:	1159      	asrs	r1, r3, #5
 800aa34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa38:	f003 021f 	and.w	r2, r3, #31
 800aa3c:	fa09 f202 	lsl.w	r2, r9, r2
 800aa40:	420a      	tst	r2, r1
 800aa42:	d003      	beq.n	800aa4c <__gethex+0x1ac>
 800aa44:	454b      	cmp	r3, r9
 800aa46:	dc36      	bgt.n	800aab6 <__gethex+0x216>
 800aa48:	f04f 0902 	mov.w	r9, #2
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff febe 	bl	800a7d0 <rshift>
 800aa54:	442f      	add	r7, r5
 800aa56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa5a:	42bb      	cmp	r3, r7
 800aa5c:	da42      	bge.n	800aae4 <__gethex+0x244>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	9801      	ldr	r0, [sp, #4]
 800aa62:	f7fd ffa3 	bl	80089ac <_Bfree>
 800aa66:	2300      	movs	r3, #0
 800aa68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa6a:	25a3      	movs	r5, #163	@ 0xa3
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	e793      	b.n	800a998 <__gethex+0xf8>
 800aa70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aa74:	2a2e      	cmp	r2, #46	@ 0x2e
 800aa76:	d012      	beq.n	800aa9e <__gethex+0x1fe>
 800aa78:	2b20      	cmp	r3, #32
 800aa7a:	d104      	bne.n	800aa86 <__gethex+0x1e6>
 800aa7c:	f845 bb04 	str.w	fp, [r5], #4
 800aa80:	f04f 0b00 	mov.w	fp, #0
 800aa84:	465b      	mov	r3, fp
 800aa86:	7830      	ldrb	r0, [r6, #0]
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	f7ff fef4 	bl	800a876 <__hexdig_fun>
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	f000 000f 	and.w	r0, r0, #15
 800aa94:	4098      	lsls	r0, r3
 800aa96:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	e7ae      	b.n	800a9fc <__gethex+0x15c>
 800aa9e:	45b1      	cmp	r9, r6
 800aaa0:	d8ea      	bhi.n	800aa78 <__gethex+0x1d8>
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	492a      	ldr	r1, [pc, #168]	@ (800ab50 <__gethex+0x2b0>)
 800aaa8:	9303      	str	r3, [sp, #12]
 800aaaa:	f7ff fe37 	bl	800a71c <strncmp>
 800aaae:	9b03      	ldr	r3, [sp, #12]
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d1e1      	bne.n	800aa78 <__gethex+0x1d8>
 800aab4:	e7a2      	b.n	800a9fc <__gethex+0x15c>
 800aab6:	4620      	mov	r0, r4
 800aab8:	1ea9      	subs	r1, r5, #2
 800aaba:	f7fe fbbc 	bl	8009236 <__any_on>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d0c2      	beq.n	800aa48 <__gethex+0x1a8>
 800aac2:	f04f 0903 	mov.w	r9, #3
 800aac6:	e7c1      	b.n	800aa4c <__gethex+0x1ac>
 800aac8:	da09      	bge.n	800aade <__gethex+0x23e>
 800aaca:	1b75      	subs	r5, r6, r5
 800aacc:	4621      	mov	r1, r4
 800aace:	462a      	mov	r2, r5
 800aad0:	9801      	ldr	r0, [sp, #4]
 800aad2:	f7fe f981 	bl	8008dd8 <__lshift>
 800aad6:	4604      	mov	r4, r0
 800aad8:	1b7f      	subs	r7, r7, r5
 800aada:	f100 0a14 	add.w	sl, r0, #20
 800aade:	f04f 0900 	mov.w	r9, #0
 800aae2:	e7b8      	b.n	800aa56 <__gethex+0x1b6>
 800aae4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aae8:	42bd      	cmp	r5, r7
 800aaea:	dd6f      	ble.n	800abcc <__gethex+0x32c>
 800aaec:	1bed      	subs	r5, r5, r7
 800aaee:	42ae      	cmp	r6, r5
 800aaf0:	dc34      	bgt.n	800ab5c <__gethex+0x2bc>
 800aaf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d022      	beq.n	800ab40 <__gethex+0x2a0>
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d024      	beq.n	800ab48 <__gethex+0x2a8>
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d115      	bne.n	800ab2e <__gethex+0x28e>
 800ab02:	42ae      	cmp	r6, r5
 800ab04:	d113      	bne.n	800ab2e <__gethex+0x28e>
 800ab06:	2e01      	cmp	r6, #1
 800ab08:	d10b      	bne.n	800ab22 <__gethex+0x282>
 800ab0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab0e:	9a02      	ldr	r2, [sp, #8]
 800ab10:	2562      	movs	r5, #98	@ 0x62
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	2301      	movs	r3, #1
 800ab16:	6123      	str	r3, [r4, #16]
 800ab18:	f8ca 3000 	str.w	r3, [sl]
 800ab1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab1e:	601c      	str	r4, [r3, #0]
 800ab20:	e73a      	b.n	800a998 <__gethex+0xf8>
 800ab22:	4620      	mov	r0, r4
 800ab24:	1e71      	subs	r1, r6, #1
 800ab26:	f7fe fb86 	bl	8009236 <__any_on>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d1ed      	bne.n	800ab0a <__gethex+0x26a>
 800ab2e:	4621      	mov	r1, r4
 800ab30:	9801      	ldr	r0, [sp, #4]
 800ab32:	f7fd ff3b 	bl	80089ac <_Bfree>
 800ab36:	2300      	movs	r3, #0
 800ab38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab3a:	2550      	movs	r5, #80	@ 0x50
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	e72b      	b.n	800a998 <__gethex+0xf8>
 800ab40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f3      	bne.n	800ab2e <__gethex+0x28e>
 800ab46:	e7e0      	b.n	800ab0a <__gethex+0x26a>
 800ab48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1dd      	bne.n	800ab0a <__gethex+0x26a>
 800ab4e:	e7ee      	b.n	800ab2e <__gethex+0x28e>
 800ab50:	0800c9d8 	.word	0x0800c9d8
 800ab54:	0800c86b 	.word	0x0800c86b
 800ab58:	0800cb86 	.word	0x0800cb86
 800ab5c:	1e6f      	subs	r7, r5, #1
 800ab5e:	f1b9 0f00 	cmp.w	r9, #0
 800ab62:	d130      	bne.n	800abc6 <__gethex+0x326>
 800ab64:	b127      	cbz	r7, 800ab70 <__gethex+0x2d0>
 800ab66:	4639      	mov	r1, r7
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7fe fb64 	bl	8009236 <__any_on>
 800ab6e:	4681      	mov	r9, r0
 800ab70:	2301      	movs	r3, #1
 800ab72:	4629      	mov	r1, r5
 800ab74:	1b76      	subs	r6, r6, r5
 800ab76:	2502      	movs	r5, #2
 800ab78:	117a      	asrs	r2, r7, #5
 800ab7a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ab7e:	f007 071f 	and.w	r7, r7, #31
 800ab82:	40bb      	lsls	r3, r7
 800ab84:	4213      	tst	r3, r2
 800ab86:	4620      	mov	r0, r4
 800ab88:	bf18      	it	ne
 800ab8a:	f049 0902 	orrne.w	r9, r9, #2
 800ab8e:	f7ff fe1f 	bl	800a7d0 <rshift>
 800ab92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ab96:	f1b9 0f00 	cmp.w	r9, #0
 800ab9a:	d047      	beq.n	800ac2c <__gethex+0x38c>
 800ab9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d015      	beq.n	800abd0 <__gethex+0x330>
 800aba4:	2b03      	cmp	r3, #3
 800aba6:	d017      	beq.n	800abd8 <__gethex+0x338>
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d109      	bne.n	800abc0 <__gethex+0x320>
 800abac:	f019 0f02 	tst.w	r9, #2
 800abb0:	d006      	beq.n	800abc0 <__gethex+0x320>
 800abb2:	f8da 3000 	ldr.w	r3, [sl]
 800abb6:	ea49 0903 	orr.w	r9, r9, r3
 800abba:	f019 0f01 	tst.w	r9, #1
 800abbe:	d10e      	bne.n	800abde <__gethex+0x33e>
 800abc0:	f045 0510 	orr.w	r5, r5, #16
 800abc4:	e032      	b.n	800ac2c <__gethex+0x38c>
 800abc6:	f04f 0901 	mov.w	r9, #1
 800abca:	e7d1      	b.n	800ab70 <__gethex+0x2d0>
 800abcc:	2501      	movs	r5, #1
 800abce:	e7e2      	b.n	800ab96 <__gethex+0x2f6>
 800abd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abd2:	f1c3 0301 	rsb	r3, r3, #1
 800abd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d0f0      	beq.n	800abc0 <__gethex+0x320>
 800abde:	f04f 0c00 	mov.w	ip, #0
 800abe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abe6:	f104 0314 	add.w	r3, r4, #20
 800abea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abf8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abfc:	d01b      	beq.n	800ac36 <__gethex+0x396>
 800abfe:	3201      	adds	r2, #1
 800ac00:	6002      	str	r2, [r0, #0]
 800ac02:	2d02      	cmp	r5, #2
 800ac04:	f104 0314 	add.w	r3, r4, #20
 800ac08:	d13c      	bne.n	800ac84 <__gethex+0x3e4>
 800ac0a:	f8d8 2000 	ldr.w	r2, [r8]
 800ac0e:	3a01      	subs	r2, #1
 800ac10:	42b2      	cmp	r2, r6
 800ac12:	d109      	bne.n	800ac28 <__gethex+0x388>
 800ac14:	2201      	movs	r2, #1
 800ac16:	1171      	asrs	r1, r6, #5
 800ac18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac1c:	f006 061f 	and.w	r6, r6, #31
 800ac20:	fa02 f606 	lsl.w	r6, r2, r6
 800ac24:	421e      	tst	r6, r3
 800ac26:	d13a      	bne.n	800ac9e <__gethex+0x3fe>
 800ac28:	f045 0520 	orr.w	r5, r5, #32
 800ac2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac2e:	601c      	str	r4, [r3, #0]
 800ac30:	9b02      	ldr	r3, [sp, #8]
 800ac32:	601f      	str	r7, [r3, #0]
 800ac34:	e6b0      	b.n	800a998 <__gethex+0xf8>
 800ac36:	4299      	cmp	r1, r3
 800ac38:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac3c:	d8d9      	bhi.n	800abf2 <__gethex+0x352>
 800ac3e:	68a3      	ldr	r3, [r4, #8]
 800ac40:	459b      	cmp	fp, r3
 800ac42:	db17      	blt.n	800ac74 <__gethex+0x3d4>
 800ac44:	6861      	ldr	r1, [r4, #4]
 800ac46:	9801      	ldr	r0, [sp, #4]
 800ac48:	3101      	adds	r1, #1
 800ac4a:	f7fd fe6f 	bl	800892c <_Balloc>
 800ac4e:	4681      	mov	r9, r0
 800ac50:	b918      	cbnz	r0, 800ac5a <__gethex+0x3ba>
 800ac52:	4602      	mov	r2, r0
 800ac54:	2184      	movs	r1, #132	@ 0x84
 800ac56:	4b19      	ldr	r3, [pc, #100]	@ (800acbc <__gethex+0x41c>)
 800ac58:	e6c5      	b.n	800a9e6 <__gethex+0x146>
 800ac5a:	6922      	ldr	r2, [r4, #16]
 800ac5c:	f104 010c 	add.w	r1, r4, #12
 800ac60:	3202      	adds	r2, #2
 800ac62:	0092      	lsls	r2, r2, #2
 800ac64:	300c      	adds	r0, #12
 800ac66:	f7fc fefe 	bl	8007a66 <memcpy>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	9801      	ldr	r0, [sp, #4]
 800ac6e:	f7fd fe9d 	bl	80089ac <_Bfree>
 800ac72:	464c      	mov	r4, r9
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	6122      	str	r2, [r4, #16]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac80:	615a      	str	r2, [r3, #20]
 800ac82:	e7be      	b.n	800ac02 <__gethex+0x362>
 800ac84:	6922      	ldr	r2, [r4, #16]
 800ac86:	455a      	cmp	r2, fp
 800ac88:	dd0b      	ble.n	800aca2 <__gethex+0x402>
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7ff fd9f 	bl	800a7d0 <rshift>
 800ac92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac96:	3701      	adds	r7, #1
 800ac98:	42bb      	cmp	r3, r7
 800ac9a:	f6ff aee0 	blt.w	800aa5e <__gethex+0x1be>
 800ac9e:	2501      	movs	r5, #1
 800aca0:	e7c2      	b.n	800ac28 <__gethex+0x388>
 800aca2:	f016 061f 	ands.w	r6, r6, #31
 800aca6:	d0fa      	beq.n	800ac9e <__gethex+0x3fe>
 800aca8:	4453      	add	r3, sl
 800acaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800acae:	f7fd ff2f 	bl	8008b10 <__hi0bits>
 800acb2:	f1c6 0620 	rsb	r6, r6, #32
 800acb6:	42b0      	cmp	r0, r6
 800acb8:	dbe7      	blt.n	800ac8a <__gethex+0x3ea>
 800acba:	e7f0      	b.n	800ac9e <__gethex+0x3fe>
 800acbc:	0800c86b 	.word	0x0800c86b

0800acc0 <L_shift>:
 800acc0:	f1c2 0208 	rsb	r2, r2, #8
 800acc4:	0092      	lsls	r2, r2, #2
 800acc6:	b570      	push	{r4, r5, r6, lr}
 800acc8:	f1c2 0620 	rsb	r6, r2, #32
 800accc:	6843      	ldr	r3, [r0, #4]
 800acce:	6804      	ldr	r4, [r0, #0]
 800acd0:	fa03 f506 	lsl.w	r5, r3, r6
 800acd4:	432c      	orrs	r4, r5
 800acd6:	40d3      	lsrs	r3, r2
 800acd8:	6004      	str	r4, [r0, #0]
 800acda:	f840 3f04 	str.w	r3, [r0, #4]!
 800acde:	4288      	cmp	r0, r1
 800ace0:	d3f4      	bcc.n	800accc <L_shift+0xc>
 800ace2:	bd70      	pop	{r4, r5, r6, pc}

0800ace4 <__match>:
 800ace4:	b530      	push	{r4, r5, lr}
 800ace6:	6803      	ldr	r3, [r0, #0]
 800ace8:	3301      	adds	r3, #1
 800acea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acee:	b914      	cbnz	r4, 800acf6 <__match+0x12>
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	2001      	movs	r0, #1
 800acf4:	bd30      	pop	{r4, r5, pc}
 800acf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acfa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800acfe:	2d19      	cmp	r5, #25
 800ad00:	bf98      	it	ls
 800ad02:	3220      	addls	r2, #32
 800ad04:	42a2      	cmp	r2, r4
 800ad06:	d0f0      	beq.n	800acea <__match+0x6>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e7f3      	b.n	800acf4 <__match+0x10>

0800ad0c <__hexnan>:
 800ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	2500      	movs	r5, #0
 800ad12:	680b      	ldr	r3, [r1, #0]
 800ad14:	4682      	mov	sl, r0
 800ad16:	115e      	asrs	r6, r3, #5
 800ad18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad1c:	f013 031f 	ands.w	r3, r3, #31
 800ad20:	bf18      	it	ne
 800ad22:	3604      	addne	r6, #4
 800ad24:	1f37      	subs	r7, r6, #4
 800ad26:	4690      	mov	r8, r2
 800ad28:	46b9      	mov	r9, r7
 800ad2a:	463c      	mov	r4, r7
 800ad2c:	46ab      	mov	fp, r5
 800ad2e:	b087      	sub	sp, #28
 800ad30:	6801      	ldr	r1, [r0, #0]
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad38:	9502      	str	r5, [sp, #8]
 800ad3a:	784a      	ldrb	r2, [r1, #1]
 800ad3c:	1c4b      	adds	r3, r1, #1
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	b342      	cbz	r2, 800ad94 <__hexnan+0x88>
 800ad42:	4610      	mov	r0, r2
 800ad44:	9105      	str	r1, [sp, #20]
 800ad46:	9204      	str	r2, [sp, #16]
 800ad48:	f7ff fd95 	bl	800a876 <__hexdig_fun>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d151      	bne.n	800adf4 <__hexnan+0xe8>
 800ad50:	9a04      	ldr	r2, [sp, #16]
 800ad52:	9905      	ldr	r1, [sp, #20]
 800ad54:	2a20      	cmp	r2, #32
 800ad56:	d818      	bhi.n	800ad8a <__hexnan+0x7e>
 800ad58:	9b02      	ldr	r3, [sp, #8]
 800ad5a:	459b      	cmp	fp, r3
 800ad5c:	dd13      	ble.n	800ad86 <__hexnan+0x7a>
 800ad5e:	454c      	cmp	r4, r9
 800ad60:	d206      	bcs.n	800ad70 <__hexnan+0x64>
 800ad62:	2d07      	cmp	r5, #7
 800ad64:	dc04      	bgt.n	800ad70 <__hexnan+0x64>
 800ad66:	462a      	mov	r2, r5
 800ad68:	4649      	mov	r1, r9
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7ff ffa8 	bl	800acc0 <L_shift>
 800ad70:	4544      	cmp	r4, r8
 800ad72:	d952      	bls.n	800ae1a <__hexnan+0x10e>
 800ad74:	2300      	movs	r3, #0
 800ad76:	f1a4 0904 	sub.w	r9, r4, #4
 800ad7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad7e:	461d      	mov	r5, r3
 800ad80:	464c      	mov	r4, r9
 800ad82:	f8cd b008 	str.w	fp, [sp, #8]
 800ad86:	9903      	ldr	r1, [sp, #12]
 800ad88:	e7d7      	b.n	800ad3a <__hexnan+0x2e>
 800ad8a:	2a29      	cmp	r2, #41	@ 0x29
 800ad8c:	d157      	bne.n	800ae3e <__hexnan+0x132>
 800ad8e:	3102      	adds	r1, #2
 800ad90:	f8ca 1000 	str.w	r1, [sl]
 800ad94:	f1bb 0f00 	cmp.w	fp, #0
 800ad98:	d051      	beq.n	800ae3e <__hexnan+0x132>
 800ad9a:	454c      	cmp	r4, r9
 800ad9c:	d206      	bcs.n	800adac <__hexnan+0xa0>
 800ad9e:	2d07      	cmp	r5, #7
 800ada0:	dc04      	bgt.n	800adac <__hexnan+0xa0>
 800ada2:	462a      	mov	r2, r5
 800ada4:	4649      	mov	r1, r9
 800ada6:	4620      	mov	r0, r4
 800ada8:	f7ff ff8a 	bl	800acc0 <L_shift>
 800adac:	4544      	cmp	r4, r8
 800adae:	d936      	bls.n	800ae1e <__hexnan+0x112>
 800adb0:	4623      	mov	r3, r4
 800adb2:	f1a8 0204 	sub.w	r2, r8, #4
 800adb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800adba:	429f      	cmp	r7, r3
 800adbc:	f842 1f04 	str.w	r1, [r2, #4]!
 800adc0:	d2f9      	bcs.n	800adb6 <__hexnan+0xaa>
 800adc2:	1b3b      	subs	r3, r7, r4
 800adc4:	f023 0303 	bic.w	r3, r3, #3
 800adc8:	3304      	adds	r3, #4
 800adca:	3401      	adds	r4, #1
 800adcc:	3e03      	subs	r6, #3
 800adce:	42b4      	cmp	r4, r6
 800add0:	bf88      	it	hi
 800add2:	2304      	movhi	r3, #4
 800add4:	2200      	movs	r2, #0
 800add6:	4443      	add	r3, r8
 800add8:	f843 2b04 	str.w	r2, [r3], #4
 800addc:	429f      	cmp	r7, r3
 800adde:	d2fb      	bcs.n	800add8 <__hexnan+0xcc>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	b91b      	cbnz	r3, 800adec <__hexnan+0xe0>
 800ade4:	4547      	cmp	r7, r8
 800ade6:	d128      	bne.n	800ae3a <__hexnan+0x12e>
 800ade8:	2301      	movs	r3, #1
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	2005      	movs	r0, #5
 800adee:	b007      	add	sp, #28
 800adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf4:	3501      	adds	r5, #1
 800adf6:	2d08      	cmp	r5, #8
 800adf8:	f10b 0b01 	add.w	fp, fp, #1
 800adfc:	dd06      	ble.n	800ae0c <__hexnan+0x100>
 800adfe:	4544      	cmp	r4, r8
 800ae00:	d9c1      	bls.n	800ad86 <__hexnan+0x7a>
 800ae02:	2300      	movs	r3, #0
 800ae04:	2501      	movs	r5, #1
 800ae06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae0a:	3c04      	subs	r4, #4
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	f000 000f 	and.w	r0, r0, #15
 800ae12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae16:	6020      	str	r0, [r4, #0]
 800ae18:	e7b5      	b.n	800ad86 <__hexnan+0x7a>
 800ae1a:	2508      	movs	r5, #8
 800ae1c:	e7b3      	b.n	800ad86 <__hexnan+0x7a>
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d0dd      	beq.n	800ade0 <__hexnan+0xd4>
 800ae24:	f04f 32ff 	mov.w	r2, #4294967295
 800ae28:	f1c3 0320 	rsb	r3, r3, #32
 800ae2c:	40da      	lsrs	r2, r3
 800ae2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae32:	4013      	ands	r3, r2
 800ae34:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae38:	e7d2      	b.n	800ade0 <__hexnan+0xd4>
 800ae3a:	3f04      	subs	r7, #4
 800ae3c:	e7d0      	b.n	800ade0 <__hexnan+0xd4>
 800ae3e:	2004      	movs	r0, #4
 800ae40:	e7d5      	b.n	800adee <__hexnan+0xe2>

0800ae42 <__ascii_mbtowc>:
 800ae42:	b082      	sub	sp, #8
 800ae44:	b901      	cbnz	r1, 800ae48 <__ascii_mbtowc+0x6>
 800ae46:	a901      	add	r1, sp, #4
 800ae48:	b142      	cbz	r2, 800ae5c <__ascii_mbtowc+0x1a>
 800ae4a:	b14b      	cbz	r3, 800ae60 <__ascii_mbtowc+0x1e>
 800ae4c:	7813      	ldrb	r3, [r2, #0]
 800ae4e:	600b      	str	r3, [r1, #0]
 800ae50:	7812      	ldrb	r2, [r2, #0]
 800ae52:	1e10      	subs	r0, r2, #0
 800ae54:	bf18      	it	ne
 800ae56:	2001      	movne	r0, #1
 800ae58:	b002      	add	sp, #8
 800ae5a:	4770      	bx	lr
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	e7fb      	b.n	800ae58 <__ascii_mbtowc+0x16>
 800ae60:	f06f 0001 	mvn.w	r0, #1
 800ae64:	e7f8      	b.n	800ae58 <__ascii_mbtowc+0x16>

0800ae66 <_realloc_r>:
 800ae66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae6a:	4680      	mov	r8, r0
 800ae6c:	4615      	mov	r5, r2
 800ae6e:	460c      	mov	r4, r1
 800ae70:	b921      	cbnz	r1, 800ae7c <_realloc_r+0x16>
 800ae72:	4611      	mov	r1, r2
 800ae74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae78:	f7fd bccc 	b.w	8008814 <_malloc_r>
 800ae7c:	b92a      	cbnz	r2, 800ae8a <_realloc_r+0x24>
 800ae7e:	f7fd fc57 	bl	8008730 <_free_r>
 800ae82:	2400      	movs	r4, #0
 800ae84:	4620      	mov	r0, r4
 800ae86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae8a:	f000 f8c4 	bl	800b016 <_malloc_usable_size_r>
 800ae8e:	4285      	cmp	r5, r0
 800ae90:	4606      	mov	r6, r0
 800ae92:	d802      	bhi.n	800ae9a <_realloc_r+0x34>
 800ae94:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ae98:	d8f4      	bhi.n	800ae84 <_realloc_r+0x1e>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	f7fd fcb9 	bl	8008814 <_malloc_r>
 800aea2:	4607      	mov	r7, r0
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d0ec      	beq.n	800ae82 <_realloc_r+0x1c>
 800aea8:	42b5      	cmp	r5, r6
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4621      	mov	r1, r4
 800aeae:	bf28      	it	cs
 800aeb0:	4632      	movcs	r2, r6
 800aeb2:	f7fc fdd8 	bl	8007a66 <memcpy>
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4640      	mov	r0, r8
 800aeba:	f7fd fc39 	bl	8008730 <_free_r>
 800aebe:	463c      	mov	r4, r7
 800aec0:	e7e0      	b.n	800ae84 <_realloc_r+0x1e>

0800aec2 <__ascii_wctomb>:
 800aec2:	4603      	mov	r3, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	b141      	cbz	r1, 800aeda <__ascii_wctomb+0x18>
 800aec8:	2aff      	cmp	r2, #255	@ 0xff
 800aeca:	d904      	bls.n	800aed6 <__ascii_wctomb+0x14>
 800aecc:	228a      	movs	r2, #138	@ 0x8a
 800aece:	f04f 30ff 	mov.w	r0, #4294967295
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	4770      	bx	lr
 800aed6:	2001      	movs	r0, #1
 800aed8:	700a      	strb	r2, [r1, #0]
 800aeda:	4770      	bx	lr

0800aedc <fiprintf>:
 800aedc:	b40e      	push	{r1, r2, r3}
 800aede:	b503      	push	{r0, r1, lr}
 800aee0:	4601      	mov	r1, r0
 800aee2:	ab03      	add	r3, sp, #12
 800aee4:	4805      	ldr	r0, [pc, #20]	@ (800aefc <fiprintf+0x20>)
 800aee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeea:	6800      	ldr	r0, [r0, #0]
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	f7ff f9c1 	bl	800a274 <_vfiprintf_r>
 800aef2:	b002      	add	sp, #8
 800aef4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aef8:	b003      	add	sp, #12
 800aefa:	4770      	bx	lr
 800aefc:	20000028 	.word	0x20000028

0800af00 <__swhatbuf_r>:
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	460c      	mov	r4, r1
 800af04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af08:	4615      	mov	r5, r2
 800af0a:	2900      	cmp	r1, #0
 800af0c:	461e      	mov	r6, r3
 800af0e:	b096      	sub	sp, #88	@ 0x58
 800af10:	da0c      	bge.n	800af2c <__swhatbuf_r+0x2c>
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	2100      	movs	r1, #0
 800af16:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af1a:	bf14      	ite	ne
 800af1c:	2340      	movne	r3, #64	@ 0x40
 800af1e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af22:	2000      	movs	r0, #0
 800af24:	6031      	str	r1, [r6, #0]
 800af26:	602b      	str	r3, [r5, #0]
 800af28:	b016      	add	sp, #88	@ 0x58
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	466a      	mov	r2, sp
 800af2e:	f000 f849 	bl	800afc4 <_fstat_r>
 800af32:	2800      	cmp	r0, #0
 800af34:	dbed      	blt.n	800af12 <__swhatbuf_r+0x12>
 800af36:	9901      	ldr	r1, [sp, #4]
 800af38:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af3c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af40:	4259      	negs	r1, r3
 800af42:	4159      	adcs	r1, r3
 800af44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af48:	e7eb      	b.n	800af22 <__swhatbuf_r+0x22>

0800af4a <__smakebuf_r>:
 800af4a:	898b      	ldrh	r3, [r1, #12]
 800af4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af4e:	079d      	lsls	r5, r3, #30
 800af50:	4606      	mov	r6, r0
 800af52:	460c      	mov	r4, r1
 800af54:	d507      	bpl.n	800af66 <__smakebuf_r+0x1c>
 800af56:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af5a:	6023      	str	r3, [r4, #0]
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	2301      	movs	r3, #1
 800af60:	6163      	str	r3, [r4, #20]
 800af62:	b003      	add	sp, #12
 800af64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af66:	466a      	mov	r2, sp
 800af68:	ab01      	add	r3, sp, #4
 800af6a:	f7ff ffc9 	bl	800af00 <__swhatbuf_r>
 800af6e:	9f00      	ldr	r7, [sp, #0]
 800af70:	4605      	mov	r5, r0
 800af72:	4639      	mov	r1, r7
 800af74:	4630      	mov	r0, r6
 800af76:	f7fd fc4d 	bl	8008814 <_malloc_r>
 800af7a:	b948      	cbnz	r0, 800af90 <__smakebuf_r+0x46>
 800af7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af80:	059a      	lsls	r2, r3, #22
 800af82:	d4ee      	bmi.n	800af62 <__smakebuf_r+0x18>
 800af84:	f023 0303 	bic.w	r3, r3, #3
 800af88:	f043 0302 	orr.w	r3, r3, #2
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	e7e2      	b.n	800af56 <__smakebuf_r+0xc>
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	9b01      	ldr	r3, [sp, #4]
 800af9e:	6020      	str	r0, [r4, #0]
 800afa0:	b15b      	cbz	r3, 800afba <__smakebuf_r+0x70>
 800afa2:	4630      	mov	r0, r6
 800afa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afa8:	f000 f81e 	bl	800afe8 <_isatty_r>
 800afac:	b128      	cbz	r0, 800afba <__smakebuf_r+0x70>
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	f023 0303 	bic.w	r3, r3, #3
 800afb4:	f043 0301 	orr.w	r3, r3, #1
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	431d      	orrs	r5, r3
 800afbe:	81a5      	strh	r5, [r4, #12]
 800afc0:	e7cf      	b.n	800af62 <__smakebuf_r+0x18>
	...

0800afc4 <_fstat_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	2300      	movs	r3, #0
 800afc8:	4d06      	ldr	r5, [pc, #24]	@ (800afe4 <_fstat_r+0x20>)
 800afca:	4604      	mov	r4, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	4611      	mov	r1, r2
 800afd0:	602b      	str	r3, [r5, #0]
 800afd2:	f7f7 fa6f 	bl	80024b4 <_fstat>
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	d102      	bne.n	800afe0 <_fstat_r+0x1c>
 800afda:	682b      	ldr	r3, [r5, #0]
 800afdc:	b103      	cbz	r3, 800afe0 <_fstat_r+0x1c>
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	bd38      	pop	{r3, r4, r5, pc}
 800afe2:	bf00      	nop
 800afe4:	200008c8 	.word	0x200008c8

0800afe8 <_isatty_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	2300      	movs	r3, #0
 800afec:	4d05      	ldr	r5, [pc, #20]	@ (800b004 <_isatty_r+0x1c>)
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	602b      	str	r3, [r5, #0]
 800aff4:	f7f7 fa6d 	bl	80024d2 <_isatty>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_isatty_r+0x1a>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_isatty_r+0x1a>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	200008c8 	.word	0x200008c8

0800b008 <abort>:
 800b008:	2006      	movs	r0, #6
 800b00a:	b508      	push	{r3, lr}
 800b00c:	f000 f834 	bl	800b078 <raise>
 800b010:	2001      	movs	r0, #1
 800b012:	f7f7 fa00 	bl	8002416 <_exit>

0800b016 <_malloc_usable_size_r>:
 800b016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b01a:	1f18      	subs	r0, r3, #4
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	bfbc      	itt	lt
 800b020:	580b      	ldrlt	r3, [r1, r0]
 800b022:	18c0      	addlt	r0, r0, r3
 800b024:	4770      	bx	lr

0800b026 <_raise_r>:
 800b026:	291f      	cmp	r1, #31
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4605      	mov	r5, r0
 800b02c:	460c      	mov	r4, r1
 800b02e:	d904      	bls.n	800b03a <_raise_r+0x14>
 800b030:	2316      	movs	r3, #22
 800b032:	6003      	str	r3, [r0, #0]
 800b034:	f04f 30ff 	mov.w	r0, #4294967295
 800b038:	bd38      	pop	{r3, r4, r5, pc}
 800b03a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b03c:	b112      	cbz	r2, 800b044 <_raise_r+0x1e>
 800b03e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b042:	b94b      	cbnz	r3, 800b058 <_raise_r+0x32>
 800b044:	4628      	mov	r0, r5
 800b046:	f000 f831 	bl	800b0ac <_getpid_r>
 800b04a:	4622      	mov	r2, r4
 800b04c:	4601      	mov	r1, r0
 800b04e:	4628      	mov	r0, r5
 800b050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b054:	f000 b818 	b.w	800b088 <_kill_r>
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d00a      	beq.n	800b072 <_raise_r+0x4c>
 800b05c:	1c59      	adds	r1, r3, #1
 800b05e:	d103      	bne.n	800b068 <_raise_r+0x42>
 800b060:	2316      	movs	r3, #22
 800b062:	6003      	str	r3, [r0, #0]
 800b064:	2001      	movs	r0, #1
 800b066:	e7e7      	b.n	800b038 <_raise_r+0x12>
 800b068:	2100      	movs	r1, #0
 800b06a:	4620      	mov	r0, r4
 800b06c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b070:	4798      	blx	r3
 800b072:	2000      	movs	r0, #0
 800b074:	e7e0      	b.n	800b038 <_raise_r+0x12>
	...

0800b078 <raise>:
 800b078:	4b02      	ldr	r3, [pc, #8]	@ (800b084 <raise+0xc>)
 800b07a:	4601      	mov	r1, r0
 800b07c:	6818      	ldr	r0, [r3, #0]
 800b07e:	f7ff bfd2 	b.w	800b026 <_raise_r>
 800b082:	bf00      	nop
 800b084:	20000028 	.word	0x20000028

0800b088 <_kill_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	2300      	movs	r3, #0
 800b08c:	4d06      	ldr	r5, [pc, #24]	@ (800b0a8 <_kill_r+0x20>)
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	4611      	mov	r1, r2
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	f7f7 f9ae 	bl	80023f6 <_kill>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d102      	bne.n	800b0a4 <_kill_r+0x1c>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	b103      	cbz	r3, 800b0a4 <_kill_r+0x1c>
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	200008c8 	.word	0x200008c8

0800b0ac <_getpid_r>:
 800b0ac:	f7f7 b99c 	b.w	80023e8 <_getpid>

0800b0b0 <pow>:
 800b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	461d      	mov	r5, r3
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	4689      	mov	r9, r1
 800b0bc:	f000 f868 	bl	800b190 <__ieee754_pow>
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	462b      	mov	r3, r5
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	f7f5 fc9e 	bl	8000a0c <__aeabi_dcmpun>
 800b0d0:	bbc8      	cbnz	r0, 800b146 <pow+0x96>
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	4649      	mov	r1, r9
 800b0da:	f7f5 fc65 	bl	80009a8 <__aeabi_dcmpeq>
 800b0de:	b1b8      	cbz	r0, 800b110 <pow+0x60>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	f7f5 fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d141      	bne.n	800b174 <pow+0xc4>
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	f000 f844 	bl	800b180 <finite>
 800b0f8:	b328      	cbz	r0, 800b146 <pow+0x96>
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4620      	mov	r0, r4
 800b100:	4629      	mov	r1, r5
 800b102:	f7f5 fc5b 	bl	80009bc <__aeabi_dcmplt>
 800b106:	b1f0      	cbz	r0, 800b146 <pow+0x96>
 800b108:	f7fc fc72 	bl	80079f0 <__errno>
 800b10c:	2322      	movs	r3, #34	@ 0x22
 800b10e:	e019      	b.n	800b144 <pow+0x94>
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f000 f834 	bl	800b180 <finite>
 800b118:	b9c8      	cbnz	r0, 800b14e <pow+0x9e>
 800b11a:	4640      	mov	r0, r8
 800b11c:	4649      	mov	r1, r9
 800b11e:	f000 f82f 	bl	800b180 <finite>
 800b122:	b1a0      	cbz	r0, 800b14e <pow+0x9e>
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	f000 f82a 	bl	800b180 <finite>
 800b12c:	b178      	cbz	r0, 800b14e <pow+0x9e>
 800b12e:	4632      	mov	r2, r6
 800b130:	463b      	mov	r3, r7
 800b132:	4630      	mov	r0, r6
 800b134:	4639      	mov	r1, r7
 800b136:	f7f5 fc69 	bl	8000a0c <__aeabi_dcmpun>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d0e4      	beq.n	800b108 <pow+0x58>
 800b13e:	f7fc fc57 	bl	80079f0 <__errno>
 800b142:	2321      	movs	r3, #33	@ 0x21
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	4630      	mov	r0, r6
 800b148:	4639      	mov	r1, r7
 800b14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14e:	2200      	movs	r2, #0
 800b150:	2300      	movs	r3, #0
 800b152:	4630      	mov	r0, r6
 800b154:	4639      	mov	r1, r7
 800b156:	f7f5 fc27 	bl	80009a8 <__aeabi_dcmpeq>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d0f3      	beq.n	800b146 <pow+0x96>
 800b15e:	4640      	mov	r0, r8
 800b160:	4649      	mov	r1, r9
 800b162:	f000 f80d 	bl	800b180 <finite>
 800b166:	2800      	cmp	r0, #0
 800b168:	d0ed      	beq.n	800b146 <pow+0x96>
 800b16a:	4620      	mov	r0, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	f000 f807 	bl	800b180 <finite>
 800b172:	e7c8      	b.n	800b106 <pow+0x56>
 800b174:	2600      	movs	r6, #0
 800b176:	4f01      	ldr	r7, [pc, #4]	@ (800b17c <pow+0xcc>)
 800b178:	e7e5      	b.n	800b146 <pow+0x96>
 800b17a:	bf00      	nop
 800b17c:	3ff00000 	.word	0x3ff00000

0800b180 <finite>:
 800b180:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800b184:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b188:	0fc0      	lsrs	r0, r0, #31
 800b18a:	4770      	bx	lr
 800b18c:	0000      	movs	r0, r0
	...

0800b190 <__ieee754_pow>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	b091      	sub	sp, #68	@ 0x44
 800b196:	e9cd 2300 	strd	r2, r3, [sp]
 800b19a:	468b      	mov	fp, r1
 800b19c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800b1a0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800b1a4:	4682      	mov	sl, r0
 800b1a6:	ea57 0001 	orrs.w	r0, r7, r1
 800b1aa:	d112      	bne.n	800b1d2 <__ieee754_pow+0x42>
 800b1ac:	4653      	mov	r3, sl
 800b1ae:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800b1b2:	18db      	adds	r3, r3, r3
 800b1b4:	4152      	adcs	r2, r2
 800b1b6:	4298      	cmp	r0, r3
 800b1b8:	4b91      	ldr	r3, [pc, #580]	@ (800b400 <__ieee754_pow+0x270>)
 800b1ba:	4193      	sbcs	r3, r2
 800b1bc:	f080 84ce 	bcs.w	800bb5c <__ieee754_pow+0x9cc>
 800b1c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1c4:	4650      	mov	r0, sl
 800b1c6:	4659      	mov	r1, fp
 800b1c8:	f7f4 ffd0 	bl	800016c <__adddf3>
 800b1cc:	b011      	add	sp, #68	@ 0x44
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	4b8c      	ldr	r3, [pc, #560]	@ (800b404 <__ieee754_pow+0x274>)
 800b1d4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800b1d8:	429e      	cmp	r6, r3
 800b1da:	465d      	mov	r5, fp
 800b1dc:	46d1      	mov	r9, sl
 800b1de:	d807      	bhi.n	800b1f0 <__ieee754_pow+0x60>
 800b1e0:	d102      	bne.n	800b1e8 <__ieee754_pow+0x58>
 800b1e2:	f1ba 0f00 	cmp.w	sl, #0
 800b1e6:	d1eb      	bne.n	800b1c0 <__ieee754_pow+0x30>
 800b1e8:	429f      	cmp	r7, r3
 800b1ea:	d801      	bhi.n	800b1f0 <__ieee754_pow+0x60>
 800b1ec:	d10f      	bne.n	800b20e <__ieee754_pow+0x7e>
 800b1ee:	b171      	cbz	r1, 800b20e <__ieee754_pow+0x7e>
 800b1f0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b1f4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b1f8:	ea55 0509 	orrs.w	r5, r5, r9
 800b1fc:	d1e0      	bne.n	800b1c0 <__ieee754_pow+0x30>
 800b1fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b202:	18db      	adds	r3, r3, r3
 800b204:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b208:	4152      	adcs	r2, r2
 800b20a:	429d      	cmp	r5, r3
 800b20c:	e7d4      	b.n	800b1b8 <__ieee754_pow+0x28>
 800b20e:	2d00      	cmp	r5, #0
 800b210:	4633      	mov	r3, r6
 800b212:	da39      	bge.n	800b288 <__ieee754_pow+0xf8>
 800b214:	4a7c      	ldr	r2, [pc, #496]	@ (800b408 <__ieee754_pow+0x278>)
 800b216:	4297      	cmp	r7, r2
 800b218:	d84e      	bhi.n	800b2b8 <__ieee754_pow+0x128>
 800b21a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b21e:	4297      	cmp	r7, r2
 800b220:	f240 84ab 	bls.w	800bb7a <__ieee754_pow+0x9ea>
 800b224:	153a      	asrs	r2, r7, #20
 800b226:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b22a:	2a14      	cmp	r2, #20
 800b22c:	dd0f      	ble.n	800b24e <__ieee754_pow+0xbe>
 800b22e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b232:	fa21 f402 	lsr.w	r4, r1, r2
 800b236:	fa04 f202 	lsl.w	r2, r4, r2
 800b23a:	428a      	cmp	r2, r1
 800b23c:	f040 849d 	bne.w	800bb7a <__ieee754_pow+0x9ea>
 800b240:	f004 0401 	and.w	r4, r4, #1
 800b244:	f1c4 0402 	rsb	r4, r4, #2
 800b248:	2900      	cmp	r1, #0
 800b24a:	d15a      	bne.n	800b302 <__ieee754_pow+0x172>
 800b24c:	e00e      	b.n	800b26c <__ieee754_pow+0xdc>
 800b24e:	2900      	cmp	r1, #0
 800b250:	d156      	bne.n	800b300 <__ieee754_pow+0x170>
 800b252:	f1c2 0214 	rsb	r2, r2, #20
 800b256:	fa47 f402 	asr.w	r4, r7, r2
 800b25a:	fa04 f202 	lsl.w	r2, r4, r2
 800b25e:	42ba      	cmp	r2, r7
 800b260:	f040 8488 	bne.w	800bb74 <__ieee754_pow+0x9e4>
 800b264:	f004 0401 	and.w	r4, r4, #1
 800b268:	f1c4 0402 	rsb	r4, r4, #2
 800b26c:	4a67      	ldr	r2, [pc, #412]	@ (800b40c <__ieee754_pow+0x27c>)
 800b26e:	4297      	cmp	r7, r2
 800b270:	d130      	bne.n	800b2d4 <__ieee754_pow+0x144>
 800b272:	f1b8 0f00 	cmp.w	r8, #0
 800b276:	f280 8479 	bge.w	800bb6c <__ieee754_pow+0x9dc>
 800b27a:	4652      	mov	r2, sl
 800b27c:	465b      	mov	r3, fp
 800b27e:	2000      	movs	r0, #0
 800b280:	4962      	ldr	r1, [pc, #392]	@ (800b40c <__ieee754_pow+0x27c>)
 800b282:	f7f5 fa53 	bl	800072c <__aeabi_ddiv>
 800b286:	e7a1      	b.n	800b1cc <__ieee754_pow+0x3c>
 800b288:	2400      	movs	r4, #0
 800b28a:	2900      	cmp	r1, #0
 800b28c:	d139      	bne.n	800b302 <__ieee754_pow+0x172>
 800b28e:	4a5d      	ldr	r2, [pc, #372]	@ (800b404 <__ieee754_pow+0x274>)
 800b290:	4297      	cmp	r7, r2
 800b292:	d1eb      	bne.n	800b26c <__ieee754_pow+0xdc>
 800b294:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800b298:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b29c:	ea53 0309 	orrs.w	r3, r3, r9
 800b2a0:	f000 845c 	beq.w	800bb5c <__ieee754_pow+0x9cc>
 800b2a4:	4b5a      	ldr	r3, [pc, #360]	@ (800b410 <__ieee754_pow+0x280>)
 800b2a6:	429e      	cmp	r6, r3
 800b2a8:	d908      	bls.n	800b2bc <__ieee754_pow+0x12c>
 800b2aa:	f1b8 0f00 	cmp.w	r8, #0
 800b2ae:	f2c0 8459 	blt.w	800bb64 <__ieee754_pow+0x9d4>
 800b2b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2b6:	e789      	b.n	800b1cc <__ieee754_pow+0x3c>
 800b2b8:	2402      	movs	r4, #2
 800b2ba:	e7e6      	b.n	800b28a <__ieee754_pow+0xfa>
 800b2bc:	f1b8 0f00 	cmp.w	r8, #0
 800b2c0:	f04f 0000 	mov.w	r0, #0
 800b2c4:	f04f 0100 	mov.w	r1, #0
 800b2c8:	da80      	bge.n	800b1cc <__ieee754_pow+0x3c>
 800b2ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b2ce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b2d2:	e77b      	b.n	800b1cc <__ieee754_pow+0x3c>
 800b2d4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800b2d8:	d106      	bne.n	800b2e8 <__ieee754_pow+0x158>
 800b2da:	4652      	mov	r2, sl
 800b2dc:	465b      	mov	r3, fp
 800b2de:	4650      	mov	r0, sl
 800b2e0:	4659      	mov	r1, fp
 800b2e2:	f7f5 f8f9 	bl	80004d8 <__aeabi_dmul>
 800b2e6:	e771      	b.n	800b1cc <__ieee754_pow+0x3c>
 800b2e8:	4a4a      	ldr	r2, [pc, #296]	@ (800b414 <__ieee754_pow+0x284>)
 800b2ea:	4590      	cmp	r8, r2
 800b2ec:	d109      	bne.n	800b302 <__ieee754_pow+0x172>
 800b2ee:	2d00      	cmp	r5, #0
 800b2f0:	db07      	blt.n	800b302 <__ieee754_pow+0x172>
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	4659      	mov	r1, fp
 800b2f6:	b011      	add	sp, #68	@ 0x44
 800b2f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	f000 bd12 	b.w	800bd24 <__ieee754_sqrt>
 800b300:	2400      	movs	r4, #0
 800b302:	4650      	mov	r0, sl
 800b304:	4659      	mov	r1, fp
 800b306:	9302      	str	r3, [sp, #8]
 800b308:	f000 fc6a 	bl	800bbe0 <fabs>
 800b30c:	9b02      	ldr	r3, [sp, #8]
 800b30e:	f1b9 0f00 	cmp.w	r9, #0
 800b312:	d127      	bne.n	800b364 <__ieee754_pow+0x1d4>
 800b314:	4a3d      	ldr	r2, [pc, #244]	@ (800b40c <__ieee754_pow+0x27c>)
 800b316:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800b31a:	4594      	cmp	ip, r2
 800b31c:	d000      	beq.n	800b320 <__ieee754_pow+0x190>
 800b31e:	bb0e      	cbnz	r6, 800b364 <__ieee754_pow+0x1d4>
 800b320:	f1b8 0f00 	cmp.w	r8, #0
 800b324:	da05      	bge.n	800b332 <__ieee754_pow+0x1a2>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	2000      	movs	r0, #0
 800b32c:	4937      	ldr	r1, [pc, #220]	@ (800b40c <__ieee754_pow+0x27c>)
 800b32e:	f7f5 f9fd 	bl	800072c <__aeabi_ddiv>
 800b332:	2d00      	cmp	r5, #0
 800b334:	f6bf af4a 	bge.w	800b1cc <__ieee754_pow+0x3c>
 800b338:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b33c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b340:	4326      	orrs	r6, r4
 800b342:	d108      	bne.n	800b356 <__ieee754_pow+0x1c6>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4610      	mov	r0, r2
 800b34a:	4619      	mov	r1, r3
 800b34c:	f7f4 ff0c 	bl	8000168 <__aeabi_dsub>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	e795      	b.n	800b282 <__ieee754_pow+0xf2>
 800b356:	2c01      	cmp	r4, #1
 800b358:	f47f af38 	bne.w	800b1cc <__ieee754_pow+0x3c>
 800b35c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b360:	4619      	mov	r1, r3
 800b362:	e733      	b.n	800b1cc <__ieee754_pow+0x3c>
 800b364:	0fea      	lsrs	r2, r5, #31
 800b366:	3a01      	subs	r2, #1
 800b368:	ea52 0c04 	orrs.w	ip, r2, r4
 800b36c:	d102      	bne.n	800b374 <__ieee754_pow+0x1e4>
 800b36e:	4652      	mov	r2, sl
 800b370:	465b      	mov	r3, fp
 800b372:	e7e9      	b.n	800b348 <__ieee754_pow+0x1b8>
 800b374:	f04f 0900 	mov.w	r9, #0
 800b378:	3c01      	subs	r4, #1
 800b37a:	4314      	orrs	r4, r2
 800b37c:	bf14      	ite	ne
 800b37e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800b40c <__ieee754_pow+0x27c>
 800b382:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800b418 <__ieee754_pow+0x288>
 800b386:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800b38a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800b38e:	f240 8107 	bls.w	800b5a0 <__ieee754_pow+0x410>
 800b392:	4b22      	ldr	r3, [pc, #136]	@ (800b41c <__ieee754_pow+0x28c>)
 800b394:	429f      	cmp	r7, r3
 800b396:	4b1e      	ldr	r3, [pc, #120]	@ (800b410 <__ieee754_pow+0x280>)
 800b398:	d913      	bls.n	800b3c2 <__ieee754_pow+0x232>
 800b39a:	429e      	cmp	r6, r3
 800b39c:	d808      	bhi.n	800b3b0 <__ieee754_pow+0x220>
 800b39e:	f1b8 0f00 	cmp.w	r8, #0
 800b3a2:	da08      	bge.n	800b3b6 <__ieee754_pow+0x226>
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	b011      	add	sp, #68	@ 0x44
 800b3a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	f000 bcb4 	b.w	800bd18 <__math_oflow>
 800b3b0:	f1b8 0f00 	cmp.w	r8, #0
 800b3b4:	dcf6      	bgt.n	800b3a4 <__ieee754_pow+0x214>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	b011      	add	sp, #68	@ 0x44
 800b3ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3be:	f000 bca6 	b.w	800bd0e <__math_uflow>
 800b3c2:	429e      	cmp	r6, r3
 800b3c4:	d20c      	bcs.n	800b3e0 <__ieee754_pow+0x250>
 800b3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f7f5 faf5 	bl	80009bc <__aeabi_dcmplt>
 800b3d2:	3800      	subs	r0, #0
 800b3d4:	bf18      	it	ne
 800b3d6:	2001      	movne	r0, #1
 800b3d8:	f1b8 0f00 	cmp.w	r8, #0
 800b3dc:	daec      	bge.n	800b3b8 <__ieee754_pow+0x228>
 800b3de:	e7e2      	b.n	800b3a6 <__ieee754_pow+0x216>
 800b3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b40c <__ieee754_pow+0x27c>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	429e      	cmp	r6, r3
 800b3e6:	d91b      	bls.n	800b420 <__ieee754_pow+0x290>
 800b3e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f7f5 fae5 	bl	80009bc <__aeabi_dcmplt>
 800b3f2:	3800      	subs	r0, #0
 800b3f4:	bf18      	it	ne
 800b3f6:	2001      	movne	r0, #1
 800b3f8:	f1b8 0f00 	cmp.w	r8, #0
 800b3fc:	dcd3      	bgt.n	800b3a6 <__ieee754_pow+0x216>
 800b3fe:	e7db      	b.n	800b3b8 <__ieee754_pow+0x228>
 800b400:	fff00000 	.word	0xfff00000
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	433fffff 	.word	0x433fffff
 800b40c:	3ff00000 	.word	0x3ff00000
 800b410:	3fefffff 	.word	0x3fefffff
 800b414:	3fe00000 	.word	0x3fe00000
 800b418:	bff00000 	.word	0xbff00000
 800b41c:	43f00000 	.word	0x43f00000
 800b420:	4b5b      	ldr	r3, [pc, #364]	@ (800b590 <__ieee754_pow+0x400>)
 800b422:	f7f4 fea1 	bl	8000168 <__aeabi_dsub>
 800b426:	a352      	add	r3, pc, #328	@ (adr r3, 800b570 <__ieee754_pow+0x3e0>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	4604      	mov	r4, r0
 800b42e:	460d      	mov	r5, r1
 800b430:	f7f5 f852 	bl	80004d8 <__aeabi_dmul>
 800b434:	a350      	add	r3, pc, #320	@ (adr r3, 800b578 <__ieee754_pow+0x3e8>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	4606      	mov	r6, r0
 800b43c:	460f      	mov	r7, r1
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f5 f849 	bl	80004d8 <__aeabi_dmul>
 800b446:	2200      	movs	r2, #0
 800b448:	4682      	mov	sl, r0
 800b44a:	468b      	mov	fp, r1
 800b44c:	4620      	mov	r0, r4
 800b44e:	4629      	mov	r1, r5
 800b450:	4b50      	ldr	r3, [pc, #320]	@ (800b594 <__ieee754_pow+0x404>)
 800b452:	f7f5 f841 	bl	80004d8 <__aeabi_dmul>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	a149      	add	r1, pc, #292	@ (adr r1, 800b580 <__ieee754_pow+0x3f0>)
 800b45c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b460:	f7f4 fe82 	bl	8000168 <__aeabi_dsub>
 800b464:	4622      	mov	r2, r4
 800b466:	462b      	mov	r3, r5
 800b468:	f7f5 f836 	bl	80004d8 <__aeabi_dmul>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	2000      	movs	r0, #0
 800b472:	4949      	ldr	r1, [pc, #292]	@ (800b598 <__ieee754_pow+0x408>)
 800b474:	f7f4 fe78 	bl	8000168 <__aeabi_dsub>
 800b478:	4622      	mov	r2, r4
 800b47a:	4680      	mov	r8, r0
 800b47c:	4689      	mov	r9, r1
 800b47e:	462b      	mov	r3, r5
 800b480:	4620      	mov	r0, r4
 800b482:	4629      	mov	r1, r5
 800b484:	f7f5 f828 	bl	80004d8 <__aeabi_dmul>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f5 f822 	bl	80004d8 <__aeabi_dmul>
 800b494:	a33c      	add	r3, pc, #240	@ (adr r3, 800b588 <__ieee754_pow+0x3f8>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f5 f81d 	bl	80004d8 <__aeabi_dmul>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4650      	mov	r0, sl
 800b4a4:	4659      	mov	r1, fp
 800b4a6:	f7f4 fe5f 	bl	8000168 <__aeabi_dsub>
 800b4aa:	2400      	movs	r4, #0
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	4689      	mov	r9, r1
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	f7f4 fe58 	bl	800016c <__adddf3>
 800b4bc:	4632      	mov	r2, r6
 800b4be:	463b      	mov	r3, r7
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	f7f4 fe50 	bl	8000168 <__aeabi_dsub>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	f7f4 fe4a 	bl	8000168 <__aeabi_dsub>
 800b4d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	460f      	mov	r7, r1
 800b4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	465b      	mov	r3, fp
 800b4f0:	f7f4 fe3a 	bl	8000168 <__aeabi_dsub>
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	462b      	mov	r3, r5
 800b4f8:	f7f4 ffee 	bl	80004d8 <__aeabi_dmul>
 800b4fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b500:	4680      	mov	r8, r0
 800b502:	4689      	mov	r9, r1
 800b504:	4630      	mov	r0, r6
 800b506:	4639      	mov	r1, r7
 800b508:	f7f4 ffe6 	bl	80004d8 <__aeabi_dmul>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4640      	mov	r0, r8
 800b512:	4649      	mov	r1, r9
 800b514:	f7f4 fe2a 	bl	800016c <__adddf3>
 800b518:	4652      	mov	r2, sl
 800b51a:	465b      	mov	r3, fp
 800b51c:	4606      	mov	r6, r0
 800b51e:	460f      	mov	r7, r1
 800b520:	4620      	mov	r0, r4
 800b522:	4629      	mov	r1, r5
 800b524:	f7f4 ffd8 	bl	80004d8 <__aeabi_dmul>
 800b528:	460b      	mov	r3, r1
 800b52a:	4602      	mov	r2, r0
 800b52c:	4680      	mov	r8, r0
 800b52e:	4689      	mov	r9, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f4 fe1a 	bl	800016c <__adddf3>
 800b538:	4b18      	ldr	r3, [pc, #96]	@ (800b59c <__ieee754_pow+0x40c>)
 800b53a:	4604      	mov	r4, r0
 800b53c:	4299      	cmp	r1, r3
 800b53e:	460d      	mov	r5, r1
 800b540:	468a      	mov	sl, r1
 800b542:	468b      	mov	fp, r1
 800b544:	f340 82e0 	ble.w	800bb08 <__ieee754_pow+0x978>
 800b548:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b54c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b550:	4303      	orrs	r3, r0
 800b552:	f000 81df 	beq.w	800b914 <__ieee754_pow+0x784>
 800b556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55a:	2200      	movs	r2, #0
 800b55c:	2300      	movs	r3, #0
 800b55e:	f7f5 fa2d 	bl	80009bc <__aeabi_dcmplt>
 800b562:	3800      	subs	r0, #0
 800b564:	bf18      	it	ne
 800b566:	2001      	movne	r0, #1
 800b568:	e71d      	b.n	800b3a6 <__ieee754_pow+0x216>
 800b56a:	bf00      	nop
 800b56c:	f3af 8000 	nop.w
 800b570:	60000000 	.word	0x60000000
 800b574:	3ff71547 	.word	0x3ff71547
 800b578:	f85ddf44 	.word	0xf85ddf44
 800b57c:	3e54ae0b 	.word	0x3e54ae0b
 800b580:	55555555 	.word	0x55555555
 800b584:	3fd55555 	.word	0x3fd55555
 800b588:	652b82fe 	.word	0x652b82fe
 800b58c:	3ff71547 	.word	0x3ff71547
 800b590:	3ff00000 	.word	0x3ff00000
 800b594:	3fd00000 	.word	0x3fd00000
 800b598:	3fe00000 	.word	0x3fe00000
 800b59c:	408fffff 	.word	0x408fffff
 800b5a0:	4ad3      	ldr	r2, [pc, #844]	@ (800b8f0 <__ieee754_pow+0x760>)
 800b5a2:	402a      	ands	r2, r5
 800b5a4:	2a00      	cmp	r2, #0
 800b5a6:	f040 817a 	bne.w	800b89e <__ieee754_pow+0x70e>
 800b5aa:	4bd2      	ldr	r3, [pc, #840]	@ (800b8f4 <__ieee754_pow+0x764>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f7f4 ff93 	bl	80004d8 <__aeabi_dmul>
 800b5b2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	151a      	asrs	r2, r3, #20
 800b5ba:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b5be:	4422      	add	r2, r4
 800b5c0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b5c2:	4acd      	ldr	r2, [pc, #820]	@ (800b8f8 <__ieee754_pow+0x768>)
 800b5c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5c8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b5d2:	dd08      	ble.n	800b5e6 <__ieee754_pow+0x456>
 800b5d4:	4ac9      	ldr	r2, [pc, #804]	@ (800b8fc <__ieee754_pow+0x76c>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	f340 8163 	ble.w	800b8a2 <__ieee754_pow+0x712>
 800b5dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5de:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	00f3      	lsls	r3, r6, #3
 800b5ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ec:	4bc4      	ldr	r3, [pc, #784]	@ (800b900 <__ieee754_pow+0x770>)
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b5f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b5fe:	4623      	mov	r3, r4
 800b600:	4682      	mov	sl, r0
 800b602:	f7f4 fdb1 	bl	8000168 <__aeabi_dsub>
 800b606:	4652      	mov	r2, sl
 800b608:	462b      	mov	r3, r5
 800b60a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b60e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b612:	f7f4 fdab 	bl	800016c <__adddf3>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	2000      	movs	r0, #0
 800b61c:	49b9      	ldr	r1, [pc, #740]	@ (800b904 <__ieee754_pow+0x774>)
 800b61e:	f7f5 f885 	bl	800072c <__aeabi_ddiv>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b62a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b62e:	f7f4 ff53 	bl	80004d8 <__aeabi_dmul>
 800b632:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b636:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b63a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b63e:	2300      	movs	r3, #0
 800b640:	2200      	movs	r2, #0
 800b642:	46ab      	mov	fp, r5
 800b644:	106d      	asrs	r5, r5, #1
 800b646:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b64a:	9304      	str	r3, [sp, #16]
 800b64c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b650:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b654:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b658:	4640      	mov	r0, r8
 800b65a:	4649      	mov	r1, r9
 800b65c:	4614      	mov	r4, r2
 800b65e:	461d      	mov	r5, r3
 800b660:	f7f4 ff3a 	bl	80004d8 <__aeabi_dmul>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b66c:	f7f4 fd7c 	bl	8000168 <__aeabi_dsub>
 800b670:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b674:	4606      	mov	r6, r0
 800b676:	460f      	mov	r7, r1
 800b678:	4620      	mov	r0, r4
 800b67a:	4629      	mov	r1, r5
 800b67c:	f7f4 fd74 	bl	8000168 <__aeabi_dsub>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4650      	mov	r0, sl
 800b686:	4659      	mov	r1, fp
 800b688:	f7f4 fd6e 	bl	8000168 <__aeabi_dsub>
 800b68c:	4642      	mov	r2, r8
 800b68e:	464b      	mov	r3, r9
 800b690:	f7f4 ff22 	bl	80004d8 <__aeabi_dmul>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	4630      	mov	r0, r6
 800b69a:	4639      	mov	r1, r7
 800b69c:	f7f4 fd64 	bl	8000168 <__aeabi_dsub>
 800b6a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b6a4:	f7f4 ff18 	bl	80004d8 <__aeabi_dmul>
 800b6a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	f7f4 ff10 	bl	80004d8 <__aeabi_dmul>
 800b6b8:	a37b      	add	r3, pc, #492	@ (adr r3, 800b8a8 <__ieee754_pow+0x718>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	4604      	mov	r4, r0
 800b6c0:	460d      	mov	r5, r1
 800b6c2:	f7f4 ff09 	bl	80004d8 <__aeabi_dmul>
 800b6c6:	a37a      	add	r3, pc, #488	@ (adr r3, 800b8b0 <__ieee754_pow+0x720>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 fd4e 	bl	800016c <__adddf3>
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	462b      	mov	r3, r5
 800b6d4:	f7f4 ff00 	bl	80004d8 <__aeabi_dmul>
 800b6d8:	a377      	add	r3, pc, #476	@ (adr r3, 800b8b8 <__ieee754_pow+0x728>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 fd45 	bl	800016c <__adddf3>
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	462b      	mov	r3, r5
 800b6e6:	f7f4 fef7 	bl	80004d8 <__aeabi_dmul>
 800b6ea:	a375      	add	r3, pc, #468	@ (adr r3, 800b8c0 <__ieee754_pow+0x730>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 fd3c 	bl	800016c <__adddf3>
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	462b      	mov	r3, r5
 800b6f8:	f7f4 feee 	bl	80004d8 <__aeabi_dmul>
 800b6fc:	a372      	add	r3, pc, #456	@ (adr r3, 800b8c8 <__ieee754_pow+0x738>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	f7f4 fd33 	bl	800016c <__adddf3>
 800b706:	4622      	mov	r2, r4
 800b708:	462b      	mov	r3, r5
 800b70a:	f7f4 fee5 	bl	80004d8 <__aeabi_dmul>
 800b70e:	a370      	add	r3, pc, #448	@ (adr r3, 800b8d0 <__ieee754_pow+0x740>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f7f4 fd2a 	bl	800016c <__adddf3>
 800b718:	4622      	mov	r2, r4
 800b71a:	4606      	mov	r6, r0
 800b71c:	460f      	mov	r7, r1
 800b71e:	462b      	mov	r3, r5
 800b720:	4620      	mov	r0, r4
 800b722:	4629      	mov	r1, r5
 800b724:	f7f4 fed8 	bl	80004d8 <__aeabi_dmul>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f4 fed2 	bl	80004d8 <__aeabi_dmul>
 800b734:	4604      	mov	r4, r0
 800b736:	460d      	mov	r5, r1
 800b738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b73c:	4642      	mov	r2, r8
 800b73e:	464b      	mov	r3, r9
 800b740:	f7f4 fd14 	bl	800016c <__adddf3>
 800b744:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b748:	f7f4 fec6 	bl	80004d8 <__aeabi_dmul>
 800b74c:	4622      	mov	r2, r4
 800b74e:	462b      	mov	r3, r5
 800b750:	f7f4 fd0c 	bl	800016c <__adddf3>
 800b754:	4642      	mov	r2, r8
 800b756:	4682      	mov	sl, r0
 800b758:	468b      	mov	fp, r1
 800b75a:	464b      	mov	r3, r9
 800b75c:	4640      	mov	r0, r8
 800b75e:	4649      	mov	r1, r9
 800b760:	f7f4 feba 	bl	80004d8 <__aeabi_dmul>
 800b764:	2200      	movs	r2, #0
 800b766:	4b68      	ldr	r3, [pc, #416]	@ (800b908 <__ieee754_pow+0x778>)
 800b768:	4606      	mov	r6, r0
 800b76a:	460f      	mov	r7, r1
 800b76c:	f7f4 fcfe 	bl	800016c <__adddf3>
 800b770:	4652      	mov	r2, sl
 800b772:	465b      	mov	r3, fp
 800b774:	f7f4 fcfa 	bl	800016c <__adddf3>
 800b778:	2400      	movs	r4, #0
 800b77a:	460d      	mov	r5, r1
 800b77c:	4622      	mov	r2, r4
 800b77e:	460b      	mov	r3, r1
 800b780:	4640      	mov	r0, r8
 800b782:	4649      	mov	r1, r9
 800b784:	f7f4 fea8 	bl	80004d8 <__aeabi_dmul>
 800b788:	2200      	movs	r2, #0
 800b78a:	4680      	mov	r8, r0
 800b78c:	4689      	mov	r9, r1
 800b78e:	4620      	mov	r0, r4
 800b790:	4629      	mov	r1, r5
 800b792:	4b5d      	ldr	r3, [pc, #372]	@ (800b908 <__ieee754_pow+0x778>)
 800b794:	f7f4 fce8 	bl	8000168 <__aeabi_dsub>
 800b798:	4632      	mov	r2, r6
 800b79a:	463b      	mov	r3, r7
 800b79c:	f7f4 fce4 	bl	8000168 <__aeabi_dsub>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4650      	mov	r0, sl
 800b7a6:	4659      	mov	r1, fp
 800b7a8:	f7f4 fcde 	bl	8000168 <__aeabi_dsub>
 800b7ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7b0:	f7f4 fe92 	bl	80004d8 <__aeabi_dmul>
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	460f      	mov	r7, r1
 800b7ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7be:	462b      	mov	r3, r5
 800b7c0:	f7f4 fe8a 	bl	80004d8 <__aeabi_dmul>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f4 fcce 	bl	800016c <__adddf3>
 800b7d0:	2400      	movs	r4, #0
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460f      	mov	r7, r1
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4640      	mov	r0, r8
 800b7dc:	4649      	mov	r1, r9
 800b7de:	f7f4 fcc5 	bl	800016c <__adddf3>
 800b7e2:	a33d      	add	r3, pc, #244	@ (adr r3, 800b8d8 <__ieee754_pow+0x748>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	f7f4 fe74 	bl	80004d8 <__aeabi_dmul>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	f7f4 fcb4 	bl	8000168 <__aeabi_dsub>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4630      	mov	r0, r6
 800b806:	4639      	mov	r1, r7
 800b808:	f7f4 fcae 	bl	8000168 <__aeabi_dsub>
 800b80c:	a334      	add	r3, pc, #208	@ (adr r3, 800b8e0 <__ieee754_pow+0x750>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f7f4 fe61 	bl	80004d8 <__aeabi_dmul>
 800b816:	a334      	add	r3, pc, #208	@ (adr r3, 800b8e8 <__ieee754_pow+0x758>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	4620      	mov	r0, r4
 800b822:	4629      	mov	r1, r5
 800b824:	f7f4 fe58 	bl	80004d8 <__aeabi_dmul>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f4 fc9c 	bl	800016c <__adddf3>
 800b834:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b836:	4b35      	ldr	r3, [pc, #212]	@ (800b90c <__ieee754_pow+0x77c>)
 800b838:	2400      	movs	r4, #0
 800b83a:	4413      	add	r3, r2
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 fc94 	bl	800016c <__adddf3>
 800b844:	4682      	mov	sl, r0
 800b846:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b848:	468b      	mov	fp, r1
 800b84a:	f7f4 fddb 	bl	8000404 <__aeabi_i2d>
 800b84e:	4606      	mov	r6, r0
 800b850:	460f      	mov	r7, r1
 800b852:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b854:	4b2e      	ldr	r3, [pc, #184]	@ (800b910 <__ieee754_pow+0x780>)
 800b856:	4413      	add	r3, r2
 800b858:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b85c:	4652      	mov	r2, sl
 800b85e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b862:	465b      	mov	r3, fp
 800b864:	f7f4 fc82 	bl	800016c <__adddf3>
 800b868:	4642      	mov	r2, r8
 800b86a:	464b      	mov	r3, r9
 800b86c:	f7f4 fc7e 	bl	800016c <__adddf3>
 800b870:	4632      	mov	r2, r6
 800b872:	463b      	mov	r3, r7
 800b874:	f7f4 fc7a 	bl	800016c <__adddf3>
 800b878:	4632      	mov	r2, r6
 800b87a:	463b      	mov	r3, r7
 800b87c:	4620      	mov	r0, r4
 800b87e:	460d      	mov	r5, r1
 800b880:	f7f4 fc72 	bl	8000168 <__aeabi_dsub>
 800b884:	4642      	mov	r2, r8
 800b886:	464b      	mov	r3, r9
 800b888:	f7f4 fc6e 	bl	8000168 <__aeabi_dsub>
 800b88c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b890:	f7f4 fc6a 	bl	8000168 <__aeabi_dsub>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4650      	mov	r0, sl
 800b89a:	4659      	mov	r1, fp
 800b89c:	e618      	b.n	800b4d0 <__ieee754_pow+0x340>
 800b89e:	2400      	movs	r4, #0
 800b8a0:	e68a      	b.n	800b5b8 <__ieee754_pow+0x428>
 800b8a2:	2601      	movs	r6, #1
 800b8a4:	e6a0      	b.n	800b5e8 <__ieee754_pow+0x458>
 800b8a6:	bf00      	nop
 800b8a8:	4a454eef 	.word	0x4a454eef
 800b8ac:	3fca7e28 	.word	0x3fca7e28
 800b8b0:	93c9db65 	.word	0x93c9db65
 800b8b4:	3fcd864a 	.word	0x3fcd864a
 800b8b8:	a91d4101 	.word	0xa91d4101
 800b8bc:	3fd17460 	.word	0x3fd17460
 800b8c0:	518f264d 	.word	0x518f264d
 800b8c4:	3fd55555 	.word	0x3fd55555
 800b8c8:	db6fabff 	.word	0xdb6fabff
 800b8cc:	3fdb6db6 	.word	0x3fdb6db6
 800b8d0:	33333303 	.word	0x33333303
 800b8d4:	3fe33333 	.word	0x3fe33333
 800b8d8:	e0000000 	.word	0xe0000000
 800b8dc:	3feec709 	.word	0x3feec709
 800b8e0:	dc3a03fd 	.word	0xdc3a03fd
 800b8e4:	3feec709 	.word	0x3feec709
 800b8e8:	145b01f5 	.word	0x145b01f5
 800b8ec:	be3e2fe0 	.word	0xbe3e2fe0
 800b8f0:	7ff00000 	.word	0x7ff00000
 800b8f4:	43400000 	.word	0x43400000
 800b8f8:	0003988e 	.word	0x0003988e
 800b8fc:	000bb679 	.word	0x000bb679
 800b900:	0800cc08 	.word	0x0800cc08
 800b904:	3ff00000 	.word	0x3ff00000
 800b908:	40080000 	.word	0x40080000
 800b90c:	0800cbe8 	.word	0x0800cbe8
 800b910:	0800cbf8 	.word	0x0800cbf8
 800b914:	a39a      	add	r3, pc, #616	@ (adr r3, 800bb80 <__ieee754_pow+0x9f0>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	4630      	mov	r0, r6
 800b91c:	4639      	mov	r1, r7
 800b91e:	f7f4 fc25 	bl	800016c <__adddf3>
 800b922:	4642      	mov	r2, r8
 800b924:	e9cd 0100 	strd	r0, r1, [sp]
 800b928:	464b      	mov	r3, r9
 800b92a:	4620      	mov	r0, r4
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7f4 fc1b 	bl	8000168 <__aeabi_dsub>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b93a:	f7f5 f85d 	bl	80009f8 <__aeabi_dcmpgt>
 800b93e:	2800      	cmp	r0, #0
 800b940:	f47f ae09 	bne.w	800b556 <__ieee754_pow+0x3c6>
 800b944:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b948:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b94c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b950:	fa43 fa0a 	asr.w	sl, r3, sl
 800b954:	44da      	add	sl, fp
 800b956:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b95a:	489b      	ldr	r0, [pc, #620]	@ (800bbc8 <__ieee754_pow+0xa38>)
 800b95c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b960:	4108      	asrs	r0, r1
 800b962:	ea00 030a 	and.w	r3, r0, sl
 800b966:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b96a:	f1c1 0114 	rsb	r1, r1, #20
 800b96e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b972:	4640      	mov	r0, r8
 800b974:	fa4a fa01 	asr.w	sl, sl, r1
 800b978:	f1bb 0f00 	cmp.w	fp, #0
 800b97c:	4649      	mov	r1, r9
 800b97e:	f04f 0200 	mov.w	r2, #0
 800b982:	bfb8      	it	lt
 800b984:	f1ca 0a00 	rsblt	sl, sl, #0
 800b988:	f7f4 fbee 	bl	8000168 <__aeabi_dsub>
 800b98c:	4680      	mov	r8, r0
 800b98e:	4689      	mov	r9, r1
 800b990:	2400      	movs	r4, #0
 800b992:	4632      	mov	r2, r6
 800b994:	463b      	mov	r3, r7
 800b996:	4640      	mov	r0, r8
 800b998:	4649      	mov	r1, r9
 800b99a:	f7f4 fbe7 	bl	800016c <__adddf3>
 800b99e:	a37a      	add	r3, pc, #488	@ (adr r3, 800bb88 <__ieee754_pow+0x9f8>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	f7f4 fd96 	bl	80004d8 <__aeabi_dmul>
 800b9ac:	4642      	mov	r2, r8
 800b9ae:	464b      	mov	r3, r9
 800b9b0:	e9cd 0100 	strd	r0, r1, [sp]
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fbd6 	bl	8000168 <__aeabi_dsub>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f4 fbd0 	bl	8000168 <__aeabi_dsub>
 800b9c8:	a371      	add	r3, pc, #452	@ (adr r3, 800bb90 <__ieee754_pow+0xa00>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fd83 	bl	80004d8 <__aeabi_dmul>
 800b9d2:	a371      	add	r3, pc, #452	@ (adr r3, 800bb98 <__ieee754_pow+0xa08>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	4680      	mov	r8, r0
 800b9da:	4689      	mov	r9, r1
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7f4 fd7a 	bl	80004d8 <__aeabi_dmul>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4640      	mov	r0, r8
 800b9ea:	4649      	mov	r1, r9
 800b9ec:	f7f4 fbbe 	bl	800016c <__adddf3>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9fc:	f7f4 fbb6 	bl	800016c <__adddf3>
 800ba00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba04:	4680      	mov	r8, r0
 800ba06:	4689      	mov	r9, r1
 800ba08:	f7f4 fbae 	bl	8000168 <__aeabi_dsub>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4620      	mov	r0, r4
 800ba12:	4629      	mov	r1, r5
 800ba14:	f7f4 fba8 	bl	8000168 <__aeabi_dsub>
 800ba18:	4642      	mov	r2, r8
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	460f      	mov	r7, r1
 800ba1e:	464b      	mov	r3, r9
 800ba20:	4640      	mov	r0, r8
 800ba22:	4649      	mov	r1, r9
 800ba24:	f7f4 fd58 	bl	80004d8 <__aeabi_dmul>
 800ba28:	a35d      	add	r3, pc, #372	@ (adr r3, 800bba0 <__ieee754_pow+0xa10>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	4604      	mov	r4, r0
 800ba30:	460d      	mov	r5, r1
 800ba32:	f7f4 fd51 	bl	80004d8 <__aeabi_dmul>
 800ba36:	a35c      	add	r3, pc, #368	@ (adr r3, 800bba8 <__ieee754_pow+0xa18>)
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	f7f4 fb94 	bl	8000168 <__aeabi_dsub>
 800ba40:	4622      	mov	r2, r4
 800ba42:	462b      	mov	r3, r5
 800ba44:	f7f4 fd48 	bl	80004d8 <__aeabi_dmul>
 800ba48:	a359      	add	r3, pc, #356	@ (adr r3, 800bbb0 <__ieee754_pow+0xa20>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f7f4 fb8d 	bl	800016c <__adddf3>
 800ba52:	4622      	mov	r2, r4
 800ba54:	462b      	mov	r3, r5
 800ba56:	f7f4 fd3f 	bl	80004d8 <__aeabi_dmul>
 800ba5a:	a357      	add	r3, pc, #348	@ (adr r3, 800bbb8 <__ieee754_pow+0xa28>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f7f4 fb82 	bl	8000168 <__aeabi_dsub>
 800ba64:	4622      	mov	r2, r4
 800ba66:	462b      	mov	r3, r5
 800ba68:	f7f4 fd36 	bl	80004d8 <__aeabi_dmul>
 800ba6c:	a354      	add	r3, pc, #336	@ (adr r3, 800bbc0 <__ieee754_pow+0xa30>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f7f4 fb7b 	bl	800016c <__adddf3>
 800ba76:	4622      	mov	r2, r4
 800ba78:	462b      	mov	r3, r5
 800ba7a:	f7f4 fd2d 	bl	80004d8 <__aeabi_dmul>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4640      	mov	r0, r8
 800ba84:	4649      	mov	r1, r9
 800ba86:	f7f4 fb6f 	bl	8000168 <__aeabi_dsub>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	460d      	mov	r5, r1
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4640      	mov	r0, r8
 800ba94:	4649      	mov	r1, r9
 800ba96:	f7f4 fd1f 	bl	80004d8 <__aeabi_dmul>
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	e9cd 0100 	strd	r0, r1, [sp]
 800baa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800baa4:	4620      	mov	r0, r4
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7f4 fb5e 	bl	8000168 <__aeabi_dsub>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bab4:	f7f4 fe3a 	bl	800072c <__aeabi_ddiv>
 800bab8:	4632      	mov	r2, r6
 800baba:	4604      	mov	r4, r0
 800babc:	460d      	mov	r5, r1
 800babe:	463b      	mov	r3, r7
 800bac0:	4640      	mov	r0, r8
 800bac2:	4649      	mov	r1, r9
 800bac4:	f7f4 fd08 	bl	80004d8 <__aeabi_dmul>
 800bac8:	4632      	mov	r2, r6
 800baca:	463b      	mov	r3, r7
 800bacc:	f7f4 fb4e 	bl	800016c <__adddf3>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	f7f4 fb46 	bl	8000168 <__aeabi_dsub>
 800badc:	4642      	mov	r2, r8
 800bade:	464b      	mov	r3, r9
 800bae0:	f7f4 fb42 	bl	8000168 <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	2000      	movs	r0, #0
 800baea:	4938      	ldr	r1, [pc, #224]	@ (800bbcc <__ieee754_pow+0xa3c>)
 800baec:	f7f4 fb3c 	bl	8000168 <__aeabi_dsub>
 800baf0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800baf4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800baf8:	da2e      	bge.n	800bb58 <__ieee754_pow+0x9c8>
 800bafa:	4652      	mov	r2, sl
 800bafc:	f000 f874 	bl	800bbe8 <scalbn>
 800bb00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb04:	f7ff bbed 	b.w	800b2e2 <__ieee754_pow+0x152>
 800bb08:	4c31      	ldr	r4, [pc, #196]	@ (800bbd0 <__ieee754_pow+0xa40>)
 800bb0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb0e:	42a3      	cmp	r3, r4
 800bb10:	d91a      	bls.n	800bb48 <__ieee754_pow+0x9b8>
 800bb12:	4b30      	ldr	r3, [pc, #192]	@ (800bbd4 <__ieee754_pow+0xa44>)
 800bb14:	440b      	add	r3, r1
 800bb16:	4303      	orrs	r3, r0
 800bb18:	d009      	beq.n	800bb2e <__ieee754_pow+0x99e>
 800bb1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	2300      	movs	r3, #0
 800bb22:	f7f4 ff4b 	bl	80009bc <__aeabi_dcmplt>
 800bb26:	3800      	subs	r0, #0
 800bb28:	bf18      	it	ne
 800bb2a:	2001      	movne	r0, #1
 800bb2c:	e444      	b.n	800b3b8 <__ieee754_pow+0x228>
 800bb2e:	4642      	mov	r2, r8
 800bb30:	464b      	mov	r3, r9
 800bb32:	f7f4 fb19 	bl	8000168 <__aeabi_dsub>
 800bb36:	4632      	mov	r2, r6
 800bb38:	463b      	mov	r3, r7
 800bb3a:	f7f4 ff53 	bl	80009e4 <__aeabi_dcmpge>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d1eb      	bne.n	800bb1a <__ieee754_pow+0x98a>
 800bb42:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800bbd8 <__ieee754_pow+0xa48>
 800bb46:	e6fd      	b.n	800b944 <__ieee754_pow+0x7b4>
 800bb48:	469a      	mov	sl, r3
 800bb4a:	4b24      	ldr	r3, [pc, #144]	@ (800bbdc <__ieee754_pow+0xa4c>)
 800bb4c:	459a      	cmp	sl, r3
 800bb4e:	f63f aef9 	bhi.w	800b944 <__ieee754_pow+0x7b4>
 800bb52:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bb56:	e71b      	b.n	800b990 <__ieee754_pow+0x800>
 800bb58:	4621      	mov	r1, r4
 800bb5a:	e7d1      	b.n	800bb00 <__ieee754_pow+0x970>
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	491b      	ldr	r1, [pc, #108]	@ (800bbcc <__ieee754_pow+0xa3c>)
 800bb60:	f7ff bb34 	b.w	800b1cc <__ieee754_pow+0x3c>
 800bb64:	2000      	movs	r0, #0
 800bb66:	2100      	movs	r1, #0
 800bb68:	f7ff bb30 	b.w	800b1cc <__ieee754_pow+0x3c>
 800bb6c:	4650      	mov	r0, sl
 800bb6e:	4659      	mov	r1, fp
 800bb70:	f7ff bb2c 	b.w	800b1cc <__ieee754_pow+0x3c>
 800bb74:	460c      	mov	r4, r1
 800bb76:	f7ff bb79 	b.w	800b26c <__ieee754_pow+0xdc>
 800bb7a:	2400      	movs	r4, #0
 800bb7c:	f7ff bb64 	b.w	800b248 <__ieee754_pow+0xb8>
 800bb80:	652b82fe 	.word	0x652b82fe
 800bb84:	3c971547 	.word	0x3c971547
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	3fe62e43 	.word	0x3fe62e43
 800bb90:	fefa39ef 	.word	0xfefa39ef
 800bb94:	3fe62e42 	.word	0x3fe62e42
 800bb98:	0ca86c39 	.word	0x0ca86c39
 800bb9c:	be205c61 	.word	0xbe205c61
 800bba0:	72bea4d0 	.word	0x72bea4d0
 800bba4:	3e663769 	.word	0x3e663769
 800bba8:	c5d26bf1 	.word	0xc5d26bf1
 800bbac:	3ebbbd41 	.word	0x3ebbbd41
 800bbb0:	af25de2c 	.word	0xaf25de2c
 800bbb4:	3f11566a 	.word	0x3f11566a
 800bbb8:	16bebd93 	.word	0x16bebd93
 800bbbc:	3f66c16c 	.word	0x3f66c16c
 800bbc0:	5555553e 	.word	0x5555553e
 800bbc4:	3fc55555 	.word	0x3fc55555
 800bbc8:	fff00000 	.word	0xfff00000
 800bbcc:	3ff00000 	.word	0x3ff00000
 800bbd0:	4090cbff 	.word	0x4090cbff
 800bbd4:	3f6f3400 	.word	0x3f6f3400
 800bbd8:	4090cc00 	.word	0x4090cc00
 800bbdc:	3fe00000 	.word	0x3fe00000

0800bbe0 <fabs>:
 800bbe0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4770      	bx	lr

0800bbe8 <scalbn>:
 800bbe8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800bbec:	4616      	mov	r6, r2
 800bbee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bbf2:	4683      	mov	fp, r0
 800bbf4:	468c      	mov	ip, r1
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	b982      	cbnz	r2, 800bc1c <scalbn+0x34>
 800bbfa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bbfe:	4303      	orrs	r3, r0
 800bc00:	d039      	beq.n	800bc76 <scalbn+0x8e>
 800bc02:	4b2f      	ldr	r3, [pc, #188]	@ (800bcc0 <scalbn+0xd8>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	f7f4 fc67 	bl	80004d8 <__aeabi_dmul>
 800bc0a:	4b2e      	ldr	r3, [pc, #184]	@ (800bcc4 <scalbn+0xdc>)
 800bc0c:	4683      	mov	fp, r0
 800bc0e:	429e      	cmp	r6, r3
 800bc10:	468c      	mov	ip, r1
 800bc12:	da0d      	bge.n	800bc30 <scalbn+0x48>
 800bc14:	a326      	add	r3, pc, #152	@ (adr r3, 800bcb0 <scalbn+0xc8>)
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	e01b      	b.n	800bc54 <scalbn+0x6c>
 800bc1c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800bc20:	42ba      	cmp	r2, r7
 800bc22:	d109      	bne.n	800bc38 <scalbn+0x50>
 800bc24:	4602      	mov	r2, r0
 800bc26:	f7f4 faa1 	bl	800016c <__adddf3>
 800bc2a:	4683      	mov	fp, r0
 800bc2c:	468c      	mov	ip, r1
 800bc2e:	e022      	b.n	800bc76 <scalbn+0x8e>
 800bc30:	460b      	mov	r3, r1
 800bc32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bc36:	3a36      	subs	r2, #54	@ 0x36
 800bc38:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bc3c:	428e      	cmp	r6, r1
 800bc3e:	dd0c      	ble.n	800bc5a <scalbn+0x72>
 800bc40:	a31d      	add	r3, pc, #116	@ (adr r3, 800bcb8 <scalbn+0xd0>)
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	461c      	mov	r4, r3
 800bc48:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800bc4c:	f361 74df 	bfi	r4, r1, #31, #1
 800bc50:	4621      	mov	r1, r4
 800bc52:	481d      	ldr	r0, [pc, #116]	@ (800bcc8 <scalbn+0xe0>)
 800bc54:	f7f4 fc40 	bl	80004d8 <__aeabi_dmul>
 800bc58:	e7e7      	b.n	800bc2a <scalbn+0x42>
 800bc5a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bc5e:	4432      	add	r2, r6
 800bc60:	428a      	cmp	r2, r1
 800bc62:	dced      	bgt.n	800bc40 <scalbn+0x58>
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	dd0a      	ble.n	800bc7e <scalbn+0x96>
 800bc68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bc70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc74:	46ac      	mov	ip, r5
 800bc76:	4658      	mov	r0, fp
 800bc78:	4661      	mov	r1, ip
 800bc7a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800bc7e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bc82:	da09      	bge.n	800bc98 <scalbn+0xb0>
 800bc84:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800bc88:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800bc8c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800bc90:	480e      	ldr	r0, [pc, #56]	@ (800bccc <scalbn+0xe4>)
 800bc92:	f041 011f 	orr.w	r1, r1, #31
 800bc96:	e7bd      	b.n	800bc14 <scalbn+0x2c>
 800bc98:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc9c:	3236      	adds	r2, #54	@ 0x36
 800bc9e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bca2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bca6:	4658      	mov	r0, fp
 800bca8:	4629      	mov	r1, r5
 800bcaa:	2200      	movs	r2, #0
 800bcac:	4b08      	ldr	r3, [pc, #32]	@ (800bcd0 <scalbn+0xe8>)
 800bcae:	e7d1      	b.n	800bc54 <scalbn+0x6c>
 800bcb0:	c2f8f359 	.word	0xc2f8f359
 800bcb4:	01a56e1f 	.word	0x01a56e1f
 800bcb8:	8800759c 	.word	0x8800759c
 800bcbc:	7e37e43c 	.word	0x7e37e43c
 800bcc0:	43500000 	.word	0x43500000
 800bcc4:	ffff3cb0 	.word	0xffff3cb0
 800bcc8:	8800759c 	.word	0x8800759c
 800bccc:	c2f8f359 	.word	0xc2f8f359
 800bcd0:	3c900000 	.word	0x3c900000

0800bcd4 <with_errno>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	460d      	mov	r5, r1
 800bcda:	4616      	mov	r6, r2
 800bcdc:	f7fb fe88 	bl	80079f0 <__errno>
 800bce0:	4629      	mov	r1, r5
 800bce2:	6006      	str	r6, [r0, #0]
 800bce4:	4620      	mov	r0, r4
 800bce6:	bd70      	pop	{r4, r5, r6, pc}

0800bce8 <xflow>:
 800bce8:	b513      	push	{r0, r1, r4, lr}
 800bcea:	4604      	mov	r4, r0
 800bcec:	4619      	mov	r1, r3
 800bcee:	4610      	mov	r0, r2
 800bcf0:	b10c      	cbz	r4, 800bcf6 <xflow+0xe>
 800bcf2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bcf6:	e9cd 2300 	strd	r2, r3, [sp]
 800bcfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcfe:	f7f4 fbeb 	bl	80004d8 <__aeabi_dmul>
 800bd02:	2222      	movs	r2, #34	@ 0x22
 800bd04:	b002      	add	sp, #8
 800bd06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd0a:	f7ff bfe3 	b.w	800bcd4 <with_errno>

0800bd0e <__math_uflow>:
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bd14:	f7ff bfe8 	b.w	800bce8 <xflow>

0800bd18 <__math_oflow>:
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800bd1e:	f7ff bfe3 	b.w	800bce8 <xflow>
	...

0800bd24 <__ieee754_sqrt>:
 800bd24:	4a67      	ldr	r2, [pc, #412]	@ (800bec4 <__ieee754_sqrt+0x1a0>)
 800bd26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2a:	438a      	bics	r2, r1
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	460f      	mov	r7, r1
 800bd30:	460b      	mov	r3, r1
 800bd32:	4604      	mov	r4, r0
 800bd34:	d10e      	bne.n	800bd54 <__ieee754_sqrt+0x30>
 800bd36:	4602      	mov	r2, r0
 800bd38:	f7f4 fbce 	bl	80004d8 <__aeabi_dmul>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 fa12 	bl	800016c <__adddf3>
 800bd48:	4606      	mov	r6, r0
 800bd4a:	460f      	mov	r7, r1
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	4639      	mov	r1, r7
 800bd50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	2900      	cmp	r1, #0
 800bd56:	dc0c      	bgt.n	800bd72 <__ieee754_sqrt+0x4e>
 800bd58:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800bd5c:	4302      	orrs	r2, r0
 800bd5e:	d0f5      	beq.n	800bd4c <__ieee754_sqrt+0x28>
 800bd60:	b189      	cbz	r1, 800bd86 <__ieee754_sqrt+0x62>
 800bd62:	4602      	mov	r2, r0
 800bd64:	f7f4 fa00 	bl	8000168 <__aeabi_dsub>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	f7f4 fcde 	bl	800072c <__aeabi_ddiv>
 800bd70:	e7ea      	b.n	800bd48 <__ieee754_sqrt+0x24>
 800bd72:	150a      	asrs	r2, r1, #20
 800bd74:	d115      	bne.n	800bda2 <__ieee754_sqrt+0x7e>
 800bd76:	2100      	movs	r1, #0
 800bd78:	e009      	b.n	800bd8e <__ieee754_sqrt+0x6a>
 800bd7a:	0ae3      	lsrs	r3, r4, #11
 800bd7c:	3a15      	subs	r2, #21
 800bd7e:	0564      	lsls	r4, r4, #21
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d0fa      	beq.n	800bd7a <__ieee754_sqrt+0x56>
 800bd84:	e7f7      	b.n	800bd76 <__ieee754_sqrt+0x52>
 800bd86:	460a      	mov	r2, r1
 800bd88:	e7fa      	b.n	800bd80 <__ieee754_sqrt+0x5c>
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	3101      	adds	r1, #1
 800bd8e:	02d8      	lsls	r0, r3, #11
 800bd90:	d5fb      	bpl.n	800bd8a <__ieee754_sqrt+0x66>
 800bd92:	1e48      	subs	r0, r1, #1
 800bd94:	1a12      	subs	r2, r2, r0
 800bd96:	f1c1 0020 	rsb	r0, r1, #32
 800bd9a:	fa24 f000 	lsr.w	r0, r4, r0
 800bd9e:	4303      	orrs	r3, r0
 800bda0:	408c      	lsls	r4, r1
 800bda2:	2600      	movs	r6, #0
 800bda4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800bda8:	2116      	movs	r1, #22
 800bdaa:	07d2      	lsls	r2, r2, #31
 800bdac:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdba:	bf5c      	itt	pl
 800bdbc:	005b      	lslpl	r3, r3, #1
 800bdbe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800bdc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdc6:	bf58      	it	pl
 800bdc8:	0064      	lslpl	r4, r4, #1
 800bdca:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800bdce:	107f      	asrs	r7, r7, #1
 800bdd0:	0064      	lsls	r4, r4, #1
 800bdd2:	1815      	adds	r5, r2, r0
 800bdd4:	429d      	cmp	r5, r3
 800bdd6:	bfde      	ittt	le
 800bdd8:	182a      	addle	r2, r5, r0
 800bdda:	1b5b      	suble	r3, r3, r5
 800bddc:	1836      	addle	r6, r6, r0
 800bdde:	0fe5      	lsrs	r5, r4, #31
 800bde0:	3901      	subs	r1, #1
 800bde2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800bde6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bdea:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800bdee:	d1f0      	bne.n	800bdd2 <__ieee754_sqrt+0xae>
 800bdf0:	460d      	mov	r5, r1
 800bdf2:	f04f 0a20 	mov.w	sl, #32
 800bdf6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	eb01 0c00 	add.w	ip, r1, r0
 800be00:	db02      	blt.n	800be08 <__ieee754_sqrt+0xe4>
 800be02:	d113      	bne.n	800be2c <__ieee754_sqrt+0x108>
 800be04:	45a4      	cmp	ip, r4
 800be06:	d811      	bhi.n	800be2c <__ieee754_sqrt+0x108>
 800be08:	f1bc 0f00 	cmp.w	ip, #0
 800be0c:	eb0c 0100 	add.w	r1, ip, r0
 800be10:	da42      	bge.n	800be98 <__ieee754_sqrt+0x174>
 800be12:	2900      	cmp	r1, #0
 800be14:	db40      	blt.n	800be98 <__ieee754_sqrt+0x174>
 800be16:	f102 0e01 	add.w	lr, r2, #1
 800be1a:	1a9b      	subs	r3, r3, r2
 800be1c:	4672      	mov	r2, lr
 800be1e:	45a4      	cmp	ip, r4
 800be20:	bf88      	it	hi
 800be22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800be26:	eba4 040c 	sub.w	r4, r4, ip
 800be2a:	4405      	add	r5, r0
 800be2c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800be30:	f1ba 0a01 	subs.w	sl, sl, #1
 800be34:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800be38:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800be3c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800be40:	d1db      	bne.n	800bdfa <__ieee754_sqrt+0xd6>
 800be42:	431c      	orrs	r4, r3
 800be44:	d01a      	beq.n	800be7c <__ieee754_sqrt+0x158>
 800be46:	4c20      	ldr	r4, [pc, #128]	@ (800bec8 <__ieee754_sqrt+0x1a4>)
 800be48:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800becc <__ieee754_sqrt+0x1a8>
 800be4c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800be50:	e9db 2300 	ldrd	r2, r3, [fp]
 800be54:	f7f4 f988 	bl	8000168 <__aeabi_dsub>
 800be58:	e9d4 8900 	ldrd	r8, r9, [r4]
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4640      	mov	r0, r8
 800be62:	4649      	mov	r1, r9
 800be64:	f7f4 fdb4 	bl	80009d0 <__aeabi_dcmple>
 800be68:	b140      	cbz	r0, 800be7c <__ieee754_sqrt+0x158>
 800be6a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800be6e:	e9db 2300 	ldrd	r2, r3, [fp]
 800be72:	f1b5 3fff 	cmp.w	r5, #4294967295
 800be76:	d111      	bne.n	800be9c <__ieee754_sqrt+0x178>
 800be78:	4655      	mov	r5, sl
 800be7a:	3601      	adds	r6, #1
 800be7c:	1072      	asrs	r2, r6, #1
 800be7e:	086b      	lsrs	r3, r5, #1
 800be80:	07f1      	lsls	r1, r6, #31
 800be82:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800be86:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800be8a:	bf48      	it	mi
 800be8c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800be90:	4618      	mov	r0, r3
 800be92:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800be96:	e757      	b.n	800bd48 <__ieee754_sqrt+0x24>
 800be98:	4696      	mov	lr, r2
 800be9a:	e7be      	b.n	800be1a <__ieee754_sqrt+0xf6>
 800be9c:	f7f4 f966 	bl	800016c <__adddf3>
 800bea0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4640      	mov	r0, r8
 800beaa:	4649      	mov	r1, r9
 800beac:	f7f4 fd86 	bl	80009bc <__aeabi_dcmplt>
 800beb0:	b120      	cbz	r0, 800bebc <__ieee754_sqrt+0x198>
 800beb2:	1ca8      	adds	r0, r5, #2
 800beb4:	bf08      	it	eq
 800beb6:	3601      	addeq	r6, #1
 800beb8:	3502      	adds	r5, #2
 800beba:	e7df      	b.n	800be7c <__ieee754_sqrt+0x158>
 800bebc:	1c6b      	adds	r3, r5, #1
 800bebe:	f023 0501 	bic.w	r5, r3, #1
 800bec2:	e7db      	b.n	800be7c <__ieee754_sqrt+0x158>
 800bec4:	7ff00000 	.word	0x7ff00000
 800bec8:	200001f0 	.word	0x200001f0
 800becc:	200001e8 	.word	0x200001e8

0800bed0 <_init>:
 800bed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed2:	bf00      	nop
 800bed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bed6:	bc08      	pop	{r3}
 800bed8:	469e      	mov	lr, r3
 800beda:	4770      	bx	lr

0800bedc <_fini>:
 800bedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bede:	bf00      	nop
 800bee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bee2:	bc08      	pop	{r3}
 800bee4:	469e      	mov	lr, r3
 800bee6:	4770      	bx	lr
