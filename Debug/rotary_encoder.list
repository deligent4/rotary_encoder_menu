
rotary_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b290  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d20  0800b3a0  0800b3a0  0000c3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0c0  0800c0c0  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0c0  0800c0c0  0000d0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c8  0800c0c8  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c8  0800c0c8  0000d0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0cc  0800c0cc  0000d0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c0d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  200001ec  0800c2bc  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800c2bc  0000e8d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001193d  00000000  00000000  0000e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca6  00000000  00000000  0001fb52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  000227f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da2  00000000  00000000  00023970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d044  00000000  00000000  00024712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015db5  00000000  00000000  00041756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900c2  00000000  00000000  0005750b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e75cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef4  00000000  00000000  000e7654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000ed548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b388 	.word	0x0800b388

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800b388 	.word	0x0800b388

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bba:	2afd      	cmp	r2, #253	@ 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	@ 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	@ 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	@ 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_f2iz>:
 8000ef4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000efc:	d30f      	bcc.n	8000f1e <__aeabi_f2iz+0x2a>
 8000efe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f06:	d90d      	bls.n	8000f24 <__aeabi_f2iz+0x30>
 8000f08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f10:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	bf18      	it	ne
 8000f1a:	4240      	negne	r0, r0
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr
 8000f24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f28:	d101      	bne.n	8000f2e <__aeabi_f2iz+0x3a>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d105      	bne.n	8000f3a <__aeabi_f2iz+0x46>
 8000f2e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f32:	bf08      	it	eq
 8000f34:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <__aeabi_d2lz>:
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2300      	movs	r3, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	460d      	mov	r5, r1
 8000f4a:	f7ff fd37 	bl	80009bc <__aeabi_dcmplt>
 8000f4e:	b928      	cbnz	r0, 8000f5c <__aeabi_d2lz+0x1c>
 8000f50:	4620      	mov	r0, r4
 8000f52:	4629      	mov	r1, r5
 8000f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f58:	f000 b80a 	b.w	8000f70 <__aeabi_d2ulz>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f62:	f000 f805 	bl	8000f70 <__aeabi_d2ulz>
 8000f66:	4240      	negs	r0, r0
 8000f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f6c:	bd38      	pop	{r3, r4, r5, pc}
 8000f6e:	bf00      	nop

08000f70 <__aeabi_d2ulz>:
 8000f70:	b5d0      	push	{r4, r6, r7, lr}
 8000f72:	2200      	movs	r2, #0
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <__aeabi_d2ulz+0x34>)
 8000f76:	4606      	mov	r6, r0
 8000f78:	460f      	mov	r7, r1
 8000f7a:	f7ff faad 	bl	80004d8 <__aeabi_dmul>
 8000f7e:	f7ff fd83 	bl	8000a88 <__aeabi_d2uiz>
 8000f82:	4604      	mov	r4, r0
 8000f84:	f7ff fa2e 	bl	80003e4 <__aeabi_ui2d>
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <__aeabi_d2ulz+0x38>)
 8000f8c:	f7ff faa4 	bl	80004d8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4630      	mov	r0, r6
 8000f96:	4639      	mov	r1, r7
 8000f98:	f7ff f8e6 	bl	8000168 <__aeabi_dsub>
 8000f9c:	f7ff fd74 	bl	8000a88 <__aeabi_d2uiz>
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	bdd0      	pop	{r4, r6, r7, pc}
 8000fa4:	3df00000 	.word	0x3df00000
 8000fa8:	41f00000 	.word	0x41f00000

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_DMA_Init+0x38>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <MX_DMA_Init+0x38>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_DMA_Init+0x38>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2010      	movs	r0, #16
 8000fd0:	f001 ff03 	bl	8002dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fd4:	2010      	movs	r0, #16
 8000fd6:	f001 ff1c 	bl	8002e12 <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a39      	ldr	r2, [pc, #228]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b37      	ldr	r3, [pc, #220]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001014:	4b34      	ldr	r3, [pc, #208]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a33      	ldr	r2, [pc, #204]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a2d      	ldr	r2, [pc, #180]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a27      	ldr	r2, [pc, #156]	@ (80010e8 <MX_GPIO_Init+0x100>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <MX_GPIO_Init+0x100>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001062:	4822      	ldr	r0, [pc, #136]	@ (80010ec <MX_GPIO_Init+0x104>)
 8001064:	f002 fafd 	bl	8003662 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLU_Pin;
 8001068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BLU_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	481a      	ldr	r0, [pc, #104]	@ (80010ec <MX_GPIO_Init+0x104>)
 8001082:	f002 f953 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_SW_Pin|B_SW_Pin|C_SW_Pin|ROT_SW_Pin;
 8001086:	2333      	movs	r3, #51	@ 0x33
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <MX_GPIO_Init+0x108>)
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	4816      	ldr	r0, [pc, #88]	@ (80010f4 <MX_GPIO_Init+0x10c>)
 800109a:	f002 f947 	bl	800332c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2006      	movs	r0, #6
 80010a4:	f001 fe99 	bl	8002dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010a8:	2006      	movs	r0, #6
 80010aa:	f001 feb2 	bl	8002e12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2007      	movs	r0, #7
 80010b4:	f001 fe91 	bl	8002dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010b8:	2007      	movs	r0, #7
 80010ba:	f001 feaa 	bl	8002e12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200a      	movs	r0, #10
 80010c4:	f001 fe89 	bl	8002dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010c8:	200a      	movs	r0, #10
 80010ca:	f001 fea2 	bl	8002e12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2017      	movs	r0, #23
 80010d4:	f001 fe81 	bl	8002dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010d8:	2017      	movs	r0, #23
 80010da:	f001 fe9a 	bl	8002e12 <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40011000 	.word	0x40011000
 80010f0:	10210000 	.word	0x10210000
 80010f4:	40010800 	.word	0x40010800

080010f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f002 fadd 	bl	80036f4 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 ff9e 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000208 	.word	0x20000208
 800114c:	40005400 	.word	0x40005400
 8001150:	00061a80 	.word	0x00061a80

08001154 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a2c      	ldr	r2, [pc, #176]	@ (8001220 <HAL_I2C_MspInit+0xcc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d151      	bne.n	8001218 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a2a      	ldr	r2, [pc, #168]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800118c:	23c0      	movs	r3, #192	@ 0xc0
 800118e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001190:	2312      	movs	r3, #18
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4822      	ldr	r0, [pc, #136]	@ (8001228 <HAL_I2C_MspInit+0xd4>)
 80011a0:	f002 f8c4 	bl	800332c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 80011aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ae:	61d3      	str	r3, [r2, #28]
 80011b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_I2C_MspInit+0xd0>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <HAL_I2C_MspInit+0xdc>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011c4:	2210      	movs	r2, #16
 80011c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 80011ee:	f001 fe2b 	bl	8002e48 <HAL_DMA_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80011f8:	f000 ff42 	bl	8002080 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 8001200:	635a      	str	r2, [r3, #52]	@ 0x34
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_I2C_MspInit+0xd8>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	201f      	movs	r0, #31
 800120e:	f001 fde4 	bl	8002dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001212:	201f      	movs	r0, #31
 8001214:	f001 fdfd 	bl	8002e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40005400 	.word	0x40005400
 8001224:	40021000 	.word	0x40021000
 8001228:	40010c00 	.word	0x40010c00
 800122c:	2000025c 	.word	0x2000025c
 8001230:	4002006c 	.word	0x4002006c

08001234 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800123c:	1d39      	adds	r1, r7, #4
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2201      	movs	r2, #1
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <__io_putchar+0x20>)
 8001246:	f005 fbaf 	bl	80069a8 <HAL_UART_Transmit>
  return ch;
 800124a:	687b      	ldr	r3, [r7, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000740 	.word	0x20000740

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f001 fc60 	bl	8002b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f866 	bl	8001330 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f7ff fec0 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001268:	f7ff fea0 	bl	8000fac <MX_DMA_Init>
  MX_TIM3_Init();
 800126c:	f001 fb24 	bl	80028b8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001270:	f7ff ff42 	bl	80010f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001274:	f001 fbba 	bl	80029ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001278:	213c      	movs	r1, #60	@ 0x3c
 800127a:	4821      	ldr	r0, [pc, #132]	@ (8001300 <main+0xa8>)
 800127c:	f005 f874 	bl	8006368 <HAL_TIM_Encoder_Start_IT>
  ssd1306_Init();
 8001280:	f000 ff4e 	bl	8002120 <ssd1306_Init>
  update_display(); // Ensure the initial display is updated
 8001284:	f000 f9a2 	bl	80015cc <update_display>

  HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	@ 0x64
 800128a:	f001 fcab 	bl	8002be4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tick = HAL_GetTick();
 800128e:	f001 fc9f 	bl	8002bd0 <HAL_GetTick>
 8001292:	4603      	mov	r3, r0
 8001294:	4a1b      	ldr	r2, [pc, #108]	@ (8001304 <main+0xac>)
 8001296:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8001298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129c:	481a      	ldr	r0, [pc, #104]	@ (8001308 <main+0xb0>)
 800129e:	f002 f9f8 	bl	8003692 <HAL_GPIO_TogglePin>
//	  HAL_Delay(100);
	  if(HAL_GPIO_ReadPin(ROT_SW_GPIO_Port, ROT_SW_Pin) == 0){
 80012a2:	2120      	movs	r1, #32
 80012a4:	4819      	ldr	r0, [pc, #100]	@ (800130c <main+0xb4>)
 80012a6:	f002 f9c5 	bl	8003634 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d105      	bne.n	80012bc <main+0x64>
		  HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b6:	4814      	ldr	r0, [pc, #80]	@ (8001308 <main+0xb0>)
 80012b8:	f002 f9d3 	bl	8003662 <HAL_GPIO_WritePin>
	  }

//      printf("Hello World\n\r\v");

      update_encoder_state();
 80012bc:	f000 fc56 	bl	8001b6c <update_encoder_state>
      handle_button_press();
 80012c0:	f000 fe6a 	bl	8001f98 <handle_button_press>
      update_display();
 80012c4:	f000 f982 	bl	80015cc <update_display>
      printf("current_state %d\n\r", current_state);
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <main+0xb8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	@ (8001314 <main+0xbc>)
 80012d0:	f006 fc18 	bl	8007b04 <iprintf>
      printf("digit_position %d\n\r", digit_position);
 80012d4:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <main+0xc0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	4810      	ldr	r0, [pc, #64]	@ (800131c <main+0xc4>)
 80012dc:	f006 fc12 	bl	8007b04 <iprintf>
      printf("cursor_position %d\n\r", cursor_position);
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <main+0xc8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	480f      	ldr	r0, [pc, #60]	@ (8001324 <main+0xcc>)
 80012e8:	f006 fc0c 	bl	8007b04 <iprintf>
      printf("mode_index %d\n\r\v", mode_index);
 80012ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <main+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	480e      	ldr	r0, [pc, #56]	@ (800132c <main+0xd4>)
 80012f4:	f006 fc06 	bl	8007b04 <iprintf>

	  HAL_Delay(0); // Adjust the delay as needed
 80012f8:	2000      	movs	r0, #0
 80012fa:	f001 fc73 	bl	8002be4 <HAL_Delay>
	  tick = HAL_GetTick();
 80012fe:	e7c6      	b.n	800128e <main+0x36>
 8001300:	200006f8 	.word	0x200006f8
 8001304:	200002a0 	.word	0x200002a0
 8001308:	40011000 	.word	0x40011000
 800130c:	40010800 	.word	0x40010800
 8001310:	200002ac 	.word	0x200002ac
 8001314:	0800b3a0 	.word	0x0800b3a0
 8001318:	200002d8 	.word	0x200002d8
 800131c:	0800b3b4 	.word	0x0800b3b4
 8001320:	200002c0 	.word	0x200002c0
 8001324:	0800b3c8 	.word	0x0800b3c8
 8001328:	20000000 	.word	0x20000000
 800132c:	0800b3e0 	.word	0x0800b3e0

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	@ 0x40
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	2228      	movs	r2, #40	@ 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f006 fc6f 	bl	8007c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800135a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800136c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800136e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fb43 	bl	8005a04 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001384:	f000 fe7c 	bl	8002080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2302      	movs	r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2102      	movs	r1, #2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fdb0 	bl	8005f08 <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013ae:	f000 fe67 	bl	8002080 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3740      	adds	r7, #64	@ 0x40
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	rotary_out = __HAL_TIM_GET_COUNTER(htim);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	4a06      	ldr	r2, [pc, #24]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x28>)
 80013cc:	6013      	str	r3, [r2, #0]
	rot_cnt = rotary_out / 4;
 80013ce:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x28>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200002a4 	.word	0x200002a4
 80013e8:	200002a8 	.word	0x200002a8

080013ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	2b1f      	cmp	r3, #31
 80013fc:	d864      	bhi.n	80014c8 <HAL_GPIO_EXTI_Callback+0xdc>
 80013fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001404 <HAL_GPIO_EXTI_Callback+0x18>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	0800148d 	.word	0x0800148d
 8001408:	080014a1 	.word	0x080014a1
 800140c:	080014c9 	.word	0x080014c9
 8001410:	080014c9 	.word	0x080014c9
 8001414:	080014c9 	.word	0x080014c9
 8001418:	080014c9 	.word	0x080014c9
 800141c:	080014c9 	.word	0x080014c9
 8001420:	080014c9 	.word	0x080014c9
 8001424:	080014c9 	.word	0x080014c9
 8001428:	080014c9 	.word	0x080014c9
 800142c:	080014c9 	.word	0x080014c9
 8001430:	080014c9 	.word	0x080014c9
 8001434:	080014c9 	.word	0x080014c9
 8001438:	080014c9 	.word	0x080014c9
 800143c:	080014c9 	.word	0x080014c9
 8001440:	080014b5 	.word	0x080014b5
 8001444:	080014c9 	.word	0x080014c9
 8001448:	080014c9 	.word	0x080014c9
 800144c:	080014c9 	.word	0x080014c9
 8001450:	080014c9 	.word	0x080014c9
 8001454:	080014c9 	.word	0x080014c9
 8001458:	080014c9 	.word	0x080014c9
 800145c:	080014c9 	.word	0x080014c9
 8001460:	080014c9 	.word	0x080014c9
 8001464:	080014c9 	.word	0x080014c9
 8001468:	080014c9 	.word	0x080014c9
 800146c:	080014c9 	.word	0x080014c9
 8001470:	080014c9 	.word	0x080014c9
 8001474:	080014c9 	.word	0x080014c9
 8001478:	080014c9 	.word	0x080014c9
 800147c:	080014c9 	.word	0x080014c9
 8001480:	08001485 	.word	0x08001485
	case ROT_SW_Pin:
		rot_sw_state = true;
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
		break;
 800148a:	e01e      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xde>
	case A_SW_Pin:
		a_sw_state = true;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_GPIO_EXTI_Callback+0xec>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
		current_a_cnt++;
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <HAL_GPIO_EXTI_Callback+0xf0>)
 800149c:	801a      	strh	r2, [r3, #0]
		break;
 800149e:	e014      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xde>
	case B_SW_Pin:
		b_sw_state = true;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
		current_b_cnt++;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80014b0:	801a      	strh	r2, [r3, #0]
		break;
 80014b2:	e00a      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xde>
	case C_SW_Pin:
		c_sw_state = true;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0xfc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
		current_c_cnt++;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_GPIO_EXTI_Callback+0x100>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_GPIO_EXTI_Callback+0x100>)
 80014c4:	801a      	strh	r2, [r3, #0]
		break;
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xde>
	default:
//		a_sw_state = b_sw_state = c_sw_state = false;
		break;
 80014c8:	bf00      	nop
	}
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	200002e2 	.word	0x200002e2
 80014d8:	200002e3 	.word	0x200002e3
 80014dc:	200002dc 	.word	0x200002dc
 80014e0:	200002e4 	.word	0x200002e4
 80014e4:	200002de 	.word	0x200002de
 80014e8:	200002e5 	.word	0x200002e5
 80014ec:	200002e0 	.word	0x200002e0

080014f0 <myOLED_char>:

void myOLED_char(uint16_t cursorX, uint16_t cursorY, char* data){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	80fb      	strh	r3, [r7, #6]
 80014fc:	460b      	mov	r3, r1
 80014fe:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	88ba      	ldrh	r2, [r7, #4]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 ffbc 	bl	8002488 <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_7x10, White);
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <myOLED_char+0x34>)
 8001512:	2301      	movs	r3, #1
 8001514:	ca06      	ldmia	r2, {r1, r2}
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f000 ff90 	bl	800243c <ssd1306_WriteString>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000010 	.word	0x20000010

08001528 <myOLED_float>:

void myOLED_float(uint16_t cursorX, uint16_t cursorY, float data){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	603a      	str	r2, [r7, #0]
 8001532:	80fb      	strh	r3, [r7, #6]
 8001534:	460b      	mov	r3, r1
 8001536:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7fe ff75 	bl	8000428 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	f107 000c 	add.w	r0, r7, #12
 8001546:	490b      	ldr	r1, [pc, #44]	@ (8001574 <myOLED_float+0x4c>)
 8001548:	f006 faee 	bl	8007b28 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f000 ff96 	bl	8002488 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <myOLED_float+0x50>)
 800155e:	f107 000c 	add.w	r0, r7, #12
 8001562:	2301      	movs	r3, #1
 8001564:	ca06      	ldmia	r2, {r1, r2}
 8001566:	f000 ff69 	bl	800243c <ssd1306_WriteString>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0800b3f4 	.word	0x0800b3f4
 8001578:	20000010 	.word	0x20000010

0800157c <myOLED_int>:

void myOLED_int(uint16_t cursorX, uint16_t cursorY, uint16_t data){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	460b      	mov	r3, r1
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	807b      	strh	r3, [r7, #2]
	char str_data[10];

	sprintf(str_data, "%u", data);
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	490b      	ldr	r1, [pc, #44]	@ (80015c4 <myOLED_int+0x48>)
 8001596:	4618      	mov	r0, r3
 8001598:	f006 fac6 	bl	8007b28 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	88ba      	ldrh	r2, [r7, #4]
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 ff6e 	bl	8002488 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 80015ac:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <myOLED_int+0x4c>)
 80015ae:	f107 000c 	add.w	r0, r7, #12
 80015b2:	2301      	movs	r3, #1
 80015b4:	ca06      	ldmia	r2, {r1, r2}
 80015b6:	f000 ff41 	bl	800243c <ssd1306_WriteString>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	0800b3fc 	.word	0x0800b3fc
 80015c8:	20000010 	.word	0x20000010

080015cc <update_display>:
	ssd1306_SetCursor(cursorX, cursorY);
	ssd1306_WriteString(str_data, Font_7x10, White);
}

// Update Display
void update_display() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
    static Menu_State_e last_state = HOME_SCREEN;
    static bool first_update = true;
    bool force_update = (current_state != last_state) || first_update;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <update_display+0xf4>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b3b      	ldr	r3, [pc, #236]	@ (80016c4 <update_display+0xf8>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d103      	bne.n	80015e6 <update_display+0x1a>
 80015de:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <update_display+0xfc>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <update_display+0x1e>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <update_display+0x20>
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	71fb      	strb	r3, [r7, #7]

    if (force_update) {
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <update_display+0x46>
        last_state = current_state;
 80015fc:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <update_display+0xf4>)
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <update_display+0xf8>)
 8001602:	701a      	strb	r2, [r3, #0]
        last_cursor_position = -1; // Force full update on state change
 8001604:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <update_display+0x100>)
 8001606:	f04f 32ff 	mov.w	r2, #4294967295
 800160a:	601a      	str	r2, [r3, #0]
        first_update = false;
 800160c:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <update_display+0xfc>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    }

    // Handle cursor position updates separately
    bool cursor_changed = (cursor_position != last_cursor_position);
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <update_display+0x104>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <update_display+0x100>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	bf14      	ite	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2300      	moveq	r3, #0
 8001622:	71bb      	strb	r3, [r7, #6]

    switch (current_state) {
 8001624:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <update_display+0xf4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d83f      	bhi.n	80016ac <update_display+0xe0>
 800162c:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <update_display+0x68>)
 800162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001632:	bf00      	nop
 8001634:	08001645 	.word	0x08001645
 8001638:	08001665 	.word	0x08001665
 800163c:	08001685 	.word	0x08001685
 8001640:	080016a5 	.word	0x080016a5
        case HOME_SCREEN:
            display_home_screen(force_update || cursor_changed);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <update_display+0x84>
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <update_display+0x88>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <update_display+0x8a>
 8001654:	2300      	movs	r3, #0
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f839 	bl	80016d4 <display_home_screen>
            break;
 8001662:	e024      	b.n	80016ae <update_display+0xe2>
        case MODE_SELECTION:
            display_mode_selection(force_update || cursor_changed);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <update_display+0xa4>
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <update_display+0xa8>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <update_display+0xaa>
 8001674:	2300      	movs	r3, #0
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f923 	bl	80018c8 <display_mode_selection>
            break;
 8001682:	e014      	b.n	80016ae <update_display+0xe2>
        case PARAMETER_SETTING:
            display_parameter_setting(force_update || cursor_changed);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <update_display+0xc4>
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <update_display+0xc8>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <update_display+0xca>
 8001694:	2300      	movs	r3, #0
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f97b 	bl	8001998 <display_parameter_setting>
            break;
 80016a2:	e004      	b.n	80016ae <update_display+0xe2>
        case RETURN_TO_HOME:
            current_state = HOME_SCREEN;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <update_display+0xf4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
            break;
 80016aa:	e000      	b.n	80016ae <update_display+0xe2>
        default:
        	break;
 80016ac:	bf00      	nop
    }

    last_cursor_position = cursor_position;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <update_display+0x104>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a06      	ldr	r2, [pc, #24]	@ (80016cc <update_display+0x100>)
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200002ac 	.word	0x200002ac
 80016c4:	200002e7 	.word	0x200002e7
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	20000008 	.word	0x20000008
 80016d0:	200002c0 	.word	0x200002c0

080016d4 <display_home_screen>:

// Display Home Screen
void display_home_screen(bool force_update) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
    if (force_update) {
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d04e      	beq.n	8001782 <display_home_screen+0xae>
        ssd1306_Fill(Black);			// Clear the display before printing
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 fd85 	bl	80021f4 <ssd1306_Fill>
        myOLED_char(0, 0, "VT:");
 80016ea:	4a61      	ldr	r2, [pc, #388]	@ (8001870 <display_home_screen+0x19c>)
 80016ec:	2100      	movs	r1, #0
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fefe 	bl	80014f0 <myOLED_char>
        myOLED_float(21, 0, volt);
 80016f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001874 <display_home_screen+0x1a0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	2015      	movs	r0, #21
 80016fe:	f7ff ff13 	bl	8001528 <myOLED_float>
        myOLED_char(0, 10, "CU:");
 8001702:	4a5d      	ldr	r2, [pc, #372]	@ (8001878 <display_home_screen+0x1a4>)
 8001704:	210a      	movs	r1, #10
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fef2 	bl	80014f0 <myOLED_char>
        myOLED_float(21, 10, curr);
 800170c:	4b5b      	ldr	r3, [pc, #364]	@ (800187c <display_home_screen+0x1a8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	210a      	movs	r1, #10
 8001714:	2015      	movs	r0, #21
 8001716:	f7ff ff07 	bl	8001528 <myOLED_float>
        myOLED_char(0, 20, "CH:");
 800171a:	4a59      	ldr	r2, [pc, #356]	@ (8001880 <display_home_screen+0x1ac>)
 800171c:	2114      	movs	r1, #20
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fee6 	bl	80014f0 <myOLED_char>
        myOLED_float(21, 20, chg);
 8001724:	4b57      	ldr	r3, [pc, #348]	@ (8001884 <display_home_screen+0x1b0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	2114      	movs	r1, #20
 800172c:	2015      	movs	r0, #21
 800172e:	f7ff fefb 	bl	8001528 <myOLED_float>
        myOLED_char(0, 30, "TP:");
 8001732:	4a55      	ldr	r2, [pc, #340]	@ (8001888 <display_home_screen+0x1b4>)
 8001734:	211e      	movs	r1, #30
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff feda 	bl	80014f0 <myOLED_char>
        myOLED_float(21, 30, temp);
 800173c:	4b53      	ldr	r3, [pc, #332]	@ (800188c <display_home_screen+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	211e      	movs	r1, #30
 8001744:	2015      	movs	r0, #21
 8001746:	f7ff feef 	bl	8001528 <myOLED_float>
        ssd1306_Line(70, 0, 70, 64, White);		// Draw line to separate the values and options
 800174a:	2301      	movs	r3, #1
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2340      	movs	r3, #64	@ 0x40
 8001750:	2246      	movs	r2, #70	@ 0x46
 8001752:	2100      	movs	r1, #0
 8001754:	2046      	movs	r0, #70	@ 0x46
 8001756:	f000 feaf 	bl	80024b8 <ssd1306_Line>
        myOLED_char(90, 0, "<SET>");			// SET MODE
 800175a:	4a4d      	ldr	r2, [pc, #308]	@ (8001890 <display_home_screen+0x1bc>)
 800175c:	2100      	movs	r1, #0
 800175e:	205a      	movs	r0, #90	@ 0x5a
 8001760:	f7ff fec6 	bl	80014f0 <myOLED_char>
        myOLED_char(90, 10, "<ON>");			// Turn ON LOAD TODO
 8001764:	4a4b      	ldr	r2, [pc, #300]	@ (8001894 <display_home_screen+0x1c0>)
 8001766:	210a      	movs	r1, #10
 8001768:	205a      	movs	r0, #90	@ 0x5a
 800176a:	f7ff fec1 	bl	80014f0 <myOLED_char>
        myOLED_char(90, 20, "<RST>");			// TODO
 800176e:	4a4a      	ldr	r2, [pc, #296]	@ (8001898 <display_home_screen+0x1c4>)
 8001770:	2114      	movs	r1, #20
 8001772:	205a      	movs	r0, #90	@ 0x5a
 8001774:	f7ff febc 	bl	80014f0 <myOLED_char>
        myOLED_char(90, 30, "<HLP>");			// TODO
 8001778:	4a48      	ldr	r2, [pc, #288]	@ (800189c <display_home_screen+0x1c8>)
 800177a:	211e      	movs	r1, #30
 800177c:	205a      	movs	r0, #90	@ 0x5a
 800177e:	f7ff feb7 	bl	80014f0 <myOLED_char>
    }

    // Update cursor only
    for (int i = 0; i < 4; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e020      	b.n	80017ca <display_home_screen+0xf6>
            if (i == cursor_position) {
 8001788:	4b45      	ldr	r3, [pc, #276]	@ (80018a0 <display_home_screen+0x1cc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	429a      	cmp	r2, r3
 8001790:	d10c      	bne.n	80017ac <display_home_screen+0xd8>
                myOLED_char(75, i* 10, "->");
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	b29b      	uxth	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4a40      	ldr	r2, [pc, #256]	@ (80018a4 <display_home_screen+0x1d0>)
 80017a2:	4619      	mov	r1, r3
 80017a4:	204b      	movs	r0, #75	@ 0x4b
 80017a6:	f7ff fea3 	bl	80014f0 <myOLED_char>
 80017aa:	e00b      	b.n	80017c4 <display_home_screen+0xf0>
            } else {
                myOLED_char(75, i* 10, "  ");
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4a3b      	ldr	r2, [pc, #236]	@ (80018a8 <display_home_screen+0x1d4>)
 80017bc:	4619      	mov	r1, r3
 80017be:	204b      	movs	r0, #75	@ 0x4b
 80017c0:	f7ff fe96 	bl	80014f0 <myOLED_char>
    for (int i = 0; i < 4; i++) {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	dddb      	ble.n	8001788 <display_home_screen+0xb4>
            }
        }

    // Display the param value and mode if it is set
    if(current_state == 0){
 80017d0:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <display_home_screen+0x1d8>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d144      	bne.n	8001862 <display_home_screen+0x18e>
    	switch (mode_index){
 80017d8:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <display_home_screen+0x1dc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d83f      	bhi.n	8001860 <display_home_screen+0x18c>
 80017e0:	a201      	add	r2, pc, #4	@ (adr r2, 80017e8 <display_home_screen+0x114>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	08001813 	.word	0x08001813
 80017f0:	0800182d 	.word	0x0800182d
 80017f4:	08001847 	.word	0x08001847
    	case 0:
    		myOLED_char(0, 50, "CC:");
 80017f8:	4a2e      	ldr	r2, [pc, #184]	@ (80018b4 <display_home_screen+0x1e0>)
 80017fa:	2132      	movs	r1, #50	@ 0x32
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fe77 	bl	80014f0 <myOLED_char>
			myOLED_float(21, 50, param_mode.current);
 8001802:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <display_home_screen+0x1e4>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	461a      	mov	r2, r3
 8001808:	2132      	movs	r1, #50	@ 0x32
 800180a:	2015      	movs	r0, #21
 800180c:	f7ff fe8c 	bl	8001528 <myOLED_float>
    		break;
 8001810:	e027      	b.n	8001862 <display_home_screen+0x18e>
    	case 1:
			myOLED_char(0, 50, "CV:");
 8001812:	4a2a      	ldr	r2, [pc, #168]	@ (80018bc <display_home_screen+0x1e8>)
 8001814:	2132      	movs	r1, #50	@ 0x32
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fe6a 	bl	80014f0 <myOLED_char>
			myOLED_float(21, 50, param_mode.voltage);
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <display_home_screen+0x1e4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	2132      	movs	r1, #50	@ 0x32
 8001824:	2015      	movs	r0, #21
 8001826:	f7ff fe7f 	bl	8001528 <myOLED_float>
    		break;
 800182a:	e01a      	b.n	8001862 <display_home_screen+0x18e>
    	case 2:
			myOLED_char(0, 50, "CP:");
 800182c:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <display_home_screen+0x1ec>)
 800182e:	2132      	movs	r1, #50	@ 0x32
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff fe5d 	bl	80014f0 <myOLED_char>
			myOLED_float(21, 50, param_mode.power);
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <display_home_screen+0x1e4>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	461a      	mov	r2, r3
 800183c:	2132      	movs	r1, #50	@ 0x32
 800183e:	2015      	movs	r0, #21
 8001840:	f7ff fe72 	bl	8001528 <myOLED_float>
    		break;
 8001844:	e00d      	b.n	8001862 <display_home_screen+0x18e>
    	case 3:
			myOLED_char(0, 50, "CR:");
 8001846:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <display_home_screen+0x1f0>)
 8001848:	2132      	movs	r1, #50	@ 0x32
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fe50 	bl	80014f0 <myOLED_char>
			myOLED_float(21, 50, param_mode.resistance);
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <display_home_screen+0x1e4>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	461a      	mov	r2, r3
 8001856:	2132      	movs	r1, #50	@ 0x32
 8001858:	2015      	movs	r0, #21
 800185a:	f7ff fe65 	bl	8001528 <myOLED_float>
    		break;
 800185e:	e000      	b.n	8001862 <display_home_screen+0x18e>
    	default:
    		break;
 8001860:	bf00      	nop
    	}

    }
    ssd1306_UpdateScreen();
 8001862:	f000 fce9 	bl	8002238 <ssd1306_UpdateScreen>
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	0800b404 	.word	0x0800b404
 8001874:	200002c4 	.word	0x200002c4
 8001878:	0800b408 	.word	0x0800b408
 800187c:	200002c8 	.word	0x200002c8
 8001880:	0800b40c 	.word	0x0800b40c
 8001884:	200002cc 	.word	0x200002cc
 8001888:	0800b410 	.word	0x0800b410
 800188c:	200002d0 	.word	0x200002d0
 8001890:	0800b414 	.word	0x0800b414
 8001894:	0800b41c 	.word	0x0800b41c
 8001898:	0800b424 	.word	0x0800b424
 800189c:	0800b42c 	.word	0x0800b42c
 80018a0:	200002c0 	.word	0x200002c0
 80018a4:	0800b434 	.word	0x0800b434
 80018a8:	0800b438 	.word	0x0800b438
 80018ac:	200002ac 	.word	0x200002ac
 80018b0:	20000000 	.word	0x20000000
 80018b4:	0800b43c 	.word	0x0800b43c
 80018b8:	200002b0 	.word	0x200002b0
 80018bc:	0800b440 	.word	0x0800b440
 80018c0:	0800b444 	.word	0x0800b444
 80018c4:	0800b448 	.word	0x0800b448

080018c8 <display_mode_selection>:

// Display Mode Selection Screen
void display_mode_selection(bool force_update) {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    const char* modes[] = {"CC", "CV", "CP", "CR"};
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <display_mode_selection+0xbc>)
 80018d4:	f107 0408 	add.w	r4, r7, #8
 80018d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (force_update) {
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01c      	beq.n	800191e <display_mode_selection+0x56>
        ssd1306_Fill(Black); // Clear the screen
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 fc85 	bl	80021f4 <ssd1306_Fill>
        for (int i = 0; i < 4; i++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e013      	b.n	8001918 <display_mode_selection+0x50>
            myOLED_char(15, i * 10, (char*)modes[i]); // Print modes in column
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	b299      	uxth	r1, r3
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	3320      	adds	r3, #32
 8001904:	443b      	add	r3, r7
 8001906:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800190a:	461a      	mov	r2, r3
 800190c:	200f      	movs	r0, #15
 800190e:	f7ff fdef 	bl	80014f0 <myOLED_char>
        for (int i = 0; i < 4; i++) {
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b03      	cmp	r3, #3
 800191c:	dde8      	ble.n	80018f0 <display_mode_selection+0x28>
        }
    }

    // Update cursor only
    for (int i = 0; i < 4; i++) {
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	e020      	b.n	8001966 <display_mode_selection+0x9e>
        if (i == cursor_position) {
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <display_mode_selection+0xc0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	429a      	cmp	r2, r3
 800192c:	d10c      	bne.n	8001948 <display_mode_selection+0x80>
            myOLED_char(0, i* 10, "->");
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	b29b      	uxth	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4413      	add	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	4a13      	ldr	r2, [pc, #76]	@ (800198c <display_mode_selection+0xc4>)
 800193e:	4619      	mov	r1, r3
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fdd5 	bl	80014f0 <myOLED_char>
 8001946:	e00b      	b.n	8001960 <display_mode_selection+0x98>
        } else {
            myOLED_char(0, i* 10, "  ");
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	4a0e      	ldr	r2, [pc, #56]	@ (8001990 <display_mode_selection+0xc8>)
 8001958:	4619      	mov	r1, r3
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fdc8 	bl	80014f0 <myOLED_char>
    for (int i = 0; i < 4; i++) {
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	3301      	adds	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b03      	cmp	r3, #3
 800196a:	dddb      	ble.n	8001924 <display_mode_selection+0x5c>
        }
    }

    myOLED_char(5, 50, "<SELECT THE MODE>");
 800196c:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <display_mode_selection+0xcc>)
 800196e:	2132      	movs	r1, #50	@ 0x32
 8001970:	2005      	movs	r0, #5
 8001972:	f7ff fdbd 	bl	80014f0 <myOLED_char>
    ssd1306_UpdateScreen();
 8001976:	f000 fc5f 	bl	8002238 <ssd1306_UpdateScreen>
}
 800197a:	bf00      	nop
 800197c:	3724      	adds	r7, #36	@ 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	0800b470 	.word	0x0800b470
 8001988:	200002c0 	.word	0x200002c0
 800198c:	0800b434 	.word	0x0800b434
 8001990:	0800b438 	.word	0x0800b438
 8001994:	0800b44c 	.word	0x0800b44c

08001998 <display_parameter_setting>:


void display_parameter_setting(bool force_update) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
    if (force_update) {
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d04c      	beq.n	8001a42 <display_parameter_setting+0xaa>
        // Redraw entire screen if forced
        ssd1306_Fill(Black);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 fc23 	bl	80021f4 <ssd1306_Fill>
        myOLED_char(0, 0, "Set Value:");
 80019ae:	4a5b      	ldr	r2, [pc, #364]	@ (8001b1c <display_parameter_setting+0x184>)
 80019b0:	2100      	movs	r1, #0
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fd9c 	bl	80014f0 <myOLED_char>
        myOLED_char(20, 40, "RETURN");
 80019b8:	4a59      	ldr	r2, [pc, #356]	@ (8001b20 <display_parameter_setting+0x188>)
 80019ba:	2128      	movs	r1, #40	@ 0x28
 80019bc:	2014      	movs	r0, #20
 80019be:	f7ff fd97 	bl	80014f0 <myOLED_char>

        // Check the state and print the mode in parameter setting screen
        if(current_state == 2){
 80019c2:	4b58      	ldr	r3, [pc, #352]	@ (8001b24 <display_parameter_setting+0x18c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d13b      	bne.n	8001a42 <display_parameter_setting+0xaa>
        	switch(mode_index) {
 80019ca:	4b57      	ldr	r3, [pc, #348]	@ (8001b28 <display_parameter_setting+0x190>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d836      	bhi.n	8001a40 <display_parameter_setting+0xa8>
 80019d2:	a201      	add	r2, pc, #4	@ (adr r2, 80019d8 <display_parameter_setting+0x40>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019e9 	.word	0x080019e9
 80019dc:	080019ff 	.word	0x080019ff
 80019e0:	08001a15 	.word	0x08001a15
 80019e4:	08001a2b 	.word	0x08001a2b
        		case 0:
                	myOLED_char(70, 0, "CC");
 80019e8:	4a50      	ldr	r2, [pc, #320]	@ (8001b2c <display_parameter_setting+0x194>)
 80019ea:	2100      	movs	r1, #0
 80019ec:	2046      	movs	r0, #70	@ 0x46
 80019ee:	f7ff fd7f 	bl	80014f0 <myOLED_char>
                	myOLED_char(70, 20, "Amp");
 80019f2:	4a4f      	ldr	r2, [pc, #316]	@ (8001b30 <display_parameter_setting+0x198>)
 80019f4:	2114      	movs	r1, #20
 80019f6:	2046      	movs	r0, #70	@ 0x46
 80019f8:	f7ff fd7a 	bl	80014f0 <myOLED_char>
                	break;
 80019fc:	e021      	b.n	8001a42 <display_parameter_setting+0xaa>
        		case 1:
        			myOLED_char(70, 0, "CV");
 80019fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001b34 <display_parameter_setting+0x19c>)
 8001a00:	2100      	movs	r1, #0
 8001a02:	2046      	movs	r0, #70	@ 0x46
 8001a04:	f7ff fd74 	bl	80014f0 <myOLED_char>
        			myOLED_char(70, 20, "Volt");
 8001a08:	4a4b      	ldr	r2, [pc, #300]	@ (8001b38 <display_parameter_setting+0x1a0>)
 8001a0a:	2114      	movs	r1, #20
 8001a0c:	2046      	movs	r0, #70	@ 0x46
 8001a0e:	f7ff fd6f 	bl	80014f0 <myOLED_char>
        			break;
 8001a12:	e016      	b.n	8001a42 <display_parameter_setting+0xaa>
        		case 2:
        			myOLED_char(70, 0, "CP");
 8001a14:	4a49      	ldr	r2, [pc, #292]	@ (8001b3c <display_parameter_setting+0x1a4>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	2046      	movs	r0, #70	@ 0x46
 8001a1a:	f7ff fd69 	bl	80014f0 <myOLED_char>
        			myOLED_char(70, 20, "Watt");
 8001a1e:	4a48      	ldr	r2, [pc, #288]	@ (8001b40 <display_parameter_setting+0x1a8>)
 8001a20:	2114      	movs	r1, #20
 8001a22:	2046      	movs	r0, #70	@ 0x46
 8001a24:	f7ff fd64 	bl	80014f0 <myOLED_char>
        			break;
 8001a28:	e00b      	b.n	8001a42 <display_parameter_setting+0xaa>
        		case 3:
        			myOLED_char(70, 0, "CR");
 8001a2a:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <display_parameter_setting+0x1ac>)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2046      	movs	r0, #70	@ 0x46
 8001a30:	f7ff fd5e 	bl	80014f0 <myOLED_char>
        			myOLED_char(70, 20, "Ohm");
 8001a34:	4a44      	ldr	r2, [pc, #272]	@ (8001b48 <display_parameter_setting+0x1b0>)
 8001a36:	2114      	movs	r1, #20
 8001a38:	2046      	movs	r0, #70	@ 0x46
 8001a3a:	f7ff fd59 	bl	80014f0 <myOLED_char>
                	break;
 8001a3e:	e000      	b.n	8001a42 <display_parameter_setting+0xaa>
        		default:
        			break;
 8001a40:	bf00      	nop
        	}
        }
    }

    printf("mode_index %d\n\v\r", mode_index);
 8001a42:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <display_parameter_setting+0x190>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4840      	ldr	r0, [pc, #256]	@ (8001b4c <display_parameter_setting+0x1b4>)
 8001a4a:	f006 f85b 	bl	8007b04 <iprintf>

    // Fetch the current mode's parameter value
	float display_value;

	switch (mode_index) {
 8001a4e:	4b36      	ldr	r3, [pc, #216]	@ (8001b28 <display_parameter_setting+0x190>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d81a      	bhi.n	8001a8c <display_parameter_setting+0xf4>
 8001a56:	a201      	add	r2, pc, #4	@ (adr r2, 8001a5c <display_parameter_setting+0xc4>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001a75 	.word	0x08001a75
 8001a64:	08001a7d 	.word	0x08001a7d
 8001a68:	08001a85 	.word	0x08001a85
		case 0: display_value = param_mode.current; break;
 8001a6c:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <display_parameter_setting+0x1b8>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e00f      	b.n	8001a94 <display_parameter_setting+0xfc>
		case 1: display_value = param_mode.voltage; break;
 8001a74:	4b36      	ldr	r3, [pc, #216]	@ (8001b50 <display_parameter_setting+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e00b      	b.n	8001a94 <display_parameter_setting+0xfc>
		case 2: display_value = param_mode.power; break;
 8001a7c:	4b34      	ldr	r3, [pc, #208]	@ (8001b50 <display_parameter_setting+0x1b8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e007      	b.n	8001a94 <display_parameter_setting+0xfc>
		case 3: display_value = param_mode.resistance; break;
 8001a84:	4b32      	ldr	r3, [pc, #200]	@ (8001b50 <display_parameter_setting+0x1b8>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e003      	b.n	8001a94 <display_parameter_setting+0xfc>
		default: display_value = 0.0f; break;
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	bf00      	nop
	}

	// Display the value with proper formatting
	if (display_value >= 10.000) {
 8001a94:	492f      	ldr	r1, [pc, #188]	@ (8001b54 <display_parameter_setting+0x1bc>)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff fa18 	bl	8000ecc <__aeabi_fcmpge>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <display_parameter_setting+0x116>
		myOLED_float(0, 20, display_value);
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	2114      	movs	r1, #20
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fd3e 	bl	8001528 <myOLED_float>
 8001aac:	e009      	b.n	8001ac2 <display_parameter_setting+0x12a>
	} else {
		myOLED_float(7, 20, display_value);
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	2114      	movs	r1, #20
 8001ab2:	2007      	movs	r0, #7
 8001ab4:	f7ff fd38 	bl	8001528 <myOLED_float>
		myOLED_int(0, 20, 0);  // Print "0" at the first location
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2114      	movs	r1, #20
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fd5d 	bl	800157c <myOLED_int>
	}

    // Clear previous cursor position by redrawing the entire line
    ssd1306_SetCursor(0, 30);
 8001ac2:	211e      	movs	r1, #30
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 fcdf 	bl	8002488 <ssd1306_SetCursor>
    ssd1306_WriteString("        ", Font_7x10, White);  // Assuming 7 characters wide space to clear
 8001aca:	4a23      	ldr	r2, [pc, #140]	@ (8001b58 <display_parameter_setting+0x1c0>)
 8001acc:	2301      	movs	r3, #1
 8001ace:	ca06      	ldmia	r2, {r1, r2}
 8001ad0:	4822      	ldr	r0, [pc, #136]	@ (8001b5c <display_parameter_setting+0x1c4>)
 8001ad2:	f000 fcb3 	bl	800243c <ssd1306_WriteString>

    // Draw cursor under the digit
    int cursor_x = digit_position * 7;  // Assuming 7 pixels width per character
 8001ad6:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <display_parameter_setting+0x1c8>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	60bb      	str	r3, [r7, #8]
    if(digit_position == MAX_DIGITS){
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <display_parameter_setting+0x1c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d105      	bne.n	8001af6 <display_parameter_setting+0x15e>
    	myOLED_char(40, 50, "^");  // Draw the cursor under "RETURN" text
 8001aea:	4a1e      	ldr	r2, [pc, #120]	@ (8001b64 <display_parameter_setting+0x1cc>)
 8001aec:	2132      	movs	r1, #50	@ 0x32
 8001aee:	2028      	movs	r0, #40	@ 0x28
 8001af0:	f7ff fcfe 	bl	80014f0 <myOLED_char>
 8001af4:	e00b      	b.n	8001b0e <display_parameter_setting+0x176>
    }else{
    	myOLED_char(cursor_x, 30, "^");  	// Draw the cursor
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4a1a      	ldr	r2, [pc, #104]	@ (8001b64 <display_parameter_setting+0x1cc>)
 8001afc:	211e      	movs	r1, #30
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fcf6 	bl	80014f0 <myOLED_char>
    	myOLED_char(40, 50, " ");			// Clears the cursor under "RETURN" label
 8001b04:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <display_parameter_setting+0x1d0>)
 8001b06:	2132      	movs	r1, #50	@ 0x32
 8001b08:	2028      	movs	r0, #40	@ 0x28
 8001b0a:	f7ff fcf1 	bl	80014f0 <myOLED_char>
    }

    // Refresh the display after updating
    ssd1306_UpdateScreen();
 8001b0e:	f000 fb93 	bl	8002238 <ssd1306_UpdateScreen>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	0800b480 	.word	0x0800b480
 8001b20:	0800b48c 	.word	0x0800b48c
 8001b24:	200002ac 	.word	0x200002ac
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	0800b460 	.word	0x0800b460
 8001b30:	0800b494 	.word	0x0800b494
 8001b34:	0800b464 	.word	0x0800b464
 8001b38:	0800b498 	.word	0x0800b498
 8001b3c:	0800b468 	.word	0x0800b468
 8001b40:	0800b4a0 	.word	0x0800b4a0
 8001b44:	0800b46c 	.word	0x0800b46c
 8001b48:	0800b4a8 	.word	0x0800b4a8
 8001b4c:	0800b4ac 	.word	0x0800b4ac
 8001b50:	200002b0 	.word	0x200002b0
 8001b54:	41200000 	.word	0x41200000
 8001b58:	20000010 	.word	0x20000010
 8001b5c:	0800b4c0 	.word	0x0800b4c0
 8001b60:	200002d8 	.word	0x200002d8
 8001b64:	0800b4cc 	.word	0x0800b4cc
 8001b68:	0800b4d0 	.word	0x0800b4d0

08001b6c <update_encoder_state>:



// Update Encoder State
void update_encoder_state() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
    int new_rot_pos = rot_cnt;
 8001b72:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <update_encoder_state+0xf0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	607b      	str	r3, [r7, #4]
    static int old_rot_pos = 0;

    if (new_rot_pos > old_rot_pos) {
 8001b78:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <update_encoder_state+0xf4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dd17      	ble.n	8001bb2 <update_encoder_state+0x46>
        if (current_state == PARAMETER_SETTING) {
 8001b82:	4b38      	ldr	r3, [pc, #224]	@ (8001c64 <update_encoder_state+0xf8>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d10d      	bne.n	8001ba6 <update_encoder_state+0x3a>
            if (adjusting_digit) {
 8001b8a:	4b37      	ldr	r3, [pc, #220]	@ (8001c68 <update_encoder_state+0xfc>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <update_encoder_state+0x2e>
                update_parameter_value(1); // Increment digit
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 f86e 	bl	8001c74 <update_parameter_value>
 8001b98:	e028      	b.n	8001bec <update_encoder_state+0x80>
            } else {
                digit_position++;
 8001b9a:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <update_encoder_state+0x100>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a32      	ldr	r2, [pc, #200]	@ (8001c6c <update_encoder_state+0x100>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e022      	b.n	8001bec <update_encoder_state+0x80>
            }
        } else {
            cursor_position++;
 8001ba6:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <update_encoder_state+0x104>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a30      	ldr	r2, [pc, #192]	@ (8001c70 <update_encoder_state+0x104>)
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e01c      	b.n	8001bec <update_encoder_state+0x80>
        }
    } else if (new_rot_pos < old_rot_pos) {
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <update_encoder_state+0xf4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	da17      	bge.n	8001bec <update_encoder_state+0x80>
        if (current_state == PARAMETER_SETTING) {
 8001bbc:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <update_encoder_state+0xf8>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d10e      	bne.n	8001be2 <update_encoder_state+0x76>
            if (adjusting_digit) {
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <update_encoder_state+0xfc>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <update_encoder_state+0x6a>
                update_parameter_value(-1); // Decrement digit
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f850 	bl	8001c74 <update_parameter_value>
 8001bd4:	e00a      	b.n	8001bec <update_encoder_state+0x80>
            } else {
                digit_position--;
 8001bd6:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <update_encoder_state+0x100>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	4a23      	ldr	r2, [pc, #140]	@ (8001c6c <update_encoder_state+0x100>)
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e004      	b.n	8001bec <update_encoder_state+0x80>
            }
        } else {
            cursor_position--;
 8001be2:	4b23      	ldr	r3, [pc, #140]	@ (8001c70 <update_encoder_state+0x104>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <update_encoder_state+0x104>)
 8001bea:	6013      	str	r3, [r2, #0]
        }
    }
    old_rot_pos = new_rot_pos;
 8001bec:	4a1c      	ldr	r2, [pc, #112]	@ (8001c60 <update_encoder_state+0xf4>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
    put_parameter_limit();		// put limit on parameter values based on mode
 8001bf2:	f000 f8fd 	bl	8001df0 <put_parameter_limit>
//    set_parameter_to_mode();	// set parameter to mode
    // putting limits
    if (cursor_position < 0) cursor_position = 0;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <update_encoder_state+0x104>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da02      	bge.n	8001c04 <update_encoder_state+0x98>
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <update_encoder_state+0x104>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
    if (current_state == HOME_SCREEN && cursor_position > 3) cursor_position = 3;
 8001c04:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <update_encoder_state+0xf8>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <update_encoder_state+0xae>
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <update_encoder_state+0x104>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	dd02      	ble.n	8001c1a <update_encoder_state+0xae>
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <update_encoder_state+0x104>)
 8001c16:	2203      	movs	r2, #3
 8001c18:	601a      	str	r2, [r3, #0]
    if (current_state == MODE_SELECTION && cursor_position > 3) cursor_position = 3;
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <update_encoder_state+0xf8>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d106      	bne.n	8001c30 <update_encoder_state+0xc4>
 8001c22:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <update_encoder_state+0x104>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	dd02      	ble.n	8001c30 <update_encoder_state+0xc4>
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <update_encoder_state+0x104>)
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	601a      	str	r2, [r3, #0]
    if (current_state == PARAMETER_SETTING && digit_position > MAX_DIGITS) digit_position = MAX_DIGITS;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <update_encoder_state+0xf8>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d106      	bne.n	8001c46 <update_encoder_state+0xda>
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <update_encoder_state+0x100>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	dd02      	ble.n	8001c46 <update_encoder_state+0xda>
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <update_encoder_state+0x100>)
 8001c42:	2206      	movs	r2, #6
 8001c44:	601a      	str	r2, [r3, #0]
    if (digit_position < 0) digit_position = 0;
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <update_encoder_state+0x100>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da02      	bge.n	8001c54 <update_encoder_state+0xe8>
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <update_encoder_state+0x100>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200002a8 	.word	0x200002a8
 8001c60:	200002e8 	.word	0x200002e8
 8001c64:	200002ac 	.word	0x200002ac
 8001c68:	200002e6 	.word	0x200002e6
 8001c6c:	200002d8 	.word	0x200002d8
 8001c70:	200002c0 	.word	0x200002c0

08001c74 <update_parameter_value>:

// Update parameter value
void update_parameter_value(int direction) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
    // Convert the whole value to an integer, treating it as 00.000 (in this case, a 5-digit number)
    int full_value = (int)(param_value * 1000);
 8001c7c:	4b55      	ldr	r3, [pc, #340]	@ (8001dd4 <update_parameter_value+0x160>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4955      	ldr	r1, [pc, #340]	@ (8001dd8 <update_parameter_value+0x164>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ff70 	bl	8000b68 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f932 	bl	8000ef4 <__aeabi_f2iz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	617b      	str	r3, [r7, #20]

    // Determine the position and multiplier
    int multiplier = 1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]

    switch (digit_position) {
 8001c98:	4b50      	ldr	r3, [pc, #320]	@ (8001ddc <update_parameter_value+0x168>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d820      	bhi.n	8001ce2 <update_parameter_value+0x6e>
 8001ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca8 <update_parameter_value+0x34>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cc1 	.word	0x08001cc1
 8001cac:	08001cc9 	.word	0x08001cc9
 8001cb0:	08001dcb 	.word	0x08001dcb
 8001cb4:	08001cd1 	.word	0x08001cd1
 8001cb8:	08001cd7 	.word	0x08001cd7
 8001cbc:	08001cdd 	.word	0x08001cdd
        case 0:
            multiplier = 10000;  // Corresponds to the tens digit of the integer part
 8001cc0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001cc4:	613b      	str	r3, [r7, #16]
            break;
 8001cc6:	e00c      	b.n	8001ce2 <update_parameter_value+0x6e>
        case 1:
            multiplier = 1000;   // Corresponds to the units digit of the integer part
 8001cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ccc:	613b      	str	r3, [r7, #16]
            break;
 8001cce:	e008      	b.n	8001ce2 <update_parameter_value+0x6e>
        case 2:
            // Do nothing as this is the decimal point
            return;
        case 3:
            multiplier = 100;    // Corresponds to the first digit after the decimal point
 8001cd0:	2364      	movs	r3, #100	@ 0x64
 8001cd2:	613b      	str	r3, [r7, #16]
            break;
 8001cd4:	e005      	b.n	8001ce2 <update_parameter_value+0x6e>
        case 4:
            multiplier = 10;     // Corresponds to the second digit after the decimal point
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	613b      	str	r3, [r7, #16]
            break;
 8001cda:	e002      	b.n	8001ce2 <update_parameter_value+0x6e>
        case 5:
            multiplier = 1;      // Corresponds to the third digit after the decimal point
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
            break;
 8001ce0:	bf00      	nop
    }

    // Store the original integer part before updating
    int original_integer_part = full_value / 1000;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8001de0 <update_parameter_value+0x16c>)
 8001ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cea:	1192      	asrs	r2, r2, #6
 8001cec:	17db      	asrs	r3, r3, #31
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	60bb      	str	r3, [r7, #8]

    // Update the selected digit
    full_value += direction * multiplier;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

    // Wrap the relevant digit only
    if (digit_position <= 1) {  // If modifying the integer part
 8001d00:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <update_parameter_value+0x168>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	dc12      	bgt.n	8001d2e <update_parameter_value+0xba>
        if (full_value < 0) {
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da05      	bge.n	8001d1a <update_parameter_value+0xa6>
            full_value += 100000;  // Wrap within the range of 00.000 to 99.999
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f503 33c3 	add.w	r3, r3, #99840	@ 0x18600
 8001d14:	33a0      	adds	r3, #160	@ 0xa0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e02e      	b.n	8001d78 <update_parameter_value+0x104>
        } else if (full_value >= 100000) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	4a31      	ldr	r2, [pc, #196]	@ (8001de4 <update_parameter_value+0x170>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	dd2a      	ble.n	8001d78 <update_parameter_value+0x104>
            full_value -= 100000;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f5a3 33c3 	sub.w	r3, r3, #99840	@ 0x18600
 8001d28:	3ba0      	subs	r3, #160	@ 0xa0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e024      	b.n	8001d78 <update_parameter_value+0x104>
        }
    } else {  // If modifying the fractional part
        int fractional_int = full_value % 1000;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4a2b      	ldr	r2, [pc, #172]	@ (8001de0 <update_parameter_value+0x16c>)
 8001d32:	fb82 1203 	smull	r1, r2, r2, r3
 8001d36:	1191      	asrs	r1, r2, #6
 8001d38:	17da      	asrs	r2, r3, #31
 8001d3a:	1a8a      	subs	r2, r1, r2
 8001d3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d40:	fb01 f202 	mul.w	r2, r1, r2
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
        if (fractional_int < 0) {
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da04      	bge.n	8001d58 <update_parameter_value+0xe4>
            fractional_int += 1000;  // Wrap within the range of 000 to 999
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e007      	b.n	8001d68 <update_parameter_value+0xf4>
        } else if (fractional_int >= 1000) {
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d5e:	db03      	blt.n	8001d68 <update_parameter_value+0xf4>
            fractional_int -= 1000;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d66:	60fb      	str	r3, [r7, #12]
        }
        full_value = (original_integer_part * 1000) + fractional_int;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
    }

    // Convert back to floating-point value
    param_value = full_value / 1000.0;
 8001d78:	6978      	ldr	r0, [r7, #20]
 8001d7a:	f7fe fb43 	bl	8000404 <__aeabi_i2d>
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <update_parameter_value+0x174>)
 8001d84:	f7fe fcd2 	bl	800072c <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fe9a 	bl	8000ac8 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <update_parameter_value+0x160>)
 8001d98:	6013      	str	r3, [r2, #0]

    // Debug: Print the updated param_value
    printf("Updated param_value: %05d.%03d\n\r", full_value / 1000, full_value % 1000);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <update_parameter_value+0x16c>)
 8001d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001da2:	1192      	asrs	r2, r2, #6
 8001da4:	17db      	asrs	r3, r3, #31
 8001da6:	1ad0      	subs	r0, r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	4a0d      	ldr	r2, [pc, #52]	@ (8001de0 <update_parameter_value+0x16c>)
 8001dac:	fb82 1203 	smull	r1, r2, r2, r3
 8001db0:	1191      	asrs	r1, r2, #6
 8001db2:	17da      	asrs	r2, r3, #31
 8001db4:	1a8a      	subs	r2, r1, r2
 8001db6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dba:	fb01 f202 	mul.w	r2, r1, r2
 8001dbe:	1a9a      	subs	r2, r3, r2
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	480a      	ldr	r0, [pc, #40]	@ (8001dec <update_parameter_value+0x178>)
 8001dc4:	f005 fe9e 	bl	8007b04 <iprintf>
 8001dc8:	e000      	b.n	8001dcc <update_parameter_value+0x158>
            return;
 8001dca:	bf00      	nop
}
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200002d4 	.word	0x200002d4
 8001dd8:	447a0000 	.word	0x447a0000
 8001ddc:	200002d8 	.word	0x200002d8
 8001de0:	10624dd3 	.word	0x10624dd3
 8001de4:	0001869f 	.word	0x0001869f
 8001de8:	408f4000 	.word	0x408f4000
 8001dec:	0800b4d4 	.word	0x0800b4d4

08001df0 <put_parameter_limit>:

// Put limit on parameter value
void put_parameter_limit(){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	// RESET the param_value if mode is changed
	if(mode_index_last != mode_index){
 8001df4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f68 <put_parameter_limit+0x178>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b5c      	ldr	r3, [pc, #368]	@ (8001f6c <put_parameter_limit+0x17c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d007      	beq.n	8001e10 <put_parameter_limit+0x20>
		param_value = 0.0;
 8001e00:	4b5b      	ldr	r3, [pc, #364]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
		mode_index_last = mode_index;
 8001e08:	4b58      	ldr	r3, [pc, #352]	@ (8001f6c <put_parameter_limit+0x17c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a56      	ldr	r2, [pc, #344]	@ (8001f68 <put_parameter_limit+0x178>)
 8001e0e:	6013      	str	r3, [r2, #0]
	}

	// check the MIN and MAX value of each mode to set limits on the value.
	if(current_state == 2){
 8001e10:	4b58      	ldr	r3, [pc, #352]	@ (8001f74 <put_parameter_limit+0x184>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	f040 8098 	bne.w	8001f4a <put_parameter_limit+0x15a>
		switch(mode_index) {
 8001e1a:	4b54      	ldr	r3, [pc, #336]	@ (8001f6c <put_parameter_limit+0x17c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	f200 8092 	bhi.w	8001f48 <put_parameter_limit+0x158>
 8001e24:	a201      	add	r2, pc, #4	@ (adr r2, 8001e2c <put_parameter_limit+0x3c>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e3d 	.word	0x08001e3d
 8001e30:	08001e81 	.word	0x08001e81
 8001e34:	08001ebd 	.word	0x08001ebd
 8001e38:	08001f05 	.word	0x08001f05
			case 0:
				if(param_value >= MAX_CC_VALUE){
 8001e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	494d      	ldr	r1, [pc, #308]	@ (8001f78 <put_parameter_limit+0x188>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f842 	bl	8000ecc <__aeabi_fcmpge>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <put_parameter_limit+0x66>
					param_value = MAX_CC_VALUE;
 8001e4e:	4b48      	ldr	r3, [pc, #288]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e50:	4a49      	ldr	r2, [pc, #292]	@ (8001f78 <put_parameter_limit+0x188>)
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e00f      	b.n	8001e76 <put_parameter_limit+0x86>
				}else if(param_value <= MIN_CC_VALUE){
 8001e56:	4b46      	ldr	r3, [pc, #280]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fae4 	bl	8000428 <__aeabi_f2d>
 8001e60:	a33b      	add	r3, pc, #236	@ (adr r3, 8001f50 <put_parameter_limit+0x160>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe fdb3 	bl	80009d0 <__aeabi_dcmple>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <put_parameter_limit+0x86>
					param_value = MIN_CC_VALUE;
 8001e70:	4b3f      	ldr	r3, [pc, #252]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e72:	4a42      	ldr	r2, [pc, #264]	@ (8001f7c <put_parameter_limit+0x18c>)
 8001e74:	601a      	str	r2, [r3, #0]
				}
				param_mode.current = param_value;
 8001e76:	4b3e      	ldr	r3, [pc, #248]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a41      	ldr	r2, [pc, #260]	@ (8001f80 <put_parameter_limit+0x190>)
 8001e7c:	6053      	str	r3, [r2, #4]
				break;
 8001e7e:	e064      	b.n	8001f4a <put_parameter_limit+0x15a>
			case 1:
				if(param_value >= MAX_CV_VALUE){
 8001e80:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	493f      	ldr	r1, [pc, #252]	@ (8001f84 <put_parameter_limit+0x194>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f820 	bl	8000ecc <__aeabi_fcmpge>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <put_parameter_limit+0xaa>
					param_value = MAX_CV_VALUE;
 8001e92:	4b37      	ldr	r3, [pc, #220]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e94:	4a3b      	ldr	r2, [pc, #236]	@ (8001f84 <put_parameter_limit+0x194>)
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e00b      	b.n	8001eb2 <put_parameter_limit+0xc2>
				}else if(param_value <= MIN_CV_VALUE){
 8001e9a:	4b35      	ldr	r3, [pc, #212]	@ (8001f70 <put_parameter_limit+0x180>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	493a      	ldr	r1, [pc, #232]	@ (8001f88 <put_parameter_limit+0x198>)
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f809 	bl	8000eb8 <__aeabi_fcmple>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <put_parameter_limit+0xc2>
					param_value = MIN_CV_VALUE;
 8001eac:	4b30      	ldr	r3, [pc, #192]	@ (8001f70 <put_parameter_limit+0x180>)
 8001eae:	4a36      	ldr	r2, [pc, #216]	@ (8001f88 <put_parameter_limit+0x198>)
 8001eb0:	601a      	str	r2, [r3, #0]
				}
				param_mode.voltage =  param_value;
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f70 <put_parameter_limit+0x180>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a32      	ldr	r2, [pc, #200]	@ (8001f80 <put_parameter_limit+0x190>)
 8001eb8:	6013      	str	r3, [r2, #0]
				break;
 8001eba:	e046      	b.n	8001f4a <put_parameter_limit+0x15a>
			case 2:
				if(param_value >= MAX_CP_VALUE){
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f70 <put_parameter_limit+0x180>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fab1 	bl	8000428 <__aeabi_f2d>
 8001ec6:	a324      	add	r3, pc, #144	@ (adr r3, 8001f58 <put_parameter_limit+0x168>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe fd8a 	bl	80009e4 <__aeabi_dcmpge>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <put_parameter_limit+0xee>
					param_value = MAX_CP_VALUE;
 8001ed6:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <put_parameter_limit+0x180>)
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f8c <put_parameter_limit+0x19c>)
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e00d      	b.n	8001efa <put_parameter_limit+0x10a>
				}else if(param_value <= MIN_CP_VALUE){
 8001ede:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <put_parameter_limit+0x180>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe ffe6 	bl	8000eb8 <__aeabi_fcmple>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <put_parameter_limit+0x10a>
					param_value = MIN_CP_VALUE;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <put_parameter_limit+0x180>)
 8001ef4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ef8:	601a      	str	r2, [r3, #0]
				}
				param_mode.power = param_value;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <put_parameter_limit+0x180>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a20      	ldr	r2, [pc, #128]	@ (8001f80 <put_parameter_limit+0x190>)
 8001f00:	6093      	str	r3, [r2, #8]
				break;
 8001f02:	e022      	b.n	8001f4a <put_parameter_limit+0x15a>
			case 3:
				if(param_value >= MAX_CR_VALUE){
 8001f04:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <put_parameter_limit+0x180>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4921      	ldr	r1, [pc, #132]	@ (8001f90 <put_parameter_limit+0x1a0>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe ffde 	bl	8000ecc <__aeabi_fcmpge>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <put_parameter_limit+0x12e>
					param_value = MAX_CR_VALUE;
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <put_parameter_limit+0x180>)
 8001f18:	4a1d      	ldr	r2, [pc, #116]	@ (8001f90 <put_parameter_limit+0x1a0>)
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e00f      	b.n	8001f3e <put_parameter_limit+0x14e>
				}else if(param_value <= MIN_CR_VALUE){
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <put_parameter_limit+0x180>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fa80 	bl	8000428 <__aeabi_f2d>
 8001f28:	a30d      	add	r3, pc, #52	@ (adr r3, 8001f60 <put_parameter_limit+0x170>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fd4f 	bl	80009d0 <__aeabi_dcmple>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <put_parameter_limit+0x14e>
					param_value = MIN_CR_VALUE;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <put_parameter_limit+0x180>)
 8001f3a:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <put_parameter_limit+0x1a4>)
 8001f3c:	601a      	str	r2, [r3, #0]
				}
				param_mode.resistance = param_value;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <put_parameter_limit+0x180>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <put_parameter_limit+0x190>)
 8001f44:	60d3      	str	r3, [r2, #12]
				break;
 8001f46:	e000      	b.n	8001f4a <put_parameter_limit+0x15a>
			default:
				break;
 8001f48:	bf00      	nop
		}
	}
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f54:	3f50624d 	.word	0x3f50624d
 8001f58:	9db22d0e 	.word	0x9db22d0e
 8001f5c:	4058ffef 	.word	0x4058ffef
 8001f60:	9999999a 	.word	0x9999999a
 8001f64:	3fb99999 	.word	0x3fb99999
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	200002d4 	.word	0x200002d4
 8001f74:	200002ac 	.word	0x200002ac
 8001f78:	40a00000 	.word	0x40a00000
 8001f7c:	3a83126f 	.word	0x3a83126f
 8001f80:	200002b0 	.word	0x200002b0
 8001f84:	41f00000 	.word	0x41f00000
 8001f88:	40400000 	.word	0x40400000
 8001f8c:	42c7ff7d 	.word	0x42c7ff7d
 8001f90:	41200000 	.word	0x41200000
 8001f94:	3dcccccd 	.word	0x3dcccccd

08001f98 <handle_button_press>:



void handle_button_press() {
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
    if (rot_sw_state) {
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <handle_button_press+0xcc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05b      	beq.n	800205c <handle_button_press+0xc4>
    	switch (current_state) {
 8001fa4:	4b30      	ldr	r3, [pc, #192]	@ (8002068 <handle_button_press+0xd0>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d039      	beq.n	8002020 <handle_button_press+0x88>
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	dc4d      	bgt.n	800204c <handle_button_press+0xb4>
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <handle_button_press+0x22>
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d025      	beq.n	8002004 <handle_button_press+0x6c>
					current_state = RETURN_TO_HOME;
					digit_position = 0;
				}
				break;
			default:
				break;
 8001fb8:	e048      	b.n	800204c <handle_button_press+0xb4>
				if (cursor_position == 0) {
 8001fba:	4b2c      	ldr	r3, [pc, #176]	@ (800206c <handle_button_press+0xd4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <handle_button_press+0x32>
					current_state = MODE_SELECTION;			// GoTo MODE SELECTION PAGE
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <handle_button_press+0xd0>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
				break;
 8001fc8:	e042      	b.n	8002050 <handle_button_press+0xb8>
				} else if (cursor_position == 1){
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <handle_button_press+0xd4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d03e      	beq.n	8002050 <handle_button_press+0xb8>
				} else if (cursor_position == 2){			// Reset everything
 8001fd2:	4b26      	ldr	r3, [pc, #152]	@ (800206c <handle_button_press+0xd4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d10e      	bne.n	8001ff8 <handle_button_press+0x60>
					current_state = HOME_SCREEN;			// not necessary to reset current_state
 8001fda:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <handle_button_press+0xd0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
					cursor_position = 0;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <handle_button_press+0xd4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
					mode_index = -1;
 8001fe6:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <handle_button_press+0xd8>)
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	601a      	str	r2, [r3, #0]
					param_value = 0.0;
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <handle_button_press+0xdc>)
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
				break;
 8001ff6:	e02b      	b.n	8002050 <handle_button_press+0xb8>
				} else if (cursor_position == 3){
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <handle_button_press+0xd4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d127      	bne.n	8002050 <handle_button_press+0xb8>
					__NOP();								// TODO
 8002000:	bf00      	nop
				break;
 8002002:	e025      	b.n	8002050 <handle_button_press+0xb8>
				current_state = PARAMETER_SETTING;
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <handle_button_press+0xd0>)
 8002006:	2202      	movs	r2, #2
 8002008:	701a      	strb	r2, [r3, #0]
				mode_index = cursor_position;
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <handle_button_press+0xd4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <handle_button_press+0xd8>)
 8002010:	6013      	str	r3, [r2, #0]
				cursor_position = 0;
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <handle_button_press+0xd4>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
				adjusting_digit = false;
 8002018:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <handle_button_press+0xe0>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
				break;
 800201e:	e01a      	b.n	8002056 <handle_button_press+0xbe>
				if (adjusting_digit) {
 8002020:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <handle_button_press+0xe0>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <handle_button_press+0x98>
					adjusting_digit = false; // Stop adjusting the digit
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <handle_button_press+0xe0>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e002      	b.n	8002036 <handle_button_press+0x9e>
					adjusting_digit = true; // Start adjusting the digit
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <handle_button_press+0xe0>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
				if (digit_position == MAX_DIGITS) {
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <handle_button_press+0xe4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d10a      	bne.n	8002054 <handle_button_press+0xbc>
					current_state = RETURN_TO_HOME;
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <handle_button_press+0xd0>)
 8002040:	2203      	movs	r2, #3
 8002042:	701a      	strb	r2, [r3, #0]
					digit_position = 0;
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <handle_button_press+0xe4>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
				break;
 800204a:	e003      	b.n	8002054 <handle_button_press+0xbc>
				break;
 800204c:	bf00      	nop
 800204e:	e002      	b.n	8002056 <handle_button_press+0xbe>
				break;
 8002050:	bf00      	nop
 8002052:	e000      	b.n	8002056 <handle_button_press+0xbe>
				break;
 8002054:	bf00      	nop
        }
        rot_sw_state = false; // Reset button state
 8002056:	4b03      	ldr	r3, [pc, #12]	@ (8002064 <handle_button_press+0xcc>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
    }
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	200002e2 	.word	0x200002e2
 8002068:	200002ac 	.word	0x200002ac
 800206c:	200002c0 	.word	0x200002c0
 8002070:	20000000 	.word	0x20000000
 8002074:	200002d4 	.word	0x200002d4
 8002078:	200002e6 	.word	0x200002e6
 800207c:	200002d8 	.word	0x200002d8

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <Error_Handler+0x8>

0800208c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af02      	add	r7, sp, #8
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80020a2:	bf00      	nop
 80020a4:	4809      	ldr	r0, [pc, #36]	@ (80020cc <ssd1306_WriteCommand+0x34>)
 80020a6:	f001 ff7b 	bl	8003fa0 <HAL_I2C_GetState>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d1f9      	bne.n	80020a4 <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
 80020b0:	2301      	movs	r3, #1
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	2200      	movs	r2, #0
 80020bc:	2178      	movs	r1, #120	@ 0x78
 80020be:	4803      	ldr	r0, [pc, #12]	@ (80020cc <ssd1306_WriteCommand+0x34>)
 80020c0:	f001 fc70 	bl	80039a4 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
#endif
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000208 	.word	0x20000208

080020d0 <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80020da:	bf00      	nop
 80020dc:	480a      	ldr	r0, [pc, #40]	@ (8002108 <ssd1306_WriteData+0x38>)
 80020de:	f001 ff5f 	bl	8003fa0 <HAL_I2C_GetState>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d1f9      	bne.n	80020dc <ssd1306_WriteData+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2301      	movs	r3, #1
 80020f4:	2240      	movs	r2, #64	@ 0x40
 80020f6:	2178      	movs	r1, #120	@ 0x78
 80020f8:	4803      	ldr	r0, [pc, #12]	@ (8002108 <ssd1306_WriteData+0x38>)
 80020fa:	f001 fc53 	bl	80039a4 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
#endif
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000208 	.word	0x20000208

0800210c <HAL_I2C_MemTxCpltCallback>:


#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002124:	f7ff ffb2 	bl	800208c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002128:	2064      	movs	r0, #100	@ 0x64
 800212a:	f000 fd5b 	bl	8002be4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800212e:	2000      	movs	r0, #0
 8002130:	f000 fa42 	bl	80025b8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002134:	2020      	movs	r0, #32
 8002136:	f7ff ffaf 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff ffac 	bl	8002098 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002140:	20b0      	movs	r0, #176	@ 0xb0
 8002142:	f7ff ffa9 	bl	8002098 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002146:	20c8      	movs	r0, #200	@ 0xc8
 8002148:	f7ff ffa6 	bl	8002098 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff ffa3 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002152:	2010      	movs	r0, #16
 8002154:	f7ff ffa0 	bl	8002098 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002158:	2040      	movs	r0, #64	@ 0x40
 800215a:	f7ff ff9d 	bl	8002098 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800215e:	20ff      	movs	r0, #255	@ 0xff
 8002160:	f000 fa16 	bl	8002590 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002164:	20a1      	movs	r0, #161	@ 0xa1
 8002166:	f7ff ff97 	bl	8002098 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800216a:	20a6      	movs	r0, #166	@ 0xa6
 800216c:	f7ff ff94 	bl	8002098 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002170:	20a8      	movs	r0, #168	@ 0xa8
 8002172:	f7ff ff91 	bl	8002098 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002176:	203f      	movs	r0, #63	@ 0x3f
 8002178:	f7ff ff8e 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800217c:	20a4      	movs	r0, #164	@ 0xa4
 800217e:	f7ff ff8b 	bl	8002098 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002182:	20d3      	movs	r0, #211	@ 0xd3
 8002184:	f7ff ff88 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff ff85 	bl	8002098 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800218e:	20d5      	movs	r0, #213	@ 0xd5
 8002190:	f7ff ff82 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002194:	20f0      	movs	r0, #240	@ 0xf0
 8002196:	f7ff ff7f 	bl	8002098 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800219a:	20d9      	movs	r0, #217	@ 0xd9
 800219c:	f7ff ff7c 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80021a0:	2022      	movs	r0, #34	@ 0x22
 80021a2:	f7ff ff79 	bl	8002098 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80021a6:	20da      	movs	r0, #218	@ 0xda
 80021a8:	f7ff ff76 	bl	8002098 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80021ac:	2012      	movs	r0, #18
 80021ae:	f7ff ff73 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80021b2:	20db      	movs	r0, #219	@ 0xdb
 80021b4:	f7ff ff70 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80021b8:	2020      	movs	r0, #32
 80021ba:	f7ff ff6d 	bl	8002098 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80021be:	208d      	movs	r0, #141	@ 0x8d
 80021c0:	f7ff ff6a 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80021c4:	2014      	movs	r0, #20
 80021c6:	f7ff ff67 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80021ca:	2001      	movs	r0, #1
 80021cc:	f000 f9f4 	bl	80025b8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 f80f 	bl	80021f4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80021d6:	f000 f82f 	bl	8002238 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80021da:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <ssd1306_Init+0xd0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <ssd1306_Init+0xd0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80021e6:	4b02      	ldr	r3, [pc, #8]	@ (80021f0 <ssd1306_Init+0xd0>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	711a      	strb	r2, [r3, #4]
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200006ec 	.word	0x200006ec

080021f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e00d      	b.n	8002220 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <ssd1306_Fill+0x1a>
 800220a:	2100      	movs	r1, #0
 800220c:	e000      	b.n	8002210 <ssd1306_Fill+0x1c>
 800220e:	21ff      	movs	r1, #255	@ 0xff
 8002210:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <ssd1306_Fill+0x40>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4413      	add	r3, r2
 8002216:	460a      	mov	r2, r1
 8002218:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3301      	adds	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002226:	d3ed      	bcc.n	8002204 <ssd1306_Fill+0x10>
    }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	200002ec 	.word	0x200002ec

08002238 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800223e:	2300      	movs	r3, #0
 8002240:	71fb      	strb	r3, [r7, #7]
 8002242:	e016      	b.n	8002272 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	3b50      	subs	r3, #80	@ 0x50
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff24 	bl	8002098 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002250:	2001      	movs	r0, #1
 8002252:	f7ff ff21 	bl	8002098 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002256:	2010      	movs	r0, #16
 8002258:	f7ff ff1e 	bl	8002098 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	01db      	lsls	r3, r3, #7
 8002260:	4a08      	ldr	r2, [pc, #32]	@ (8002284 <ssd1306_UpdateScreen+0x4c>)
 8002262:	4413      	add	r3, r2
 8002264:	2180      	movs	r1, #128	@ 0x80
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff32 	bl	80020d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	3301      	adds	r3, #1
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b07      	cmp	r3, #7
 8002276:	d9e5      	bls.n	8002244 <ssd1306_UpdateScreen+0xc>
    }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200002ec 	.word	0x200002ec

08002288 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
 8002292:	460b      	mov	r3, r1
 8002294:	71bb      	strb	r3, [r7, #6]
 8002296:	4613      	mov	r3, r2
 8002298:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db3d      	blt.n	800231e <ssd1306_DrawPixel+0x96>
 80022a2:	79bb      	ldrb	r3, [r7, #6]
 80022a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80022a6:	d83a      	bhi.n	800231e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80022a8:	797b      	ldrb	r3, [r7, #5]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d11a      	bne.n	80022e4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022ae:	79fa      	ldrb	r2, [r7, #7]
 80022b0:	79bb      	ldrb	r3, [r7, #6]
 80022b2:	08db      	lsrs	r3, r3, #3
 80022b4:	b2d8      	uxtb	r0, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	01db      	lsls	r3, r3, #7
 80022ba:	4413      	add	r3, r2
 80022bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002328 <ssd1306_DrawPixel+0xa0>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	b25a      	sxtb	r2, r3
 80022c2:	79bb      	ldrb	r3, [r7, #6]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b259      	sxtb	r1, r3
 80022d4:	79fa      	ldrb	r2, [r7, #7]
 80022d6:	4603      	mov	r3, r0
 80022d8:	01db      	lsls	r3, r3, #7
 80022da:	4413      	add	r3, r2
 80022dc:	b2c9      	uxtb	r1, r1
 80022de:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <ssd1306_DrawPixel+0xa0>)
 80022e0:	54d1      	strb	r1, [r2, r3]
 80022e2:	e01d      	b.n	8002320 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	79bb      	ldrb	r3, [r7, #6]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	b2d8      	uxtb	r0, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	01db      	lsls	r3, r3, #7
 80022f0:	4413      	add	r3, r2
 80022f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002328 <ssd1306_DrawPixel+0xa0>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	b25a      	sxtb	r2, r3
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	b25b      	sxtb	r3, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	b25b      	sxtb	r3, r3
 800230a:	4013      	ands	r3, r2
 800230c:	b259      	sxtb	r1, r3
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	4603      	mov	r3, r0
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4413      	add	r3, r2
 8002316:	b2c9      	uxtb	r1, r1
 8002318:	4a03      	ldr	r2, [pc, #12]	@ (8002328 <ssd1306_DrawPixel+0xa0>)
 800231a:	54d1      	strb	r1, [r2, r3]
 800231c:	e000      	b.n	8002320 <ssd1306_DrawPixel+0x98>
        return;
 800231e:	bf00      	nop
    }
}
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	200002ec 	.word	0x200002ec

0800232c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b089      	sub	sp, #36	@ 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	4604      	mov	r4, r0
 8002334:	1d38      	adds	r0, r7, #4
 8002336:	e880 0006 	stmia.w	r0, {r1, r2}
 800233a:	461a      	mov	r2, r3
 800233c:	4623      	mov	r3, r4
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	4613      	mov	r3, r2
 8002342:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b1f      	cmp	r3, #31
 8002348:	d902      	bls.n	8002350 <ssd1306_WriteChar+0x24>
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b7e      	cmp	r3, #126	@ 0x7e
 800234e:	d901      	bls.n	8002354 <ssd1306_WriteChar+0x28>
        return 0;
 8002350:	2300      	movs	r3, #0
 8002352:	e06c      	b.n	800242e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002354:	4b38      	ldr	r3, [pc, #224]	@ (8002438 <ssd1306_WriteChar+0x10c>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	793b      	ldrb	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	2b80      	cmp	r3, #128	@ 0x80
 8002360:	dc06      	bgt.n	8002370 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002362:	4b35      	ldr	r3, [pc, #212]	@ (8002438 <ssd1306_WriteChar+0x10c>)
 8002364:	885b      	ldrh	r3, [r3, #2]
 8002366:	461a      	mov	r2, r3
 8002368:	797b      	ldrb	r3, [r7, #5]
 800236a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800236c:	2b40      	cmp	r3, #64	@ 0x40
 800236e:	dd01      	ble.n	8002374 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002370:	2300      	movs	r3, #0
 8002372:	e05c      	b.n	800242e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	e04c      	b.n	8002414 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	3b20      	subs	r3, #32
 8002380:	7979      	ldrb	r1, [r7, #5]
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4619      	mov	r1, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	440b      	add	r3, r1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	e034      	b.n	8002404 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80023aa:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <ssd1306_WriteChar+0x10c>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	b2d8      	uxtb	r0, r3
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <ssd1306_WriteChar+0x10c>)
 80023ba:	885b      	ldrh	r3, [r3, #2]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	7bba      	ldrb	r2, [r7, #14]
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7ff ff5d 	bl	8002288 <ssd1306_DrawPixel>
 80023ce:	e016      	b.n	80023fe <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <ssd1306_WriteChar+0x10c>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4413      	add	r3, r2
 80023dc:	b2d8      	uxtb	r0, r3
 80023de:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <ssd1306_WriteChar+0x10c>)
 80023e0:	885b      	ldrh	r3, [r3, #2]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	b2d9      	uxtb	r1, r3
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	f7ff ff45 	bl	8002288 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	3301      	adds	r3, #1
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	793b      	ldrb	r3, [r7, #4]
 8002406:	461a      	mov	r2, r3
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	4293      	cmp	r3, r2
 800240c:	d3c5      	bcc.n	800239a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	797b      	ldrb	r3, [r7, #5]
 8002416:	461a      	mov	r2, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4293      	cmp	r3, r2
 800241c:	d3ad      	bcc.n	800237a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <ssd1306_WriteChar+0x10c>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	793a      	ldrb	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	b29a      	uxth	r2, r3
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <ssd1306_WriteChar+0x10c>)
 800242a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	@ 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}
 8002436:	bf00      	nop
 8002438:	200006ec 	.word	0x200006ec

0800243c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	1d38      	adds	r0, r7, #4
 8002446:	e880 0006 	stmia.w	r0, {r1, r2}
 800244a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800244c:	e012      	b.n	8002474 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	7818      	ldrb	r0, [r3, #0]
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	1d3a      	adds	r2, r7, #4
 8002456:	ca06      	ldmia	r2, {r1, r2}
 8002458:	f7ff ff68 	bl	800232c <ssd1306_WriteChar>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d002      	beq.n	800246e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	e008      	b.n	8002480 <ssd1306_WriteString+0x44>
        }
        str++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3301      	adds	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e8      	bne.n	800244e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	781b      	ldrb	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	460a      	mov	r2, r1
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	4613      	mov	r3, r2
 8002496:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	b29a      	uxth	r2, r3
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <ssd1306_SetCursor+0x2c>)
 800249e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80024a0:	79bb      	ldrb	r3, [r7, #6]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <ssd1306_SetCursor+0x2c>)
 80024a6:	805a      	strh	r2, [r3, #2]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200006ec 	.word	0x200006ec

080024b8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b089      	sub	sp, #36	@ 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4604      	mov	r4, r0
 80024c0:	4608      	mov	r0, r1
 80024c2:	4611      	mov	r1, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	4623      	mov	r3, r4
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	4603      	mov	r3, r0
 80024cc:	71bb      	strb	r3, [r7, #6]
 80024ce:	460b      	mov	r3, r1
 80024d0:	717b      	strb	r3, [r7, #5]
 80024d2:	4613      	mov	r3, r2
 80024d4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80024d6:	797a      	ldrb	r2, [r7, #5]
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bfb8      	it	lt
 80024e0:	425b      	neglt	r3, r3
 80024e2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80024e4:	793a      	ldrb	r2, [r7, #4]
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bfb8      	it	lt
 80024ee:	425b      	neglt	r3, r3
 80024f0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80024f2:	79fa      	ldrb	r2, [r7, #7]
 80024f4:	797b      	ldrb	r3, [r7, #5]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d201      	bcs.n	80024fe <ssd1306_Line+0x46>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e001      	b.n	8002502 <ssd1306_Line+0x4a>
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002504:	79ba      	ldrb	r2, [r7, #6]
 8002506:	793b      	ldrb	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	d201      	bcs.n	8002510 <ssd1306_Line+0x58>
 800250c:	2301      	movs	r3, #1
 800250e:	e001      	b.n	8002514 <ssd1306_Line+0x5c>
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800251e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002522:	7939      	ldrb	r1, [r7, #4]
 8002524:	797b      	ldrb	r3, [r7, #5]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff feae 	bl	8002288 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800252c:	e024      	b.n	8002578 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800252e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002532:	79b9      	ldrb	r1, [r7, #6]
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fea6 	bl	8002288 <ssd1306_DrawPixel>
        error2 = error * 2;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	425b      	negs	r3, r3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	dd08      	ble.n	800255e <ssd1306_Line+0xa6>
            error -= deltaY;
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	4413      	add	r3, r2
 800255c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	429a      	cmp	r2, r3
 8002564:	da08      	bge.n	8002578 <ssd1306_Line+0xc0>
            error += deltaX;
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4413      	add	r3, r2
 800256c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	79bb      	ldrb	r3, [r7, #6]
 8002574:	4413      	add	r3, r2
 8002576:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	797b      	ldrb	r3, [r7, #5]
 800257c:	429a      	cmp	r2, r3
 800257e:	d1d6      	bne.n	800252e <ssd1306_Line+0x76>
 8002580:	79ba      	ldrb	r2, [r7, #6]
 8002582:	793b      	ldrb	r3, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d1d2      	bne.n	800252e <ssd1306_Line+0x76>
        }
    }
    return;
 8002588:	bf00      	nop
}
 800258a:	3724      	adds	r7, #36	@ 0x24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}

08002590 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800259a:	2381      	movs	r3, #129	@ 0x81
 800259c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fd79 	bl	8002098 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fd75 	bl	8002098 <ssd1306_WriteCommand>
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80025c8:	23af      	movs	r3, #175	@ 0xaf
 80025ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <ssd1306_SetDisplayOn+0x38>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	715a      	strb	r2, [r3, #5]
 80025d2:	e004      	b.n	80025de <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80025d4:	23ae      	movs	r3, #174	@ 0xae
 80025d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <ssd1306_SetDisplayOn+0x38>)
 80025da:	2200      	movs	r2, #0
 80025dc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fd59 	bl	8002098 <ssd1306_WriteCommand>
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200006ec 	.word	0x200006ec

080025f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <HAL_MspInit+0x5c>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	4a14      	ldr	r2, [pc, #80]	@ (8002650 <HAL_MspInit+0x5c>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6193      	str	r3, [r2, #24]
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_MspInit+0x5c>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_MspInit+0x5c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a0e      	ldr	r2, [pc, #56]	@ (8002650 <HAL_MspInit+0x5c>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261c:	61d3      	str	r3, [r2, #28]
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <HAL_MspInit+0x5c>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <HAL_MspInit+0x60>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	4a04      	ldr	r2, [pc, #16]	@ (8002654 <HAL_MspInit+0x60>)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40021000 	.word	0x40021000
 8002654:	40010000 	.word	0x40010000

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <NMI_Handler+0x4>

08002660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <MemManage_Handler+0x4>

08002670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <BusFault_Handler+0x4>

08002678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <UsageFault_Handler+0x4>

08002680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a8:	f000 fa80 	bl	8002bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_SW_Pin);
 80026b4:	2001      	movs	r0, #1
 80026b6:	f001 f805 	bl	80036c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}

080026be <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_SW_Pin);
 80026c2:	2002      	movs	r0, #2
 80026c4:	f000 fffe 	bl	80036c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_SW_Pin);
 80026d0:	2010      	movs	r0, #16
 80026d2:	f000 fff7 	bl	80036c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <DMA1_Channel6_IRQHandler+0x10>)
 80026e2:	f000 fce3 	bl	80030ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000025c 	.word	0x2000025c

080026f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_SW_Pin);
 80026f4:	2020      	movs	r0, #32
 80026f6:	f000 ffe5 	bl	80036c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002704:	4802      	ldr	r0, [pc, #8]	@ (8002710 <TIM3_IRQHandler+0x10>)
 8002706:	f003 fedd 	bl	80064c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200006f8 	.word	0x200006f8

08002714 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002718:	4802      	ldr	r0, [pc, #8]	@ (8002724 <I2C1_EV_IRQHandler+0x10>)
 800271a:	f001 fa99 	bl	8003c50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000208 	.word	0x20000208

08002728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return 1;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <_kill>:

int _kill(int pid, int sig)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002740:	f005 fac2 	bl	8007cc8 <__errno>
 8002744:	4603      	mov	r3, r0
 8002746:	2216      	movs	r2, #22
 8002748:	601a      	str	r2, [r3, #0]
  return -1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_exit>:

void _exit (int status)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800275e:	f04f 31ff 	mov.w	r1, #4294967295
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffe7 	bl	8002736 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <_exit+0x12>

0800276c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e00a      	b.n	8002794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800277e:	f3af 8000 	nop.w
 8002782:	4601      	mov	r1, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbf0      	blt.n	800277e <_read+0x12>
  }

  return len;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e009      	b.n	80027cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fd37 	bl	8001234 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf1      	blt.n	80027b8 <_write+0x12>
  }
  return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_close>:

int _close(int file)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002804:	605a      	str	r2, [r3, #4]
  return 0;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <_isatty>:

int _isatty(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
	...

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002870:	f005 fa2a 	bl	8007cc8 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20005000 	.word	0x20005000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	200006f4 	.word	0x200006f4
 80028a8:	200008d8 	.word	0x200008d8

080028ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	@ 0x30
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	2224      	movs	r2, #36	@ 0x24
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f005 f9ab 	bl	8007c22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028d4:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <MX_TIM3_Init+0xa0>)
 80028d6:	4a21      	ldr	r2, [pc, #132]	@ (800295c <MX_TIM3_Init+0xa4>)
 80028d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028da:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <MX_TIM3_Init+0xa0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <MX_TIM3_Init+0xa0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80028e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002958 <MX_TIM3_Init+0xa0>)
 80028e8:	2263      	movs	r2, #99	@ 0x63
 80028ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <MX_TIM3_Init+0xa0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f2:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <MX_TIM3_Init+0xa0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028f8:	2303      	movs	r3, #3
 80028fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002900:	2301      	movs	r3, #1
 8002902:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002908:	230a      	movs	r3, #10
 800290a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800290c:	2300      	movs	r3, #0
 800290e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002910:	2301      	movs	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002914:	2300      	movs	r3, #0
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	4619      	mov	r1, r3
 8002922:	480d      	ldr	r0, [pc, #52]	@ (8002958 <MX_TIM3_Init+0xa0>)
 8002924:	f003 fc7e 	bl	8006224 <HAL_TIM_Encoder_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800292e:	f7ff fba7 	bl	8002080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4806      	ldr	r0, [pc, #24]	@ (8002958 <MX_TIM3_Init+0xa0>)
 8002940:	f003 ff72 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800294a:	f7ff fb99 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	3730      	adds	r7, #48	@ 0x30
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200006f8 	.word	0x200006f8
 800295c:	40000400 	.word	0x40000400

08002960 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a19      	ldr	r2, [pc, #100]	@ (80029e0 <HAL_TIM_Encoder_MspInit+0x80>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d12b      	bne.n	80029d8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002980:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	4a17      	ldr	r2, [pc, #92]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	61d3      	str	r3, [r2, #28]
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x84>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x84>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4a11      	ldr	r2, [pc, #68]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x84>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6193      	str	r3, [r2, #24]
 80029a4:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <HAL_TIM_Encoder_MspInit+0x84>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ROT_A_Pin|ROT_B_Pin;
 80029b0:	23c0      	movs	r3, #192	@ 0xc0
 80029b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	4619      	mov	r1, r3
 80029c2:	4809      	ldr	r0, [pc, #36]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x88>)
 80029c4:	f000 fcb2 	bl	800332c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	201d      	movs	r0, #29
 80029ce:	f000 fa04 	bl	8002dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029d2:	201d      	movs	r0, #29
 80029d4:	f000 fa1d 	bl	8002e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010800 	.word	0x40010800

080029ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <MX_USART2_UART_Init+0x50>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 80029f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80029fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a22:	4805      	ldr	r0, [pc, #20]	@ (8002a38 <MX_USART2_UART_Init+0x4c>)
 8002a24:	f003 ff70 	bl	8006908 <HAL_UART_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a2e:	f7ff fb27 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000740 	.word	0x20000740
 8002a3c:	40004400 	.word	0x40004400

08002a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d12f      	bne.n	8002ac0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a60:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <HAL_UART_MspInit+0x8c>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	4a19      	ldr	r2, [pc, #100]	@ (8002acc <HAL_UART_MspInit+0x8c>)
 8002a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6a:	61d3      	str	r3, [r2, #28]
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <HAL_UART_MspInit+0x8c>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a78:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <HAL_UART_MspInit+0x8c>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a13      	ldr	r2, [pc, #76]	@ (8002acc <HAL_UART_MspInit+0x8c>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <HAL_UART_MspInit+0x8c>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a90:	2304      	movs	r3, #4
 8002a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480b      	ldr	r0, [pc, #44]	@ (8002ad0 <HAL_UART_MspInit+0x90>)
 8002aa4:	f000 fc42 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4805      	ldr	r0, [pc, #20]	@ (8002ad0 <HAL_UART_MspInit+0x90>)
 8002abc:	f000 fc36 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40004400 	.word	0x40004400
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40010800 	.word	0x40010800

08002ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ad4:	f7ff feea 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad8:	480b      	ldr	r0, [pc, #44]	@ (8002b08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ada:	490c      	ldr	r1, [pc, #48]	@ (8002b0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002adc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a09      	ldr	r2, [pc, #36]	@ (8002b14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002af0:	4c09      	ldr	r4, [pc, #36]	@ (8002b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002afe:	f005 f8e9 	bl	8007cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b02:	f7fe fba9 	bl	8001258 <main>
  bx lr
 8002b06:	4770      	bx	lr
  ldr r0, =_sdata
 8002b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b0c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002b10:	0800c0d0 	.word	0x0800c0d0
  ldr r2, =_sbss
 8002b14:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002b18:	200008d8 	.word	0x200008d8

08002b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b1c:	e7fe      	b.n	8002b1c <ADC1_2_IRQHandler>
	...

08002b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b24:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <HAL_Init+0x28>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <HAL_Init+0x28>)
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 f947 	bl	8002dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b36:	200f      	movs	r0, #15
 8002b38:	f000 f808 	bl	8002b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3c:	f7ff fd5a 	bl	80025f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40022000 	.word	0x40022000

08002b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <HAL_InitTick+0x54>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <HAL_InitTick+0x58>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f95f 	bl	8002e2e <HAL_SYSTICK_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00e      	b.n	8002b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b0f      	cmp	r3, #15
 8002b7e:	d80a      	bhi.n	8002b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b80:	2200      	movs	r2, #0
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	f000 f927 	bl	8002dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ba8 <HAL_InitTick+0x5c>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000018 	.word	0x20000018
 8002ba4:	20000020 	.word	0x20000020
 8002ba8:	2000001c 	.word	0x2000001c

08002bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_IncTick+0x1c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <HAL_IncTick+0x20>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	4a03      	ldr	r2, [pc, #12]	@ (8002bcc <HAL_IncTick+0x20>)
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000020 	.word	0x20000020
 8002bcc:	20000788 	.word	0x20000788

08002bd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd4:	4b02      	ldr	r3, [pc, #8]	@ (8002be0 <HAL_GetTick+0x10>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	20000788 	.word	0x20000788

08002be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff fff0 	bl	8002bd0 <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d005      	beq.n	8002c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <HAL_Delay+0x44>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0a:	bf00      	nop
 8002c0c:	f7ff ffe0 	bl	8002bd0 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d8f7      	bhi.n	8002c0c <HAL_Delay+0x28>
  {
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000020 	.word	0x20000020

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4906      	ldr	r1, [pc, #24]	@ (8002cc4 <__NVIC_EnableIRQ+0x34>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	@ (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	@ (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d90:	d301      	bcc.n	8002d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00f      	b.n	8002db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <SysTick_Config+0x40>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9e:	210f      	movs	r1, #15
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295
 8002da4:	f7ff ff90 	bl	8002cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <SysTick_Config+0x40>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dae:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <SysTick_Config+0x40>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	e000e010 	.word	0xe000e010

08002dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff2d 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dec:	f7ff ff42 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f7ff ff90 	bl	8002d1c <NVIC_EncodePriority>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff5f 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff35 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffa2 	bl	8002d80 <SysTick_Config>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e043      	b.n	8002ee6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <HAL_DMA_Init+0xa8>)
 8002e66:	4413      	add	r3, r2
 8002e68:	4a22      	ldr	r2, [pc, #136]	@ (8002ef4 <HAL_DMA_Init+0xac>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	009a      	lsls	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef8 <HAL_DMA_Init+0xb0>)
 8002e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e92:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	bffdfff8 	.word	0xbffdfff8
 8002ef4:	cccccccd 	.word	0xcccccccd
 8002ef8:	40020000 	.word	0x40020000

08002efc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_DMA_Start_IT+0x20>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e04b      	b.n	8002fb4 <HAL_DMA_Start_IT+0xb8>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d13a      	bne.n	8002fa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f9bc 	bl	80032d2 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 020e 	orr.w	r2, r2, #14
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e00f      	b.n	8002f94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0204 	bic.w	r2, r2, #4
 8002f82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 020a 	orr.w	r2, r2, #10
 8002f92:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e005      	b.n	8002fb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d005      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	e051      	b.n	8003084 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 020e 	bic.w	r2, r2, #14
 8002fee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	@ (8003090 <HAL_DMA_Abort_IT+0xd4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d029      	beq.n	800305e <HAL_DMA_Abort_IT+0xa2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a21      	ldr	r2, [pc, #132]	@ (8003094 <HAL_DMA_Abort_IT+0xd8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d022      	beq.n	800305a <HAL_DMA_Abort_IT+0x9e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1f      	ldr	r2, [pc, #124]	@ (8003098 <HAL_DMA_Abort_IT+0xdc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01a      	beq.n	8003054 <HAL_DMA_Abort_IT+0x98>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1e      	ldr	r2, [pc, #120]	@ (800309c <HAL_DMA_Abort_IT+0xe0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d012      	beq.n	800304e <HAL_DMA_Abort_IT+0x92>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1c      	ldr	r2, [pc, #112]	@ (80030a0 <HAL_DMA_Abort_IT+0xe4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00a      	beq.n	8003048 <HAL_DMA_Abort_IT+0x8c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1b      	ldr	r2, [pc, #108]	@ (80030a4 <HAL_DMA_Abort_IT+0xe8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d102      	bne.n	8003042 <HAL_DMA_Abort_IT+0x86>
 800303c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003040:	e00e      	b.n	8003060 <HAL_DMA_Abort_IT+0xa4>
 8003042:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003046:	e00b      	b.n	8003060 <HAL_DMA_Abort_IT+0xa4>
 8003048:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800304c:	e008      	b.n	8003060 <HAL_DMA_Abort_IT+0xa4>
 800304e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003052:	e005      	b.n	8003060 <HAL_DMA_Abort_IT+0xa4>
 8003054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003058:	e002      	b.n	8003060 <HAL_DMA_Abort_IT+0xa4>
 800305a:	2310      	movs	r3, #16
 800305c:	e000      	b.n	8003060 <HAL_DMA_Abort_IT+0xa4>
 800305e:	2301      	movs	r3, #1
 8003060:	4a11      	ldr	r2, [pc, #68]	@ (80030a8 <HAL_DMA_Abort_IT+0xec>)
 8003062:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
    } 
  }
  return status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40020008 	.word	0x40020008
 8003094:	4002001c 	.word	0x4002001c
 8003098:	40020030 	.word	0x40020030
 800309c:	40020044 	.word	0x40020044
 80030a0:	40020058 	.word	0x40020058
 80030a4:	4002006c 	.word	0x4002006c
 80030a8:	40020000 	.word	0x40020000

080030ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	2204      	movs	r2, #4
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d04f      	beq.n	8003174 <HAL_DMA_IRQHandler+0xc8>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d04a      	beq.n	8003174 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0204 	bic.w	r2, r2, #4
 80030fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a66      	ldr	r2, [pc, #408]	@ (800329c <HAL_DMA_IRQHandler+0x1f0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d029      	beq.n	800315a <HAL_DMA_IRQHandler+0xae>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a65      	ldr	r2, [pc, #404]	@ (80032a0 <HAL_DMA_IRQHandler+0x1f4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d022      	beq.n	8003156 <HAL_DMA_IRQHandler+0xaa>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a63      	ldr	r2, [pc, #396]	@ (80032a4 <HAL_DMA_IRQHandler+0x1f8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01a      	beq.n	8003150 <HAL_DMA_IRQHandler+0xa4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a62      	ldr	r2, [pc, #392]	@ (80032a8 <HAL_DMA_IRQHandler+0x1fc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d012      	beq.n	800314a <HAL_DMA_IRQHandler+0x9e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a60      	ldr	r2, [pc, #384]	@ (80032ac <HAL_DMA_IRQHandler+0x200>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00a      	beq.n	8003144 <HAL_DMA_IRQHandler+0x98>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a5f      	ldr	r2, [pc, #380]	@ (80032b0 <HAL_DMA_IRQHandler+0x204>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d102      	bne.n	800313e <HAL_DMA_IRQHandler+0x92>
 8003138:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800313c:	e00e      	b.n	800315c <HAL_DMA_IRQHandler+0xb0>
 800313e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003142:	e00b      	b.n	800315c <HAL_DMA_IRQHandler+0xb0>
 8003144:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003148:	e008      	b.n	800315c <HAL_DMA_IRQHandler+0xb0>
 800314a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800314e:	e005      	b.n	800315c <HAL_DMA_IRQHandler+0xb0>
 8003150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003154:	e002      	b.n	800315c <HAL_DMA_IRQHandler+0xb0>
 8003156:	2340      	movs	r3, #64	@ 0x40
 8003158:	e000      	b.n	800315c <HAL_DMA_IRQHandler+0xb0>
 800315a:	2304      	movs	r3, #4
 800315c:	4a55      	ldr	r2, [pc, #340]	@ (80032b4 <HAL_DMA_IRQHandler+0x208>)
 800315e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8094 	beq.w	8003292 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003172:	e08e      	b.n	8003292 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	2202      	movs	r2, #2
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d056      	beq.n	8003232 <HAL_DMA_IRQHandler+0x186>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d051      	beq.n	8003232 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10b      	bne.n	80031b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 020a 	bic.w	r2, r2, #10
 80031aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a38      	ldr	r2, [pc, #224]	@ (800329c <HAL_DMA_IRQHandler+0x1f0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d029      	beq.n	8003212 <HAL_DMA_IRQHandler+0x166>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a37      	ldr	r2, [pc, #220]	@ (80032a0 <HAL_DMA_IRQHandler+0x1f4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_DMA_IRQHandler+0x162>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <HAL_DMA_IRQHandler+0x1f8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01a      	beq.n	8003208 <HAL_DMA_IRQHandler+0x15c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a34      	ldr	r2, [pc, #208]	@ (80032a8 <HAL_DMA_IRQHandler+0x1fc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d012      	beq.n	8003202 <HAL_DMA_IRQHandler+0x156>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a32      	ldr	r2, [pc, #200]	@ (80032ac <HAL_DMA_IRQHandler+0x200>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00a      	beq.n	80031fc <HAL_DMA_IRQHandler+0x150>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a31      	ldr	r2, [pc, #196]	@ (80032b0 <HAL_DMA_IRQHandler+0x204>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d102      	bne.n	80031f6 <HAL_DMA_IRQHandler+0x14a>
 80031f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80031f4:	e00e      	b.n	8003214 <HAL_DMA_IRQHandler+0x168>
 80031f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031fa:	e00b      	b.n	8003214 <HAL_DMA_IRQHandler+0x168>
 80031fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003200:	e008      	b.n	8003214 <HAL_DMA_IRQHandler+0x168>
 8003202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003206:	e005      	b.n	8003214 <HAL_DMA_IRQHandler+0x168>
 8003208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800320c:	e002      	b.n	8003214 <HAL_DMA_IRQHandler+0x168>
 800320e:	2320      	movs	r3, #32
 8003210:	e000      	b.n	8003214 <HAL_DMA_IRQHandler+0x168>
 8003212:	2302      	movs	r3, #2
 8003214:	4a27      	ldr	r2, [pc, #156]	@ (80032b4 <HAL_DMA_IRQHandler+0x208>)
 8003216:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d034      	beq.n	8003292 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003230:	e02f      	b.n	8003292 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2208      	movs	r2, #8
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d028      	beq.n	8003294 <HAL_DMA_IRQHandler+0x1e8>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d023      	beq.n	8003294 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020e 	bic.w	r2, r2, #14
 800325a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
    }
  }
  return;
 8003292:	bf00      	nop
 8003294:	bf00      	nop
}
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40020008 	.word	0x40020008
 80032a0:	4002001c 	.word	0x4002001c
 80032a4:	40020030 	.word	0x40020030
 80032a8:	40020044 	.word	0x40020044
 80032ac:	40020058 	.word	0x40020058
 80032b0:	4002006c 	.word	0x4002006c
 80032b4:	40020000 	.word	0x40020000

080032b8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032c6:	b2db      	uxtb	r3, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d108      	bne.n	8003312 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003310:	e007      	b.n	8003322 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	60da      	str	r2, [r3, #12]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800332c:	b480      	push	{r7}
 800332e:	b08b      	sub	sp, #44	@ 0x2c
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333e:	e169      	b.n	8003614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003340:	2201      	movs	r2, #1
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	429a      	cmp	r2, r3
 800335a:	f040 8158 	bne.w	800360e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a9a      	ldr	r2, [pc, #616]	@ (80035cc <HAL_GPIO_Init+0x2a0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d05e      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 8003368:	4a98      	ldr	r2, [pc, #608]	@ (80035cc <HAL_GPIO_Init+0x2a0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d875      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 800336e:	4a98      	ldr	r2, [pc, #608]	@ (80035d0 <HAL_GPIO_Init+0x2a4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d058      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 8003374:	4a96      	ldr	r2, [pc, #600]	@ (80035d0 <HAL_GPIO_Init+0x2a4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d86f      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 800337a:	4a96      	ldr	r2, [pc, #600]	@ (80035d4 <HAL_GPIO_Init+0x2a8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d052      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 8003380:	4a94      	ldr	r2, [pc, #592]	@ (80035d4 <HAL_GPIO_Init+0x2a8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d869      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 8003386:	4a94      	ldr	r2, [pc, #592]	@ (80035d8 <HAL_GPIO_Init+0x2ac>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d04c      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 800338c:	4a92      	ldr	r2, [pc, #584]	@ (80035d8 <HAL_GPIO_Init+0x2ac>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d863      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 8003392:	4a92      	ldr	r2, [pc, #584]	@ (80035dc <HAL_GPIO_Init+0x2b0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d046      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 8003398:	4a90      	ldr	r2, [pc, #576]	@ (80035dc <HAL_GPIO_Init+0x2b0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d85d      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 800339e:	2b12      	cmp	r3, #18
 80033a0:	d82a      	bhi.n	80033f8 <HAL_GPIO_Init+0xcc>
 80033a2:	2b12      	cmp	r3, #18
 80033a4:	d859      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 80033a6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <HAL_GPIO_Init+0x80>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	08003427 	.word	0x08003427
 80033b0:	08003401 	.word	0x08003401
 80033b4:	08003413 	.word	0x08003413
 80033b8:	08003455 	.word	0x08003455
 80033bc:	0800345b 	.word	0x0800345b
 80033c0:	0800345b 	.word	0x0800345b
 80033c4:	0800345b 	.word	0x0800345b
 80033c8:	0800345b 	.word	0x0800345b
 80033cc:	0800345b 	.word	0x0800345b
 80033d0:	0800345b 	.word	0x0800345b
 80033d4:	0800345b 	.word	0x0800345b
 80033d8:	0800345b 	.word	0x0800345b
 80033dc:	0800345b 	.word	0x0800345b
 80033e0:	0800345b 	.word	0x0800345b
 80033e4:	0800345b 	.word	0x0800345b
 80033e8:	0800345b 	.word	0x0800345b
 80033ec:	0800345b 	.word	0x0800345b
 80033f0:	08003409 	.word	0x08003409
 80033f4:	0800341d 	.word	0x0800341d
 80033f8:	4a79      	ldr	r2, [pc, #484]	@ (80035e0 <HAL_GPIO_Init+0x2b4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033fe:	e02c      	b.n	800345a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	623b      	str	r3, [r7, #32]
          break;
 8003406:	e029      	b.n	800345c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	3304      	adds	r3, #4
 800340e:	623b      	str	r3, [r7, #32]
          break;
 8003410:	e024      	b.n	800345c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	3308      	adds	r3, #8
 8003418:	623b      	str	r3, [r7, #32]
          break;
 800341a:	e01f      	b.n	800345c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	330c      	adds	r3, #12
 8003422:	623b      	str	r3, [r7, #32]
          break;
 8003424:	e01a      	b.n	800345c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800342e:	2304      	movs	r3, #4
 8003430:	623b      	str	r3, [r7, #32]
          break;
 8003432:	e013      	b.n	800345c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800343c:	2308      	movs	r3, #8
 800343e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	611a      	str	r2, [r3, #16]
          break;
 8003446:	e009      	b.n	800345c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003448:	2308      	movs	r3, #8
 800344a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	615a      	str	r2, [r3, #20]
          break;
 8003452:	e003      	b.n	800345c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
          break;
 8003458:	e000      	b.n	800345c <HAL_GPIO_Init+0x130>
          break;
 800345a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2bff      	cmp	r3, #255	@ 0xff
 8003460:	d801      	bhi.n	8003466 <HAL_GPIO_Init+0x13a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	e001      	b.n	800346a <HAL_GPIO_Init+0x13e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2bff      	cmp	r3, #255	@ 0xff
 8003470:	d802      	bhi.n	8003478 <HAL_GPIO_Init+0x14c>
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	e002      	b.n	800347e <HAL_GPIO_Init+0x152>
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	3b08      	subs	r3, #8
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	210f      	movs	r1, #15
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	431a      	orrs	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80b1 	beq.w	800360e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034ac:	4b4d      	ldr	r3, [pc, #308]	@ (80035e4 <HAL_GPIO_Init+0x2b8>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	4a4c      	ldr	r2, [pc, #304]	@ (80035e4 <HAL_GPIO_Init+0x2b8>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6193      	str	r3, [r2, #24]
 80034b8:	4b4a      	ldr	r3, [pc, #296]	@ (80035e4 <HAL_GPIO_Init+0x2b8>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034c4:	4a48      	ldr	r2, [pc, #288]	@ (80035e8 <HAL_GPIO_Init+0x2bc>)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a40      	ldr	r2, [pc, #256]	@ (80035ec <HAL_GPIO_Init+0x2c0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_GPIO_Init+0x1ec>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3f      	ldr	r2, [pc, #252]	@ (80035f0 <HAL_GPIO_Init+0x2c4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00d      	beq.n	8003514 <HAL_GPIO_Init+0x1e8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3e      	ldr	r2, [pc, #248]	@ (80035f4 <HAL_GPIO_Init+0x2c8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <HAL_GPIO_Init+0x1e4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3d      	ldr	r2, [pc, #244]	@ (80035f8 <HAL_GPIO_Init+0x2cc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_GPIO_Init+0x1e0>
 8003508:	2303      	movs	r3, #3
 800350a:	e006      	b.n	800351a <HAL_GPIO_Init+0x1ee>
 800350c:	2304      	movs	r3, #4
 800350e:	e004      	b.n	800351a <HAL_GPIO_Init+0x1ee>
 8003510:	2302      	movs	r3, #2
 8003512:	e002      	b.n	800351a <HAL_GPIO_Init+0x1ee>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_GPIO_Init+0x1ee>
 8003518:	2300      	movs	r3, #0
 800351a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351c:	f002 0203 	and.w	r2, r2, #3
 8003520:	0092      	lsls	r2, r2, #2
 8003522:	4093      	lsls	r3, r2
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800352a:	492f      	ldr	r1, [pc, #188]	@ (80035e8 <HAL_GPIO_Init+0x2bc>)
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003544:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	492c      	ldr	r1, [pc, #176]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]
 8003550:	e006      	b.n	8003560 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003552:	4b2a      	ldr	r3, [pc, #168]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	43db      	mvns	r3, r3
 800355a:	4928      	ldr	r1, [pc, #160]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 800355c:	4013      	ands	r3, r2
 800355e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800356c:	4b23      	ldr	r3, [pc, #140]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	4922      	ldr	r1, [pc, #136]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	60cb      	str	r3, [r1, #12]
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800357a:	4b20      	ldr	r3, [pc, #128]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	43db      	mvns	r3, r3
 8003582:	491e      	ldr	r1, [pc, #120]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 8003584:	4013      	ands	r3, r2
 8003586:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003594:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4918      	ldr	r1, [pc, #96]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035a2:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	4914      	ldr	r1, [pc, #80]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d021      	beq.n	8003600 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035bc:	4b0f      	ldr	r3, [pc, #60]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	490e      	ldr	r1, [pc, #56]	@ (80035fc <HAL_GPIO_Init+0x2d0>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
 80035c8:	e021      	b.n	800360e <HAL_GPIO_Init+0x2e2>
 80035ca:	bf00      	nop
 80035cc:	10320000 	.word	0x10320000
 80035d0:	10310000 	.word	0x10310000
 80035d4:	10220000 	.word	0x10220000
 80035d8:	10210000 	.word	0x10210000
 80035dc:	10120000 	.word	0x10120000
 80035e0:	10110000 	.word	0x10110000
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40010800 	.word	0x40010800
 80035f0:	40010c00 	.word	0x40010c00
 80035f4:	40011000 	.word	0x40011000
 80035f8:	40011400 	.word	0x40011400
 80035fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_GPIO_Init+0x304>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	43db      	mvns	r3, r3
 8003608:	4909      	ldr	r1, [pc, #36]	@ (8003630 <HAL_GPIO_Init+0x304>)
 800360a:	4013      	ands	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	fa22 f303 	lsr.w	r3, r2, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	f47f ae8e 	bne.w	8003340 <HAL_GPIO_Init+0x14>
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	372c      	adds	r7, #44	@ 0x2c
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	887b      	ldrh	r3, [r7, #2]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e001      	b.n	8003656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	807b      	strh	r3, [r7, #2]
 800366e:	4613      	mov	r3, r2
 8003670:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003672:	787b      	ldrb	r3, [r7, #1]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800367e:	e003      	b.n	8003688 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	041a      	lsls	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	611a      	str	r2, [r3, #16]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	041a      	lsls	r2, r3, #16
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43d9      	mvns	r1, r3
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	400b      	ands	r3, r1
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036ce:	4b08      	ldr	r3, [pc, #32]	@ (80036f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036da:	4a05      	ldr	r2, [pc, #20]	@ (80036f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd fe82 	bl	80013ec <HAL_GPIO_EXTI_Callback>
  }
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40010400 	.word	0x40010400

080036f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e12b      	b.n	800395e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd fd1a 	bl	8001154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	@ 0x24
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003758:	f002 fd1e 	bl	8006198 <HAL_RCC_GetPCLK1Freq>
 800375c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4a81      	ldr	r2, [pc, #516]	@ (8003968 <HAL_I2C_Init+0x274>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d807      	bhi.n	8003778 <HAL_I2C_Init+0x84>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a80      	ldr	r2, [pc, #512]	@ (800396c <HAL_I2C_Init+0x278>)
 800376c:	4293      	cmp	r3, r2
 800376e:	bf94      	ite	ls
 8003770:	2301      	movls	r3, #1
 8003772:	2300      	movhi	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e006      	b.n	8003786 <HAL_I2C_Init+0x92>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a7d      	ldr	r2, [pc, #500]	@ (8003970 <HAL_I2C_Init+0x27c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	bf94      	ite	ls
 8003780:	2301      	movls	r3, #1
 8003782:	2300      	movhi	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0e7      	b.n	800395e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a78      	ldr	r2, [pc, #480]	@ (8003974 <HAL_I2C_Init+0x280>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0c9b      	lsrs	r3, r3, #18
 8003798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003968 <HAL_I2C_Init+0x274>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d802      	bhi.n	80037c8 <HAL_I2C_Init+0xd4>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3301      	adds	r3, #1
 80037c6:	e009      	b.n	80037dc <HAL_I2C_Init+0xe8>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	4a69      	ldr	r2, [pc, #420]	@ (8003978 <HAL_I2C_Init+0x284>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	3301      	adds	r3, #1
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	495c      	ldr	r1, [pc, #368]	@ (8003968 <HAL_I2C_Init+0x274>)
 80037f8:	428b      	cmp	r3, r1
 80037fa:	d819      	bhi.n	8003830 <HAL_I2C_Init+0x13c>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e59      	subs	r1, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fbb1 f3f3 	udiv	r3, r1, r3
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003810:	400b      	ands	r3, r1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_I2C_Init+0x138>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e59      	subs	r1, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fbb1 f3f3 	udiv	r3, r1, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	e051      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800382c:	2304      	movs	r3, #4
 800382e:	e04f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d111      	bne.n	800385c <HAL_I2C_Init+0x168>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e012      	b.n	8003882 <HAL_I2C_Init+0x18e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Init+0x196>
 8003886:	2301      	movs	r3, #1
 8003888:	e022      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10e      	bne.n	80038b0 <HAL_I2C_Init+0x1bc>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e58      	subs	r0, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	440b      	add	r3, r1
 80038a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ae:	e00f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	6809      	ldr	r1, [r1, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6911      	ldr	r1, [r2, #16]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68d2      	ldr	r2, [r2, #12]
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	430b      	orrs	r3, r1
 8003912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	000186a0 	.word	0x000186a0
 800396c:	001e847f 	.word	0x001e847f
 8003970:	003d08ff 	.word	0x003d08ff
 8003974:	431bde83 	.word	0x431bde83
 8003978:	10624dd3 	.word	0x10624dd3

0800397c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398e:	2b80      	cmp	r3, #128	@ 0x80
 8003990:	d103      	bne.n	800399a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
  }
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	@ 0x28
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039c2:	f7ff f905 	bl	8002bd0 <HAL_GetTick>
 80039c6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	f040 812e 	bne.w	8003c32 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80039d6:	4b99      	ldr	r3, [pc, #612]	@ (8003c3c <HAL_I2C_Mem_Write_DMA+0x298>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	08db      	lsrs	r3, r3, #3
 80039dc:	4a98      	ldr	r2, [pc, #608]	@ (8003c40 <HAL_I2C_Mem_Write_DMA+0x29c>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0a1a      	lsrs	r2, r3, #8
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009a      	lsls	r2, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d112      	bne.n	8003a22 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	f043 0220 	orr.w	r2, r3, #32
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e108      	b.n	8003c34 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d0df      	beq.n	80039f0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_I2C_Mem_Write_DMA+0x9a>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e0fa      	b.n	8003c34 <HAL_I2C_Mem_Write_DMA+0x290>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d007      	beq.n	8003a64 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2221      	movs	r2, #33	@ 0x21
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2240      	movs	r2, #64	@ 0x40
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a68      	ldr	r2, [pc, #416]	@ (8003c44 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8003aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003aa6:	897a      	ldrh	r2, [r7, #10]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003aac:	893a      	ldrh	r2, [r7, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80a1 	beq.w	8003c0a <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d022      	beq.n	8003b16 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8003c48 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8003ad6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	4a5b      	ldr	r2, [pc, #364]	@ (8003c4c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aec:	2200      	movs	r2, #0
 8003aee:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	4619      	mov	r1, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3310      	adds	r3, #16
 8003b00:	461a      	mov	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	f7ff f9f9 	bl	8002efc <HAL_DMA_Start_IT>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003b0e:	7efb      	ldrb	r3, [r7, #27]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d166      	bne.n	8003be2 <HAL_I2C_Mem_Write_DMA+0x23e>
 8003b14:	e013      	b.n	8003b3e <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07a      	b.n	8003c34 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003b3e:	88f8      	ldrh	r0, [r7, #6]
 8003b40:	893a      	ldrh	r2, [r7, #8]
 8003b42:	8979      	ldrh	r1, [r7, #10]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	2323      	movs	r3, #35	@ 0x23
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f001 fb32 	bl	80051b8 <I2C_RequestMemoryWrite>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d022      	beq.n	8003ba0 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fa2c 	bl	8002fbc <HAL_DMA_Abort_IT>
 8003b64:	4603      	mov	r3, r0
 8003b66:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e049      	b.n	8003c34 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bcc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bdc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e028      	b.n	8003c34 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f043 0210 	orr.w	r2, r3, #16
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e014      	b.n	8003c34 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
  }
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000018 	.word	0x20000018
 8003c40:	14f8b589 	.word	0x14f8b589
 8003c44:	ffff0000 	.word	0xffff0000
 8003c48:	080052e5 	.word	0x080052e5
 8003c4c:	0800548f 	.word	0x0800548f

08003c50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d003      	beq.n	8003c88 <HAL_I2C_EV_IRQHandler+0x38>
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	2b40      	cmp	r3, #64	@ 0x40
 8003c84:	f040 80b1 	bne.w	8003dea <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <HAL_I2C_EV_IRQHandler+0x6e>
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003ca8:	d003      	beq.n	8003cb2 <HAL_I2C_EV_IRQHandler+0x62>
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x66>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_I2C_EV_IRQHandler+0x68>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f000 8114 	beq.w	8003ee6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x90>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f001 fe7c 	bl	80059d0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fcbd 	bl	8004658 <I2C_Master_SB>
 8003cde:	e083      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_I2C_EV_IRQHandler+0xac>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fd34 	bl	8004762 <I2C_Master_ADD10>
 8003cfa:	e075      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_I2C_EV_IRQHandler+0xc8>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fd4f 	bl	80047b4 <I2C_Master_ADDR>
 8003d16:	e067      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d036      	beq.n	8003d90 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d30:	f000 80db 	beq.w	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <HAL_I2C_EV_IRQHandler+0x10a>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_I2C_EV_IRQHandler+0x10a>
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f931 	bl	8003fba <I2C_MasterTransmit_TXE>
 8003d58:	e046      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80c2 	beq.w	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80bc 	beq.w	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d72:	7bbb      	ldrb	r3, [r7, #14]
 8003d74:	2b21      	cmp	r3, #33	@ 0x21
 8003d76:	d103      	bne.n	8003d80 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f9ba 	bl	80040f2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7e:	e0b4      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b40      	cmp	r3, #64	@ 0x40
 8003d84:	f040 80b1 	bne.w	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fa28 	bl	80041de <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d8e:	e0ac      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d9e:	f000 80a4 	beq.w	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x178>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x178>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 faa4 	bl	800430e <I2C_MasterReceive_RXNE>
 8003dc6:	e00f      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 808b 	beq.w	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8085 	beq.w	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fb4f 	bl	8004484 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de6:	e080      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
 8003de8:	e07f      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	e007      	b.n	8003e0c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d011      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x1ea>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00c      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 ff15 	bl	8004c62 <I2C_Slave_ADDR>
 8003e38:	e05a      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x206>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 ff50 	bl	8004cf4 <I2C_Slave_STOPF>
 8003e54:	e04c      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e56:	7bbb      	ldrb	r3, [r7, #14]
 8003e58:	2b21      	cmp	r3, #33	@ 0x21
 8003e5a:	d002      	beq.n	8003e62 <HAL_I2C_EV_IRQHandler+0x212>
 8003e5c:	7bbb      	ldrb	r3, [r7, #14]
 8003e5e:	2b29      	cmp	r3, #41	@ 0x29
 8003e60:	d120      	bne.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <HAL_I2C_EV_IRQHandler+0x238>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_I2C_EV_IRQHandler+0x238>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fe32 	bl	8004aea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e86:	e032      	b.n	8003eee <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02d      	beq.n	8003eee <HAL_I2C_EV_IRQHandler+0x29e>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d028      	beq.n	8003eee <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fe61 	bl	8004b64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ea2:	e024      	b.n	8003eee <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x27a>
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x27a>
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fe6e 	bl	8004ba4 <I2C_SlaveReceive_RXNE>
 8003ec8:	e012      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fe9e 	bl	8004c20 <I2C_SlaveReceive_BTF>
 8003ee4:	e004      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003ee6:	bf00      	nop
 8003ee8:	e002      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr

08003f3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	70fb      	strb	r3, [r7, #3]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fae:	b2db      	uxtb	r3, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fd0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d150      	bne.n	8004082 <I2C_MasterTransmit_TXE+0xc8>
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b21      	cmp	r3, #33	@ 0x21
 8003fe4:	d14d      	bne.n	8004082 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d01d      	beq.n	8004028 <I2C_MasterTransmit_TXE+0x6e>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d01a      	beq.n	8004028 <I2C_MasterTransmit_TXE+0x6e>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ff8:	d016      	beq.n	8004028 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004008:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2211      	movs	r2, #17
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff68 	bl	8003ef6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004026:	e060      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004036:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004046:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d107      	bne.n	8004072 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe f84e 	bl	800210c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004070:	e03b      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ff3b 	bl	8003ef6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004080:	e033      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	2b21      	cmp	r3, #33	@ 0x21
 8004086:	d005      	beq.n	8004094 <I2C_MasterTransmit_TXE+0xda>
 8004088:	7bbb      	ldrb	r3, [r7, #14]
 800408a:	2b40      	cmp	r3, #64	@ 0x40
 800408c:	d12d      	bne.n	80040ea <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	2b22      	cmp	r3, #34	@ 0x22
 8004092:	d12a      	bne.n	80040ea <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040ae:	e01c      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b40      	cmp	r3, #64	@ 0x40
 80040ba:	d103      	bne.n	80040c4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f88e 	bl	80041de <I2C_MemoryTransmit_TXE_BTF>
}
 80040c2:	e012      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80040e8:	e7ff      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b21      	cmp	r3, #33	@ 0x21
 800410a:	d164      	bne.n	80041d6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800413a:	e04c      	b.n	80041d6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b08      	cmp	r3, #8
 8004140:	d01d      	beq.n	800417e <I2C_MasterTransmit_BTF+0x8c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b20      	cmp	r3, #32
 8004146:	d01a      	beq.n	800417e <I2C_MasterTransmit_BTF+0x8c>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800414e:	d016      	beq.n	800417e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800415e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2211      	movs	r2, #17
 8004164:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff febd 	bl	8003ef6 <HAL_I2C_MasterTxCpltCallback>
}
 800417c:	e02b      	b.n	80041d6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800418c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b40      	cmp	r3, #64	@ 0x40
 80041b6:	d107      	bne.n	80041c8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fd ffa3 	bl	800210c <HAL_I2C_MemTxCpltCallback>
}
 80041c6:	e006      	b.n	80041d6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fe90 	bl	8003ef6 <HAL_I2C_MasterTxCpltCallback>
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11d      	bne.n	8004232 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d10b      	bne.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004202:	b2da      	uxtb	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420e:	1c9a      	adds	r2, r3, #2
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004214:	e077      	b.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421a:	b29b      	uxth	r3, r3
 800421c:	121b      	asrs	r3, r3, #8
 800421e:	b2da      	uxtb	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004230:	e069      	b.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10b      	bne.n	8004252 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423e:	b2da      	uxtb	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004250:	e059      	b.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004256:	2b02      	cmp	r3, #2
 8004258:	d152      	bne.n	8004300 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b22      	cmp	r3, #34	@ 0x22
 800425e:	d10d      	bne.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800426e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800427a:	e044      	b.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d015      	beq.n	80042b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2b21      	cmp	r3, #33	@ 0x21
 800428a:	d112      	bne.n	80042b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	781a      	ldrb	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042b0:	e029      	b.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d124      	bne.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b21      	cmp	r3, #33	@ 0x21
 80042c0:	d121      	bne.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042d0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fd ff07 	bl	800210c <HAL_I2C_MemTxCpltCallback>
}
 80042fe:	e002      	b.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fb3b 	bl	800397c <I2C_Flush_DR>
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b22      	cmp	r3, #34	@ 0x22
 8004320:	f040 80ac 	bne.w	800447c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d921      	bls.n	8004376 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b03      	cmp	r3, #3
 8004360:	f040 808c 	bne.w	800447c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004372:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004374:	e082      	b.n	800447c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	2b02      	cmp	r3, #2
 800437c:	d075      	beq.n	800446a <I2C_MasterReceive_RXNE+0x15c>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d002      	beq.n	800438a <I2C_MasterReceive_RXNE+0x7c>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d16f      	bne.n	800446a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f001 fac0 	bl	8005910 <I2C_WaitOnSTOPRequestThroughIT>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d142      	bne.n	800441c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	d10a      	bne.n	8004406 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fdb3 	bl	8003f6a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004404:	e03a      	b.n	800447c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2212      	movs	r2, #18
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff fd77 	bl	8003f08 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800441a:	e02f      	b.n	800447c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800442a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fd8a 	bl	8003f7c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004468:	e008      	b.n	800447c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004478:	605a      	str	r2, [r3, #4]
}
 800447a:	e7ff      	b.n	800447c <I2C_MasterReceive_RXNE+0x16e>
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b04      	cmp	r3, #4
 800449a:	d11b      	bne.n	80044d4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044aa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80044d2:	e0bd      	b.n	8004650 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d129      	bne.n	8004532 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d00a      	beq.n	800450a <I2C_MasterReceive_BTF+0x86>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d007      	beq.n	800450a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004508:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004530:	e08e      	b.n	8004650 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d176      	bne.n	800462a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d002      	beq.n	8004548 <I2C_MasterReceive_BTF+0xc4>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b10      	cmp	r3, #16
 8004546:	d108      	bne.n	800455a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e019      	b.n	800458e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d002      	beq.n	8004566 <I2C_MasterReceive_BTF+0xe2>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d108      	bne.n	8004578 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e00a      	b.n	800458e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b10      	cmp	r3, #16
 800457c:	d007      	beq.n	800458e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80045e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b40      	cmp	r3, #64	@ 0x40
 80045fc:	d10a      	bne.n	8004614 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fcac 	bl	8003f6a <HAL_I2C_MemRxCpltCallback>
}
 8004612:	e01d      	b.n	8004650 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2212      	movs	r2, #18
 8004620:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fc70 	bl	8003f08 <HAL_I2C_MasterRxCpltCallback>
}
 8004628:	e012      	b.n	8004650 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	d117      	bne.n	800469c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004684:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004686:	e067      	b.n	8004758 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	611a      	str	r2, [r3, #16]
}
 800469a:	e05d      	b.n	8004758 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046a4:	d133      	bne.n	800470e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b21      	cmp	r3, #33	@ 0x21
 80046b0:	d109      	bne.n	80046c6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046c2:	611a      	str	r2, [r3, #16]
 80046c4:	e008      	b.n	80046d8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <I2C_Master_SB+0x92>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d032      	beq.n	8004758 <I2C_Master_SB+0x100>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d02d      	beq.n	8004758 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800470a:	605a      	str	r2, [r3, #4]
}
 800470c:	e024      	b.n	8004758 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10e      	bne.n	8004734 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	b29b      	uxth	r3, r3
 800471c:	11db      	asrs	r3, r3, #7
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f003 0306 	and.w	r3, r3, #6
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f063 030f 	orn	r3, r3, #15
 800472a:	b2da      	uxtb	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	611a      	str	r2, [r3, #16]
}
 8004732:	e011      	b.n	8004758 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10d      	bne.n	8004758 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004740:	b29b      	uxth	r3, r3
 8004742:	11db      	asrs	r3, r3, #7
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0306 	and.w	r3, r3, #6
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f063 030e 	orn	r3, r3, #14
 8004750:	b2da      	uxtb	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	611a      	str	r2, [r3, #16]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	b2da      	uxtb	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <I2C_Master_ADD10+0x26>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d108      	bne.n	800479a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00c      	beq.n	80047aa <I2C_Master_ADD10+0x48>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047a8:	605a      	str	r2, [r3, #4]
  }
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b091      	sub	sp, #68	@ 0x44
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b22      	cmp	r3, #34	@ 0x22
 80047dc:	f040 8174 	bne.w	8004ac8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10f      	bne.n	8004808 <I2C_Master_ADDR+0x54>
 80047e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d10b      	bne.n	8004808 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f0:	2300      	movs	r3, #0
 80047f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	633b      	str	r3, [r7, #48]	@ 0x30
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	e16b      	b.n	8004ae0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11d      	bne.n	800484c <I2C_Master_ADDR+0x98>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004818:	d118      	bne.n	800484c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481a:	2300      	movs	r3, #0
 800481c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800483e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	651a      	str	r2, [r3, #80]	@ 0x50
 800484a:	e149      	b.n	8004ae0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d113      	bne.n	800487e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e120      	b.n	8004ac0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	f040 808a 	bne.w	800499e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800488a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004890:	d137      	bne.n	8004902 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048b0:	d113      	bne.n	80048da <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c2:	2300      	movs	r3, #0
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	e0f2      	b.n	8004ac0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	623b      	str	r3, [r7, #32]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e0de      	b.n	8004ac0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	2b08      	cmp	r3, #8
 8004906:	d02e      	beq.n	8004966 <I2C_Master_ADDR+0x1b2>
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	2b20      	cmp	r3, #32
 800490c:	d02b      	beq.n	8004966 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	2b12      	cmp	r3, #18
 8004912:	d102      	bne.n	800491a <I2C_Master_ADDR+0x166>
 8004914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004916:	2b01      	cmp	r3, #1
 8004918:	d125      	bne.n	8004966 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	2b04      	cmp	r3, #4
 800491e:	d00e      	beq.n	800493e <I2C_Master_ADDR+0x18a>
 8004920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004922:	2b02      	cmp	r3, #2
 8004924:	d00b      	beq.n	800493e <I2C_Master_ADDR+0x18a>
 8004926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004928:	2b10      	cmp	r3, #16
 800492a:	d008      	beq.n	800493e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e007      	b.n	800494e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800494c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	e0ac      	b.n	8004ac0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004974:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e090      	b.n	8004ac0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d158      	bne.n	8004a5a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d021      	beq.n	80049f2 <I2C_Master_ADDR+0x23e>
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d01e      	beq.n	80049f2 <I2C_Master_ADDR+0x23e>
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d01b      	beq.n	80049f2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e012      	b.n	8004a18 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a00:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a26:	d14b      	bne.n	8004ac0 <I2C_Master_ADDR+0x30c>
 8004a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a2e:	d00b      	beq.n	8004a48 <I2C_Master_ADDR+0x294>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d008      	beq.n	8004a48 <I2C_Master_ADDR+0x294>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d005      	beq.n	8004a48 <I2C_Master_ADDR+0x294>
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d002      	beq.n	8004a48 <I2C_Master_ADDR+0x294>
 8004a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d13b      	bne.n	8004ac0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a56:	605a      	str	r2, [r3, #4]
 8004a58:	e032      	b.n	8004ac0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a68:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a78:	d117      	bne.n	8004aaa <I2C_Master_ADDR+0x2f6>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a80:	d00b      	beq.n	8004a9a <I2C_Master_ADDR+0x2e6>
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d008      	beq.n	8004a9a <I2C_Master_ADDR+0x2e6>
 8004a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d005      	beq.n	8004a9a <I2C_Master_ADDR+0x2e6>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d002      	beq.n	8004a9a <I2C_Master_ADDR+0x2e6>
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d107      	bne.n	8004aaa <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004aa8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ac6:	e00b      	b.n	8004ae0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
}
 8004ade:	e7ff      	b.n	8004ae0 <I2C_Master_ADDR+0x32c>
 8004ae0:	bf00      	nop
 8004ae2:	3744      	adds	r7, #68	@ 0x44
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr

08004aea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d02b      	beq.n	8004b5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d114      	bne.n	8004b5c <I2C_SlaveTransmit_TXE+0x72>
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b29      	cmp	r3, #41	@ 0x29
 8004b36:	d111      	bne.n	8004b5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2221      	movs	r2, #33	@ 0x21
 8004b4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2228      	movs	r2, #40	@ 0x28
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff f9df 	bl	8003f1a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	781a      	ldrb	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d02c      	beq.n	8004c18 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d114      	bne.n	8004c18 <I2C_SlaveReceive_RXNE+0x74>
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf2:	d111      	bne.n	8004c18 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2222      	movs	r2, #34	@ 0x22
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2228      	movs	r2, #40	@ 0x28
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff f98a 	bl	8003f2c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d012      	beq.n	8004c58 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c7c:	2b28      	cmp	r3, #40	@ 0x28
 8004c7e:	d125      	bne.n	8004ccc <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c8e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	81bb      	strh	r3, [r7, #12]
 8004cae:	e002      	b.n	8004cb6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004cbe:	89ba      	ldrh	r2, [r7, #12]
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff f93a 	bl	8003f3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cca:	e00e      	b.n	8004cea <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d50:	d172      	bne.n	8004e38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b22      	cmp	r3, #34	@ 0x22
 8004d56:	d002      	beq.n	8004d5e <I2C_Slave_STOPF+0x6a>
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d5c:	d135      	bne.n	8004dca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	f043 0204 	orr.w	r2, r3, #4
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fa8e 	bl	80032b8 <HAL_DMA_GetState>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d049      	beq.n	8004e36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	4a69      	ldr	r2, [pc, #420]	@ (8004f4c <I2C_Slave_STOPF+0x258>)
 8004da8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe f904 	bl	8002fbc <HAL_DMA_Abort_IT>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d03d      	beq.n	8004e36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dc8:	e035      	b.n	8004e36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	f043 0204 	orr.w	r2, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe fa58 	bl	80032b8 <HAL_DMA_GetState>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d014      	beq.n	8004e38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e12:	4a4e      	ldr	r2, [pc, #312]	@ (8004f4c <I2C_Slave_STOPF+0x258>)
 8004e14:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe f8ce 	bl	8002fbc <HAL_DMA_Abort_IT>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
 8004e34:	e000      	b.n	8004e38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d03e      	beq.n	8004ec0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d112      	bne.n	8004e76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e80:	2b40      	cmp	r3, #64	@ 0x40
 8004e82:	d112      	bne.n	8004eaa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb8:	f043 0204 	orr.w	r2, r3, #4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f843 	bl	8004f54 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004ece:	e039      	b.n	8004f44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed4:	d109      	bne.n	8004eea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2228      	movs	r2, #40	@ 0x28
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff f821 	bl	8003f2c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b28      	cmp	r3, #40	@ 0x28
 8004ef4:	d111      	bne.n	8004f1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <I2C_Slave_STOPF+0x25c>)
 8004efa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff f820 	bl	8003f58 <HAL_I2C_ListenCpltCallback>
}
 8004f18:	e014      	b.n	8004f44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1e:	2b22      	cmp	r3, #34	@ 0x22
 8004f20:	d002      	beq.n	8004f28 <I2C_Slave_STOPF+0x234>
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b22      	cmp	r3, #34	@ 0x22
 8004f26:	d10d      	bne.n	8004f44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fe fff4 	bl	8003f2c <HAL_I2C_SlaveRxCpltCallback>
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	080054fd 	.word	0x080054fd
 8004f50:	ffff0000 	.word	0xffff0000

08004f54 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d002      	beq.n	8004f78 <I2C_ITError+0x24>
 8004f72:	7bbb      	ldrb	r3, [r7, #14]
 8004f74:	2b40      	cmp	r3, #64	@ 0x40
 8004f76:	d10a      	bne.n	8004f8e <I2C_ITError+0x3a>
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b22      	cmp	r3, #34	@ 0x22
 8004f7c:	d107      	bne.n	8004f8e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f94:	2b28      	cmp	r3, #40	@ 0x28
 8004f96:	d107      	bne.n	8004fa8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2228      	movs	r2, #40	@ 0x28
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004fa6:	e015      	b.n	8004fd4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb6:	d00a      	beq.n	8004fce <I2C_ITError+0x7a>
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b60      	cmp	r3, #96	@ 0x60
 8004fbc:	d007      	beq.n	8004fce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe2:	d162      	bne.n	80050aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d020      	beq.n	8005044 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	4a6a      	ldr	r2, [pc, #424]	@ (80051b0 <I2C_ITError+0x25c>)
 8005008:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd ffd4 	bl	8002fbc <HAL_DMA_Abort_IT>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8089 	beq.w	800512e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800503e:	4610      	mov	r0, r2
 8005040:	4798      	blx	r3
 8005042:	e074      	b.n	800512e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	4a59      	ldr	r2, [pc, #356]	@ (80051b0 <I2C_ITError+0x25c>)
 800504a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd ffb3 	bl	8002fbc <HAL_DMA_Abort_IT>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d068      	beq.n	800512e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b40      	cmp	r3, #64	@ 0x40
 8005068:	d10b      	bne.n	8005082 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050a4:	4610      	mov	r0, r2
 80050a6:	4798      	blx	r3
 80050a8:	e041      	b.n	800512e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b60      	cmp	r3, #96	@ 0x60
 80050b4:	d125      	bne.n	8005102 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	d10b      	bne.n	80050ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fe ff47 	bl	8003f8e <HAL_I2C_AbortCpltCallback>
 8005100:	e015      	b.n	800512e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510c:	2b40      	cmp	r3, #64	@ 0x40
 800510e:	d10b      	bne.n	8005128 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fe ff27 	bl	8003f7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10e      	bne.n	800515c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800516a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005172:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d113      	bne.n	80051a8 <I2C_ITError+0x254>
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b28      	cmp	r3, #40	@ 0x28
 8005184:	d110      	bne.n	80051a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a0a      	ldr	r2, [pc, #40]	@ (80051b4 <I2C_ITError+0x260>)
 800518a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fe fed8 	bl	8003f58 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	080054fd 	.word	0x080054fd
 80051b4:	ffff0000 	.word	0xffff0000

080051b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	4608      	mov	r0, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	461a      	mov	r2, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	817b      	strh	r3, [r7, #10]
 80051ca:	460b      	mov	r3, r1
 80051cc:	813b      	strh	r3, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fa2c 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005208:	d103      	bne.n	8005212 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005210:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e05f      	b.n	80052d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	492d      	ldr	r1, [pc, #180]	@ (80052e0 <I2C_RequestMemoryWrite+0x128>)
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fa87 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e04c      	b.n	80052d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005254:	6a39      	ldr	r1, [r7, #32]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fb12 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	2b04      	cmp	r3, #4
 8005268:	d107      	bne.n	800527a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e02b      	b.n	80052d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d105      	bne.n	8005290 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005284:	893b      	ldrh	r3, [r7, #8]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	611a      	str	r2, [r3, #16]
 800528e:	e021      	b.n	80052d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005290:	893b      	ldrh	r3, [r7, #8]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	b29b      	uxth	r3, r3
 8005296:	b2da      	uxtb	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800529e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a0:	6a39      	ldr	r1, [r7, #32]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 faec 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d107      	bne.n	80052c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e005      	b.n	80052d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052ca:	893b      	ldrh	r3, [r7, #8]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	00010002 	.word	0x00010002

080052e4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005300:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005316:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005324:	2200      	movs	r2, #0
 8005326:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	2200      	movs	r2, #0
 8005336:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800533e:	2b21      	cmp	r3, #33	@ 0x21
 8005340:	d007      	beq.n	8005352 <I2C_DMAXferCplt+0x6e>
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005348:	2b22      	cmp	r3, #34	@ 0x22
 800534a:	d131      	bne.n	80053b0 <I2C_DMAXferCplt+0xcc>
 800534c:	7cbb      	ldrb	r3, [r7, #18]
 800534e:	2b20      	cmp	r3, #32
 8005350:	d12e      	bne.n	80053b0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005360:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	2b29      	cmp	r3, #41	@ 0x29
 800536c:	d10a      	bne.n	8005384 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2221      	movs	r2, #33	@ 0x21
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2228      	movs	r2, #40	@ 0x28
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800537c:	6978      	ldr	r0, [r7, #20]
 800537e:	f7fe fdcc 	bl	8003f1a <HAL_I2C_SlaveTxCpltCallback>
 8005382:	e00c      	b.n	800539e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	2b2a      	cmp	r3, #42	@ 0x2a
 8005388:	d109      	bne.n	800539e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2222      	movs	r2, #34	@ 0x22
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2228      	movs	r2, #40	@ 0x28
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005398:	6978      	ldr	r0, [r7, #20]
 800539a:	f7fe fdc7 	bl	8003f2c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80053ac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80053ae:	e06a      	b.n	8005486 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d064      	beq.n	8005486 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d107      	bne.n	80053d6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053d4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80053e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053ec:	d009      	beq.n	8005402 <I2C_DMAXferCplt+0x11e>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d006      	beq.n	8005402 <I2C_DMAXferCplt+0x11e>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80053fa:	d002      	beq.n	8005402 <I2C_DMAXferCplt+0x11e>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d107      	bne.n	8005412 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005410:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005420:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005430:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2200      	movs	r2, #0
 8005436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005440:	6978      	ldr	r0, [r7, #20]
 8005442:	f7fe fd9b 	bl	8003f7c <HAL_I2C_ErrorCallback>
}
 8005446:	e01e      	b.n	8005486 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b40      	cmp	r3, #64	@ 0x40
 800545a:	d10a      	bne.n	8005472 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7fe fd7d 	bl	8003f6a <HAL_I2C_MemRxCpltCallback>
}
 8005470:	e009      	b.n	8005486 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2212      	movs	r2, #18
 800547e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f7fe fd41 	bl	8003f08 <HAL_I2C_MasterRxCpltCallback>
}
 8005486:	bf00      	nop
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a8:	2200      	movs	r2, #0
 80054aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	2200      	movs	r2, #0
 80054ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ca:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	f043 0210 	orr.w	r2, r3, #16
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7fe fd44 	bl	8003f7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80054f4:	bf00      	nop
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005514:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005516:	4b4b      	ldr	r3, [pc, #300]	@ (8005644 <I2C_DMAAbort+0x148>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	08db      	lsrs	r3, r3, #3
 800551c:	4a4a      	ldr	r2, [pc, #296]	@ (8005648 <I2C_DMAAbort+0x14c>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	0a1a      	lsrs	r2, r3, #8
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	00da      	lsls	r2, r3, #3
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005542:	e00a      	b.n	800555a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3b01      	subs	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005558:	d0ea      	beq.n	8005530 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005566:	2200      	movs	r2, #0
 8005568:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005576:	2200      	movs	r2, #0
 8005578:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005588:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2200      	movs	r2, #0
 800558e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559c:	2200      	movs	r2, #0
 800559e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	2200      	movs	r2, #0
 80055ae:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b60      	cmp	r3, #96	@ 0x60
 80055ca:	d10e      	bne.n	80055ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2200      	movs	r2, #0
 80055e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055e2:	6978      	ldr	r0, [r7, #20]
 80055e4:	f7fe fcd3 	bl	8003f8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055e8:	e027      	b.n	800563a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055f0:	2b28      	cmp	r3, #40	@ 0x28
 80055f2:	d117      	bne.n	8005624 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005612:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2228      	movs	r2, #40	@ 0x28
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005622:	e007      	b.n	8005634 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005634:	6978      	ldr	r0, [r7, #20]
 8005636:	f7fe fca1 	bl	8003f7c <HAL_I2C_ErrorCallback>
}
 800563a:	bf00      	nop
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000018 	.word	0x20000018
 8005648:	14f8b589 	.word	0x14f8b589

0800564c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800565c:	e048      	b.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d044      	beq.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fd fab3 	bl	8002bd0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d139      	bne.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10d      	bne.n	80056a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	43da      	mvns	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4013      	ands	r3, r2
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	e00c      	b.n	80056bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	43da      	mvns	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d116      	bne.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e023      	b.n	8005738 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d10d      	bne.n	8005716 <I2C_WaitOnFlagUntilTimeout+0xca>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	43da      	mvns	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	e00c      	b.n	8005730 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	43da      	mvns	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf0c      	ite	eq
 8005728:	2301      	moveq	r3, #1
 800572a:	2300      	movne	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	429a      	cmp	r2, r3
 8005734:	d093      	beq.n	800565e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800574e:	e071      	b.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575e:	d123      	bne.n	80057a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800576e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005794:	f043 0204 	orr.w	r2, r3, #4
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e067      	b.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	d041      	beq.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b0:	f7fd fa0e 	bl	8002bd0 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d302      	bcc.n	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d136      	bne.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10c      	bne.n	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf14      	ite	ne
 80057e2:	2301      	movne	r3, #1
 80057e4:	2300      	moveq	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e00b      	b.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	43da      	mvns	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4013      	ands	r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d016      	beq.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	f043 0220 	orr.w	r2, r3, #32
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e021      	b.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10c      	bne.n	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	43da      	mvns	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	e00b      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	43da      	mvns	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	f47f af6d 	bne.w	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800588c:	e034      	b.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f870 	bl	8005974 <I2C_IsAcknowledgeFailed>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e034      	b.n	8005908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d028      	beq.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a6:	f7fd f993 	bl	8002bd0 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11d      	bne.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c6:	2b80      	cmp	r3, #128	@ 0x80
 80058c8:	d016      	beq.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e007      	b.n	8005908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d1c3      	bne.n	800588e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800591c:	4b13      	ldr	r3, [pc, #76]	@ (800596c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	08db      	lsrs	r3, r3, #3
 8005922:	4a13      	ldr	r2, [pc, #76]	@ (8005970 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	0a1a      	lsrs	r2, r3, #8
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3b01      	subs	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	f043 0220 	orr.w	r2, r3, #32
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e008      	b.n	8005960 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800595c:	d0e9      	beq.n	8005932 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000018 	.word	0x20000018
 8005970:	14f8b589 	.word	0x14f8b589

08005974 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800598a:	d11b      	bne.n	80059c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005994:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	f043 0204 	orr.w	r2, r3, #4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80059e0:	d103      	bne.n	80059ea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80059e8:	e007      	b.n	80059fa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80059f2:	d102      	bne.n	80059fa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2208      	movs	r2, #8
 80059f8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e272      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8087 	beq.w	8005b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a24:	4b92      	ldr	r3, [pc, #584]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d00c      	beq.n	8005a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a30:	4b8f      	ldr	r3, [pc, #572]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d112      	bne.n	8005a62 <HAL_RCC_OscConfig+0x5e>
 8005a3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a48:	d10b      	bne.n	8005a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4a:	4b89      	ldr	r3, [pc, #548]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d06c      	beq.n	8005b30 <HAL_RCC_OscConfig+0x12c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d168      	bne.n	8005b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e24c      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCC_OscConfig+0x76>
 8005a6c:	4b80      	ldr	r3, [pc, #512]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a7f      	ldr	r2, [pc, #508]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e02e      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd4>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x98>
 8005a82:	4b7b      	ldr	r3, [pc, #492]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a7a      	ldr	r2, [pc, #488]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b78      	ldr	r3, [pc, #480]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a77      	ldr	r2, [pc, #476]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e01d      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd4>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xbc>
 8005aa6:	4b72      	ldr	r3, [pc, #456]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a71      	ldr	r2, [pc, #452]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd4>
 8005ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b68      	ldr	r3, [pc, #416]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a67      	ldr	r2, [pc, #412]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d013      	beq.n	8005b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7fd f876 	bl	8002bd0 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae8:	f7fd f872 	bl	8002bd0 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	@ 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e200      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b5d      	ldr	r3, [pc, #372]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0xe4>
 8005b06:	e014      	b.n	8005b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b08:	f7fd f862 	bl	8002bd0 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b10:	f7fd f85e 	bl	8002bd0 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	@ 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e1ec      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	4b53      	ldr	r3, [pc, #332]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x10c>
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d063      	beq.n	8005c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b4a:	4b49      	ldr	r3, [pc, #292]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d11c      	bne.n	8005b90 <HAL_RCC_OscConfig+0x18c>
 8005b56:	4b46      	ldr	r3, [pc, #280]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d116      	bne.n	8005b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b62:	4b43      	ldr	r3, [pc, #268]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_RCC_OscConfig+0x176>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e1c0      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4939      	ldr	r1, [pc, #228]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8e:	e03a      	b.n	8005c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d020      	beq.n	8005bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b98:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <HAL_RCC_OscConfig+0x270>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9e:	f7fd f817 	bl	8002bd0 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba6:	f7fd f813 	bl	8002bd0 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e1a1      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4927      	ldr	r1, [pc, #156]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]
 8005bd8:	e015      	b.n	8005c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bda:	4b26      	ldr	r3, [pc, #152]	@ (8005c74 <HAL_RCC_OscConfig+0x270>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fc fff6 	bl	8002bd0 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be8:	f7fc fff2 	bl	8002bd0 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e180      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d03a      	beq.n	8005c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d019      	beq.n	8005c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1a:	4b17      	ldr	r3, [pc, #92]	@ (8005c78 <HAL_RCC_OscConfig+0x274>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c20:	f7fc ffd6 	bl	8002bd0 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c28:	f7fc ffd2 	bl	8002bd0 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e160      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c46:	2001      	movs	r0, #1
 8005c48:	f000 face 	bl	80061e8 <RCC_Delay>
 8005c4c:	e01c      	b.n	8005c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <HAL_RCC_OscConfig+0x274>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c54:	f7fc ffbc 	bl	8002bd0 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c5a:	e00f      	b.n	8005c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c5c:	f7fc ffb8 	bl	8002bd0 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d908      	bls.n	8005c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e146      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000
 8005c74:	42420000 	.word	0x42420000
 8005c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c7c:	4b92      	ldr	r3, [pc, #584]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e9      	bne.n	8005c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a6 	beq.w	8005de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c9a:	4b8b      	ldr	r3, [pc, #556]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca6:	4b88      	ldr	r3, [pc, #544]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	4a87      	ldr	r2, [pc, #540]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cb0:	61d3      	str	r3, [r2, #28]
 8005cb2:	4b85      	ldr	r3, [pc, #532]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc2:	4b82      	ldr	r3, [pc, #520]	@ (8005ecc <HAL_RCC_OscConfig+0x4c8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d118      	bne.n	8005d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cce:	4b7f      	ldr	r3, [pc, #508]	@ (8005ecc <HAL_RCC_OscConfig+0x4c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8005ecc <HAL_RCC_OscConfig+0x4c8>)
 8005cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cda:	f7fc ff79 	bl	8002bd0 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce2:	f7fc ff75 	bl	8002bd0 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b64      	cmp	r3, #100	@ 0x64
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e103      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf4:	4b75      	ldr	r3, [pc, #468]	@ (8005ecc <HAL_RCC_OscConfig+0x4c8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d106      	bne.n	8005d16 <HAL_RCC_OscConfig+0x312>
 8005d08:	4b6f      	ldr	r3, [pc, #444]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6213      	str	r3, [r2, #32]
 8005d14:	e02d      	b.n	8005d72 <HAL_RCC_OscConfig+0x36e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCC_OscConfig+0x334>
 8005d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	4a69      	ldr	r2, [pc, #420]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	6213      	str	r3, [r2, #32]
 8005d2a:	4b67      	ldr	r3, [pc, #412]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	4a66      	ldr	r2, [pc, #408]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d30:	f023 0304 	bic.w	r3, r3, #4
 8005d34:	6213      	str	r3, [r2, #32]
 8005d36:	e01c      	b.n	8005d72 <HAL_RCC_OscConfig+0x36e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	d10c      	bne.n	8005d5a <HAL_RCC_OscConfig+0x356>
 8005d40:	4b61      	ldr	r3, [pc, #388]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	4a60      	ldr	r2, [pc, #384]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d46:	f043 0304 	orr.w	r3, r3, #4
 8005d4a:	6213      	str	r3, [r2, #32]
 8005d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	4a5d      	ldr	r2, [pc, #372]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	6213      	str	r3, [r2, #32]
 8005d58:	e00b      	b.n	8005d72 <HAL_RCC_OscConfig+0x36e>
 8005d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	6213      	str	r3, [r2, #32]
 8005d66:	4b58      	ldr	r3, [pc, #352]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4a57      	ldr	r2, [pc, #348]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	f023 0304 	bic.w	r3, r3, #4
 8005d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d015      	beq.n	8005da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7a:	f7fc ff29 	bl	8002bd0 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d80:	e00a      	b.n	8005d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f7fc ff25 	bl	8002bd0 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e0b1      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	4b4b      	ldr	r3, [pc, #300]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ee      	beq.n	8005d82 <HAL_RCC_OscConfig+0x37e>
 8005da4:	e014      	b.n	8005dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da6:	f7fc ff13 	bl	8002bd0 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dac:	e00a      	b.n	8005dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dae:	f7fc ff0f 	bl	8002bd0 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e09b      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc4:	4b40      	ldr	r3, [pc, #256]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ee      	bne.n	8005dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d105      	bne.n	8005de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	4a3b      	ldr	r2, [pc, #236]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8087 	beq.w	8005efa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dec:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f003 030c 	and.w	r3, r3, #12
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d061      	beq.n	8005ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d146      	bne.n	8005e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e00:	4b33      	ldr	r3, [pc, #204]	@ (8005ed0 <HAL_RCC_OscConfig+0x4cc>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fc fee3 	bl	8002bd0 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e0e:	f7fc fedf 	bl	8002bd0 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e06d      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e20:	4b29      	ldr	r3, [pc, #164]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f0      	bne.n	8005e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e34:	d108      	bne.n	8005e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e36:	4b24      	ldr	r3, [pc, #144]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	4921      	ldr	r1, [pc, #132]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e48:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a19      	ldr	r1, [r3, #32]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	491b      	ldr	r1, [pc, #108]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed0 <HAL_RCC_OscConfig+0x4cc>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e66:	f7fc feb3 	bl	8002bd0 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6e:	f7fc feaf 	bl	8002bd0 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e03d      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e80:	4b11      	ldr	r3, [pc, #68]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x46a>
 8005e8c:	e035      	b.n	8005efa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ed0 <HAL_RCC_OscConfig+0x4cc>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fc fe9c 	bl	8002bd0 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9c:	f7fc fe98 	bl	8002bd0 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e026      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eae:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x498>
 8005eba:	e01e      	b.n	8005efa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e019      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40007000 	.word	0x40007000
 8005ed0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <HAL_RCC_OscConfig+0x500>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d001      	beq.n	8005efa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40021000 	.word	0x40021000

08005f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0d0      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d910      	bls.n	8005f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2a:	4b67      	ldr	r3, [pc, #412]	@ (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 0207 	bic.w	r2, r3, #7
 8005f32:	4965      	ldr	r1, [pc, #404]	@ (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b63      	ldr	r3, [pc, #396]	@ (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0b8      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f64:	4b59      	ldr	r3, [pc, #356]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4a58      	ldr	r2, [pc, #352]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f7c:	4b53      	ldr	r3, [pc, #332]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a52      	ldr	r2, [pc, #328]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f88:	4b50      	ldr	r3, [pc, #320]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	494d      	ldr	r1, [pc, #308]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d040      	beq.n	8006028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d107      	bne.n	8005fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	4b47      	ldr	r3, [pc, #284]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d115      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e07f      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc6:	4b41      	ldr	r3, [pc, #260]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e073      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e06b      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fe6:	4b39      	ldr	r3, [pc, #228]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4936      	ldr	r1, [pc, #216]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ff8:	f7fc fdea 	bl	8002bd0 <HAL_GetTick>
 8005ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffe:	e00a      	b.n	8006016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006000:	f7fc fde6 	bl	8002bd0 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e053      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006016:	4b2d      	ldr	r3, [pc, #180]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f003 020c 	and.w	r2, r3, #12
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	429a      	cmp	r2, r3
 8006026:	d1eb      	bne.n	8006000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006028:	4b27      	ldr	r3, [pc, #156]	@ (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d210      	bcs.n	8006058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006036:	4b24      	ldr	r3, [pc, #144]	@ (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f023 0207 	bic.w	r2, r3, #7
 800603e:	4922      	ldr	r1, [pc, #136]	@ (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	4313      	orrs	r3, r2
 8006044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e032      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006064:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4916      	ldr	r1, [pc, #88]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006072:	4313      	orrs	r3, r2
 8006074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006082:	4b12      	ldr	r3, [pc, #72]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	490e      	ldr	r1, [pc, #56]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006096:	f000 f821 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	490a      	ldr	r1, [pc, #40]	@ (80060d0 <HAL_RCC_ClockConfig+0x1c8>)
 80060a8:	5ccb      	ldrb	r3, [r1, r3]
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	4a09      	ldr	r2, [pc, #36]	@ (80060d4 <HAL_RCC_ClockConfig+0x1cc>)
 80060b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060b2:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <HAL_RCC_ClockConfig+0x1d0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fc fd48 	bl	8002b4c <HAL_InitTick>

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40022000 	.word	0x40022000
 80060cc:	40021000 	.word	0x40021000
 80060d0:	0800bc64 	.word	0x0800bc64
 80060d4:	20000018 	.word	0x20000018
 80060d8:	2000001c 	.word	0x2000001c

080060dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	2300      	movs	r3, #0
 80060f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006170 <HAL_RCC_GetSysClockFreq+0x94>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 030c 	and.w	r3, r3, #12
 8006102:	2b04      	cmp	r3, #4
 8006104:	d002      	beq.n	800610c <HAL_RCC_GetSysClockFreq+0x30>
 8006106:	2b08      	cmp	r3, #8
 8006108:	d003      	beq.n	8006112 <HAL_RCC_GetSysClockFreq+0x36>
 800610a:	e027      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800610c:	4b19      	ldr	r3, [pc, #100]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x98>)
 800610e:	613b      	str	r3, [r7, #16]
      break;
 8006110:	e027      	b.n	8006162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	0c9b      	lsrs	r3, r3, #18
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	4a17      	ldr	r2, [pc, #92]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x9c>)
 800611c:	5cd3      	ldrb	r3, [r2, r3]
 800611e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d010      	beq.n	800614c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800612a:	4b11      	ldr	r3, [pc, #68]	@ (8006170 <HAL_RCC_GetSysClockFreq+0x94>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	0c5b      	lsrs	r3, r3, #17
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	4a11      	ldr	r2, [pc, #68]	@ (800617c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006136:	5cd3      	ldrb	r3, [r2, r3]
 8006138:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a0d      	ldr	r2, [pc, #52]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x98>)
 800613e:	fb03 f202 	mul.w	r2, r3, r2
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	e004      	b.n	8006156 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a0c      	ldr	r2, [pc, #48]	@ (8006180 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006150:	fb02 f303 	mul.w	r3, r2, r3
 8006154:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	613b      	str	r3, [r7, #16]
      break;
 800615a:	e002      	b.n	8006162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800615c:	4b05      	ldr	r3, [pc, #20]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x98>)
 800615e:	613b      	str	r3, [r7, #16]
      break;
 8006160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006162:	693b      	ldr	r3, [r7, #16]
}
 8006164:	4618      	mov	r0, r3
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	007a1200 	.word	0x007a1200
 8006178:	0800bc7c 	.word	0x0800bc7c
 800617c:	0800bc8c 	.word	0x0800bc8c
 8006180:	003d0900 	.word	0x003d0900

08006184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006188:	4b02      	ldr	r3, [pc, #8]	@ (8006194 <HAL_RCC_GetHCLKFreq+0x10>)
 800618a:	681b      	ldr	r3, [r3, #0]
}
 800618c:	4618      	mov	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr
 8006194:	20000018 	.word	0x20000018

08006198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800619c:	f7ff fff2 	bl	8006184 <HAL_RCC_GetHCLKFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4903      	ldr	r1, [pc, #12]	@ (80061bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40021000 	.word	0x40021000
 80061bc:	0800bc74 	.word	0x0800bc74

080061c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061c4:	f7ff ffde 	bl	8006184 <HAL_RCC_GetHCLKFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b05      	ldr	r3, [pc, #20]	@ (80061e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	0adb      	lsrs	r3, r3, #11
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4903      	ldr	r1, [pc, #12]	@ (80061e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40021000 	.word	0x40021000
 80061e4:	0800bc74 	.word	0x0800bc74

080061e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061f0:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <RCC_Delay+0x34>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006220 <RCC_Delay+0x38>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	0a5b      	lsrs	r3, r3, #9
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006204:	bf00      	nop
  }
  while (Delay --);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1e5a      	subs	r2, r3, #1
 800620a:	60fa      	str	r2, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1f9      	bne.n	8006204 <RCC_Delay+0x1c>
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr
 800621c:	20000018 	.word	0x20000018
 8006220:	10624dd3 	.word	0x10624dd3

08006224 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e093      	b.n	8006360 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fc fb87 	bl	8002960 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006268:	f023 0307 	bic.w	r3, r3, #7
 800626c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3304      	adds	r3, #4
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f000 fa4f 	bl	800671c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	4313      	orrs	r3, r2
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80062c4:	f023 030c 	bic.w	r3, r3, #12
 80062c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	4313      	orrs	r3, r2
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	011a      	lsls	r2, r3, #4
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	031b      	lsls	r3, r3, #12
 80062f4:	4313      	orrs	r3, r2
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	4313      	orrs	r3, r2
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006378:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006380:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006388:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006390:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d110      	bne.n	80063ba <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d102      	bne.n	80063a4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800639e:	7b7b      	ldrb	r3, [r7, #13]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d001      	beq.n	80063a8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e089      	b.n	80064bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063b8:	e031      	b.n	800641e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d110      	bne.n	80063e2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d102      	bne.n	80063cc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063c6:	7b3b      	ldrb	r3, [r7, #12]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d001      	beq.n	80063d0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e075      	b.n	80064bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063e0:	e01d      	b.n	800641e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d108      	bne.n	80063fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d105      	bne.n	80063fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ee:	7b7b      	ldrb	r3, [r7, #13]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d102      	bne.n	80063fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063f4:	7b3b      	ldrb	r3, [r7, #12]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d001      	beq.n	80063fe <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e05e      	b.n	80064bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <HAL_TIM_Encoder_Start_IT+0xc4>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b04      	cmp	r3, #4
 8006428:	d010      	beq.n	800644c <HAL_TIM_Encoder_Start_IT+0xe4>
 800642a:	e01f      	b.n	800646c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2201      	movs	r2, #1
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f000 f9d3 	bl	80067e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0202 	orr.w	r2, r2, #2
 8006448:	60da      	str	r2, [r3, #12]
      break;
 800644a:	e02e      	b.n	80064aa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2201      	movs	r2, #1
 8006452:	2104      	movs	r1, #4
 8006454:	4618      	mov	r0, r3
 8006456:	f000 f9c3 	bl	80067e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0204 	orr.w	r2, r2, #4
 8006468:	60da      	str	r2, [r3, #12]
      break;
 800646a:	e01e      	b.n	80064aa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2201      	movs	r2, #1
 8006472:	2100      	movs	r1, #0
 8006474:	4618      	mov	r0, r3
 8006476:	f000 f9b3 	bl	80067e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2201      	movs	r2, #1
 8006480:	2104      	movs	r1, #4
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f9ac 	bl	80067e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0202 	orr.w	r2, r2, #2
 8006496:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0204 	orr.w	r2, r2, #4
 80064a6:	60da      	str	r2, [r3, #12]
      break;
 80064a8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0201 	orr.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0202 	mvn.w	r2, #2
 80064f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fa ff58 	bl	80013bc <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8e9 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f8ef 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b04      	cmp	r3, #4
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b04      	cmp	r3, #4
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0204 	mvn.w	r2, #4
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fa ff2e 	bl	80013bc <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f8bf 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f8c5 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b08      	cmp	r3, #8
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b08      	cmp	r3, #8
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0208 	mvn.w	r2, #8
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2204      	movs	r2, #4
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fa ff04 	bl	80013bc <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f895 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f89b 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d122      	bne.n	800661c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d11b      	bne.n	800661c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0210 	mvn.w	r2, #16
 80065ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2208      	movs	r2, #8
 80065f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fa feda 	bl	80013bc <HAL_TIM_IC_CaptureCallback>
 8006608:	e005      	b.n	8006616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f86b 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f871 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b01      	cmp	r3, #1
 8006628:	d10e      	bne.n	8006648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b01      	cmp	r3, #1
 8006636:	d107      	bne.n	8006648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0201 	mvn.w	r2, #1
 8006640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f846 	bl	80066d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006652:	2b80      	cmp	r3, #128	@ 0x80
 8006654:	d10e      	bne.n	8006674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006660:	2b80      	cmp	r3, #128	@ 0x80
 8006662:	d107      	bne.n	8006674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800666c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f941 	bl	80068f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667e:	2b40      	cmp	r3, #64	@ 0x40
 8006680:	d10e      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668c:	2b40      	cmp	r3, #64	@ 0x40
 800668e:	d107      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f835 	bl	800670a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d10e      	bne.n	80066cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d107      	bne.n	80066cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0220 	mvn.w	r2, #32
 80066c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f90c 	bl	80068e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr

0800670a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a29      	ldr	r2, [pc, #164]	@ (80067d4 <TIM_Base_SetConfig+0xb8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00b      	beq.n	800674c <TIM_Base_SetConfig+0x30>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673a:	d007      	beq.n	800674c <TIM_Base_SetConfig+0x30>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a26      	ldr	r2, [pc, #152]	@ (80067d8 <TIM_Base_SetConfig+0xbc>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_Base_SetConfig+0x30>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a25      	ldr	r2, [pc, #148]	@ (80067dc <TIM_Base_SetConfig+0xc0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d108      	bne.n	800675e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a1c      	ldr	r2, [pc, #112]	@ (80067d4 <TIM_Base_SetConfig+0xb8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00b      	beq.n	800677e <TIM_Base_SetConfig+0x62>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676c:	d007      	beq.n	800677e <TIM_Base_SetConfig+0x62>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a19      	ldr	r2, [pc, #100]	@ (80067d8 <TIM_Base_SetConfig+0xbc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_Base_SetConfig+0x62>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <TIM_Base_SetConfig+0xc0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d108      	bne.n	8006790 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a07      	ldr	r2, [pc, #28]	@ (80067d4 <TIM_Base_SetConfig+0xb8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d103      	bne.n	80067c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	615a      	str	r2, [r3, #20]
}
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800

080067e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2201      	movs	r2, #1
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	43db      	mvns	r3, r3
 8006802:	401a      	ands	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1a      	ldr	r2, [r3, #32]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	fa01 f303 	lsl.w	r3, r1, r3
 8006818:	431a      	orrs	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800683c:	2302      	movs	r3, #2
 800683e:	e046      	b.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a16      	ldr	r2, [pc, #88]	@ (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00e      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688c:	d009      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a12      	ldr	r2, [pc, #72]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a10      	ldr	r2, [pc, #64]	@ (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10c      	bne.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800

080068e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e042      	b.n	80069a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fc f886 	bl	8002a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2224      	movs	r2, #36	@ 0x24
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800694a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f91d 	bl	8006b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695a      	ldr	r2, [r3, #20]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	@ 0x28
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d16d      	bne.n	8006aa4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_UART_Transmit+0x2c>
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e066      	b.n	8006aa6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2221      	movs	r2, #33	@ 0x21
 80069e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069e6:	f7fc f8f3 	bl	8002bd0 <HAL_GetTick>
 80069ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a00:	d108      	bne.n	8006a14 <HAL_UART_Transmit+0x6c>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	e003      	b.n	8006a1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a1c:	e02a      	b.n	8006a74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	2180      	movs	r1, #128	@ 0x80
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f840 	bl	8006aae <UART_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e036      	b.n	8006aa6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	3302      	adds	r3, #2
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e007      	b.n	8006a66 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	3301      	adds	r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1cf      	bne.n	8006a1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2200      	movs	r2, #0
 8006a86:	2140      	movs	r1, #64	@ 0x40
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f810 	bl	8006aae <UART_WaitOnFlagUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e006      	b.n	8006aa6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b090      	sub	sp, #64	@ 0x40
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	4613      	mov	r3, r2
 8006abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006abe:	e050      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d04c      	beq.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0x30>
 8006ace:	f7fc f87f 	bl	8002bd0 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d241      	bcs.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006afe:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b00:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	613b      	str	r3, [r7, #16]
   return(result);
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b32:	623a      	str	r2, [r7, #32]
 8006b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	69f9      	ldr	r1, [r7, #28]
 8006b38:	6a3a      	ldr	r2, [r7, #32]
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e00f      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d09f      	beq.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3740      	adds	r7, #64	@ 0x40
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006bc6:	f023 030c 	bic.w	r3, r3, #12
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca0 <UART_SetConfig+0x114>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d103      	bne.n	8006bfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bf4:	f7ff fae4 	bl	80061c0 <HAL_RCC_GetPCLK2Freq>
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	e002      	b.n	8006c02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bfc:	f7ff facc 	bl	8006198 <HAL_RCC_GetPCLK1Freq>
 8006c00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009a      	lsls	r2, r3, #2
 8006c0c:	441a      	add	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c18:	4a22      	ldr	r2, [pc, #136]	@ (8006ca4 <UART_SetConfig+0x118>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	0119      	lsls	r1, r3, #4
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009a      	lsls	r2, r3, #2
 8006c2c:	441a      	add	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c38:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca4 <UART_SetConfig+0x118>)
 8006c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	2064      	movs	r0, #100	@ 0x64
 8006c42:	fb00 f303 	mul.w	r3, r0, r3
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	3332      	adds	r3, #50	@ 0x32
 8006c4c:	4a15      	ldr	r2, [pc, #84]	@ (8006ca4 <UART_SetConfig+0x118>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c58:	4419      	add	r1, r3
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009a      	lsls	r2, r3, #2
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <UART_SetConfig+0x118>)
 8006c72:	fba3 0302 	umull	r0, r3, r3, r2
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	2064      	movs	r0, #100	@ 0x64
 8006c7a:	fb00 f303 	mul.w	r3, r0, r3
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	3332      	adds	r3, #50	@ 0x32
 8006c84:	4a07      	ldr	r2, [pc, #28]	@ (8006ca4 <UART_SetConfig+0x118>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f003 020f 	and.w	r2, r3, #15
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	440a      	add	r2, r1
 8006c96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40013800 	.word	0x40013800
 8006ca4:	51eb851f 	.word	0x51eb851f

08006ca8 <__cvt>:
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cae:	461d      	mov	r5, r3
 8006cb0:	bfbb      	ittet	lt
 8006cb2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006cb6:	461d      	movlt	r5, r3
 8006cb8:	2300      	movge	r3, #0
 8006cba:	232d      	movlt	r3, #45	@ 0x2d
 8006cbc:	b088      	sub	sp, #32
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	bfb8      	it	lt
 8006cc2:	4614      	movlt	r4, r2
 8006cc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006cc6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006cc8:	7013      	strb	r3, [r2, #0]
 8006cca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ccc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006cd0:	f023 0820 	bic.w	r8, r3, #32
 8006cd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006cd8:	d005      	beq.n	8006ce6 <__cvt+0x3e>
 8006cda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006cde:	d100      	bne.n	8006ce2 <__cvt+0x3a>
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e000      	b.n	8006ce8 <__cvt+0x40>
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	aa07      	add	r2, sp, #28
 8006cea:	9204      	str	r2, [sp, #16]
 8006cec:	aa06      	add	r2, sp, #24
 8006cee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006cf2:	e9cd 3600 	strd	r3, r6, [sp]
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	f001 f8bd 	bl	8007e78 <_dtoa_r>
 8006cfe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006d02:	4607      	mov	r7, r0
 8006d04:	d119      	bne.n	8006d3a <__cvt+0x92>
 8006d06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006d08:	07db      	lsls	r3, r3, #31
 8006d0a:	d50e      	bpl.n	8006d2a <__cvt+0x82>
 8006d0c:	eb00 0906 	add.w	r9, r0, r6
 8006d10:	2200      	movs	r2, #0
 8006d12:	2300      	movs	r3, #0
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8006d1c:	b108      	cbz	r0, 8006d22 <__cvt+0x7a>
 8006d1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d22:	2230      	movs	r2, #48	@ 0x30
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	454b      	cmp	r3, r9
 8006d28:	d31e      	bcc.n	8006d68 <__cvt+0xc0>
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	9b07      	ldr	r3, [sp, #28]
 8006d2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006d30:	1bdb      	subs	r3, r3, r7
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	b008      	add	sp, #32
 8006d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d3e:	eb00 0906 	add.w	r9, r0, r6
 8006d42:	d1e5      	bne.n	8006d10 <__cvt+0x68>
 8006d44:	7803      	ldrb	r3, [r0, #0]
 8006d46:	2b30      	cmp	r3, #48	@ 0x30
 8006d48:	d10a      	bne.n	8006d60 <__cvt+0xb8>
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fe29 	bl	80009a8 <__aeabi_dcmpeq>
 8006d56:	b918      	cbnz	r0, 8006d60 <__cvt+0xb8>
 8006d58:	f1c6 0601 	rsb	r6, r6, #1
 8006d5c:	f8ca 6000 	str.w	r6, [sl]
 8006d60:	f8da 3000 	ldr.w	r3, [sl]
 8006d64:	4499      	add	r9, r3
 8006d66:	e7d3      	b.n	8006d10 <__cvt+0x68>
 8006d68:	1c59      	adds	r1, r3, #1
 8006d6a:	9107      	str	r1, [sp, #28]
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	e7d9      	b.n	8006d24 <__cvt+0x7c>

08006d70 <__exponent>:
 8006d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d72:	2900      	cmp	r1, #0
 8006d74:	bfb6      	itet	lt
 8006d76:	232d      	movlt	r3, #45	@ 0x2d
 8006d78:	232b      	movge	r3, #43	@ 0x2b
 8006d7a:	4249      	neglt	r1, r1
 8006d7c:	2909      	cmp	r1, #9
 8006d7e:	7002      	strb	r2, [r0, #0]
 8006d80:	7043      	strb	r3, [r0, #1]
 8006d82:	dd29      	ble.n	8006dd8 <__exponent+0x68>
 8006d84:	f10d 0307 	add.w	r3, sp, #7
 8006d88:	461d      	mov	r5, r3
 8006d8a:	270a      	movs	r7, #10
 8006d8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d90:	461a      	mov	r2, r3
 8006d92:	fb07 1416 	mls	r4, r7, r6, r1
 8006d96:	3430      	adds	r4, #48	@ 0x30
 8006d98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	2c63      	cmp	r4, #99	@ 0x63
 8006da0:	4631      	mov	r1, r6
 8006da2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006da6:	dcf1      	bgt.n	8006d8c <__exponent+0x1c>
 8006da8:	3130      	adds	r1, #48	@ 0x30
 8006daa:	1e94      	subs	r4, r2, #2
 8006dac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006db0:	4623      	mov	r3, r4
 8006db2:	1c41      	adds	r1, r0, #1
 8006db4:	42ab      	cmp	r3, r5
 8006db6:	d30a      	bcc.n	8006dce <__exponent+0x5e>
 8006db8:	f10d 0309 	add.w	r3, sp, #9
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	42ac      	cmp	r4, r5
 8006dc0:	bf88      	it	hi
 8006dc2:	2300      	movhi	r3, #0
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	4403      	add	r3, r0
 8006dc8:	1a18      	subs	r0, r3, r0
 8006dca:	b003      	add	sp, #12
 8006dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dce:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006dd2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006dd6:	e7ed      	b.n	8006db4 <__exponent+0x44>
 8006dd8:	2330      	movs	r3, #48	@ 0x30
 8006dda:	3130      	adds	r1, #48	@ 0x30
 8006ddc:	7083      	strb	r3, [r0, #2]
 8006dde:	70c1      	strb	r1, [r0, #3]
 8006de0:	1d03      	adds	r3, r0, #4
 8006de2:	e7f1      	b.n	8006dc8 <__exponent+0x58>

08006de4 <_printf_float>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	b091      	sub	sp, #68	@ 0x44
 8006dea:	460c      	mov	r4, r1
 8006dec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006df0:	4616      	mov	r6, r2
 8006df2:	461f      	mov	r7, r3
 8006df4:	4605      	mov	r5, r0
 8006df6:	f000 ff1d 	bl	8007c34 <_localeconv_r>
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	9308      	str	r3, [sp, #32]
 8006e00:	f7f9 f9a6 	bl	8000150 <strlen>
 8006e04:	2300      	movs	r3, #0
 8006e06:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e08:	f8d8 3000 	ldr.w	r3, [r8]
 8006e0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8006e0e:	3307      	adds	r3, #7
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	f103 0208 	add.w	r2, r3, #8
 8006e18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e1c:	f8d4 b000 	ldr.w	fp, [r4]
 8006e20:	f8c8 2000 	str.w	r2, [r8]
 8006e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006e2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e2e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295
 8006e36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006e3e:	4b9c      	ldr	r3, [pc, #624]	@ (80070b0 <_printf_float+0x2cc>)
 8006e40:	f7f9 fde4 	bl	8000a0c <__aeabi_dcmpun>
 8006e44:	bb70      	cbnz	r0, 8006ea4 <_printf_float+0xc0>
 8006e46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	4b98      	ldr	r3, [pc, #608]	@ (80070b0 <_printf_float+0x2cc>)
 8006e50:	f7f9 fdbe 	bl	80009d0 <__aeabi_dcmple>
 8006e54:	bb30      	cbnz	r0, 8006ea4 <_printf_float+0xc0>
 8006e56:	2200      	movs	r2, #0
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	f7f9 fdad 	bl	80009bc <__aeabi_dcmplt>
 8006e62:	b110      	cbz	r0, 8006e6a <_printf_float+0x86>
 8006e64:	232d      	movs	r3, #45	@ 0x2d
 8006e66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e6a:	4a92      	ldr	r2, [pc, #584]	@ (80070b4 <_printf_float+0x2d0>)
 8006e6c:	4b92      	ldr	r3, [pc, #584]	@ (80070b8 <_printf_float+0x2d4>)
 8006e6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e72:	bf94      	ite	ls
 8006e74:	4690      	movls	r8, r2
 8006e76:	4698      	movhi	r8, r3
 8006e78:	2303      	movs	r3, #3
 8006e7a:	f04f 0900 	mov.w	r9, #0
 8006e7e:	6123      	str	r3, [r4, #16]
 8006e80:	f02b 0304 	bic.w	r3, fp, #4
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	4633      	mov	r3, r6
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	9700      	str	r7, [sp, #0]
 8006e8e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006e90:	f000 f9d4 	bl	800723c <_printf_common>
 8006e94:	3001      	adds	r0, #1
 8006e96:	f040 8090 	bne.w	8006fba <_printf_float+0x1d6>
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	b011      	add	sp, #68	@ 0x44
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 fdae 	bl	8000a0c <__aeabi_dcmpun>
 8006eb0:	b148      	cbz	r0, 8006ec6 <_printf_float+0xe2>
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bfb8      	it	lt
 8006eb8:	232d      	movlt	r3, #45	@ 0x2d
 8006eba:	4a80      	ldr	r2, [pc, #512]	@ (80070bc <_printf_float+0x2d8>)
 8006ebc:	bfb8      	it	lt
 8006ebe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80070c0 <_printf_float+0x2dc>)
 8006ec4:	e7d3      	b.n	8006e6e <_printf_float+0x8a>
 8006ec6:	6863      	ldr	r3, [r4, #4]
 8006ec8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	d13f      	bne.n	8006f50 <_printf_float+0x16c>
 8006ed0:	2306      	movs	r3, #6
 8006ed2:	6063      	str	r3, [r4, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	9206      	str	r2, [sp, #24]
 8006ede:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ee0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006ee4:	aa0d      	add	r2, sp, #52	@ 0x34
 8006ee6:	9203      	str	r2, [sp, #12]
 8006ee8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006eec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	464b      	mov	r3, r9
 8006efa:	910a      	str	r1, [sp, #40]	@ 0x28
 8006efc:	f7ff fed4 	bl	8006ca8 <__cvt>
 8006f00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f02:	4680      	mov	r8, r0
 8006f04:	2947      	cmp	r1, #71	@ 0x47
 8006f06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006f08:	d128      	bne.n	8006f5c <_printf_float+0x178>
 8006f0a:	1cc8      	adds	r0, r1, #3
 8006f0c:	db02      	blt.n	8006f14 <_printf_float+0x130>
 8006f0e:	6863      	ldr	r3, [r4, #4]
 8006f10:	4299      	cmp	r1, r3
 8006f12:	dd40      	ble.n	8006f96 <_printf_float+0x1b2>
 8006f14:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f18:	fa5f fa8a 	uxtb.w	sl, sl
 8006f1c:	4652      	mov	r2, sl
 8006f1e:	3901      	subs	r1, #1
 8006f20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006f24:	910d      	str	r1, [sp, #52]	@ 0x34
 8006f26:	f7ff ff23 	bl	8006d70 <__exponent>
 8006f2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f2c:	4681      	mov	r9, r0
 8006f2e:	1813      	adds	r3, r2, r0
 8006f30:	2a01      	cmp	r2, #1
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	dc02      	bgt.n	8006f3c <_printf_float+0x158>
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	07d2      	lsls	r2, r2, #31
 8006f3a:	d501      	bpl.n	8006f40 <_printf_float+0x15c>
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	6123      	str	r3, [r4, #16]
 8006f40:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d09e      	beq.n	8006e86 <_printf_float+0xa2>
 8006f48:	232d      	movs	r3, #45	@ 0x2d
 8006f4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f4e:	e79a      	b.n	8006e86 <_printf_float+0xa2>
 8006f50:	2947      	cmp	r1, #71	@ 0x47
 8006f52:	d1bf      	bne.n	8006ed4 <_printf_float+0xf0>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1bd      	bne.n	8006ed4 <_printf_float+0xf0>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e7ba      	b.n	8006ed2 <_printf_float+0xee>
 8006f5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f60:	d9dc      	bls.n	8006f1c <_printf_float+0x138>
 8006f62:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006f66:	d118      	bne.n	8006f9a <_printf_float+0x1b6>
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	dd0b      	ble.n	8006f86 <_printf_float+0x1a2>
 8006f6e:	6121      	str	r1, [r4, #16]
 8006f70:	b913      	cbnz	r3, 8006f78 <_printf_float+0x194>
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	07d0      	lsls	r0, r2, #31
 8006f76:	d502      	bpl.n	8006f7e <_printf_float+0x19a>
 8006f78:	3301      	adds	r3, #1
 8006f7a:	440b      	add	r3, r1
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	f04f 0900 	mov.w	r9, #0
 8006f82:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f84:	e7dc      	b.n	8006f40 <_printf_float+0x15c>
 8006f86:	b913      	cbnz	r3, 8006f8e <_printf_float+0x1aa>
 8006f88:	6822      	ldr	r2, [r4, #0]
 8006f8a:	07d2      	lsls	r2, r2, #31
 8006f8c:	d501      	bpl.n	8006f92 <_printf_float+0x1ae>
 8006f8e:	3302      	adds	r3, #2
 8006f90:	e7f4      	b.n	8006f7c <_printf_float+0x198>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7f2      	b.n	8006f7c <_printf_float+0x198>
 8006f96:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	db05      	blt.n	8006fac <_printf_float+0x1c8>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	6121      	str	r1, [r4, #16]
 8006fa4:	07d8      	lsls	r0, r3, #31
 8006fa6:	d5ea      	bpl.n	8006f7e <_printf_float+0x19a>
 8006fa8:	1c4b      	adds	r3, r1, #1
 8006faa:	e7e7      	b.n	8006f7c <_printf_float+0x198>
 8006fac:	2900      	cmp	r1, #0
 8006fae:	bfcc      	ite	gt
 8006fb0:	2201      	movgt	r2, #1
 8006fb2:	f1c1 0202 	rsble	r2, r1, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	e7e0      	b.n	8006f7c <_printf_float+0x198>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	055a      	lsls	r2, r3, #21
 8006fbe:	d407      	bmi.n	8006fd0 <_printf_float+0x1ec>
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d12b      	bne.n	8007026 <_printf_float+0x242>
 8006fce:	e764      	b.n	8006e9a <_printf_float+0xb6>
 8006fd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006fd4:	f240 80dc 	bls.w	8007190 <_printf_float+0x3ac>
 8006fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f7f9 fce2 	bl	80009a8 <__aeabi_dcmpeq>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d033      	beq.n	8007050 <_printf_float+0x26c>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4631      	mov	r1, r6
 8006fec:	4628      	mov	r0, r5
 8006fee:	4a35      	ldr	r2, [pc, #212]	@ (80070c4 <_printf_float+0x2e0>)
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f43f af51 	beq.w	8006e9a <_printf_float+0xb6>
 8006ff8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006ffc:	4543      	cmp	r3, r8
 8006ffe:	db02      	blt.n	8007006 <_printf_float+0x222>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07d8      	lsls	r0, r3, #31
 8007004:	d50f      	bpl.n	8007026 <_printf_float+0x242>
 8007006:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f af42 	beq.w	8006e9a <_printf_float+0xb6>
 8007016:	f04f 0900 	mov.w	r9, #0
 800701a:	f108 38ff 	add.w	r8, r8, #4294967295
 800701e:	f104 0a1a 	add.w	sl, r4, #26
 8007022:	45c8      	cmp	r8, r9
 8007024:	dc09      	bgt.n	800703a <_printf_float+0x256>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	079b      	lsls	r3, r3, #30
 800702a:	f100 8102 	bmi.w	8007232 <_printf_float+0x44e>
 800702e:	68e0      	ldr	r0, [r4, #12]
 8007030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007032:	4298      	cmp	r0, r3
 8007034:	bfb8      	it	lt
 8007036:	4618      	movlt	r0, r3
 8007038:	e731      	b.n	8006e9e <_printf_float+0xba>
 800703a:	2301      	movs	r3, #1
 800703c:	4652      	mov	r2, sl
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f af28 	beq.w	8006e9a <_printf_float+0xb6>
 800704a:	f109 0901 	add.w	r9, r9, #1
 800704e:	e7e8      	b.n	8007022 <_printf_float+0x23e>
 8007050:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc38      	bgt.n	80070c8 <_printf_float+0x2e4>
 8007056:	2301      	movs	r3, #1
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	4a19      	ldr	r2, [pc, #100]	@ (80070c4 <_printf_float+0x2e0>)
 800705e:	47b8      	blx	r7
 8007060:	3001      	adds	r0, #1
 8007062:	f43f af1a 	beq.w	8006e9a <_printf_float+0xb6>
 8007066:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800706a:	ea59 0303 	orrs.w	r3, r9, r3
 800706e:	d102      	bne.n	8007076 <_printf_float+0x292>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	07d9      	lsls	r1, r3, #31
 8007074:	d5d7      	bpl.n	8007026 <_printf_float+0x242>
 8007076:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	f43f af0a 	beq.w	8006e9a <_printf_float+0xb6>
 8007086:	f04f 0a00 	mov.w	sl, #0
 800708a:	f104 0b1a 	add.w	fp, r4, #26
 800708e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007090:	425b      	negs	r3, r3
 8007092:	4553      	cmp	r3, sl
 8007094:	dc01      	bgt.n	800709a <_printf_float+0x2b6>
 8007096:	464b      	mov	r3, r9
 8007098:	e793      	b.n	8006fc2 <_printf_float+0x1de>
 800709a:	2301      	movs	r3, #1
 800709c:	465a      	mov	r2, fp
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	f43f aef8 	beq.w	8006e9a <_printf_float+0xb6>
 80070aa:	f10a 0a01 	add.w	sl, sl, #1
 80070ae:	e7ee      	b.n	800708e <_printf_float+0x2aa>
 80070b0:	7fefffff 	.word	0x7fefffff
 80070b4:	0800bc8e 	.word	0x0800bc8e
 80070b8:	0800bc92 	.word	0x0800bc92
 80070bc:	0800bc96 	.word	0x0800bc96
 80070c0:	0800bc9a 	.word	0x0800bc9a
 80070c4:	0800bc9e 	.word	0x0800bc9e
 80070c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80070ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80070ce:	4553      	cmp	r3, sl
 80070d0:	bfa8      	it	ge
 80070d2:	4653      	movge	r3, sl
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	4699      	mov	r9, r3
 80070d8:	dc36      	bgt.n	8007148 <_printf_float+0x364>
 80070da:	f04f 0b00 	mov.w	fp, #0
 80070de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070e2:	f104 021a 	add.w	r2, r4, #26
 80070e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80070e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ea:	eba3 0309 	sub.w	r3, r3, r9
 80070ee:	455b      	cmp	r3, fp
 80070f0:	dc31      	bgt.n	8007156 <_printf_float+0x372>
 80070f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070f4:	459a      	cmp	sl, r3
 80070f6:	dc3a      	bgt.n	800716e <_printf_float+0x38a>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	07da      	lsls	r2, r3, #31
 80070fc:	d437      	bmi.n	800716e <_printf_float+0x38a>
 80070fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007100:	ebaa 0903 	sub.w	r9, sl, r3
 8007104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007106:	ebaa 0303 	sub.w	r3, sl, r3
 800710a:	4599      	cmp	r9, r3
 800710c:	bfa8      	it	ge
 800710e:	4699      	movge	r9, r3
 8007110:	f1b9 0f00 	cmp.w	r9, #0
 8007114:	dc33      	bgt.n	800717e <_printf_float+0x39a>
 8007116:	f04f 0800 	mov.w	r8, #0
 800711a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800711e:	f104 0b1a 	add.w	fp, r4, #26
 8007122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007124:	ebaa 0303 	sub.w	r3, sl, r3
 8007128:	eba3 0309 	sub.w	r3, r3, r9
 800712c:	4543      	cmp	r3, r8
 800712e:	f77f af7a 	ble.w	8007026 <_printf_float+0x242>
 8007132:	2301      	movs	r3, #1
 8007134:	465a      	mov	r2, fp
 8007136:	4631      	mov	r1, r6
 8007138:	4628      	mov	r0, r5
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	f43f aeac 	beq.w	8006e9a <_printf_float+0xb6>
 8007142:	f108 0801 	add.w	r8, r8, #1
 8007146:	e7ec      	b.n	8007122 <_printf_float+0x33e>
 8007148:	4642      	mov	r2, r8
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	d1c2      	bne.n	80070da <_printf_float+0x2f6>
 8007154:	e6a1      	b.n	8006e9a <_printf_float+0xb6>
 8007156:	2301      	movs	r3, #1
 8007158:	4631      	mov	r1, r6
 800715a:	4628      	mov	r0, r5
 800715c:	920a      	str	r2, [sp, #40]	@ 0x28
 800715e:	47b8      	blx	r7
 8007160:	3001      	adds	r0, #1
 8007162:	f43f ae9a 	beq.w	8006e9a <_printf_float+0xb6>
 8007166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007168:	f10b 0b01 	add.w	fp, fp, #1
 800716c:	e7bb      	b.n	80070e6 <_printf_float+0x302>
 800716e:	4631      	mov	r1, r6
 8007170:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	d1c0      	bne.n	80070fe <_printf_float+0x31a>
 800717c:	e68d      	b.n	8006e9a <_printf_float+0xb6>
 800717e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007180:	464b      	mov	r3, r9
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	4442      	add	r2, r8
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	d1c3      	bne.n	8007116 <_printf_float+0x332>
 800718e:	e684      	b.n	8006e9a <_printf_float+0xb6>
 8007190:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007194:	f1ba 0f01 	cmp.w	sl, #1
 8007198:	dc01      	bgt.n	800719e <_printf_float+0x3ba>
 800719a:	07db      	lsls	r3, r3, #31
 800719c:	d536      	bpl.n	800720c <_printf_float+0x428>
 800719e:	2301      	movs	r3, #1
 80071a0:	4642      	mov	r2, r8
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b8      	blx	r7
 80071a8:	3001      	adds	r0, #1
 80071aa:	f43f ae76 	beq.w	8006e9a <_printf_float+0xb6>
 80071ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f ae6e 	beq.w	8006e9a <_printf_float+0xb6>
 80071be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071c2:	2200      	movs	r2, #0
 80071c4:	2300      	movs	r3, #0
 80071c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071ca:	f7f9 fbed 	bl	80009a8 <__aeabi_dcmpeq>
 80071ce:	b9c0      	cbnz	r0, 8007202 <_printf_float+0x41e>
 80071d0:	4653      	mov	r3, sl
 80071d2:	f108 0201 	add.w	r2, r8, #1
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	d10c      	bne.n	80071fa <_printf_float+0x416>
 80071e0:	e65b      	b.n	8006e9a <_printf_float+0xb6>
 80071e2:	2301      	movs	r3, #1
 80071e4:	465a      	mov	r2, fp
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	f43f ae54 	beq.w	8006e9a <_printf_float+0xb6>
 80071f2:	f108 0801 	add.w	r8, r8, #1
 80071f6:	45d0      	cmp	r8, sl
 80071f8:	dbf3      	blt.n	80071e2 <_printf_float+0x3fe>
 80071fa:	464b      	mov	r3, r9
 80071fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007200:	e6e0      	b.n	8006fc4 <_printf_float+0x1e0>
 8007202:	f04f 0800 	mov.w	r8, #0
 8007206:	f104 0b1a 	add.w	fp, r4, #26
 800720a:	e7f4      	b.n	80071f6 <_printf_float+0x412>
 800720c:	2301      	movs	r3, #1
 800720e:	4642      	mov	r2, r8
 8007210:	e7e1      	b.n	80071d6 <_printf_float+0x3f2>
 8007212:	2301      	movs	r3, #1
 8007214:	464a      	mov	r2, r9
 8007216:	4631      	mov	r1, r6
 8007218:	4628      	mov	r0, r5
 800721a:	47b8      	blx	r7
 800721c:	3001      	adds	r0, #1
 800721e:	f43f ae3c 	beq.w	8006e9a <_printf_float+0xb6>
 8007222:	f108 0801 	add.w	r8, r8, #1
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800722a:	1a5b      	subs	r3, r3, r1
 800722c:	4543      	cmp	r3, r8
 800722e:	dcf0      	bgt.n	8007212 <_printf_float+0x42e>
 8007230:	e6fd      	b.n	800702e <_printf_float+0x24a>
 8007232:	f04f 0800 	mov.w	r8, #0
 8007236:	f104 0919 	add.w	r9, r4, #25
 800723a:	e7f4      	b.n	8007226 <_printf_float+0x442>

0800723c <_printf_common>:
 800723c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	4616      	mov	r6, r2
 8007242:	4698      	mov	r8, r3
 8007244:	688a      	ldr	r2, [r1, #8]
 8007246:	690b      	ldr	r3, [r1, #16]
 8007248:	4607      	mov	r7, r0
 800724a:	4293      	cmp	r3, r2
 800724c:	bfb8      	it	lt
 800724e:	4613      	movlt	r3, r2
 8007250:	6033      	str	r3, [r6, #0]
 8007252:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007256:	460c      	mov	r4, r1
 8007258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800725c:	b10a      	cbz	r2, 8007262 <_printf_common+0x26>
 800725e:	3301      	adds	r3, #1
 8007260:	6033      	str	r3, [r6, #0]
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	0699      	lsls	r1, r3, #26
 8007266:	bf42      	ittt	mi
 8007268:	6833      	ldrmi	r3, [r6, #0]
 800726a:	3302      	addmi	r3, #2
 800726c:	6033      	strmi	r3, [r6, #0]
 800726e:	6825      	ldr	r5, [r4, #0]
 8007270:	f015 0506 	ands.w	r5, r5, #6
 8007274:	d106      	bne.n	8007284 <_printf_common+0x48>
 8007276:	f104 0a19 	add.w	sl, r4, #25
 800727a:	68e3      	ldr	r3, [r4, #12]
 800727c:	6832      	ldr	r2, [r6, #0]
 800727e:	1a9b      	subs	r3, r3, r2
 8007280:	42ab      	cmp	r3, r5
 8007282:	dc2b      	bgt.n	80072dc <_printf_common+0xa0>
 8007284:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	3b00      	subs	r3, #0
 800728c:	bf18      	it	ne
 800728e:	2301      	movne	r3, #1
 8007290:	0692      	lsls	r2, r2, #26
 8007292:	d430      	bmi.n	80072f6 <_printf_common+0xba>
 8007294:	4641      	mov	r1, r8
 8007296:	4638      	mov	r0, r7
 8007298:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800729c:	47c8      	blx	r9
 800729e:	3001      	adds	r0, #1
 80072a0:	d023      	beq.n	80072ea <_printf_common+0xae>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	6922      	ldr	r2, [r4, #16]
 80072a6:	f003 0306 	and.w	r3, r3, #6
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	bf14      	ite	ne
 80072ae:	2500      	movne	r5, #0
 80072b0:	6833      	ldreq	r3, [r6, #0]
 80072b2:	f04f 0600 	mov.w	r6, #0
 80072b6:	bf08      	it	eq
 80072b8:	68e5      	ldreq	r5, [r4, #12]
 80072ba:	f104 041a 	add.w	r4, r4, #26
 80072be:	bf08      	it	eq
 80072c0:	1aed      	subeq	r5, r5, r3
 80072c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80072c6:	bf08      	it	eq
 80072c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072cc:	4293      	cmp	r3, r2
 80072ce:	bfc4      	itt	gt
 80072d0:	1a9b      	subgt	r3, r3, r2
 80072d2:	18ed      	addgt	r5, r5, r3
 80072d4:	42b5      	cmp	r5, r6
 80072d6:	d11a      	bne.n	800730e <_printf_common+0xd2>
 80072d8:	2000      	movs	r0, #0
 80072da:	e008      	b.n	80072ee <_printf_common+0xb2>
 80072dc:	2301      	movs	r3, #1
 80072de:	4652      	mov	r2, sl
 80072e0:	4641      	mov	r1, r8
 80072e2:	4638      	mov	r0, r7
 80072e4:	47c8      	blx	r9
 80072e6:	3001      	adds	r0, #1
 80072e8:	d103      	bne.n	80072f2 <_printf_common+0xb6>
 80072ea:	f04f 30ff 	mov.w	r0, #4294967295
 80072ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f2:	3501      	adds	r5, #1
 80072f4:	e7c1      	b.n	800727a <_printf_common+0x3e>
 80072f6:	2030      	movs	r0, #48	@ 0x30
 80072f8:	18e1      	adds	r1, r4, r3
 80072fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007304:	4422      	add	r2, r4
 8007306:	3302      	adds	r3, #2
 8007308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800730c:	e7c2      	b.n	8007294 <_printf_common+0x58>
 800730e:	2301      	movs	r3, #1
 8007310:	4622      	mov	r2, r4
 8007312:	4641      	mov	r1, r8
 8007314:	4638      	mov	r0, r7
 8007316:	47c8      	blx	r9
 8007318:	3001      	adds	r0, #1
 800731a:	d0e6      	beq.n	80072ea <_printf_common+0xae>
 800731c:	3601      	adds	r6, #1
 800731e:	e7d9      	b.n	80072d4 <_printf_common+0x98>

08007320 <_printf_i>:
 8007320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	7e0f      	ldrb	r7, [r1, #24]
 8007326:	4691      	mov	r9, r2
 8007328:	2f78      	cmp	r7, #120	@ 0x78
 800732a:	4680      	mov	r8, r0
 800732c:	460c      	mov	r4, r1
 800732e:	469a      	mov	sl, r3
 8007330:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007336:	d807      	bhi.n	8007348 <_printf_i+0x28>
 8007338:	2f62      	cmp	r7, #98	@ 0x62
 800733a:	d80a      	bhi.n	8007352 <_printf_i+0x32>
 800733c:	2f00      	cmp	r7, #0
 800733e:	f000 80d3 	beq.w	80074e8 <_printf_i+0x1c8>
 8007342:	2f58      	cmp	r7, #88	@ 0x58
 8007344:	f000 80ba 	beq.w	80074bc <_printf_i+0x19c>
 8007348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800734c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007350:	e03a      	b.n	80073c8 <_printf_i+0xa8>
 8007352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007356:	2b15      	cmp	r3, #21
 8007358:	d8f6      	bhi.n	8007348 <_printf_i+0x28>
 800735a:	a101      	add	r1, pc, #4	@ (adr r1, 8007360 <_printf_i+0x40>)
 800735c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007360:	080073b9 	.word	0x080073b9
 8007364:	080073cd 	.word	0x080073cd
 8007368:	08007349 	.word	0x08007349
 800736c:	08007349 	.word	0x08007349
 8007370:	08007349 	.word	0x08007349
 8007374:	08007349 	.word	0x08007349
 8007378:	080073cd 	.word	0x080073cd
 800737c:	08007349 	.word	0x08007349
 8007380:	08007349 	.word	0x08007349
 8007384:	08007349 	.word	0x08007349
 8007388:	08007349 	.word	0x08007349
 800738c:	080074cf 	.word	0x080074cf
 8007390:	080073f7 	.word	0x080073f7
 8007394:	08007489 	.word	0x08007489
 8007398:	08007349 	.word	0x08007349
 800739c:	08007349 	.word	0x08007349
 80073a0:	080074f1 	.word	0x080074f1
 80073a4:	08007349 	.word	0x08007349
 80073a8:	080073f7 	.word	0x080073f7
 80073ac:	08007349 	.word	0x08007349
 80073b0:	08007349 	.word	0x08007349
 80073b4:	08007491 	.word	0x08007491
 80073b8:	6833      	ldr	r3, [r6, #0]
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6032      	str	r2, [r6, #0]
 80073c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073c8:	2301      	movs	r3, #1
 80073ca:	e09e      	b.n	800750a <_printf_i+0x1ea>
 80073cc:	6833      	ldr	r3, [r6, #0]
 80073ce:	6820      	ldr	r0, [r4, #0]
 80073d0:	1d19      	adds	r1, r3, #4
 80073d2:	6031      	str	r1, [r6, #0]
 80073d4:	0606      	lsls	r6, r0, #24
 80073d6:	d501      	bpl.n	80073dc <_printf_i+0xbc>
 80073d8:	681d      	ldr	r5, [r3, #0]
 80073da:	e003      	b.n	80073e4 <_printf_i+0xc4>
 80073dc:	0645      	lsls	r5, r0, #25
 80073de:	d5fb      	bpl.n	80073d8 <_printf_i+0xb8>
 80073e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073e4:	2d00      	cmp	r5, #0
 80073e6:	da03      	bge.n	80073f0 <_printf_i+0xd0>
 80073e8:	232d      	movs	r3, #45	@ 0x2d
 80073ea:	426d      	negs	r5, r5
 80073ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073f0:	230a      	movs	r3, #10
 80073f2:	4859      	ldr	r0, [pc, #356]	@ (8007558 <_printf_i+0x238>)
 80073f4:	e011      	b.n	800741a <_printf_i+0xfa>
 80073f6:	6821      	ldr	r1, [r4, #0]
 80073f8:	6833      	ldr	r3, [r6, #0]
 80073fa:	0608      	lsls	r0, r1, #24
 80073fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007400:	d402      	bmi.n	8007408 <_printf_i+0xe8>
 8007402:	0649      	lsls	r1, r1, #25
 8007404:	bf48      	it	mi
 8007406:	b2ad      	uxthmi	r5, r5
 8007408:	2f6f      	cmp	r7, #111	@ 0x6f
 800740a:	6033      	str	r3, [r6, #0]
 800740c:	bf14      	ite	ne
 800740e:	230a      	movne	r3, #10
 8007410:	2308      	moveq	r3, #8
 8007412:	4851      	ldr	r0, [pc, #324]	@ (8007558 <_printf_i+0x238>)
 8007414:	2100      	movs	r1, #0
 8007416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800741a:	6866      	ldr	r6, [r4, #4]
 800741c:	2e00      	cmp	r6, #0
 800741e:	bfa8      	it	ge
 8007420:	6821      	ldrge	r1, [r4, #0]
 8007422:	60a6      	str	r6, [r4, #8]
 8007424:	bfa4      	itt	ge
 8007426:	f021 0104 	bicge.w	r1, r1, #4
 800742a:	6021      	strge	r1, [r4, #0]
 800742c:	b90d      	cbnz	r5, 8007432 <_printf_i+0x112>
 800742e:	2e00      	cmp	r6, #0
 8007430:	d04b      	beq.n	80074ca <_printf_i+0x1aa>
 8007432:	4616      	mov	r6, r2
 8007434:	fbb5 f1f3 	udiv	r1, r5, r3
 8007438:	fb03 5711 	mls	r7, r3, r1, r5
 800743c:	5dc7      	ldrb	r7, [r0, r7]
 800743e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007442:	462f      	mov	r7, r5
 8007444:	42bb      	cmp	r3, r7
 8007446:	460d      	mov	r5, r1
 8007448:	d9f4      	bls.n	8007434 <_printf_i+0x114>
 800744a:	2b08      	cmp	r3, #8
 800744c:	d10b      	bne.n	8007466 <_printf_i+0x146>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	07df      	lsls	r7, r3, #31
 8007452:	d508      	bpl.n	8007466 <_printf_i+0x146>
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	6861      	ldr	r1, [r4, #4]
 8007458:	4299      	cmp	r1, r3
 800745a:	bfde      	ittt	le
 800745c:	2330      	movle	r3, #48	@ 0x30
 800745e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007462:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007466:	1b92      	subs	r2, r2, r6
 8007468:	6122      	str	r2, [r4, #16]
 800746a:	464b      	mov	r3, r9
 800746c:	4621      	mov	r1, r4
 800746e:	4640      	mov	r0, r8
 8007470:	f8cd a000 	str.w	sl, [sp]
 8007474:	aa03      	add	r2, sp, #12
 8007476:	f7ff fee1 	bl	800723c <_printf_common>
 800747a:	3001      	adds	r0, #1
 800747c:	d14a      	bne.n	8007514 <_printf_i+0x1f4>
 800747e:	f04f 30ff 	mov.w	r0, #4294967295
 8007482:	b004      	add	sp, #16
 8007484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	f043 0320 	orr.w	r3, r3, #32
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	2778      	movs	r7, #120	@ 0x78
 8007492:	4832      	ldr	r0, [pc, #200]	@ (800755c <_printf_i+0x23c>)
 8007494:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	6831      	ldr	r1, [r6, #0]
 800749c:	061f      	lsls	r7, r3, #24
 800749e:	f851 5b04 	ldr.w	r5, [r1], #4
 80074a2:	d402      	bmi.n	80074aa <_printf_i+0x18a>
 80074a4:	065f      	lsls	r7, r3, #25
 80074a6:	bf48      	it	mi
 80074a8:	b2ad      	uxthmi	r5, r5
 80074aa:	6031      	str	r1, [r6, #0]
 80074ac:	07d9      	lsls	r1, r3, #31
 80074ae:	bf44      	itt	mi
 80074b0:	f043 0320 	orrmi.w	r3, r3, #32
 80074b4:	6023      	strmi	r3, [r4, #0]
 80074b6:	b11d      	cbz	r5, 80074c0 <_printf_i+0x1a0>
 80074b8:	2310      	movs	r3, #16
 80074ba:	e7ab      	b.n	8007414 <_printf_i+0xf4>
 80074bc:	4826      	ldr	r0, [pc, #152]	@ (8007558 <_printf_i+0x238>)
 80074be:	e7e9      	b.n	8007494 <_printf_i+0x174>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	f023 0320 	bic.w	r3, r3, #32
 80074c6:	6023      	str	r3, [r4, #0]
 80074c8:	e7f6      	b.n	80074b8 <_printf_i+0x198>
 80074ca:	4616      	mov	r6, r2
 80074cc:	e7bd      	b.n	800744a <_printf_i+0x12a>
 80074ce:	6833      	ldr	r3, [r6, #0]
 80074d0:	6825      	ldr	r5, [r4, #0]
 80074d2:	1d18      	adds	r0, r3, #4
 80074d4:	6961      	ldr	r1, [r4, #20]
 80074d6:	6030      	str	r0, [r6, #0]
 80074d8:	062e      	lsls	r6, r5, #24
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	d501      	bpl.n	80074e2 <_printf_i+0x1c2>
 80074de:	6019      	str	r1, [r3, #0]
 80074e0:	e002      	b.n	80074e8 <_printf_i+0x1c8>
 80074e2:	0668      	lsls	r0, r5, #25
 80074e4:	d5fb      	bpl.n	80074de <_printf_i+0x1be>
 80074e6:	8019      	strh	r1, [r3, #0]
 80074e8:	2300      	movs	r3, #0
 80074ea:	4616      	mov	r6, r2
 80074ec:	6123      	str	r3, [r4, #16]
 80074ee:	e7bc      	b.n	800746a <_printf_i+0x14a>
 80074f0:	6833      	ldr	r3, [r6, #0]
 80074f2:	2100      	movs	r1, #0
 80074f4:	1d1a      	adds	r2, r3, #4
 80074f6:	6032      	str	r2, [r6, #0]
 80074f8:	681e      	ldr	r6, [r3, #0]
 80074fa:	6862      	ldr	r2, [r4, #4]
 80074fc:	4630      	mov	r0, r6
 80074fe:	f000 fc10 	bl	8007d22 <memchr>
 8007502:	b108      	cbz	r0, 8007508 <_printf_i+0x1e8>
 8007504:	1b80      	subs	r0, r0, r6
 8007506:	6060      	str	r0, [r4, #4]
 8007508:	6863      	ldr	r3, [r4, #4]
 800750a:	6123      	str	r3, [r4, #16]
 800750c:	2300      	movs	r3, #0
 800750e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007512:	e7aa      	b.n	800746a <_printf_i+0x14a>
 8007514:	4632      	mov	r2, r6
 8007516:	4649      	mov	r1, r9
 8007518:	4640      	mov	r0, r8
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	47d0      	blx	sl
 800751e:	3001      	adds	r0, #1
 8007520:	d0ad      	beq.n	800747e <_printf_i+0x15e>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	079b      	lsls	r3, r3, #30
 8007526:	d413      	bmi.n	8007550 <_printf_i+0x230>
 8007528:	68e0      	ldr	r0, [r4, #12]
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	4298      	cmp	r0, r3
 800752e:	bfb8      	it	lt
 8007530:	4618      	movlt	r0, r3
 8007532:	e7a6      	b.n	8007482 <_printf_i+0x162>
 8007534:	2301      	movs	r3, #1
 8007536:	4632      	mov	r2, r6
 8007538:	4649      	mov	r1, r9
 800753a:	4640      	mov	r0, r8
 800753c:	47d0      	blx	sl
 800753e:	3001      	adds	r0, #1
 8007540:	d09d      	beq.n	800747e <_printf_i+0x15e>
 8007542:	3501      	adds	r5, #1
 8007544:	68e3      	ldr	r3, [r4, #12]
 8007546:	9903      	ldr	r1, [sp, #12]
 8007548:	1a5b      	subs	r3, r3, r1
 800754a:	42ab      	cmp	r3, r5
 800754c:	dcf2      	bgt.n	8007534 <_printf_i+0x214>
 800754e:	e7eb      	b.n	8007528 <_printf_i+0x208>
 8007550:	2500      	movs	r5, #0
 8007552:	f104 0619 	add.w	r6, r4, #25
 8007556:	e7f5      	b.n	8007544 <_printf_i+0x224>
 8007558:	0800bca0 	.word	0x0800bca0
 800755c:	0800bcb1 	.word	0x0800bcb1

08007560 <_scanf_float>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	b087      	sub	sp, #28
 8007566:	9303      	str	r3, [sp, #12]
 8007568:	688b      	ldr	r3, [r1, #8]
 800756a:	4617      	mov	r7, r2
 800756c:	1e5a      	subs	r2, r3, #1
 800756e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007572:	bf82      	ittt	hi
 8007574:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007578:	eb03 0b05 	addhi.w	fp, r3, r5
 800757c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007580:	460a      	mov	r2, r1
 8007582:	f04f 0500 	mov.w	r5, #0
 8007586:	bf88      	it	hi
 8007588:	608b      	strhi	r3, [r1, #8]
 800758a:	680b      	ldr	r3, [r1, #0]
 800758c:	4680      	mov	r8, r0
 800758e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007592:	f842 3b1c 	str.w	r3, [r2], #28
 8007596:	460c      	mov	r4, r1
 8007598:	bf98      	it	ls
 800759a:	f04f 0b00 	movls.w	fp, #0
 800759e:	4616      	mov	r6, r2
 80075a0:	46aa      	mov	sl, r5
 80075a2:	46a9      	mov	r9, r5
 80075a4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075a8:	9201      	str	r2, [sp, #4]
 80075aa:	9502      	str	r5, [sp, #8]
 80075ac:	68a2      	ldr	r2, [r4, #8]
 80075ae:	b152      	cbz	r2, 80075c6 <_scanf_float+0x66>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80075b6:	d865      	bhi.n	8007684 <_scanf_float+0x124>
 80075b8:	2b40      	cmp	r3, #64	@ 0x40
 80075ba:	d83d      	bhi.n	8007638 <_scanf_float+0xd8>
 80075bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80075c0:	b2c8      	uxtb	r0, r1
 80075c2:	280e      	cmp	r0, #14
 80075c4:	d93b      	bls.n	800763e <_scanf_float+0xde>
 80075c6:	f1b9 0f00 	cmp.w	r9, #0
 80075ca:	d003      	beq.n	80075d4 <_scanf_float+0x74>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075d8:	f1ba 0f01 	cmp.w	sl, #1
 80075dc:	f200 8118 	bhi.w	8007810 <_scanf_float+0x2b0>
 80075e0:	9b01      	ldr	r3, [sp, #4]
 80075e2:	429e      	cmp	r6, r3
 80075e4:	f200 8109 	bhi.w	80077fa <_scanf_float+0x29a>
 80075e8:	2001      	movs	r0, #1
 80075ea:	b007      	add	sp, #28
 80075ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80075f4:	2a0d      	cmp	r2, #13
 80075f6:	d8e6      	bhi.n	80075c6 <_scanf_float+0x66>
 80075f8:	a101      	add	r1, pc, #4	@ (adr r1, 8007600 <_scanf_float+0xa0>)
 80075fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007747 	.word	0x08007747
 8007604:	080075c7 	.word	0x080075c7
 8007608:	080075c7 	.word	0x080075c7
 800760c:	080075c7 	.word	0x080075c7
 8007610:	080077a7 	.word	0x080077a7
 8007614:	0800777f 	.word	0x0800777f
 8007618:	080075c7 	.word	0x080075c7
 800761c:	080075c7 	.word	0x080075c7
 8007620:	08007755 	.word	0x08007755
 8007624:	080075c7 	.word	0x080075c7
 8007628:	080075c7 	.word	0x080075c7
 800762c:	080075c7 	.word	0x080075c7
 8007630:	080075c7 	.word	0x080075c7
 8007634:	0800770d 	.word	0x0800770d
 8007638:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800763c:	e7da      	b.n	80075f4 <_scanf_float+0x94>
 800763e:	290e      	cmp	r1, #14
 8007640:	d8c1      	bhi.n	80075c6 <_scanf_float+0x66>
 8007642:	a001      	add	r0, pc, #4	@ (adr r0, 8007648 <_scanf_float+0xe8>)
 8007644:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007648:	080076fd 	.word	0x080076fd
 800764c:	080075c7 	.word	0x080075c7
 8007650:	080076fd 	.word	0x080076fd
 8007654:	08007793 	.word	0x08007793
 8007658:	080075c7 	.word	0x080075c7
 800765c:	080076a5 	.word	0x080076a5
 8007660:	080076e3 	.word	0x080076e3
 8007664:	080076e3 	.word	0x080076e3
 8007668:	080076e3 	.word	0x080076e3
 800766c:	080076e3 	.word	0x080076e3
 8007670:	080076e3 	.word	0x080076e3
 8007674:	080076e3 	.word	0x080076e3
 8007678:	080076e3 	.word	0x080076e3
 800767c:	080076e3 	.word	0x080076e3
 8007680:	080076e3 	.word	0x080076e3
 8007684:	2b6e      	cmp	r3, #110	@ 0x6e
 8007686:	d809      	bhi.n	800769c <_scanf_float+0x13c>
 8007688:	2b60      	cmp	r3, #96	@ 0x60
 800768a:	d8b1      	bhi.n	80075f0 <_scanf_float+0x90>
 800768c:	2b54      	cmp	r3, #84	@ 0x54
 800768e:	d07b      	beq.n	8007788 <_scanf_float+0x228>
 8007690:	2b59      	cmp	r3, #89	@ 0x59
 8007692:	d198      	bne.n	80075c6 <_scanf_float+0x66>
 8007694:	2d07      	cmp	r5, #7
 8007696:	d196      	bne.n	80075c6 <_scanf_float+0x66>
 8007698:	2508      	movs	r5, #8
 800769a:	e02c      	b.n	80076f6 <_scanf_float+0x196>
 800769c:	2b74      	cmp	r3, #116	@ 0x74
 800769e:	d073      	beq.n	8007788 <_scanf_float+0x228>
 80076a0:	2b79      	cmp	r3, #121	@ 0x79
 80076a2:	e7f6      	b.n	8007692 <_scanf_float+0x132>
 80076a4:	6821      	ldr	r1, [r4, #0]
 80076a6:	05c8      	lsls	r0, r1, #23
 80076a8:	d51b      	bpl.n	80076e2 <_scanf_float+0x182>
 80076aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80076ae:	6021      	str	r1, [r4, #0]
 80076b0:	f109 0901 	add.w	r9, r9, #1
 80076b4:	f1bb 0f00 	cmp.w	fp, #0
 80076b8:	d003      	beq.n	80076c2 <_scanf_float+0x162>
 80076ba:	3201      	adds	r2, #1
 80076bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076c0:	60a2      	str	r2, [r4, #8]
 80076c2:	68a3      	ldr	r3, [r4, #8]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	60a3      	str	r3, [r4, #8]
 80076c8:	6923      	ldr	r3, [r4, #16]
 80076ca:	3301      	adds	r3, #1
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	f340 8087 	ble.w	80077e8 <_scanf_float+0x288>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	3301      	adds	r3, #1
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	e764      	b.n	80075ac <_scanf_float+0x4c>
 80076e2:	eb1a 0105 	adds.w	r1, sl, r5
 80076e6:	f47f af6e 	bne.w	80075c6 <_scanf_float+0x66>
 80076ea:	460d      	mov	r5, r1
 80076ec:	468a      	mov	sl, r1
 80076ee:	6822      	ldr	r2, [r4, #0]
 80076f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80076f4:	6022      	str	r2, [r4, #0]
 80076f6:	f806 3b01 	strb.w	r3, [r6], #1
 80076fa:	e7e2      	b.n	80076c2 <_scanf_float+0x162>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	0610      	lsls	r0, r2, #24
 8007700:	f57f af61 	bpl.w	80075c6 <_scanf_float+0x66>
 8007704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007708:	6022      	str	r2, [r4, #0]
 800770a:	e7f4      	b.n	80076f6 <_scanf_float+0x196>
 800770c:	f1ba 0f00 	cmp.w	sl, #0
 8007710:	d10e      	bne.n	8007730 <_scanf_float+0x1d0>
 8007712:	f1b9 0f00 	cmp.w	r9, #0
 8007716:	d10e      	bne.n	8007736 <_scanf_float+0x1d6>
 8007718:	6822      	ldr	r2, [r4, #0]
 800771a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800771e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007722:	d108      	bne.n	8007736 <_scanf_float+0x1d6>
 8007724:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007728:	f04f 0a01 	mov.w	sl, #1
 800772c:	6022      	str	r2, [r4, #0]
 800772e:	e7e2      	b.n	80076f6 <_scanf_float+0x196>
 8007730:	f1ba 0f02 	cmp.w	sl, #2
 8007734:	d055      	beq.n	80077e2 <_scanf_float+0x282>
 8007736:	2d01      	cmp	r5, #1
 8007738:	d002      	beq.n	8007740 <_scanf_float+0x1e0>
 800773a:	2d04      	cmp	r5, #4
 800773c:	f47f af43 	bne.w	80075c6 <_scanf_float+0x66>
 8007740:	3501      	adds	r5, #1
 8007742:	b2ed      	uxtb	r5, r5
 8007744:	e7d7      	b.n	80076f6 <_scanf_float+0x196>
 8007746:	f1ba 0f01 	cmp.w	sl, #1
 800774a:	f47f af3c 	bne.w	80075c6 <_scanf_float+0x66>
 800774e:	f04f 0a02 	mov.w	sl, #2
 8007752:	e7d0      	b.n	80076f6 <_scanf_float+0x196>
 8007754:	b97d      	cbnz	r5, 8007776 <_scanf_float+0x216>
 8007756:	f1b9 0f00 	cmp.w	r9, #0
 800775a:	f47f af37 	bne.w	80075cc <_scanf_float+0x6c>
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007764:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007768:	f040 8103 	bne.w	8007972 <_scanf_float+0x412>
 800776c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007770:	2501      	movs	r5, #1
 8007772:	6022      	str	r2, [r4, #0]
 8007774:	e7bf      	b.n	80076f6 <_scanf_float+0x196>
 8007776:	2d03      	cmp	r5, #3
 8007778:	d0e2      	beq.n	8007740 <_scanf_float+0x1e0>
 800777a:	2d05      	cmp	r5, #5
 800777c:	e7de      	b.n	800773c <_scanf_float+0x1dc>
 800777e:	2d02      	cmp	r5, #2
 8007780:	f47f af21 	bne.w	80075c6 <_scanf_float+0x66>
 8007784:	2503      	movs	r5, #3
 8007786:	e7b6      	b.n	80076f6 <_scanf_float+0x196>
 8007788:	2d06      	cmp	r5, #6
 800778a:	f47f af1c 	bne.w	80075c6 <_scanf_float+0x66>
 800778e:	2507      	movs	r5, #7
 8007790:	e7b1      	b.n	80076f6 <_scanf_float+0x196>
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	0591      	lsls	r1, r2, #22
 8007796:	f57f af16 	bpl.w	80075c6 <_scanf_float+0x66>
 800779a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800779e:	6022      	str	r2, [r4, #0]
 80077a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80077a4:	e7a7      	b.n	80076f6 <_scanf_float+0x196>
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80077ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80077b0:	d006      	beq.n	80077c0 <_scanf_float+0x260>
 80077b2:	0550      	lsls	r0, r2, #21
 80077b4:	f57f af07 	bpl.w	80075c6 <_scanf_float+0x66>
 80077b8:	f1b9 0f00 	cmp.w	r9, #0
 80077bc:	f000 80d9 	beq.w	8007972 <_scanf_float+0x412>
 80077c0:	0591      	lsls	r1, r2, #22
 80077c2:	bf58      	it	pl
 80077c4:	9902      	ldrpl	r1, [sp, #8]
 80077c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80077ca:	bf58      	it	pl
 80077cc:	eba9 0101 	subpl.w	r1, r9, r1
 80077d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80077d4:	f04f 0900 	mov.w	r9, #0
 80077d8:	bf58      	it	pl
 80077da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077de:	6022      	str	r2, [r4, #0]
 80077e0:	e789      	b.n	80076f6 <_scanf_float+0x196>
 80077e2:	f04f 0a03 	mov.w	sl, #3
 80077e6:	e786      	b.n	80076f6 <_scanf_float+0x196>
 80077e8:	4639      	mov	r1, r7
 80077ea:	4640      	mov	r0, r8
 80077ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80077f0:	4798      	blx	r3
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f43f aeda 	beq.w	80075ac <_scanf_float+0x4c>
 80077f8:	e6e5      	b.n	80075c6 <_scanf_float+0x66>
 80077fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077fe:	463a      	mov	r2, r7
 8007800:	4640      	mov	r0, r8
 8007802:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007806:	4798      	blx	r3
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	3b01      	subs	r3, #1
 800780c:	6123      	str	r3, [r4, #16]
 800780e:	e6e7      	b.n	80075e0 <_scanf_float+0x80>
 8007810:	1e6b      	subs	r3, r5, #1
 8007812:	2b06      	cmp	r3, #6
 8007814:	d824      	bhi.n	8007860 <_scanf_float+0x300>
 8007816:	2d02      	cmp	r5, #2
 8007818:	d836      	bhi.n	8007888 <_scanf_float+0x328>
 800781a:	9b01      	ldr	r3, [sp, #4]
 800781c:	429e      	cmp	r6, r3
 800781e:	f67f aee3 	bls.w	80075e8 <_scanf_float+0x88>
 8007822:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007826:	463a      	mov	r2, r7
 8007828:	4640      	mov	r0, r8
 800782a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800782e:	4798      	blx	r3
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	3b01      	subs	r3, #1
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	e7f0      	b.n	800781a <_scanf_float+0x2ba>
 8007838:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800783c:	463a      	mov	r2, r7
 800783e:	4640      	mov	r0, r8
 8007840:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007844:	4798      	blx	r3
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	3b01      	subs	r3, #1
 800784a:	6123      	str	r3, [r4, #16]
 800784c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007850:	fa5f fa8a 	uxtb.w	sl, sl
 8007854:	f1ba 0f02 	cmp.w	sl, #2
 8007858:	d1ee      	bne.n	8007838 <_scanf_float+0x2d8>
 800785a:	3d03      	subs	r5, #3
 800785c:	b2ed      	uxtb	r5, r5
 800785e:	1b76      	subs	r6, r6, r5
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	05da      	lsls	r2, r3, #23
 8007864:	d530      	bpl.n	80078c8 <_scanf_float+0x368>
 8007866:	055b      	lsls	r3, r3, #21
 8007868:	d511      	bpl.n	800788e <_scanf_float+0x32e>
 800786a:	9b01      	ldr	r3, [sp, #4]
 800786c:	429e      	cmp	r6, r3
 800786e:	f67f aebb 	bls.w	80075e8 <_scanf_float+0x88>
 8007872:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007876:	463a      	mov	r2, r7
 8007878:	4640      	mov	r0, r8
 800787a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800787e:	4798      	blx	r3
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	3b01      	subs	r3, #1
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	e7f0      	b.n	800786a <_scanf_float+0x30a>
 8007888:	46aa      	mov	sl, r5
 800788a:	46b3      	mov	fp, r6
 800788c:	e7de      	b.n	800784c <_scanf_float+0x2ec>
 800788e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	2965      	cmp	r1, #101	@ 0x65
 8007896:	f103 33ff 	add.w	r3, r3, #4294967295
 800789a:	f106 35ff 	add.w	r5, r6, #4294967295
 800789e:	6123      	str	r3, [r4, #16]
 80078a0:	d00c      	beq.n	80078bc <_scanf_float+0x35c>
 80078a2:	2945      	cmp	r1, #69	@ 0x45
 80078a4:	d00a      	beq.n	80078bc <_scanf_float+0x35c>
 80078a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078aa:	463a      	mov	r2, r7
 80078ac:	4640      	mov	r0, r8
 80078ae:	4798      	blx	r3
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	1eb5      	subs	r5, r6, #2
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	463a      	mov	r2, r7
 80078be:	4640      	mov	r0, r8
 80078c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078c4:	4798      	blx	r3
 80078c6:	462e      	mov	r6, r5
 80078c8:	6822      	ldr	r2, [r4, #0]
 80078ca:	f012 0210 	ands.w	r2, r2, #16
 80078ce:	d001      	beq.n	80078d4 <_scanf_float+0x374>
 80078d0:	2000      	movs	r0, #0
 80078d2:	e68a      	b.n	80075ea <_scanf_float+0x8a>
 80078d4:	7032      	strb	r2, [r6, #0]
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e0:	d11c      	bne.n	800791c <_scanf_float+0x3bc>
 80078e2:	9b02      	ldr	r3, [sp, #8]
 80078e4:	454b      	cmp	r3, r9
 80078e6:	eba3 0209 	sub.w	r2, r3, r9
 80078ea:	d123      	bne.n	8007934 <_scanf_float+0x3d4>
 80078ec:	2200      	movs	r2, #0
 80078ee:	4640      	mov	r0, r8
 80078f0:	9901      	ldr	r1, [sp, #4]
 80078f2:	f002 fc29 	bl	800a148 <_strtod_r>
 80078f6:	9b03      	ldr	r3, [sp, #12]
 80078f8:	6825      	ldr	r5, [r4, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f015 0f02 	tst.w	r5, #2
 8007900:	4606      	mov	r6, r0
 8007902:	460f      	mov	r7, r1
 8007904:	f103 0204 	add.w	r2, r3, #4
 8007908:	d01f      	beq.n	800794a <_scanf_float+0x3ea>
 800790a:	9903      	ldr	r1, [sp, #12]
 800790c:	600a      	str	r2, [r1, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	e9c3 6700 	strd	r6, r7, [r3]
 8007914:	68e3      	ldr	r3, [r4, #12]
 8007916:	3301      	adds	r3, #1
 8007918:	60e3      	str	r3, [r4, #12]
 800791a:	e7d9      	b.n	80078d0 <_scanf_float+0x370>
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0e4      	beq.n	80078ec <_scanf_float+0x38c>
 8007922:	9905      	ldr	r1, [sp, #20]
 8007924:	230a      	movs	r3, #10
 8007926:	4640      	mov	r0, r8
 8007928:	3101      	adds	r1, #1
 800792a:	f002 fc8d 	bl	800a248 <_strtol_r>
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	9e05      	ldr	r6, [sp, #20]
 8007932:	1ac2      	subs	r2, r0, r3
 8007934:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007938:	429e      	cmp	r6, r3
 800793a:	bf28      	it	cs
 800793c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007940:	4630      	mov	r0, r6
 8007942:	490d      	ldr	r1, [pc, #52]	@ (8007978 <_scanf_float+0x418>)
 8007944:	f000 f8f0 	bl	8007b28 <siprintf>
 8007948:	e7d0      	b.n	80078ec <_scanf_float+0x38c>
 800794a:	076d      	lsls	r5, r5, #29
 800794c:	d4dd      	bmi.n	800790a <_scanf_float+0x3aa>
 800794e:	9d03      	ldr	r5, [sp, #12]
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	681d      	ldr	r5, [r3, #0]
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	f7f9 f858 	bl	8000a0c <__aeabi_dcmpun>
 800795c:	b120      	cbz	r0, 8007968 <_scanf_float+0x408>
 800795e:	4807      	ldr	r0, [pc, #28]	@ (800797c <_scanf_float+0x41c>)
 8007960:	f000 f9fc 	bl	8007d5c <nanf>
 8007964:	6028      	str	r0, [r5, #0]
 8007966:	e7d5      	b.n	8007914 <_scanf_float+0x3b4>
 8007968:	4630      	mov	r0, r6
 800796a:	4639      	mov	r1, r7
 800796c:	f7f9 f8ac 	bl	8000ac8 <__aeabi_d2f>
 8007970:	e7f8      	b.n	8007964 <_scanf_float+0x404>
 8007972:	f04f 0900 	mov.w	r9, #0
 8007976:	e62d      	b.n	80075d4 <_scanf_float+0x74>
 8007978:	0800bcc2 	.word	0x0800bcc2
 800797c:	0800c05d 	.word	0x0800c05d

08007980 <std>:
 8007980:	2300      	movs	r3, #0
 8007982:	b510      	push	{r4, lr}
 8007984:	4604      	mov	r4, r0
 8007986:	e9c0 3300 	strd	r3, r3, [r0]
 800798a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800798e:	6083      	str	r3, [r0, #8]
 8007990:	8181      	strh	r1, [r0, #12]
 8007992:	6643      	str	r3, [r0, #100]	@ 0x64
 8007994:	81c2      	strh	r2, [r0, #14]
 8007996:	6183      	str	r3, [r0, #24]
 8007998:	4619      	mov	r1, r3
 800799a:	2208      	movs	r2, #8
 800799c:	305c      	adds	r0, #92	@ 0x5c
 800799e:	f000 f940 	bl	8007c22 <memset>
 80079a2:	4b0d      	ldr	r3, [pc, #52]	@ (80079d8 <std+0x58>)
 80079a4:	6224      	str	r4, [r4, #32]
 80079a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80079a8:	4b0c      	ldr	r3, [pc, #48]	@ (80079dc <std+0x5c>)
 80079aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079ac:	4b0c      	ldr	r3, [pc, #48]	@ (80079e0 <std+0x60>)
 80079ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079b0:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <std+0x64>)
 80079b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80079b4:	4b0c      	ldr	r3, [pc, #48]	@ (80079e8 <std+0x68>)
 80079b6:	429c      	cmp	r4, r3
 80079b8:	d006      	beq.n	80079c8 <std+0x48>
 80079ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079be:	4294      	cmp	r4, r2
 80079c0:	d002      	beq.n	80079c8 <std+0x48>
 80079c2:	33d0      	adds	r3, #208	@ 0xd0
 80079c4:	429c      	cmp	r4, r3
 80079c6:	d105      	bne.n	80079d4 <std+0x54>
 80079c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d0:	f000 b9a4 	b.w	8007d1c <__retarget_lock_init_recursive>
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	bf00      	nop
 80079d8:	08007b69 	.word	0x08007b69
 80079dc:	08007b8b 	.word	0x08007b8b
 80079e0:	08007bc3 	.word	0x08007bc3
 80079e4:	08007be7 	.word	0x08007be7
 80079e8:	2000078c 	.word	0x2000078c

080079ec <stdio_exit_handler>:
 80079ec:	4a02      	ldr	r2, [pc, #8]	@ (80079f8 <stdio_exit_handler+0xc>)
 80079ee:	4903      	ldr	r1, [pc, #12]	@ (80079fc <stdio_exit_handler+0x10>)
 80079f0:	4803      	ldr	r0, [pc, #12]	@ (8007a00 <stdio_exit_handler+0x14>)
 80079f2:	f000 b869 	b.w	8007ac8 <_fwalk_sglue>
 80079f6:	bf00      	nop
 80079f8:	20000024 	.word	0x20000024
 80079fc:	0800a87d 	.word	0x0800a87d
 8007a00:	20000034 	.word	0x20000034

08007a04 <cleanup_stdio>:
 8007a04:	6841      	ldr	r1, [r0, #4]
 8007a06:	4b0c      	ldr	r3, [pc, #48]	@ (8007a38 <cleanup_stdio+0x34>)
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	d001      	beq.n	8007a14 <cleanup_stdio+0x10>
 8007a10:	f002 ff34 	bl	800a87c <_fflush_r>
 8007a14:	68a1      	ldr	r1, [r4, #8]
 8007a16:	4b09      	ldr	r3, [pc, #36]	@ (8007a3c <cleanup_stdio+0x38>)
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	d002      	beq.n	8007a22 <cleanup_stdio+0x1e>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f002 ff2d 	bl	800a87c <_fflush_r>
 8007a22:	68e1      	ldr	r1, [r4, #12]
 8007a24:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <cleanup_stdio+0x3c>)
 8007a26:	4299      	cmp	r1, r3
 8007a28:	d004      	beq.n	8007a34 <cleanup_stdio+0x30>
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a30:	f002 bf24 	b.w	800a87c <_fflush_r>
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	bf00      	nop
 8007a38:	2000078c 	.word	0x2000078c
 8007a3c:	200007f4 	.word	0x200007f4
 8007a40:	2000085c 	.word	0x2000085c

08007a44 <global_stdio_init.part.0>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <global_stdio_init.part.0+0x30>)
 8007a48:	4c0b      	ldr	r4, [pc, #44]	@ (8007a78 <global_stdio_init.part.0+0x34>)
 8007a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a7c <global_stdio_init.part.0+0x38>)
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	2104      	movs	r1, #4
 8007a52:	2200      	movs	r2, #0
 8007a54:	f7ff ff94 	bl	8007980 <std>
 8007a58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	2109      	movs	r1, #9
 8007a60:	f7ff ff8e 	bl	8007980 <std>
 8007a64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a68:	2202      	movs	r2, #2
 8007a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6e:	2112      	movs	r1, #18
 8007a70:	f7ff bf86 	b.w	8007980 <std>
 8007a74:	200008c4 	.word	0x200008c4
 8007a78:	2000078c 	.word	0x2000078c
 8007a7c:	080079ed 	.word	0x080079ed

08007a80 <__sfp_lock_acquire>:
 8007a80:	4801      	ldr	r0, [pc, #4]	@ (8007a88 <__sfp_lock_acquire+0x8>)
 8007a82:	f000 b94c 	b.w	8007d1e <__retarget_lock_acquire_recursive>
 8007a86:	bf00      	nop
 8007a88:	200008cd 	.word	0x200008cd

08007a8c <__sfp_lock_release>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	@ (8007a94 <__sfp_lock_release+0x8>)
 8007a8e:	f000 b947 	b.w	8007d20 <__retarget_lock_release_recursive>
 8007a92:	bf00      	nop
 8007a94:	200008cd 	.word	0x200008cd

08007a98 <__sinit>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	f7ff fff0 	bl	8007a80 <__sfp_lock_acquire>
 8007aa0:	6a23      	ldr	r3, [r4, #32]
 8007aa2:	b11b      	cbz	r3, 8007aac <__sinit+0x14>
 8007aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa8:	f7ff bff0 	b.w	8007a8c <__sfp_lock_release>
 8007aac:	4b04      	ldr	r3, [pc, #16]	@ (8007ac0 <__sinit+0x28>)
 8007aae:	6223      	str	r3, [r4, #32]
 8007ab0:	4b04      	ldr	r3, [pc, #16]	@ (8007ac4 <__sinit+0x2c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1f5      	bne.n	8007aa4 <__sinit+0xc>
 8007ab8:	f7ff ffc4 	bl	8007a44 <global_stdio_init.part.0>
 8007abc:	e7f2      	b.n	8007aa4 <__sinit+0xc>
 8007abe:	bf00      	nop
 8007ac0:	08007a05 	.word	0x08007a05
 8007ac4:	200008c4 	.word	0x200008c4

08007ac8 <_fwalk_sglue>:
 8007ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	4607      	mov	r7, r0
 8007ace:	4688      	mov	r8, r1
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	2600      	movs	r6, #0
 8007ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8007adc:	d505      	bpl.n	8007aea <_fwalk_sglue+0x22>
 8007ade:	6824      	ldr	r4, [r4, #0]
 8007ae0:	2c00      	cmp	r4, #0
 8007ae2:	d1f7      	bne.n	8007ad4 <_fwalk_sglue+0xc>
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aea:	89ab      	ldrh	r3, [r5, #12]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d907      	bls.n	8007b00 <_fwalk_sglue+0x38>
 8007af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007af4:	3301      	adds	r3, #1
 8007af6:	d003      	beq.n	8007b00 <_fwalk_sglue+0x38>
 8007af8:	4629      	mov	r1, r5
 8007afa:	4638      	mov	r0, r7
 8007afc:	47c0      	blx	r8
 8007afe:	4306      	orrs	r6, r0
 8007b00:	3568      	adds	r5, #104	@ 0x68
 8007b02:	e7e9      	b.n	8007ad8 <_fwalk_sglue+0x10>

08007b04 <iprintf>:
 8007b04:	b40f      	push	{r0, r1, r2, r3}
 8007b06:	b507      	push	{r0, r1, r2, lr}
 8007b08:	4906      	ldr	r1, [pc, #24]	@ (8007b24 <iprintf+0x20>)
 8007b0a:	ab04      	add	r3, sp, #16
 8007b0c:	6808      	ldr	r0, [r1, #0]
 8007b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b12:	6881      	ldr	r1, [r0, #8]
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	f002 fd19 	bl	800a54c <_vfiprintf_r>
 8007b1a:	b003      	add	sp, #12
 8007b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b20:	b004      	add	sp, #16
 8007b22:	4770      	bx	lr
 8007b24:	20000030 	.word	0x20000030

08007b28 <siprintf>:
 8007b28:	b40e      	push	{r1, r2, r3}
 8007b2a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b2e:	b500      	push	{lr}
 8007b30:	b09c      	sub	sp, #112	@ 0x70
 8007b32:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b34:	9002      	str	r0, [sp, #8]
 8007b36:	9006      	str	r0, [sp, #24]
 8007b38:	9107      	str	r1, [sp, #28]
 8007b3a:	9104      	str	r1, [sp, #16]
 8007b3c:	4808      	ldr	r0, [pc, #32]	@ (8007b60 <siprintf+0x38>)
 8007b3e:	4909      	ldr	r1, [pc, #36]	@ (8007b64 <siprintf+0x3c>)
 8007b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b44:	9105      	str	r1, [sp, #20]
 8007b46:	6800      	ldr	r0, [r0, #0]
 8007b48:	a902      	add	r1, sp, #8
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	f002 fbda 	bl	800a304 <_svfiprintf_r>
 8007b50:	2200      	movs	r2, #0
 8007b52:	9b02      	ldr	r3, [sp, #8]
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	b01c      	add	sp, #112	@ 0x70
 8007b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b5c:	b003      	add	sp, #12
 8007b5e:	4770      	bx	lr
 8007b60:	20000030 	.word	0x20000030
 8007b64:	ffff0208 	.word	0xffff0208

08007b68 <__sread>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b70:	f000 f886 	bl	8007c80 <_read_r>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	bfab      	itete	ge
 8007b78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b7c:	181b      	addge	r3, r3, r0
 8007b7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b82:	bfac      	ite	ge
 8007b84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b86:	81a3      	strhlt	r3, [r4, #12]
 8007b88:	bd10      	pop	{r4, pc}

08007b8a <__swrite>:
 8007b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8e:	461f      	mov	r7, r3
 8007b90:	898b      	ldrh	r3, [r1, #12]
 8007b92:	4605      	mov	r5, r0
 8007b94:	05db      	lsls	r3, r3, #23
 8007b96:	460c      	mov	r4, r1
 8007b98:	4616      	mov	r6, r2
 8007b9a:	d505      	bpl.n	8007ba8 <__swrite+0x1e>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba4:	f000 f85a 	bl	8007c5c <_lseek_r>
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	4632      	mov	r2, r6
 8007bac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbe:	f000 b871 	b.w	8007ca4 <_write_r>

08007bc2 <__sseek>:
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bca:	f000 f847 	bl	8007c5c <_lseek_r>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	bf15      	itete	ne
 8007bd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bde:	81a3      	strheq	r3, [r4, #12]
 8007be0:	bf18      	it	ne
 8007be2:	81a3      	strhne	r3, [r4, #12]
 8007be4:	bd10      	pop	{r4, pc}

08007be6 <__sclose>:
 8007be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bea:	f000 b827 	b.w	8007c3c <_close_r>

08007bee <memmove>:
 8007bee:	4288      	cmp	r0, r1
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	eb01 0402 	add.w	r4, r1, r2
 8007bf6:	d902      	bls.n	8007bfe <memmove+0x10>
 8007bf8:	4284      	cmp	r4, r0
 8007bfa:	4623      	mov	r3, r4
 8007bfc:	d807      	bhi.n	8007c0e <memmove+0x20>
 8007bfe:	1e43      	subs	r3, r0, #1
 8007c00:	42a1      	cmp	r1, r4
 8007c02:	d008      	beq.n	8007c16 <memmove+0x28>
 8007c04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c0c:	e7f8      	b.n	8007c00 <memmove+0x12>
 8007c0e:	4601      	mov	r1, r0
 8007c10:	4402      	add	r2, r0
 8007c12:	428a      	cmp	r2, r1
 8007c14:	d100      	bne.n	8007c18 <memmove+0x2a>
 8007c16:	bd10      	pop	{r4, pc}
 8007c18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c20:	e7f7      	b.n	8007c12 <memmove+0x24>

08007c22 <memset>:
 8007c22:	4603      	mov	r3, r0
 8007c24:	4402      	add	r2, r0
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d100      	bne.n	8007c2c <memset+0xa>
 8007c2a:	4770      	bx	lr
 8007c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8007c30:	e7f9      	b.n	8007c26 <memset+0x4>
	...

08007c34 <_localeconv_r>:
 8007c34:	4800      	ldr	r0, [pc, #0]	@ (8007c38 <_localeconv_r+0x4>)
 8007c36:	4770      	bx	lr
 8007c38:	20000170 	.word	0x20000170

08007c3c <_close_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4d05      	ldr	r5, [pc, #20]	@ (8007c58 <_close_r+0x1c>)
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7fa fdc9 	bl	80027de <_close>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_close_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_close_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200008c8 	.word	0x200008c8

08007c5c <_lseek_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	2200      	movs	r2, #0
 8007c66:	4d05      	ldr	r5, [pc, #20]	@ (8007c7c <_lseek_r+0x20>)
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7fa fddb 	bl	8002826 <_lseek>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_lseek_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_lseek_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200008c8 	.word	0x200008c8

08007c80 <_read_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	4611      	mov	r1, r2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4d05      	ldr	r5, [pc, #20]	@ (8007ca0 <_read_r+0x20>)
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7fa fd6c 	bl	800276c <_read>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_read_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_read_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	200008c8 	.word	0x200008c8

08007ca4 <_write_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	2200      	movs	r2, #0
 8007cae:	4d05      	ldr	r5, [pc, #20]	@ (8007cc4 <_write_r+0x20>)
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f7fa fd77 	bl	80027a6 <_write>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_write_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_write_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	200008c8 	.word	0x200008c8

08007cc8 <__errno>:
 8007cc8:	4b01      	ldr	r3, [pc, #4]	@ (8007cd0 <__errno+0x8>)
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	20000030 	.word	0x20000030

08007cd4 <__libc_init_array>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	2600      	movs	r6, #0
 8007cd8:	4d0c      	ldr	r5, [pc, #48]	@ (8007d0c <__libc_init_array+0x38>)
 8007cda:	4c0d      	ldr	r4, [pc, #52]	@ (8007d10 <__libc_init_array+0x3c>)
 8007cdc:	1b64      	subs	r4, r4, r5
 8007cde:	10a4      	asrs	r4, r4, #2
 8007ce0:	42a6      	cmp	r6, r4
 8007ce2:	d109      	bne.n	8007cf8 <__libc_init_array+0x24>
 8007ce4:	f003 fb50 	bl	800b388 <_init>
 8007ce8:	2600      	movs	r6, #0
 8007cea:	4d0a      	ldr	r5, [pc, #40]	@ (8007d14 <__libc_init_array+0x40>)
 8007cec:	4c0a      	ldr	r4, [pc, #40]	@ (8007d18 <__libc_init_array+0x44>)
 8007cee:	1b64      	subs	r4, r4, r5
 8007cf0:	10a4      	asrs	r4, r4, #2
 8007cf2:	42a6      	cmp	r6, r4
 8007cf4:	d105      	bne.n	8007d02 <__libc_init_array+0x2e>
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfc:	4798      	blx	r3
 8007cfe:	3601      	adds	r6, #1
 8007d00:	e7ee      	b.n	8007ce0 <__libc_init_array+0xc>
 8007d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d06:	4798      	blx	r3
 8007d08:	3601      	adds	r6, #1
 8007d0a:	e7f2      	b.n	8007cf2 <__libc_init_array+0x1e>
 8007d0c:	0800c0c8 	.word	0x0800c0c8
 8007d10:	0800c0c8 	.word	0x0800c0c8
 8007d14:	0800c0c8 	.word	0x0800c0c8
 8007d18:	0800c0cc 	.word	0x0800c0cc

08007d1c <__retarget_lock_init_recursive>:
 8007d1c:	4770      	bx	lr

08007d1e <__retarget_lock_acquire_recursive>:
 8007d1e:	4770      	bx	lr

08007d20 <__retarget_lock_release_recursive>:
 8007d20:	4770      	bx	lr

08007d22 <memchr>:
 8007d22:	4603      	mov	r3, r0
 8007d24:	b510      	push	{r4, lr}
 8007d26:	b2c9      	uxtb	r1, r1
 8007d28:	4402      	add	r2, r0
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	d101      	bne.n	8007d34 <memchr+0x12>
 8007d30:	2000      	movs	r0, #0
 8007d32:	e003      	b.n	8007d3c <memchr+0x1a>
 8007d34:	7804      	ldrb	r4, [r0, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	428c      	cmp	r4, r1
 8007d3a:	d1f6      	bne.n	8007d2a <memchr+0x8>
 8007d3c:	bd10      	pop	{r4, pc}

08007d3e <memcpy>:
 8007d3e:	440a      	add	r2, r1
 8007d40:	4291      	cmp	r1, r2
 8007d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d46:	d100      	bne.n	8007d4a <memcpy+0xc>
 8007d48:	4770      	bx	lr
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d50:	4291      	cmp	r1, r2
 8007d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d56:	d1f9      	bne.n	8007d4c <memcpy+0xe>
 8007d58:	bd10      	pop	{r4, pc}
	...

08007d5c <nanf>:
 8007d5c:	4800      	ldr	r0, [pc, #0]	@ (8007d60 <nanf+0x4>)
 8007d5e:	4770      	bx	lr
 8007d60:	7fc00000 	.word	0x7fc00000

08007d64 <quorem>:
 8007d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d68:	6903      	ldr	r3, [r0, #16]
 8007d6a:	690c      	ldr	r4, [r1, #16]
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	42a3      	cmp	r3, r4
 8007d70:	db7e      	blt.n	8007e70 <quorem+0x10c>
 8007d72:	3c01      	subs	r4, #1
 8007d74:	00a3      	lsls	r3, r4, #2
 8007d76:	f100 0514 	add.w	r5, r0, #20
 8007d7a:	f101 0814 	add.w	r8, r1, #20
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	429a      	cmp	r2, r3
 8007d92:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d9a:	d32e      	bcc.n	8007dfa <quorem+0x96>
 8007d9c:	f04f 0a00 	mov.w	sl, #0
 8007da0:	46c4      	mov	ip, r8
 8007da2:	46ae      	mov	lr, r5
 8007da4:	46d3      	mov	fp, sl
 8007da6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007daa:	b298      	uxth	r0, r3
 8007dac:	fb06 a000 	mla	r0, r6, r0, sl
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	0c02      	lsrs	r2, r0, #16
 8007db4:	fb06 2303 	mla	r3, r6, r3, r2
 8007db8:	f8de 2000 	ldr.w	r2, [lr]
 8007dbc:	b280      	uxth	r0, r0
 8007dbe:	b292      	uxth	r2, r2
 8007dc0:	1a12      	subs	r2, r2, r0
 8007dc2:	445a      	add	r2, fp
 8007dc4:	f8de 0000 	ldr.w	r0, [lr]
 8007dc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007dd2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ddc:	45e1      	cmp	r9, ip
 8007dde:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007de2:	f84e 2b04 	str.w	r2, [lr], #4
 8007de6:	d2de      	bcs.n	8007da6 <quorem+0x42>
 8007de8:	9b00      	ldr	r3, [sp, #0]
 8007dea:	58eb      	ldr	r3, [r5, r3]
 8007dec:	b92b      	cbnz	r3, 8007dfa <quorem+0x96>
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	3b04      	subs	r3, #4
 8007df2:	429d      	cmp	r5, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	d32f      	bcc.n	8007e58 <quorem+0xf4>
 8007df8:	613c      	str	r4, [r7, #16]
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f001 f9c4 	bl	8009188 <__mcmp>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	db25      	blt.n	8007e50 <quorem+0xec>
 8007e04:	4629      	mov	r1, r5
 8007e06:	2000      	movs	r0, #0
 8007e08:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e0c:	f8d1 c000 	ldr.w	ip, [r1]
 8007e10:	fa1f fe82 	uxth.w	lr, r2
 8007e14:	fa1f f38c 	uxth.w	r3, ip
 8007e18:	eba3 030e 	sub.w	r3, r3, lr
 8007e1c:	4403      	add	r3, r0
 8007e1e:	0c12      	lsrs	r2, r2, #16
 8007e20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e2e:	45c1      	cmp	r9, r8
 8007e30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e34:	f841 3b04 	str.w	r3, [r1], #4
 8007e38:	d2e6      	bcs.n	8007e08 <quorem+0xa4>
 8007e3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e42:	b922      	cbnz	r2, 8007e4e <quorem+0xea>
 8007e44:	3b04      	subs	r3, #4
 8007e46:	429d      	cmp	r5, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	d30b      	bcc.n	8007e64 <quorem+0x100>
 8007e4c:	613c      	str	r4, [r7, #16]
 8007e4e:	3601      	adds	r6, #1
 8007e50:	4630      	mov	r0, r6
 8007e52:	b003      	add	sp, #12
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	3b04      	subs	r3, #4
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	d1cb      	bne.n	8007df8 <quorem+0x94>
 8007e60:	3c01      	subs	r4, #1
 8007e62:	e7c6      	b.n	8007df2 <quorem+0x8e>
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	3b04      	subs	r3, #4
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	d1ef      	bne.n	8007e4c <quorem+0xe8>
 8007e6c:	3c01      	subs	r4, #1
 8007e6e:	e7ea      	b.n	8007e46 <quorem+0xe2>
 8007e70:	2000      	movs	r0, #0
 8007e72:	e7ee      	b.n	8007e52 <quorem+0xee>
 8007e74:	0000      	movs	r0, r0
	...

08007e78 <_dtoa_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	461d      	mov	r5, r3
 8007e80:	69c7      	ldr	r7, [r0, #28]
 8007e82:	b097      	sub	sp, #92	@ 0x5c
 8007e84:	4683      	mov	fp, r0
 8007e86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007e8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007e8c:	b97f      	cbnz	r7, 8007eae <_dtoa_r+0x36>
 8007e8e:	2010      	movs	r0, #16
 8007e90:	f000 fe02 	bl	8008a98 <malloc>
 8007e94:	4602      	mov	r2, r0
 8007e96:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e9a:	b920      	cbnz	r0, 8007ea6 <_dtoa_r+0x2e>
 8007e9c:	21ef      	movs	r1, #239	@ 0xef
 8007e9e:	4ba8      	ldr	r3, [pc, #672]	@ (8008140 <_dtoa_r+0x2c8>)
 8007ea0:	48a8      	ldr	r0, [pc, #672]	@ (8008144 <_dtoa_r+0x2cc>)
 8007ea2:	f002 fdcf 	bl	800aa44 <__assert_func>
 8007ea6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007eaa:	6007      	str	r7, [r0, #0]
 8007eac:	60c7      	str	r7, [r0, #12]
 8007eae:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007eb2:	6819      	ldr	r1, [r3, #0]
 8007eb4:	b159      	cbz	r1, 8007ece <_dtoa_r+0x56>
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	2301      	movs	r3, #1
 8007eba:	4093      	lsls	r3, r2
 8007ebc:	604a      	str	r2, [r1, #4]
 8007ebe:	608b      	str	r3, [r1, #8]
 8007ec0:	4658      	mov	r0, fp
 8007ec2:	f000 fedf 	bl	8008c84 <_Bfree>
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	1e2b      	subs	r3, r5, #0
 8007ed0:	bfaf      	iteee	ge
 8007ed2:	2300      	movge	r3, #0
 8007ed4:	2201      	movlt	r2, #1
 8007ed6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007eda:	9303      	strlt	r3, [sp, #12]
 8007edc:	bfa8      	it	ge
 8007ede:	6033      	strge	r3, [r6, #0]
 8007ee0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ee4:	4b98      	ldr	r3, [pc, #608]	@ (8008148 <_dtoa_r+0x2d0>)
 8007ee6:	bfb8      	it	lt
 8007ee8:	6032      	strlt	r2, [r6, #0]
 8007eea:	ea33 0308 	bics.w	r3, r3, r8
 8007eee:	d112      	bne.n	8007f16 <_dtoa_r+0x9e>
 8007ef0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ef4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007efc:	4323      	orrs	r3, r4
 8007efe:	f000 8550 	beq.w	80089a2 <_dtoa_r+0xb2a>
 8007f02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800814c <_dtoa_r+0x2d4>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8552 	beq.w	80089b2 <_dtoa_r+0xb3a>
 8007f0e:	f10a 0303 	add.w	r3, sl, #3
 8007f12:	f000 bd4c 	b.w	80089ae <_dtoa_r+0xb36>
 8007f16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f22:	2200      	movs	r2, #0
 8007f24:	2300      	movs	r3, #0
 8007f26:	f7f8 fd3f 	bl	80009a8 <__aeabi_dcmpeq>
 8007f2a:	4607      	mov	r7, r0
 8007f2c:	b158      	cbz	r0, 8007f46 <_dtoa_r+0xce>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f36:	b113      	cbz	r3, 8007f3e <_dtoa_r+0xc6>
 8007f38:	4b85      	ldr	r3, [pc, #532]	@ (8008150 <_dtoa_r+0x2d8>)
 8007f3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008154 <_dtoa_r+0x2dc>
 8007f42:	f000 bd36 	b.w	80089b2 <_dtoa_r+0xb3a>
 8007f46:	ab14      	add	r3, sp, #80	@ 0x50
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	ab15      	add	r3, sp, #84	@ 0x54
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	4658      	mov	r0, fp
 8007f50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f54:	f001 fa30 	bl	80093b8 <__d2b>
 8007f58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007f5c:	4681      	mov	r9, r0
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	d077      	beq.n	8008052 <_dtoa_r+0x1da>
 8007f62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f78:	9712      	str	r7, [sp, #72]	@ 0x48
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4b76      	ldr	r3, [pc, #472]	@ (8008158 <_dtoa_r+0x2e0>)
 8007f80:	f7f8 f8f2 	bl	8000168 <__aeabi_dsub>
 8007f84:	a368      	add	r3, pc, #416	@ (adr r3, 8008128 <_dtoa_r+0x2b0>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	a368      	add	r3, pc, #416	@ (adr r3, 8008130 <_dtoa_r+0x2b8>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 f8ea 	bl	800016c <__adddf3>
 8007f98:	4604      	mov	r4, r0
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	f7f8 fa31 	bl	8000404 <__aeabi_i2d>
 8007fa2:	a365      	add	r3, pc, #404	@ (adr r3, 8008138 <_dtoa_r+0x2c0>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 fa96 	bl	80004d8 <__aeabi_dmul>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	f7f8 f8da 	bl	800016c <__adddf3>
 8007fb8:	4604      	mov	r4, r0
 8007fba:	460d      	mov	r5, r1
 8007fbc:	f7f8 fd3c 	bl	8000a38 <__aeabi_d2iz>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4607      	mov	r7, r0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	4629      	mov	r1, r5
 8007fca:	f7f8 fcf7 	bl	80009bc <__aeabi_dcmplt>
 8007fce:	b140      	cbz	r0, 8007fe2 <_dtoa_r+0x16a>
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	f7f8 fa17 	bl	8000404 <__aeabi_i2d>
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	462b      	mov	r3, r5
 8007fda:	f7f8 fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8007fde:	b900      	cbnz	r0, 8007fe2 <_dtoa_r+0x16a>
 8007fe0:	3f01      	subs	r7, #1
 8007fe2:	2f16      	cmp	r7, #22
 8007fe4:	d853      	bhi.n	800808e <_dtoa_r+0x216>
 8007fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fea:	4b5c      	ldr	r3, [pc, #368]	@ (800815c <_dtoa_r+0x2e4>)
 8007fec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f7f8 fce2 	bl	80009bc <__aeabi_dcmplt>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d04a      	beq.n	8008092 <_dtoa_r+0x21a>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	3f01      	subs	r7, #1
 8008000:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008002:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008004:	1b9b      	subs	r3, r3, r6
 8008006:	1e5a      	subs	r2, r3, #1
 8008008:	bf46      	itte	mi
 800800a:	f1c3 0801 	rsbmi	r8, r3, #1
 800800e:	2300      	movmi	r3, #0
 8008010:	f04f 0800 	movpl.w	r8, #0
 8008014:	9209      	str	r2, [sp, #36]	@ 0x24
 8008016:	bf48      	it	mi
 8008018:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800801a:	2f00      	cmp	r7, #0
 800801c:	db3b      	blt.n	8008096 <_dtoa_r+0x21e>
 800801e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008020:	970e      	str	r7, [sp, #56]	@ 0x38
 8008022:	443b      	add	r3, r7
 8008024:	9309      	str	r3, [sp, #36]	@ 0x24
 8008026:	2300      	movs	r3, #0
 8008028:	930a      	str	r3, [sp, #40]	@ 0x28
 800802a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800802c:	2b09      	cmp	r3, #9
 800802e:	d866      	bhi.n	80080fe <_dtoa_r+0x286>
 8008030:	2b05      	cmp	r3, #5
 8008032:	bfc4      	itt	gt
 8008034:	3b04      	subgt	r3, #4
 8008036:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008038:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800803a:	bfc8      	it	gt
 800803c:	2400      	movgt	r4, #0
 800803e:	f1a3 0302 	sub.w	r3, r3, #2
 8008042:	bfd8      	it	le
 8008044:	2401      	movle	r4, #1
 8008046:	2b03      	cmp	r3, #3
 8008048:	d864      	bhi.n	8008114 <_dtoa_r+0x29c>
 800804a:	e8df f003 	tbb	[pc, r3]
 800804e:	382b      	.short	0x382b
 8008050:	5636      	.short	0x5636
 8008052:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008056:	441e      	add	r6, r3
 8008058:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800805c:	2b20      	cmp	r3, #32
 800805e:	bfc1      	itttt	gt
 8008060:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008064:	fa08 f803 	lslgt.w	r8, r8, r3
 8008068:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800806c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008070:	bfd6      	itet	le
 8008072:	f1c3 0320 	rsble	r3, r3, #32
 8008076:	ea48 0003 	orrgt.w	r0, r8, r3
 800807a:	fa04 f003 	lslle.w	r0, r4, r3
 800807e:	f7f8 f9b1 	bl	80003e4 <__aeabi_ui2d>
 8008082:	2201      	movs	r2, #1
 8008084:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008088:	3e01      	subs	r6, #1
 800808a:	9212      	str	r2, [sp, #72]	@ 0x48
 800808c:	e775      	b.n	8007f7a <_dtoa_r+0x102>
 800808e:	2301      	movs	r3, #1
 8008090:	e7b6      	b.n	8008000 <_dtoa_r+0x188>
 8008092:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008094:	e7b5      	b.n	8008002 <_dtoa_r+0x18a>
 8008096:	427b      	negs	r3, r7
 8008098:	930a      	str	r3, [sp, #40]	@ 0x28
 800809a:	2300      	movs	r3, #0
 800809c:	eba8 0807 	sub.w	r8, r8, r7
 80080a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80080a2:	e7c2      	b.n	800802a <_dtoa_r+0x1b2>
 80080a4:	2300      	movs	r3, #0
 80080a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dc35      	bgt.n	800811a <_dtoa_r+0x2a2>
 80080ae:	2301      	movs	r3, #1
 80080b0:	461a      	mov	r2, r3
 80080b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80080b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80080b8:	e00b      	b.n	80080d2 <_dtoa_r+0x25a>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e7f3      	b.n	80080a6 <_dtoa_r+0x22e>
 80080be:	2300      	movs	r3, #0
 80080c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080c4:	18fb      	adds	r3, r7, r3
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	3301      	adds	r3, #1
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	9307      	str	r3, [sp, #28]
 80080ce:	bfb8      	it	lt
 80080d0:	2301      	movlt	r3, #1
 80080d2:	2100      	movs	r1, #0
 80080d4:	2204      	movs	r2, #4
 80080d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080da:	f102 0514 	add.w	r5, r2, #20
 80080de:	429d      	cmp	r5, r3
 80080e0:	d91f      	bls.n	8008122 <_dtoa_r+0x2aa>
 80080e2:	6041      	str	r1, [r0, #4]
 80080e4:	4658      	mov	r0, fp
 80080e6:	f000 fd8d 	bl	8008c04 <_Balloc>
 80080ea:	4682      	mov	sl, r0
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d139      	bne.n	8008164 <_dtoa_r+0x2ec>
 80080f0:	4602      	mov	r2, r0
 80080f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80080f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008160 <_dtoa_r+0x2e8>)
 80080f8:	e6d2      	b.n	8007ea0 <_dtoa_r+0x28>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e7e0      	b.n	80080c0 <_dtoa_r+0x248>
 80080fe:	2401      	movs	r4, #1
 8008100:	2300      	movs	r3, #0
 8008102:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008104:	9320      	str	r3, [sp, #128]	@ 0x80
 8008106:	f04f 33ff 	mov.w	r3, #4294967295
 800810a:	2200      	movs	r2, #0
 800810c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008110:	2312      	movs	r3, #18
 8008112:	e7d0      	b.n	80080b6 <_dtoa_r+0x23e>
 8008114:	2301      	movs	r3, #1
 8008116:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008118:	e7f5      	b.n	8008106 <_dtoa_r+0x28e>
 800811a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800811c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008120:	e7d7      	b.n	80080d2 <_dtoa_r+0x25a>
 8008122:	3101      	adds	r1, #1
 8008124:	0052      	lsls	r2, r2, #1
 8008126:	e7d8      	b.n	80080da <_dtoa_r+0x262>
 8008128:	636f4361 	.word	0x636f4361
 800812c:	3fd287a7 	.word	0x3fd287a7
 8008130:	8b60c8b3 	.word	0x8b60c8b3
 8008134:	3fc68a28 	.word	0x3fc68a28
 8008138:	509f79fb 	.word	0x509f79fb
 800813c:	3fd34413 	.word	0x3fd34413
 8008140:	0800bcd4 	.word	0x0800bcd4
 8008144:	0800bceb 	.word	0x0800bceb
 8008148:	7ff00000 	.word	0x7ff00000
 800814c:	0800bcd0 	.word	0x0800bcd0
 8008150:	0800bc9f 	.word	0x0800bc9f
 8008154:	0800bc9e 	.word	0x0800bc9e
 8008158:	3ff80000 	.word	0x3ff80000
 800815c:	0800bde8 	.word	0x0800bde8
 8008160:	0800bd43 	.word	0x0800bd43
 8008164:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008168:	6018      	str	r0, [r3, #0]
 800816a:	9b07      	ldr	r3, [sp, #28]
 800816c:	2b0e      	cmp	r3, #14
 800816e:	f200 80a4 	bhi.w	80082ba <_dtoa_r+0x442>
 8008172:	2c00      	cmp	r4, #0
 8008174:	f000 80a1 	beq.w	80082ba <_dtoa_r+0x442>
 8008178:	2f00      	cmp	r7, #0
 800817a:	dd33      	ble.n	80081e4 <_dtoa_r+0x36c>
 800817c:	4b86      	ldr	r3, [pc, #536]	@ (8008398 <_dtoa_r+0x520>)
 800817e:	f007 020f 	and.w	r2, r7, #15
 8008182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008186:	05f8      	lsls	r0, r7, #23
 8008188:	e9d3 3400 	ldrd	r3, r4, [r3]
 800818c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008190:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008194:	d516      	bpl.n	80081c4 <_dtoa_r+0x34c>
 8008196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800819a:	4b80      	ldr	r3, [pc, #512]	@ (800839c <_dtoa_r+0x524>)
 800819c:	2603      	movs	r6, #3
 800819e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081a2:	f7f8 fac3 	bl	800072c <__aeabi_ddiv>
 80081a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081aa:	f004 040f 	and.w	r4, r4, #15
 80081ae:	4d7b      	ldr	r5, [pc, #492]	@ (800839c <_dtoa_r+0x524>)
 80081b0:	b954      	cbnz	r4, 80081c8 <_dtoa_r+0x350>
 80081b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ba:	f7f8 fab7 	bl	800072c <__aeabi_ddiv>
 80081be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c2:	e028      	b.n	8008216 <_dtoa_r+0x39e>
 80081c4:	2602      	movs	r6, #2
 80081c6:	e7f2      	b.n	80081ae <_dtoa_r+0x336>
 80081c8:	07e1      	lsls	r1, r4, #31
 80081ca:	d508      	bpl.n	80081de <_dtoa_r+0x366>
 80081cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081d4:	f7f8 f980 	bl	80004d8 <__aeabi_dmul>
 80081d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081dc:	3601      	adds	r6, #1
 80081de:	1064      	asrs	r4, r4, #1
 80081e0:	3508      	adds	r5, #8
 80081e2:	e7e5      	b.n	80081b0 <_dtoa_r+0x338>
 80081e4:	f000 80d2 	beq.w	800838c <_dtoa_r+0x514>
 80081e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ec:	427c      	negs	r4, r7
 80081ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008398 <_dtoa_r+0x520>)
 80081f0:	f004 020f 	and.w	r2, r4, #15
 80081f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f8 f96c 	bl	80004d8 <__aeabi_dmul>
 8008200:	2602      	movs	r6, #2
 8008202:	2300      	movs	r3, #0
 8008204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008208:	4d64      	ldr	r5, [pc, #400]	@ (800839c <_dtoa_r+0x524>)
 800820a:	1124      	asrs	r4, r4, #4
 800820c:	2c00      	cmp	r4, #0
 800820e:	f040 80b2 	bne.w	8008376 <_dtoa_r+0x4fe>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1d3      	bne.n	80081be <_dtoa_r+0x346>
 8008216:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800821a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80b7 	beq.w	8008390 <_dtoa_r+0x518>
 8008222:	2200      	movs	r2, #0
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	4b5d      	ldr	r3, [pc, #372]	@ (80083a0 <_dtoa_r+0x528>)
 800822a:	f7f8 fbc7 	bl	80009bc <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	f000 80ae 	beq.w	8008390 <_dtoa_r+0x518>
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80aa 	beq.w	8008390 <_dtoa_r+0x518>
 800823c:	9b08      	ldr	r3, [sp, #32]
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd37      	ble.n	80082b2 <_dtoa_r+0x43a>
 8008242:	1e7b      	subs	r3, r7, #1
 8008244:	4620      	mov	r0, r4
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	2200      	movs	r2, #0
 800824a:	4629      	mov	r1, r5
 800824c:	4b55      	ldr	r3, [pc, #340]	@ (80083a4 <_dtoa_r+0x52c>)
 800824e:	f7f8 f943 	bl	80004d8 <__aeabi_dmul>
 8008252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008256:	9c08      	ldr	r4, [sp, #32]
 8008258:	3601      	adds	r6, #1
 800825a:	4630      	mov	r0, r6
 800825c:	f7f8 f8d2 	bl	8000404 <__aeabi_i2d>
 8008260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008264:	f7f8 f938 	bl	80004d8 <__aeabi_dmul>
 8008268:	2200      	movs	r2, #0
 800826a:	4b4f      	ldr	r3, [pc, #316]	@ (80083a8 <_dtoa_r+0x530>)
 800826c:	f7f7 ff7e 	bl	800016c <__adddf3>
 8008270:	4605      	mov	r5, r0
 8008272:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008276:	2c00      	cmp	r4, #0
 8008278:	f040 809a 	bne.w	80083b0 <_dtoa_r+0x538>
 800827c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008280:	2200      	movs	r2, #0
 8008282:	4b4a      	ldr	r3, [pc, #296]	@ (80083ac <_dtoa_r+0x534>)
 8008284:	f7f7 ff70 	bl	8000168 <__aeabi_dsub>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008290:	462a      	mov	r2, r5
 8008292:	4633      	mov	r3, r6
 8008294:	f7f8 fbb0 	bl	80009f8 <__aeabi_dcmpgt>
 8008298:	2800      	cmp	r0, #0
 800829a:	f040 828e 	bne.w	80087ba <_dtoa_r+0x942>
 800829e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a2:	462a      	mov	r2, r5
 80082a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082a8:	f7f8 fb88 	bl	80009bc <__aeabi_dcmplt>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f040 8127 	bne.w	8008500 <_dtoa_r+0x688>
 80082b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80082b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f2c0 8163 	blt.w	8008588 <_dtoa_r+0x710>
 80082c2:	2f0e      	cmp	r7, #14
 80082c4:	f300 8160 	bgt.w	8008588 <_dtoa_r+0x710>
 80082c8:	4b33      	ldr	r3, [pc, #204]	@ (8008398 <_dtoa_r+0x520>)
 80082ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082d8:	2b00      	cmp	r3, #0
 80082da:	da03      	bge.n	80082e4 <_dtoa_r+0x46c>
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f340 8100 	ble.w	80084e4 <_dtoa_r+0x66c>
 80082e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082e8:	4656      	mov	r6, sl
 80082ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ee:	4620      	mov	r0, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	f7f8 fa1b 	bl	800072c <__aeabi_ddiv>
 80082f6:	f7f8 fb9f 	bl	8000a38 <__aeabi_d2iz>
 80082fa:	4680      	mov	r8, r0
 80082fc:	f7f8 f882 	bl	8000404 <__aeabi_i2d>
 8008300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008304:	f7f8 f8e8 	bl	80004d8 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4620      	mov	r0, r4
 800830e:	4629      	mov	r1, r5
 8008310:	f7f7 ff2a 	bl	8000168 <__aeabi_dsub>
 8008314:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008318:	9d07      	ldr	r5, [sp, #28]
 800831a:	f806 4b01 	strb.w	r4, [r6], #1
 800831e:	eba6 040a 	sub.w	r4, r6, sl
 8008322:	42a5      	cmp	r5, r4
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	f040 8116 	bne.w	8008558 <_dtoa_r+0x6e0>
 800832c:	f7f7 ff1e 	bl	800016c <__adddf3>
 8008330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008334:	4604      	mov	r4, r0
 8008336:	460d      	mov	r5, r1
 8008338:	f7f8 fb5e 	bl	80009f8 <__aeabi_dcmpgt>
 800833c:	2800      	cmp	r0, #0
 800833e:	f040 80f8 	bne.w	8008532 <_dtoa_r+0x6ba>
 8008342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f8 fb2d 	bl	80009a8 <__aeabi_dcmpeq>
 800834e:	b118      	cbz	r0, 8008358 <_dtoa_r+0x4e0>
 8008350:	f018 0f01 	tst.w	r8, #1
 8008354:	f040 80ed 	bne.w	8008532 <_dtoa_r+0x6ba>
 8008358:	4649      	mov	r1, r9
 800835a:	4658      	mov	r0, fp
 800835c:	f000 fc92 	bl	8008c84 <_Bfree>
 8008360:	2300      	movs	r3, #0
 8008362:	7033      	strb	r3, [r6, #0]
 8008364:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008366:	3701      	adds	r7, #1
 8008368:	601f      	str	r7, [r3, #0]
 800836a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 8320 	beq.w	80089b2 <_dtoa_r+0xb3a>
 8008372:	601e      	str	r6, [r3, #0]
 8008374:	e31d      	b.n	80089b2 <_dtoa_r+0xb3a>
 8008376:	07e2      	lsls	r2, r4, #31
 8008378:	d505      	bpl.n	8008386 <_dtoa_r+0x50e>
 800837a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800837e:	f7f8 f8ab 	bl	80004d8 <__aeabi_dmul>
 8008382:	2301      	movs	r3, #1
 8008384:	3601      	adds	r6, #1
 8008386:	1064      	asrs	r4, r4, #1
 8008388:	3508      	adds	r5, #8
 800838a:	e73f      	b.n	800820c <_dtoa_r+0x394>
 800838c:	2602      	movs	r6, #2
 800838e:	e742      	b.n	8008216 <_dtoa_r+0x39e>
 8008390:	9c07      	ldr	r4, [sp, #28]
 8008392:	9704      	str	r7, [sp, #16]
 8008394:	e761      	b.n	800825a <_dtoa_r+0x3e2>
 8008396:	bf00      	nop
 8008398:	0800bde8 	.word	0x0800bde8
 800839c:	0800bdc0 	.word	0x0800bdc0
 80083a0:	3ff00000 	.word	0x3ff00000
 80083a4:	40240000 	.word	0x40240000
 80083a8:	401c0000 	.word	0x401c0000
 80083ac:	40140000 	.word	0x40140000
 80083b0:	4b70      	ldr	r3, [pc, #448]	@ (8008574 <_dtoa_r+0x6fc>)
 80083b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083bc:	4454      	add	r4, sl
 80083be:	2900      	cmp	r1, #0
 80083c0:	d045      	beq.n	800844e <_dtoa_r+0x5d6>
 80083c2:	2000      	movs	r0, #0
 80083c4:	496c      	ldr	r1, [pc, #432]	@ (8008578 <_dtoa_r+0x700>)
 80083c6:	f7f8 f9b1 	bl	800072c <__aeabi_ddiv>
 80083ca:	4633      	mov	r3, r6
 80083cc:	462a      	mov	r2, r5
 80083ce:	f7f7 fecb 	bl	8000168 <__aeabi_dsub>
 80083d2:	4656      	mov	r6, sl
 80083d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083dc:	f7f8 fb2c 	bl	8000a38 <__aeabi_d2iz>
 80083e0:	4605      	mov	r5, r0
 80083e2:	f7f8 f80f 	bl	8000404 <__aeabi_i2d>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ee:	f7f7 febb 	bl	8000168 <__aeabi_dsub>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	3530      	adds	r5, #48	@ 0x30
 80083f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008400:	f806 5b01 	strb.w	r5, [r6], #1
 8008404:	f7f8 fada 	bl	80009bc <__aeabi_dcmplt>
 8008408:	2800      	cmp	r0, #0
 800840a:	d163      	bne.n	80084d4 <_dtoa_r+0x65c>
 800840c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008410:	2000      	movs	r0, #0
 8008412:	495a      	ldr	r1, [pc, #360]	@ (800857c <_dtoa_r+0x704>)
 8008414:	f7f7 fea8 	bl	8000168 <__aeabi_dsub>
 8008418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800841c:	f7f8 face 	bl	80009bc <__aeabi_dcmplt>
 8008420:	2800      	cmp	r0, #0
 8008422:	f040 8087 	bne.w	8008534 <_dtoa_r+0x6bc>
 8008426:	42a6      	cmp	r6, r4
 8008428:	f43f af43 	beq.w	80082b2 <_dtoa_r+0x43a>
 800842c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008430:	2200      	movs	r2, #0
 8008432:	4b53      	ldr	r3, [pc, #332]	@ (8008580 <_dtoa_r+0x708>)
 8008434:	f7f8 f850 	bl	80004d8 <__aeabi_dmul>
 8008438:	2200      	movs	r2, #0
 800843a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800843e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008442:	4b4f      	ldr	r3, [pc, #316]	@ (8008580 <_dtoa_r+0x708>)
 8008444:	f7f8 f848 	bl	80004d8 <__aeabi_dmul>
 8008448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800844c:	e7c4      	b.n	80083d8 <_dtoa_r+0x560>
 800844e:	4631      	mov	r1, r6
 8008450:	4628      	mov	r0, r5
 8008452:	f7f8 f841 	bl	80004d8 <__aeabi_dmul>
 8008456:	4656      	mov	r6, sl
 8008458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800845c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800845e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008462:	f7f8 fae9 	bl	8000a38 <__aeabi_d2iz>
 8008466:	4605      	mov	r5, r0
 8008468:	f7f7 ffcc 	bl	8000404 <__aeabi_i2d>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008474:	f7f7 fe78 	bl	8000168 <__aeabi_dsub>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	3530      	adds	r5, #48	@ 0x30
 800847e:	f806 5b01 	strb.w	r5, [r6], #1
 8008482:	42a6      	cmp	r6, r4
 8008484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	d124      	bne.n	80084d8 <_dtoa_r+0x660>
 800848e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008492:	4b39      	ldr	r3, [pc, #228]	@ (8008578 <_dtoa_r+0x700>)
 8008494:	f7f7 fe6a 	bl	800016c <__adddf3>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a0:	f7f8 faaa 	bl	80009f8 <__aeabi_dcmpgt>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d145      	bne.n	8008534 <_dtoa_r+0x6bc>
 80084a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084ac:	2000      	movs	r0, #0
 80084ae:	4932      	ldr	r1, [pc, #200]	@ (8008578 <_dtoa_r+0x700>)
 80084b0:	f7f7 fe5a 	bl	8000168 <__aeabi_dsub>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084bc:	f7f8 fa7e 	bl	80009bc <__aeabi_dcmplt>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	f43f aef6 	beq.w	80082b2 <_dtoa_r+0x43a>
 80084c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80084c8:	1e73      	subs	r3, r6, #1
 80084ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084d0:	2b30      	cmp	r3, #48	@ 0x30
 80084d2:	d0f8      	beq.n	80084c6 <_dtoa_r+0x64e>
 80084d4:	9f04      	ldr	r7, [sp, #16]
 80084d6:	e73f      	b.n	8008358 <_dtoa_r+0x4e0>
 80084d8:	4b29      	ldr	r3, [pc, #164]	@ (8008580 <_dtoa_r+0x708>)
 80084da:	f7f7 fffd 	bl	80004d8 <__aeabi_dmul>
 80084de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e2:	e7bc      	b.n	800845e <_dtoa_r+0x5e6>
 80084e4:	d10c      	bne.n	8008500 <_dtoa_r+0x688>
 80084e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084ea:	2200      	movs	r2, #0
 80084ec:	4b25      	ldr	r3, [pc, #148]	@ (8008584 <_dtoa_r+0x70c>)
 80084ee:	f7f7 fff3 	bl	80004d8 <__aeabi_dmul>
 80084f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084f6:	f7f8 fa75 	bl	80009e4 <__aeabi_dcmpge>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f000 815b 	beq.w	80087b6 <_dtoa_r+0x93e>
 8008500:	2400      	movs	r4, #0
 8008502:	4625      	mov	r5, r4
 8008504:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008506:	4656      	mov	r6, sl
 8008508:	43db      	mvns	r3, r3
 800850a:	9304      	str	r3, [sp, #16]
 800850c:	2700      	movs	r7, #0
 800850e:	4621      	mov	r1, r4
 8008510:	4658      	mov	r0, fp
 8008512:	f000 fbb7 	bl	8008c84 <_Bfree>
 8008516:	2d00      	cmp	r5, #0
 8008518:	d0dc      	beq.n	80084d4 <_dtoa_r+0x65c>
 800851a:	b12f      	cbz	r7, 8008528 <_dtoa_r+0x6b0>
 800851c:	42af      	cmp	r7, r5
 800851e:	d003      	beq.n	8008528 <_dtoa_r+0x6b0>
 8008520:	4639      	mov	r1, r7
 8008522:	4658      	mov	r0, fp
 8008524:	f000 fbae 	bl	8008c84 <_Bfree>
 8008528:	4629      	mov	r1, r5
 800852a:	4658      	mov	r0, fp
 800852c:	f000 fbaa 	bl	8008c84 <_Bfree>
 8008530:	e7d0      	b.n	80084d4 <_dtoa_r+0x65c>
 8008532:	9704      	str	r7, [sp, #16]
 8008534:	4633      	mov	r3, r6
 8008536:	461e      	mov	r6, r3
 8008538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800853c:	2a39      	cmp	r2, #57	@ 0x39
 800853e:	d107      	bne.n	8008550 <_dtoa_r+0x6d8>
 8008540:	459a      	cmp	sl, r3
 8008542:	d1f8      	bne.n	8008536 <_dtoa_r+0x6be>
 8008544:	9a04      	ldr	r2, [sp, #16]
 8008546:	3201      	adds	r2, #1
 8008548:	9204      	str	r2, [sp, #16]
 800854a:	2230      	movs	r2, #48	@ 0x30
 800854c:	f88a 2000 	strb.w	r2, [sl]
 8008550:	781a      	ldrb	r2, [r3, #0]
 8008552:	3201      	adds	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	e7bd      	b.n	80084d4 <_dtoa_r+0x65c>
 8008558:	2200      	movs	r2, #0
 800855a:	4b09      	ldr	r3, [pc, #36]	@ (8008580 <_dtoa_r+0x708>)
 800855c:	f7f7 ffbc 	bl	80004d8 <__aeabi_dmul>
 8008560:	2200      	movs	r2, #0
 8008562:	2300      	movs	r3, #0
 8008564:	4604      	mov	r4, r0
 8008566:	460d      	mov	r5, r1
 8008568:	f7f8 fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800856c:	2800      	cmp	r0, #0
 800856e:	f43f aebc 	beq.w	80082ea <_dtoa_r+0x472>
 8008572:	e6f1      	b.n	8008358 <_dtoa_r+0x4e0>
 8008574:	0800bde8 	.word	0x0800bde8
 8008578:	3fe00000 	.word	0x3fe00000
 800857c:	3ff00000 	.word	0x3ff00000
 8008580:	40240000 	.word	0x40240000
 8008584:	40140000 	.word	0x40140000
 8008588:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800858a:	2a00      	cmp	r2, #0
 800858c:	f000 80db 	beq.w	8008746 <_dtoa_r+0x8ce>
 8008590:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008592:	2a01      	cmp	r2, #1
 8008594:	f300 80bf 	bgt.w	8008716 <_dtoa_r+0x89e>
 8008598:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800859a:	2a00      	cmp	r2, #0
 800859c:	f000 80b7 	beq.w	800870e <_dtoa_r+0x896>
 80085a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085a4:	4646      	mov	r6, r8
 80085a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085aa:	2101      	movs	r1, #1
 80085ac:	441a      	add	r2, r3
 80085ae:	4658      	mov	r0, fp
 80085b0:	4498      	add	r8, r3
 80085b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80085b4:	f000 fc64 	bl	8008e80 <__i2b>
 80085b8:	4605      	mov	r5, r0
 80085ba:	b15e      	cbz	r6, 80085d4 <_dtoa_r+0x75c>
 80085bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd08      	ble.n	80085d4 <_dtoa_r+0x75c>
 80085c2:	42b3      	cmp	r3, r6
 80085c4:	bfa8      	it	ge
 80085c6:	4633      	movge	r3, r6
 80085c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ca:	eba8 0803 	sub.w	r8, r8, r3
 80085ce:	1af6      	subs	r6, r6, r3
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085d6:	b1f3      	cbz	r3, 8008616 <_dtoa_r+0x79e>
 80085d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80b7 	beq.w	800874e <_dtoa_r+0x8d6>
 80085e0:	b18c      	cbz	r4, 8008606 <_dtoa_r+0x78e>
 80085e2:	4629      	mov	r1, r5
 80085e4:	4622      	mov	r2, r4
 80085e6:	4658      	mov	r0, fp
 80085e8:	f000 fd08 	bl	8008ffc <__pow5mult>
 80085ec:	464a      	mov	r2, r9
 80085ee:	4601      	mov	r1, r0
 80085f0:	4605      	mov	r5, r0
 80085f2:	4658      	mov	r0, fp
 80085f4:	f000 fc5a 	bl	8008eac <__multiply>
 80085f8:	4649      	mov	r1, r9
 80085fa:	9004      	str	r0, [sp, #16]
 80085fc:	4658      	mov	r0, fp
 80085fe:	f000 fb41 	bl	8008c84 <_Bfree>
 8008602:	9b04      	ldr	r3, [sp, #16]
 8008604:	4699      	mov	r9, r3
 8008606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008608:	1b1a      	subs	r2, r3, r4
 800860a:	d004      	beq.n	8008616 <_dtoa_r+0x79e>
 800860c:	4649      	mov	r1, r9
 800860e:	4658      	mov	r0, fp
 8008610:	f000 fcf4 	bl	8008ffc <__pow5mult>
 8008614:	4681      	mov	r9, r0
 8008616:	2101      	movs	r1, #1
 8008618:	4658      	mov	r0, fp
 800861a:	f000 fc31 	bl	8008e80 <__i2b>
 800861e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008620:	4604      	mov	r4, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 81c9 	beq.w	80089ba <_dtoa_r+0xb42>
 8008628:	461a      	mov	r2, r3
 800862a:	4601      	mov	r1, r0
 800862c:	4658      	mov	r0, fp
 800862e:	f000 fce5 	bl	8008ffc <__pow5mult>
 8008632:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008634:	4604      	mov	r4, r0
 8008636:	2b01      	cmp	r3, #1
 8008638:	f300 808f 	bgt.w	800875a <_dtoa_r+0x8e2>
 800863c:	9b02      	ldr	r3, [sp, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f040 8087 	bne.w	8008752 <_dtoa_r+0x8da>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800864a:	2b00      	cmp	r3, #0
 800864c:	f040 8083 	bne.w	8008756 <_dtoa_r+0x8de>
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008656:	0d1b      	lsrs	r3, r3, #20
 8008658:	051b      	lsls	r3, r3, #20
 800865a:	b12b      	cbz	r3, 8008668 <_dtoa_r+0x7f0>
 800865c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800865e:	f108 0801 	add.w	r8, r8, #1
 8008662:	3301      	adds	r3, #1
 8008664:	9309      	str	r3, [sp, #36]	@ 0x24
 8008666:	2301      	movs	r3, #1
 8008668:	930a      	str	r3, [sp, #40]	@ 0x28
 800866a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 81aa 	beq.w	80089c6 <_dtoa_r+0xb4e>
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008678:	6918      	ldr	r0, [r3, #16]
 800867a:	f000 fbb5 	bl	8008de8 <__hi0bits>
 800867e:	f1c0 0020 	rsb	r0, r0, #32
 8008682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008684:	4418      	add	r0, r3
 8008686:	f010 001f 	ands.w	r0, r0, #31
 800868a:	d071      	beq.n	8008770 <_dtoa_r+0x8f8>
 800868c:	f1c0 0320 	rsb	r3, r0, #32
 8008690:	2b04      	cmp	r3, #4
 8008692:	dd65      	ble.n	8008760 <_dtoa_r+0x8e8>
 8008694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008696:	f1c0 001c 	rsb	r0, r0, #28
 800869a:	4403      	add	r3, r0
 800869c:	4480      	add	r8, r0
 800869e:	4406      	add	r6, r0
 80086a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086a2:	f1b8 0f00 	cmp.w	r8, #0
 80086a6:	dd05      	ble.n	80086b4 <_dtoa_r+0x83c>
 80086a8:	4649      	mov	r1, r9
 80086aa:	4642      	mov	r2, r8
 80086ac:	4658      	mov	r0, fp
 80086ae:	f000 fcff 	bl	80090b0 <__lshift>
 80086b2:	4681      	mov	r9, r0
 80086b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd05      	ble.n	80086c6 <_dtoa_r+0x84e>
 80086ba:	4621      	mov	r1, r4
 80086bc:	461a      	mov	r2, r3
 80086be:	4658      	mov	r0, fp
 80086c0:	f000 fcf6 	bl	80090b0 <__lshift>
 80086c4:	4604      	mov	r4, r0
 80086c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d053      	beq.n	8008774 <_dtoa_r+0x8fc>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4648      	mov	r0, r9
 80086d0:	f000 fd5a 	bl	8009188 <__mcmp>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	da4d      	bge.n	8008774 <_dtoa_r+0x8fc>
 80086d8:	1e7b      	subs	r3, r7, #1
 80086da:	4649      	mov	r1, r9
 80086dc:	9304      	str	r3, [sp, #16]
 80086de:	220a      	movs	r2, #10
 80086e0:	2300      	movs	r3, #0
 80086e2:	4658      	mov	r0, fp
 80086e4:	f000 faf0 	bl	8008cc8 <__multadd>
 80086e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ea:	4681      	mov	r9, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 816c 	beq.w	80089ca <_dtoa_r+0xb52>
 80086f2:	2300      	movs	r3, #0
 80086f4:	4629      	mov	r1, r5
 80086f6:	220a      	movs	r2, #10
 80086f8:	4658      	mov	r0, fp
 80086fa:	f000 fae5 	bl	8008cc8 <__multadd>
 80086fe:	9b08      	ldr	r3, [sp, #32]
 8008700:	4605      	mov	r5, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	dc61      	bgt.n	80087ca <_dtoa_r+0x952>
 8008706:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008708:	2b02      	cmp	r3, #2
 800870a:	dc3b      	bgt.n	8008784 <_dtoa_r+0x90c>
 800870c:	e05d      	b.n	80087ca <_dtoa_r+0x952>
 800870e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008710:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008714:	e746      	b.n	80085a4 <_dtoa_r+0x72c>
 8008716:	9b07      	ldr	r3, [sp, #28]
 8008718:	1e5c      	subs	r4, r3, #1
 800871a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800871c:	42a3      	cmp	r3, r4
 800871e:	bfbf      	itttt	lt
 8008720:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008722:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008724:	1ae3      	sublt	r3, r4, r3
 8008726:	18d2      	addlt	r2, r2, r3
 8008728:	bfa8      	it	ge
 800872a:	1b1c      	subge	r4, r3, r4
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	bfbe      	ittt	lt
 8008730:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008732:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008734:	2400      	movlt	r4, #0
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfb5      	itete	lt
 800873a:	eba8 0603 	sublt.w	r6, r8, r3
 800873e:	4646      	movge	r6, r8
 8008740:	2300      	movlt	r3, #0
 8008742:	9b07      	ldrge	r3, [sp, #28]
 8008744:	e730      	b.n	80085a8 <_dtoa_r+0x730>
 8008746:	4646      	mov	r6, r8
 8008748:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800874a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800874c:	e735      	b.n	80085ba <_dtoa_r+0x742>
 800874e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008750:	e75c      	b.n	800860c <_dtoa_r+0x794>
 8008752:	2300      	movs	r3, #0
 8008754:	e788      	b.n	8008668 <_dtoa_r+0x7f0>
 8008756:	9b02      	ldr	r3, [sp, #8]
 8008758:	e786      	b.n	8008668 <_dtoa_r+0x7f0>
 800875a:	2300      	movs	r3, #0
 800875c:	930a      	str	r3, [sp, #40]	@ 0x28
 800875e:	e788      	b.n	8008672 <_dtoa_r+0x7fa>
 8008760:	d09f      	beq.n	80086a2 <_dtoa_r+0x82a>
 8008762:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008764:	331c      	adds	r3, #28
 8008766:	441a      	add	r2, r3
 8008768:	4498      	add	r8, r3
 800876a:	441e      	add	r6, r3
 800876c:	9209      	str	r2, [sp, #36]	@ 0x24
 800876e:	e798      	b.n	80086a2 <_dtoa_r+0x82a>
 8008770:	4603      	mov	r3, r0
 8008772:	e7f6      	b.n	8008762 <_dtoa_r+0x8ea>
 8008774:	9b07      	ldr	r3, [sp, #28]
 8008776:	9704      	str	r7, [sp, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	dc20      	bgt.n	80087be <_dtoa_r+0x946>
 800877c:	9308      	str	r3, [sp, #32]
 800877e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008780:	2b02      	cmp	r3, #2
 8008782:	dd1e      	ble.n	80087c2 <_dtoa_r+0x94a>
 8008784:	9b08      	ldr	r3, [sp, #32]
 8008786:	2b00      	cmp	r3, #0
 8008788:	f47f aebc 	bne.w	8008504 <_dtoa_r+0x68c>
 800878c:	4621      	mov	r1, r4
 800878e:	2205      	movs	r2, #5
 8008790:	4658      	mov	r0, fp
 8008792:	f000 fa99 	bl	8008cc8 <__multadd>
 8008796:	4601      	mov	r1, r0
 8008798:	4604      	mov	r4, r0
 800879a:	4648      	mov	r0, r9
 800879c:	f000 fcf4 	bl	8009188 <__mcmp>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f77f aeaf 	ble.w	8008504 <_dtoa_r+0x68c>
 80087a6:	2331      	movs	r3, #49	@ 0x31
 80087a8:	4656      	mov	r6, sl
 80087aa:	f806 3b01 	strb.w	r3, [r6], #1
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	e6aa      	b.n	800850c <_dtoa_r+0x694>
 80087b6:	9c07      	ldr	r4, [sp, #28]
 80087b8:	9704      	str	r7, [sp, #16]
 80087ba:	4625      	mov	r5, r4
 80087bc:	e7f3      	b.n	80087a6 <_dtoa_r+0x92e>
 80087be:	9b07      	ldr	r3, [sp, #28]
 80087c0:	9308      	str	r3, [sp, #32]
 80087c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8104 	beq.w	80089d2 <_dtoa_r+0xb5a>
 80087ca:	2e00      	cmp	r6, #0
 80087cc:	dd05      	ble.n	80087da <_dtoa_r+0x962>
 80087ce:	4629      	mov	r1, r5
 80087d0:	4632      	mov	r2, r6
 80087d2:	4658      	mov	r0, fp
 80087d4:	f000 fc6c 	bl	80090b0 <__lshift>
 80087d8:	4605      	mov	r5, r0
 80087da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d05a      	beq.n	8008896 <_dtoa_r+0xa1e>
 80087e0:	4658      	mov	r0, fp
 80087e2:	6869      	ldr	r1, [r5, #4]
 80087e4:	f000 fa0e 	bl	8008c04 <_Balloc>
 80087e8:	4606      	mov	r6, r0
 80087ea:	b928      	cbnz	r0, 80087f8 <_dtoa_r+0x980>
 80087ec:	4602      	mov	r2, r0
 80087ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087f2:	4b83      	ldr	r3, [pc, #524]	@ (8008a00 <_dtoa_r+0xb88>)
 80087f4:	f7ff bb54 	b.w	8007ea0 <_dtoa_r+0x28>
 80087f8:	692a      	ldr	r2, [r5, #16]
 80087fa:	f105 010c 	add.w	r1, r5, #12
 80087fe:	3202      	adds	r2, #2
 8008800:	0092      	lsls	r2, r2, #2
 8008802:	300c      	adds	r0, #12
 8008804:	f7ff fa9b 	bl	8007d3e <memcpy>
 8008808:	2201      	movs	r2, #1
 800880a:	4631      	mov	r1, r6
 800880c:	4658      	mov	r0, fp
 800880e:	f000 fc4f 	bl	80090b0 <__lshift>
 8008812:	462f      	mov	r7, r5
 8008814:	4605      	mov	r5, r0
 8008816:	f10a 0301 	add.w	r3, sl, #1
 800881a:	9307      	str	r3, [sp, #28]
 800881c:	9b08      	ldr	r3, [sp, #32]
 800881e:	4453      	add	r3, sl
 8008820:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008822:	9b02      	ldr	r3, [sp, #8]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	930a      	str	r3, [sp, #40]	@ 0x28
 800882a:	9b07      	ldr	r3, [sp, #28]
 800882c:	4621      	mov	r1, r4
 800882e:	3b01      	subs	r3, #1
 8008830:	4648      	mov	r0, r9
 8008832:	9302      	str	r3, [sp, #8]
 8008834:	f7ff fa96 	bl	8007d64 <quorem>
 8008838:	4639      	mov	r1, r7
 800883a:	9008      	str	r0, [sp, #32]
 800883c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008840:	4648      	mov	r0, r9
 8008842:	f000 fca1 	bl	8009188 <__mcmp>
 8008846:	462a      	mov	r2, r5
 8008848:	9009      	str	r0, [sp, #36]	@ 0x24
 800884a:	4621      	mov	r1, r4
 800884c:	4658      	mov	r0, fp
 800884e:	f000 fcb7 	bl	80091c0 <__mdiff>
 8008852:	68c2      	ldr	r2, [r0, #12]
 8008854:	4606      	mov	r6, r0
 8008856:	bb02      	cbnz	r2, 800889a <_dtoa_r+0xa22>
 8008858:	4601      	mov	r1, r0
 800885a:	4648      	mov	r0, r9
 800885c:	f000 fc94 	bl	8009188 <__mcmp>
 8008860:	4602      	mov	r2, r0
 8008862:	4631      	mov	r1, r6
 8008864:	4658      	mov	r0, fp
 8008866:	920c      	str	r2, [sp, #48]	@ 0x30
 8008868:	f000 fa0c 	bl	8008c84 <_Bfree>
 800886c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800886e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008870:	9e07      	ldr	r6, [sp, #28]
 8008872:	ea43 0102 	orr.w	r1, r3, r2
 8008876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008878:	4319      	orrs	r1, r3
 800887a:	d110      	bne.n	800889e <_dtoa_r+0xa26>
 800887c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008880:	d029      	beq.n	80088d6 <_dtoa_r+0xa5e>
 8008882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	dd02      	ble.n	800888e <_dtoa_r+0xa16>
 8008888:	9b08      	ldr	r3, [sp, #32]
 800888a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800888e:	9b02      	ldr	r3, [sp, #8]
 8008890:	f883 8000 	strb.w	r8, [r3]
 8008894:	e63b      	b.n	800850e <_dtoa_r+0x696>
 8008896:	4628      	mov	r0, r5
 8008898:	e7bb      	b.n	8008812 <_dtoa_r+0x99a>
 800889a:	2201      	movs	r2, #1
 800889c:	e7e1      	b.n	8008862 <_dtoa_r+0x9ea>
 800889e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	db04      	blt.n	80088ae <_dtoa_r+0xa36>
 80088a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80088a6:	430b      	orrs	r3, r1
 80088a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088aa:	430b      	orrs	r3, r1
 80088ac:	d120      	bne.n	80088f0 <_dtoa_r+0xa78>
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	dded      	ble.n	800888e <_dtoa_r+0xa16>
 80088b2:	4649      	mov	r1, r9
 80088b4:	2201      	movs	r2, #1
 80088b6:	4658      	mov	r0, fp
 80088b8:	f000 fbfa 	bl	80090b0 <__lshift>
 80088bc:	4621      	mov	r1, r4
 80088be:	4681      	mov	r9, r0
 80088c0:	f000 fc62 	bl	8009188 <__mcmp>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	dc03      	bgt.n	80088d0 <_dtoa_r+0xa58>
 80088c8:	d1e1      	bne.n	800888e <_dtoa_r+0xa16>
 80088ca:	f018 0f01 	tst.w	r8, #1
 80088ce:	d0de      	beq.n	800888e <_dtoa_r+0xa16>
 80088d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088d4:	d1d8      	bne.n	8008888 <_dtoa_r+0xa10>
 80088d6:	2339      	movs	r3, #57	@ 0x39
 80088d8:	9a02      	ldr	r2, [sp, #8]
 80088da:	7013      	strb	r3, [r2, #0]
 80088dc:	4633      	mov	r3, r6
 80088de:	461e      	mov	r6, r3
 80088e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	2a39      	cmp	r2, #57	@ 0x39
 80088e8:	d052      	beq.n	8008990 <_dtoa_r+0xb18>
 80088ea:	3201      	adds	r2, #1
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	e60e      	b.n	800850e <_dtoa_r+0x696>
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	dd07      	ble.n	8008904 <_dtoa_r+0xa8c>
 80088f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088f8:	d0ed      	beq.n	80088d6 <_dtoa_r+0xa5e>
 80088fa:	9a02      	ldr	r2, [sp, #8]
 80088fc:	f108 0301 	add.w	r3, r8, #1
 8008900:	7013      	strb	r3, [r2, #0]
 8008902:	e604      	b.n	800850e <_dtoa_r+0x696>
 8008904:	9b07      	ldr	r3, [sp, #28]
 8008906:	9a07      	ldr	r2, [sp, #28]
 8008908:	f803 8c01 	strb.w	r8, [r3, #-1]
 800890c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800890e:	4293      	cmp	r3, r2
 8008910:	d028      	beq.n	8008964 <_dtoa_r+0xaec>
 8008912:	4649      	mov	r1, r9
 8008914:	2300      	movs	r3, #0
 8008916:	220a      	movs	r2, #10
 8008918:	4658      	mov	r0, fp
 800891a:	f000 f9d5 	bl	8008cc8 <__multadd>
 800891e:	42af      	cmp	r7, r5
 8008920:	4681      	mov	r9, r0
 8008922:	f04f 0300 	mov.w	r3, #0
 8008926:	f04f 020a 	mov.w	r2, #10
 800892a:	4639      	mov	r1, r7
 800892c:	4658      	mov	r0, fp
 800892e:	d107      	bne.n	8008940 <_dtoa_r+0xac8>
 8008930:	f000 f9ca 	bl	8008cc8 <__multadd>
 8008934:	4607      	mov	r7, r0
 8008936:	4605      	mov	r5, r0
 8008938:	9b07      	ldr	r3, [sp, #28]
 800893a:	3301      	adds	r3, #1
 800893c:	9307      	str	r3, [sp, #28]
 800893e:	e774      	b.n	800882a <_dtoa_r+0x9b2>
 8008940:	f000 f9c2 	bl	8008cc8 <__multadd>
 8008944:	4629      	mov	r1, r5
 8008946:	4607      	mov	r7, r0
 8008948:	2300      	movs	r3, #0
 800894a:	220a      	movs	r2, #10
 800894c:	4658      	mov	r0, fp
 800894e:	f000 f9bb 	bl	8008cc8 <__multadd>
 8008952:	4605      	mov	r5, r0
 8008954:	e7f0      	b.n	8008938 <_dtoa_r+0xac0>
 8008956:	9b08      	ldr	r3, [sp, #32]
 8008958:	2700      	movs	r7, #0
 800895a:	2b00      	cmp	r3, #0
 800895c:	bfcc      	ite	gt
 800895e:	461e      	movgt	r6, r3
 8008960:	2601      	movle	r6, #1
 8008962:	4456      	add	r6, sl
 8008964:	4649      	mov	r1, r9
 8008966:	2201      	movs	r2, #1
 8008968:	4658      	mov	r0, fp
 800896a:	f000 fba1 	bl	80090b0 <__lshift>
 800896e:	4621      	mov	r1, r4
 8008970:	4681      	mov	r9, r0
 8008972:	f000 fc09 	bl	8009188 <__mcmp>
 8008976:	2800      	cmp	r0, #0
 8008978:	dcb0      	bgt.n	80088dc <_dtoa_r+0xa64>
 800897a:	d102      	bne.n	8008982 <_dtoa_r+0xb0a>
 800897c:	f018 0f01 	tst.w	r8, #1
 8008980:	d1ac      	bne.n	80088dc <_dtoa_r+0xa64>
 8008982:	4633      	mov	r3, r6
 8008984:	461e      	mov	r6, r3
 8008986:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800898a:	2a30      	cmp	r2, #48	@ 0x30
 800898c:	d0fa      	beq.n	8008984 <_dtoa_r+0xb0c>
 800898e:	e5be      	b.n	800850e <_dtoa_r+0x696>
 8008990:	459a      	cmp	sl, r3
 8008992:	d1a4      	bne.n	80088de <_dtoa_r+0xa66>
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	3301      	adds	r3, #1
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	2331      	movs	r3, #49	@ 0x31
 800899c:	f88a 3000 	strb.w	r3, [sl]
 80089a0:	e5b5      	b.n	800850e <_dtoa_r+0x696>
 80089a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a04 <_dtoa_r+0xb8c>
 80089a8:	b11b      	cbz	r3, 80089b2 <_dtoa_r+0xb3a>
 80089aa:	f10a 0308 	add.w	r3, sl, #8
 80089ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	4650      	mov	r0, sl
 80089b4:	b017      	add	sp, #92	@ 0x5c
 80089b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089bc:	2b01      	cmp	r3, #1
 80089be:	f77f ae3d 	ble.w	800863c <_dtoa_r+0x7c4>
 80089c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c6:	2001      	movs	r0, #1
 80089c8:	e65b      	b.n	8008682 <_dtoa_r+0x80a>
 80089ca:	9b08      	ldr	r3, [sp, #32]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f77f aed6 	ble.w	800877e <_dtoa_r+0x906>
 80089d2:	4656      	mov	r6, sl
 80089d4:	4621      	mov	r1, r4
 80089d6:	4648      	mov	r0, r9
 80089d8:	f7ff f9c4 	bl	8007d64 <quorem>
 80089dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	f806 8b01 	strb.w	r8, [r6], #1
 80089e6:	eba6 020a 	sub.w	r2, r6, sl
 80089ea:	4293      	cmp	r3, r2
 80089ec:	ddb3      	ble.n	8008956 <_dtoa_r+0xade>
 80089ee:	4649      	mov	r1, r9
 80089f0:	2300      	movs	r3, #0
 80089f2:	220a      	movs	r2, #10
 80089f4:	4658      	mov	r0, fp
 80089f6:	f000 f967 	bl	8008cc8 <__multadd>
 80089fa:	4681      	mov	r9, r0
 80089fc:	e7ea      	b.n	80089d4 <_dtoa_r+0xb5c>
 80089fe:	bf00      	nop
 8008a00:	0800bd43 	.word	0x0800bd43
 8008a04:	0800bcc7 	.word	0x0800bcc7

08008a08 <_free_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	d040      	beq.n	8008a92 <_free_r+0x8a>
 8008a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a14:	1f0c      	subs	r4, r1, #4
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfb8      	it	lt
 8008a1a:	18e4      	addlt	r4, r4, r3
 8008a1c:	f000 f8e6 	bl	8008bec <__malloc_lock>
 8008a20:	4a1c      	ldr	r2, [pc, #112]	@ (8008a94 <_free_r+0x8c>)
 8008a22:	6813      	ldr	r3, [r2, #0]
 8008a24:	b933      	cbnz	r3, 8008a34 <_free_r+0x2c>
 8008a26:	6063      	str	r3, [r4, #4]
 8008a28:	6014      	str	r4, [r2, #0]
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a30:	f000 b8e2 	b.w	8008bf8 <__malloc_unlock>
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	d908      	bls.n	8008a4a <_free_r+0x42>
 8008a38:	6820      	ldr	r0, [r4, #0]
 8008a3a:	1821      	adds	r1, r4, r0
 8008a3c:	428b      	cmp	r3, r1
 8008a3e:	bf01      	itttt	eq
 8008a40:	6819      	ldreq	r1, [r3, #0]
 8008a42:	685b      	ldreq	r3, [r3, #4]
 8008a44:	1809      	addeq	r1, r1, r0
 8008a46:	6021      	streq	r1, [r4, #0]
 8008a48:	e7ed      	b.n	8008a26 <_free_r+0x1e>
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	b10b      	cbz	r3, 8008a54 <_free_r+0x4c>
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d9fa      	bls.n	8008a4a <_free_r+0x42>
 8008a54:	6811      	ldr	r1, [r2, #0]
 8008a56:	1850      	adds	r0, r2, r1
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d10b      	bne.n	8008a74 <_free_r+0x6c>
 8008a5c:	6820      	ldr	r0, [r4, #0]
 8008a5e:	4401      	add	r1, r0
 8008a60:	1850      	adds	r0, r2, r1
 8008a62:	4283      	cmp	r3, r0
 8008a64:	6011      	str	r1, [r2, #0]
 8008a66:	d1e0      	bne.n	8008a2a <_free_r+0x22>
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	4408      	add	r0, r1
 8008a6e:	6010      	str	r0, [r2, #0]
 8008a70:	6053      	str	r3, [r2, #4]
 8008a72:	e7da      	b.n	8008a2a <_free_r+0x22>
 8008a74:	d902      	bls.n	8008a7c <_free_r+0x74>
 8008a76:	230c      	movs	r3, #12
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	e7d6      	b.n	8008a2a <_free_r+0x22>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	1821      	adds	r1, r4, r0
 8008a80:	428b      	cmp	r3, r1
 8008a82:	bf01      	itttt	eq
 8008a84:	6819      	ldreq	r1, [r3, #0]
 8008a86:	685b      	ldreq	r3, [r3, #4]
 8008a88:	1809      	addeq	r1, r1, r0
 8008a8a:	6021      	streq	r1, [r4, #0]
 8008a8c:	6063      	str	r3, [r4, #4]
 8008a8e:	6054      	str	r4, [r2, #4]
 8008a90:	e7cb      	b.n	8008a2a <_free_r+0x22>
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	200008d4 	.word	0x200008d4

08008a98 <malloc>:
 8008a98:	4b02      	ldr	r3, [pc, #8]	@ (8008aa4 <malloc+0xc>)
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	f000 b825 	b.w	8008aec <_malloc_r>
 8008aa2:	bf00      	nop
 8008aa4:	20000030 	.word	0x20000030

08008aa8 <sbrk_aligned>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8008ae8 <sbrk_aligned+0x40>)
 8008aac:	460c      	mov	r4, r1
 8008aae:	6831      	ldr	r1, [r6, #0]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	b911      	cbnz	r1, 8008aba <sbrk_aligned+0x12>
 8008ab4:	f001 ffb0 	bl	800aa18 <_sbrk_r>
 8008ab8:	6030      	str	r0, [r6, #0]
 8008aba:	4621      	mov	r1, r4
 8008abc:	4628      	mov	r0, r5
 8008abe:	f001 ffab 	bl	800aa18 <_sbrk_r>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	d103      	bne.n	8008ace <sbrk_aligned+0x26>
 8008ac6:	f04f 34ff 	mov.w	r4, #4294967295
 8008aca:	4620      	mov	r0, r4
 8008acc:	bd70      	pop	{r4, r5, r6, pc}
 8008ace:	1cc4      	adds	r4, r0, #3
 8008ad0:	f024 0403 	bic.w	r4, r4, #3
 8008ad4:	42a0      	cmp	r0, r4
 8008ad6:	d0f8      	beq.n	8008aca <sbrk_aligned+0x22>
 8008ad8:	1a21      	subs	r1, r4, r0
 8008ada:	4628      	mov	r0, r5
 8008adc:	f001 ff9c 	bl	800aa18 <_sbrk_r>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d1f2      	bne.n	8008aca <sbrk_aligned+0x22>
 8008ae4:	e7ef      	b.n	8008ac6 <sbrk_aligned+0x1e>
 8008ae6:	bf00      	nop
 8008ae8:	200008d0 	.word	0x200008d0

08008aec <_malloc_r>:
 8008aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af0:	1ccd      	adds	r5, r1, #3
 8008af2:	f025 0503 	bic.w	r5, r5, #3
 8008af6:	3508      	adds	r5, #8
 8008af8:	2d0c      	cmp	r5, #12
 8008afa:	bf38      	it	cc
 8008afc:	250c      	movcc	r5, #12
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	4606      	mov	r6, r0
 8008b02:	db01      	blt.n	8008b08 <_malloc_r+0x1c>
 8008b04:	42a9      	cmp	r1, r5
 8008b06:	d904      	bls.n	8008b12 <_malloc_r+0x26>
 8008b08:	230c      	movs	r3, #12
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008be8 <_malloc_r+0xfc>
 8008b16:	f000 f869 	bl	8008bec <__malloc_lock>
 8008b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b1e:	461c      	mov	r4, r3
 8008b20:	bb44      	cbnz	r4, 8008b74 <_malloc_r+0x88>
 8008b22:	4629      	mov	r1, r5
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7ff ffbf 	bl	8008aa8 <sbrk_aligned>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	d158      	bne.n	8008be2 <_malloc_r+0xf6>
 8008b30:	f8d8 4000 	ldr.w	r4, [r8]
 8008b34:	4627      	mov	r7, r4
 8008b36:	2f00      	cmp	r7, #0
 8008b38:	d143      	bne.n	8008bc2 <_malloc_r+0xd6>
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	d04b      	beq.n	8008bd6 <_malloc_r+0xea>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	4639      	mov	r1, r7
 8008b42:	4630      	mov	r0, r6
 8008b44:	eb04 0903 	add.w	r9, r4, r3
 8008b48:	f001 ff66 	bl	800aa18 <_sbrk_r>
 8008b4c:	4581      	cmp	r9, r0
 8008b4e:	d142      	bne.n	8008bd6 <_malloc_r+0xea>
 8008b50:	6821      	ldr	r1, [r4, #0]
 8008b52:	4630      	mov	r0, r6
 8008b54:	1a6d      	subs	r5, r5, r1
 8008b56:	4629      	mov	r1, r5
 8008b58:	f7ff ffa6 	bl	8008aa8 <sbrk_aligned>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d03a      	beq.n	8008bd6 <_malloc_r+0xea>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	442b      	add	r3, r5
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	f8d8 3000 	ldr.w	r3, [r8]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	bb62      	cbnz	r2, 8008bc8 <_malloc_r+0xdc>
 8008b6e:	f8c8 7000 	str.w	r7, [r8]
 8008b72:	e00f      	b.n	8008b94 <_malloc_r+0xa8>
 8008b74:	6822      	ldr	r2, [r4, #0]
 8008b76:	1b52      	subs	r2, r2, r5
 8008b78:	d420      	bmi.n	8008bbc <_malloc_r+0xd0>
 8008b7a:	2a0b      	cmp	r2, #11
 8008b7c:	d917      	bls.n	8008bae <_malloc_r+0xc2>
 8008b7e:	1961      	adds	r1, r4, r5
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	6025      	str	r5, [r4, #0]
 8008b84:	bf18      	it	ne
 8008b86:	6059      	strne	r1, [r3, #4]
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	bf08      	it	eq
 8008b8c:	f8c8 1000 	streq.w	r1, [r8]
 8008b90:	5162      	str	r2, [r4, r5]
 8008b92:	604b      	str	r3, [r1, #4]
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 f82f 	bl	8008bf8 <__malloc_unlock>
 8008b9a:	f104 000b 	add.w	r0, r4, #11
 8008b9e:	1d23      	adds	r3, r4, #4
 8008ba0:	f020 0007 	bic.w	r0, r0, #7
 8008ba4:	1ac2      	subs	r2, r0, r3
 8008ba6:	bf1c      	itt	ne
 8008ba8:	1a1b      	subne	r3, r3, r0
 8008baa:	50a3      	strne	r3, [r4, r2]
 8008bac:	e7af      	b.n	8008b0e <_malloc_r+0x22>
 8008bae:	6862      	ldr	r2, [r4, #4]
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	bf0c      	ite	eq
 8008bb4:	f8c8 2000 	streq.w	r2, [r8]
 8008bb8:	605a      	strne	r2, [r3, #4]
 8008bba:	e7eb      	b.n	8008b94 <_malloc_r+0xa8>
 8008bbc:	4623      	mov	r3, r4
 8008bbe:	6864      	ldr	r4, [r4, #4]
 8008bc0:	e7ae      	b.n	8008b20 <_malloc_r+0x34>
 8008bc2:	463c      	mov	r4, r7
 8008bc4:	687f      	ldr	r7, [r7, #4]
 8008bc6:	e7b6      	b.n	8008b36 <_malloc_r+0x4a>
 8008bc8:	461a      	mov	r2, r3
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	d1fb      	bne.n	8008bc8 <_malloc_r+0xdc>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	6053      	str	r3, [r2, #4]
 8008bd4:	e7de      	b.n	8008b94 <_malloc_r+0xa8>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	4630      	mov	r0, r6
 8008bda:	6033      	str	r3, [r6, #0]
 8008bdc:	f000 f80c 	bl	8008bf8 <__malloc_unlock>
 8008be0:	e794      	b.n	8008b0c <_malloc_r+0x20>
 8008be2:	6005      	str	r5, [r0, #0]
 8008be4:	e7d6      	b.n	8008b94 <_malloc_r+0xa8>
 8008be6:	bf00      	nop
 8008be8:	200008d4 	.word	0x200008d4

08008bec <__malloc_lock>:
 8008bec:	4801      	ldr	r0, [pc, #4]	@ (8008bf4 <__malloc_lock+0x8>)
 8008bee:	f7ff b896 	b.w	8007d1e <__retarget_lock_acquire_recursive>
 8008bf2:	bf00      	nop
 8008bf4:	200008cc 	.word	0x200008cc

08008bf8 <__malloc_unlock>:
 8008bf8:	4801      	ldr	r0, [pc, #4]	@ (8008c00 <__malloc_unlock+0x8>)
 8008bfa:	f7ff b891 	b.w	8007d20 <__retarget_lock_release_recursive>
 8008bfe:	bf00      	nop
 8008c00:	200008cc 	.word	0x200008cc

08008c04 <_Balloc>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	69c6      	ldr	r6, [r0, #28]
 8008c08:	4604      	mov	r4, r0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	b976      	cbnz	r6, 8008c2c <_Balloc+0x28>
 8008c0e:	2010      	movs	r0, #16
 8008c10:	f7ff ff42 	bl	8008a98 <malloc>
 8008c14:	4602      	mov	r2, r0
 8008c16:	61e0      	str	r0, [r4, #28]
 8008c18:	b920      	cbnz	r0, 8008c24 <_Balloc+0x20>
 8008c1a:	216b      	movs	r1, #107	@ 0x6b
 8008c1c:	4b17      	ldr	r3, [pc, #92]	@ (8008c7c <_Balloc+0x78>)
 8008c1e:	4818      	ldr	r0, [pc, #96]	@ (8008c80 <_Balloc+0x7c>)
 8008c20:	f001 ff10 	bl	800aa44 <__assert_func>
 8008c24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c28:	6006      	str	r6, [r0, #0]
 8008c2a:	60c6      	str	r6, [r0, #12]
 8008c2c:	69e6      	ldr	r6, [r4, #28]
 8008c2e:	68f3      	ldr	r3, [r6, #12]
 8008c30:	b183      	cbz	r3, 8008c54 <_Balloc+0x50>
 8008c32:	69e3      	ldr	r3, [r4, #28]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c3a:	b9b8      	cbnz	r0, 8008c6c <_Balloc+0x68>
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	fa01 f605 	lsl.w	r6, r1, r5
 8008c42:	1d72      	adds	r2, r6, #5
 8008c44:	4620      	mov	r0, r4
 8008c46:	0092      	lsls	r2, r2, #2
 8008c48:	f001 ff1a 	bl	800aa80 <_calloc_r>
 8008c4c:	b160      	cbz	r0, 8008c68 <_Balloc+0x64>
 8008c4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c52:	e00e      	b.n	8008c72 <_Balloc+0x6e>
 8008c54:	2221      	movs	r2, #33	@ 0x21
 8008c56:	2104      	movs	r1, #4
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f001 ff11 	bl	800aa80 <_calloc_r>
 8008c5e:	69e3      	ldr	r3, [r4, #28]
 8008c60:	60f0      	str	r0, [r6, #12]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e4      	bne.n	8008c32 <_Balloc+0x2e>
 8008c68:	2000      	movs	r0, #0
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	6802      	ldr	r2, [r0, #0]
 8008c6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c72:	2300      	movs	r3, #0
 8008c74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c78:	e7f7      	b.n	8008c6a <_Balloc+0x66>
 8008c7a:	bf00      	nop
 8008c7c:	0800bcd4 	.word	0x0800bcd4
 8008c80:	0800bd54 	.word	0x0800bd54

08008c84 <_Bfree>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	69c6      	ldr	r6, [r0, #28]
 8008c88:	4605      	mov	r5, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	b976      	cbnz	r6, 8008cac <_Bfree+0x28>
 8008c8e:	2010      	movs	r0, #16
 8008c90:	f7ff ff02 	bl	8008a98 <malloc>
 8008c94:	4602      	mov	r2, r0
 8008c96:	61e8      	str	r0, [r5, #28]
 8008c98:	b920      	cbnz	r0, 8008ca4 <_Bfree+0x20>
 8008c9a:	218f      	movs	r1, #143	@ 0x8f
 8008c9c:	4b08      	ldr	r3, [pc, #32]	@ (8008cc0 <_Bfree+0x3c>)
 8008c9e:	4809      	ldr	r0, [pc, #36]	@ (8008cc4 <_Bfree+0x40>)
 8008ca0:	f001 fed0 	bl	800aa44 <__assert_func>
 8008ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ca8:	6006      	str	r6, [r0, #0]
 8008caa:	60c6      	str	r6, [r0, #12]
 8008cac:	b13c      	cbz	r4, 8008cbe <_Bfree+0x3a>
 8008cae:	69eb      	ldr	r3, [r5, #28]
 8008cb0:	6862      	ldr	r2, [r4, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cb8:	6021      	str	r1, [r4, #0]
 8008cba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	0800bcd4 	.word	0x0800bcd4
 8008cc4:	0800bd54 	.word	0x0800bd54

08008cc8 <__multadd>:
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	4607      	mov	r7, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	461e      	mov	r6, r3
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	690d      	ldr	r5, [r1, #16]
 8008cd6:	f101 0c14 	add.w	ip, r1, #20
 8008cda:	f8dc 3000 	ldr.w	r3, [ip]
 8008cde:	3001      	adds	r0, #1
 8008ce0:	b299      	uxth	r1, r3
 8008ce2:	fb02 6101 	mla	r1, r2, r1, r6
 8008ce6:	0c1e      	lsrs	r6, r3, #16
 8008ce8:	0c0b      	lsrs	r3, r1, #16
 8008cea:	fb02 3306 	mla	r3, r2, r6, r3
 8008cee:	b289      	uxth	r1, r1
 8008cf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cf4:	4285      	cmp	r5, r0
 8008cf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cfa:	f84c 1b04 	str.w	r1, [ip], #4
 8008cfe:	dcec      	bgt.n	8008cda <__multadd+0x12>
 8008d00:	b30e      	cbz	r6, 8008d46 <__multadd+0x7e>
 8008d02:	68a3      	ldr	r3, [r4, #8]
 8008d04:	42ab      	cmp	r3, r5
 8008d06:	dc19      	bgt.n	8008d3c <__multadd+0x74>
 8008d08:	6861      	ldr	r1, [r4, #4]
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	3101      	adds	r1, #1
 8008d0e:	f7ff ff79 	bl	8008c04 <_Balloc>
 8008d12:	4680      	mov	r8, r0
 8008d14:	b928      	cbnz	r0, 8008d22 <__multadd+0x5a>
 8008d16:	4602      	mov	r2, r0
 8008d18:	21ba      	movs	r1, #186	@ 0xba
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d4c <__multadd+0x84>)
 8008d1c:	480c      	ldr	r0, [pc, #48]	@ (8008d50 <__multadd+0x88>)
 8008d1e:	f001 fe91 	bl	800aa44 <__assert_func>
 8008d22:	6922      	ldr	r2, [r4, #16]
 8008d24:	f104 010c 	add.w	r1, r4, #12
 8008d28:	3202      	adds	r2, #2
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	300c      	adds	r0, #12
 8008d2e:	f7ff f806 	bl	8007d3e <memcpy>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4638      	mov	r0, r7
 8008d36:	f7ff ffa5 	bl	8008c84 <_Bfree>
 8008d3a:	4644      	mov	r4, r8
 8008d3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d40:	3501      	adds	r5, #1
 8008d42:	615e      	str	r6, [r3, #20]
 8008d44:	6125      	str	r5, [r4, #16]
 8008d46:	4620      	mov	r0, r4
 8008d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d4c:	0800bd43 	.word	0x0800bd43
 8008d50:	0800bd54 	.word	0x0800bd54

08008d54 <__s2b>:
 8008d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d58:	4615      	mov	r5, r2
 8008d5a:	2209      	movs	r2, #9
 8008d5c:	461f      	mov	r7, r3
 8008d5e:	3308      	adds	r3, #8
 8008d60:	460c      	mov	r4, r1
 8008d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d66:	4606      	mov	r6, r0
 8008d68:	2201      	movs	r2, #1
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	db09      	blt.n	8008d84 <__s2b+0x30>
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff ff47 	bl	8008c04 <_Balloc>
 8008d76:	b940      	cbnz	r0, 8008d8a <__s2b+0x36>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	21d3      	movs	r1, #211	@ 0xd3
 8008d7c:	4b18      	ldr	r3, [pc, #96]	@ (8008de0 <__s2b+0x8c>)
 8008d7e:	4819      	ldr	r0, [pc, #100]	@ (8008de4 <__s2b+0x90>)
 8008d80:	f001 fe60 	bl	800aa44 <__assert_func>
 8008d84:	0052      	lsls	r2, r2, #1
 8008d86:	3101      	adds	r1, #1
 8008d88:	e7f0      	b.n	8008d6c <__s2b+0x18>
 8008d8a:	9b08      	ldr	r3, [sp, #32]
 8008d8c:	2d09      	cmp	r5, #9
 8008d8e:	6143      	str	r3, [r0, #20]
 8008d90:	f04f 0301 	mov.w	r3, #1
 8008d94:	6103      	str	r3, [r0, #16]
 8008d96:	dd16      	ble.n	8008dc6 <__s2b+0x72>
 8008d98:	f104 0909 	add.w	r9, r4, #9
 8008d9c:	46c8      	mov	r8, r9
 8008d9e:	442c      	add	r4, r5
 8008da0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008da4:	4601      	mov	r1, r0
 8008da6:	220a      	movs	r2, #10
 8008da8:	4630      	mov	r0, r6
 8008daa:	3b30      	subs	r3, #48	@ 0x30
 8008dac:	f7ff ff8c 	bl	8008cc8 <__multadd>
 8008db0:	45a0      	cmp	r8, r4
 8008db2:	d1f5      	bne.n	8008da0 <__s2b+0x4c>
 8008db4:	f1a5 0408 	sub.w	r4, r5, #8
 8008db8:	444c      	add	r4, r9
 8008dba:	1b2d      	subs	r5, r5, r4
 8008dbc:	1963      	adds	r3, r4, r5
 8008dbe:	42bb      	cmp	r3, r7
 8008dc0:	db04      	blt.n	8008dcc <__s2b+0x78>
 8008dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc6:	2509      	movs	r5, #9
 8008dc8:	340a      	adds	r4, #10
 8008dca:	e7f6      	b.n	8008dba <__s2b+0x66>
 8008dcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	220a      	movs	r2, #10
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	3b30      	subs	r3, #48	@ 0x30
 8008dd8:	f7ff ff76 	bl	8008cc8 <__multadd>
 8008ddc:	e7ee      	b.n	8008dbc <__s2b+0x68>
 8008dde:	bf00      	nop
 8008de0:	0800bd43 	.word	0x0800bd43
 8008de4:	0800bd54 	.word	0x0800bd54

08008de8 <__hi0bits>:
 8008de8:	4603      	mov	r3, r0
 8008dea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008dee:	bf3a      	itte	cc
 8008df0:	0403      	lslcc	r3, r0, #16
 8008df2:	2010      	movcc	r0, #16
 8008df4:	2000      	movcs	r0, #0
 8008df6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dfa:	bf3c      	itt	cc
 8008dfc:	021b      	lslcc	r3, r3, #8
 8008dfe:	3008      	addcc	r0, #8
 8008e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e04:	bf3c      	itt	cc
 8008e06:	011b      	lslcc	r3, r3, #4
 8008e08:	3004      	addcc	r0, #4
 8008e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e0e:	bf3c      	itt	cc
 8008e10:	009b      	lslcc	r3, r3, #2
 8008e12:	3002      	addcc	r0, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	db05      	blt.n	8008e24 <__hi0bits+0x3c>
 8008e18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e1c:	f100 0001 	add.w	r0, r0, #1
 8008e20:	bf08      	it	eq
 8008e22:	2020      	moveq	r0, #32
 8008e24:	4770      	bx	lr

08008e26 <__lo0bits>:
 8008e26:	6803      	ldr	r3, [r0, #0]
 8008e28:	4602      	mov	r2, r0
 8008e2a:	f013 0007 	ands.w	r0, r3, #7
 8008e2e:	d00b      	beq.n	8008e48 <__lo0bits+0x22>
 8008e30:	07d9      	lsls	r1, r3, #31
 8008e32:	d421      	bmi.n	8008e78 <__lo0bits+0x52>
 8008e34:	0798      	lsls	r0, r3, #30
 8008e36:	bf49      	itett	mi
 8008e38:	085b      	lsrmi	r3, r3, #1
 8008e3a:	089b      	lsrpl	r3, r3, #2
 8008e3c:	2001      	movmi	r0, #1
 8008e3e:	6013      	strmi	r3, [r2, #0]
 8008e40:	bf5c      	itt	pl
 8008e42:	2002      	movpl	r0, #2
 8008e44:	6013      	strpl	r3, [r2, #0]
 8008e46:	4770      	bx	lr
 8008e48:	b299      	uxth	r1, r3
 8008e4a:	b909      	cbnz	r1, 8008e50 <__lo0bits+0x2a>
 8008e4c:	2010      	movs	r0, #16
 8008e4e:	0c1b      	lsrs	r3, r3, #16
 8008e50:	b2d9      	uxtb	r1, r3
 8008e52:	b909      	cbnz	r1, 8008e58 <__lo0bits+0x32>
 8008e54:	3008      	adds	r0, #8
 8008e56:	0a1b      	lsrs	r3, r3, #8
 8008e58:	0719      	lsls	r1, r3, #28
 8008e5a:	bf04      	itt	eq
 8008e5c:	091b      	lsreq	r3, r3, #4
 8008e5e:	3004      	addeq	r0, #4
 8008e60:	0799      	lsls	r1, r3, #30
 8008e62:	bf04      	itt	eq
 8008e64:	089b      	lsreq	r3, r3, #2
 8008e66:	3002      	addeq	r0, #2
 8008e68:	07d9      	lsls	r1, r3, #31
 8008e6a:	d403      	bmi.n	8008e74 <__lo0bits+0x4e>
 8008e6c:	085b      	lsrs	r3, r3, #1
 8008e6e:	f100 0001 	add.w	r0, r0, #1
 8008e72:	d003      	beq.n	8008e7c <__lo0bits+0x56>
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	4770      	bx	lr
 8008e78:	2000      	movs	r0, #0
 8008e7a:	4770      	bx	lr
 8008e7c:	2020      	movs	r0, #32
 8008e7e:	4770      	bx	lr

08008e80 <__i2b>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	460c      	mov	r4, r1
 8008e84:	2101      	movs	r1, #1
 8008e86:	f7ff febd 	bl	8008c04 <_Balloc>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <__i2b+0x1a>
 8008e8e:	f240 1145 	movw	r1, #325	@ 0x145
 8008e92:	4b04      	ldr	r3, [pc, #16]	@ (8008ea4 <__i2b+0x24>)
 8008e94:	4804      	ldr	r0, [pc, #16]	@ (8008ea8 <__i2b+0x28>)
 8008e96:	f001 fdd5 	bl	800aa44 <__assert_func>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6144      	str	r4, [r0, #20]
 8008e9e:	6103      	str	r3, [r0, #16]
 8008ea0:	bd10      	pop	{r4, pc}
 8008ea2:	bf00      	nop
 8008ea4:	0800bd43 	.word	0x0800bd43
 8008ea8:	0800bd54 	.word	0x0800bd54

08008eac <__multiply>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	690a      	ldr	r2, [r1, #16]
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	460f      	mov	r7, r1
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	bfa2      	ittt	ge
 8008ebc:	4623      	movge	r3, r4
 8008ebe:	460c      	movge	r4, r1
 8008ec0:	461f      	movge	r7, r3
 8008ec2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008ec6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	6861      	ldr	r1, [r4, #4]
 8008ece:	eb0a 0609 	add.w	r6, sl, r9
 8008ed2:	42b3      	cmp	r3, r6
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	bfb8      	it	lt
 8008ed8:	3101      	addlt	r1, #1
 8008eda:	f7ff fe93 	bl	8008c04 <_Balloc>
 8008ede:	b930      	cbnz	r0, 8008eee <__multiply+0x42>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ee6:	4b43      	ldr	r3, [pc, #268]	@ (8008ff4 <__multiply+0x148>)
 8008ee8:	4843      	ldr	r0, [pc, #268]	@ (8008ff8 <__multiply+0x14c>)
 8008eea:	f001 fdab 	bl	800aa44 <__assert_func>
 8008eee:	f100 0514 	add.w	r5, r0, #20
 8008ef2:	462b      	mov	r3, r5
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008efa:	4543      	cmp	r3, r8
 8008efc:	d321      	bcc.n	8008f42 <__multiply+0x96>
 8008efe:	f107 0114 	add.w	r1, r7, #20
 8008f02:	f104 0214 	add.w	r2, r4, #20
 8008f06:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008f0a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008f0e:	9302      	str	r3, [sp, #8]
 8008f10:	1b13      	subs	r3, r2, r4
 8008f12:	3b15      	subs	r3, #21
 8008f14:	f023 0303 	bic.w	r3, r3, #3
 8008f18:	3304      	adds	r3, #4
 8008f1a:	f104 0715 	add.w	r7, r4, #21
 8008f1e:	42ba      	cmp	r2, r7
 8008f20:	bf38      	it	cc
 8008f22:	2304      	movcc	r3, #4
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	9b02      	ldr	r3, [sp, #8]
 8008f28:	9103      	str	r1, [sp, #12]
 8008f2a:	428b      	cmp	r3, r1
 8008f2c:	d80c      	bhi.n	8008f48 <__multiply+0x9c>
 8008f2e:	2e00      	cmp	r6, #0
 8008f30:	dd03      	ble.n	8008f3a <__multiply+0x8e>
 8008f32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d05a      	beq.n	8008ff0 <__multiply+0x144>
 8008f3a:	6106      	str	r6, [r0, #16]
 8008f3c:	b005      	add	sp, #20
 8008f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f42:	f843 2b04 	str.w	r2, [r3], #4
 8008f46:	e7d8      	b.n	8008efa <__multiply+0x4e>
 8008f48:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f4c:	f1ba 0f00 	cmp.w	sl, #0
 8008f50:	d023      	beq.n	8008f9a <__multiply+0xee>
 8008f52:	46a9      	mov	r9, r5
 8008f54:	f04f 0c00 	mov.w	ip, #0
 8008f58:	f104 0e14 	add.w	lr, r4, #20
 8008f5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f60:	f8d9 3000 	ldr.w	r3, [r9]
 8008f64:	fa1f fb87 	uxth.w	fp, r7
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f6e:	4463      	add	r3, ip
 8008f70:	f8d9 c000 	ldr.w	ip, [r9]
 8008f74:	0c3f      	lsrs	r7, r7, #16
 8008f76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008f7a:	fb0a c707 	mla	r7, sl, r7, ip
 8008f7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f88:	4572      	cmp	r2, lr
 8008f8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f8e:	f849 3b04 	str.w	r3, [r9], #4
 8008f92:	d8e3      	bhi.n	8008f5c <__multiply+0xb0>
 8008f94:	9b01      	ldr	r3, [sp, #4]
 8008f96:	f845 c003 	str.w	ip, [r5, r3]
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	3104      	adds	r1, #4
 8008f9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008fa2:	f1b9 0f00 	cmp.w	r9, #0
 8008fa6:	d021      	beq.n	8008fec <__multiply+0x140>
 8008fa8:	46ae      	mov	lr, r5
 8008faa:	f04f 0a00 	mov.w	sl, #0
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	f104 0c14 	add.w	ip, r4, #20
 8008fb4:	f8bc b000 	ldrh.w	fp, [ip]
 8008fb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	fb09 770b 	mla	r7, r9, fp, r7
 8008fc2:	4457      	add	r7, sl
 8008fc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008fc8:	f84e 3b04 	str.w	r3, [lr], #4
 8008fcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fd4:	f8be 3000 	ldrh.w	r3, [lr]
 8008fd8:	4562      	cmp	r2, ip
 8008fda:	fb09 330a 	mla	r3, r9, sl, r3
 8008fde:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008fe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fe6:	d8e5      	bhi.n	8008fb4 <__multiply+0x108>
 8008fe8:	9f01      	ldr	r7, [sp, #4]
 8008fea:	51eb      	str	r3, [r5, r7]
 8008fec:	3504      	adds	r5, #4
 8008fee:	e79a      	b.n	8008f26 <__multiply+0x7a>
 8008ff0:	3e01      	subs	r6, #1
 8008ff2:	e79c      	b.n	8008f2e <__multiply+0x82>
 8008ff4:	0800bd43 	.word	0x0800bd43
 8008ff8:	0800bd54 	.word	0x0800bd54

08008ffc <__pow5mult>:
 8008ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009000:	4615      	mov	r5, r2
 8009002:	f012 0203 	ands.w	r2, r2, #3
 8009006:	4607      	mov	r7, r0
 8009008:	460e      	mov	r6, r1
 800900a:	d007      	beq.n	800901c <__pow5mult+0x20>
 800900c:	4c25      	ldr	r4, [pc, #148]	@ (80090a4 <__pow5mult+0xa8>)
 800900e:	3a01      	subs	r2, #1
 8009010:	2300      	movs	r3, #0
 8009012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009016:	f7ff fe57 	bl	8008cc8 <__multadd>
 800901a:	4606      	mov	r6, r0
 800901c:	10ad      	asrs	r5, r5, #2
 800901e:	d03d      	beq.n	800909c <__pow5mult+0xa0>
 8009020:	69fc      	ldr	r4, [r7, #28]
 8009022:	b97c      	cbnz	r4, 8009044 <__pow5mult+0x48>
 8009024:	2010      	movs	r0, #16
 8009026:	f7ff fd37 	bl	8008a98 <malloc>
 800902a:	4602      	mov	r2, r0
 800902c:	61f8      	str	r0, [r7, #28]
 800902e:	b928      	cbnz	r0, 800903c <__pow5mult+0x40>
 8009030:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009034:	4b1c      	ldr	r3, [pc, #112]	@ (80090a8 <__pow5mult+0xac>)
 8009036:	481d      	ldr	r0, [pc, #116]	@ (80090ac <__pow5mult+0xb0>)
 8009038:	f001 fd04 	bl	800aa44 <__assert_func>
 800903c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009040:	6004      	str	r4, [r0, #0]
 8009042:	60c4      	str	r4, [r0, #12]
 8009044:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800904c:	b94c      	cbnz	r4, 8009062 <__pow5mult+0x66>
 800904e:	f240 2171 	movw	r1, #625	@ 0x271
 8009052:	4638      	mov	r0, r7
 8009054:	f7ff ff14 	bl	8008e80 <__i2b>
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009060:	6003      	str	r3, [r0, #0]
 8009062:	f04f 0900 	mov.w	r9, #0
 8009066:	07eb      	lsls	r3, r5, #31
 8009068:	d50a      	bpl.n	8009080 <__pow5mult+0x84>
 800906a:	4631      	mov	r1, r6
 800906c:	4622      	mov	r2, r4
 800906e:	4638      	mov	r0, r7
 8009070:	f7ff ff1c 	bl	8008eac <__multiply>
 8009074:	4680      	mov	r8, r0
 8009076:	4631      	mov	r1, r6
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff fe03 	bl	8008c84 <_Bfree>
 800907e:	4646      	mov	r6, r8
 8009080:	106d      	asrs	r5, r5, #1
 8009082:	d00b      	beq.n	800909c <__pow5mult+0xa0>
 8009084:	6820      	ldr	r0, [r4, #0]
 8009086:	b938      	cbnz	r0, 8009098 <__pow5mult+0x9c>
 8009088:	4622      	mov	r2, r4
 800908a:	4621      	mov	r1, r4
 800908c:	4638      	mov	r0, r7
 800908e:	f7ff ff0d 	bl	8008eac <__multiply>
 8009092:	6020      	str	r0, [r4, #0]
 8009094:	f8c0 9000 	str.w	r9, [r0]
 8009098:	4604      	mov	r4, r0
 800909a:	e7e4      	b.n	8009066 <__pow5mult+0x6a>
 800909c:	4630      	mov	r0, r6
 800909e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a2:	bf00      	nop
 80090a4:	0800bdb0 	.word	0x0800bdb0
 80090a8:	0800bcd4 	.word	0x0800bcd4
 80090ac:	0800bd54 	.word	0x0800bd54

080090b0 <__lshift>:
 80090b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b4:	460c      	mov	r4, r1
 80090b6:	4607      	mov	r7, r0
 80090b8:	4691      	mov	r9, r2
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	6849      	ldr	r1, [r1, #4]
 80090be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090c8:	f108 0601 	add.w	r6, r8, #1
 80090cc:	42b3      	cmp	r3, r6
 80090ce:	db0b      	blt.n	80090e8 <__lshift+0x38>
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7ff fd97 	bl	8008c04 <_Balloc>
 80090d6:	4605      	mov	r5, r0
 80090d8:	b948      	cbnz	r0, 80090ee <__lshift+0x3e>
 80090da:	4602      	mov	r2, r0
 80090dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090e0:	4b27      	ldr	r3, [pc, #156]	@ (8009180 <__lshift+0xd0>)
 80090e2:	4828      	ldr	r0, [pc, #160]	@ (8009184 <__lshift+0xd4>)
 80090e4:	f001 fcae 	bl	800aa44 <__assert_func>
 80090e8:	3101      	adds	r1, #1
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	e7ee      	b.n	80090cc <__lshift+0x1c>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f100 0114 	add.w	r1, r0, #20
 80090f4:	f100 0210 	add.w	r2, r0, #16
 80090f8:	4618      	mov	r0, r3
 80090fa:	4553      	cmp	r3, sl
 80090fc:	db33      	blt.n	8009166 <__lshift+0xb6>
 80090fe:	6920      	ldr	r0, [r4, #16]
 8009100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009104:	f104 0314 	add.w	r3, r4, #20
 8009108:	f019 091f 	ands.w	r9, r9, #31
 800910c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009110:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009114:	d02b      	beq.n	800916e <__lshift+0xbe>
 8009116:	468a      	mov	sl, r1
 8009118:	2200      	movs	r2, #0
 800911a:	f1c9 0e20 	rsb	lr, r9, #32
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	fa00 f009 	lsl.w	r0, r0, r9
 8009124:	4310      	orrs	r0, r2
 8009126:	f84a 0b04 	str.w	r0, [sl], #4
 800912a:	f853 2b04 	ldr.w	r2, [r3], #4
 800912e:	459c      	cmp	ip, r3
 8009130:	fa22 f20e 	lsr.w	r2, r2, lr
 8009134:	d8f3      	bhi.n	800911e <__lshift+0x6e>
 8009136:	ebac 0304 	sub.w	r3, ip, r4
 800913a:	3b15      	subs	r3, #21
 800913c:	f023 0303 	bic.w	r3, r3, #3
 8009140:	3304      	adds	r3, #4
 8009142:	f104 0015 	add.w	r0, r4, #21
 8009146:	4584      	cmp	ip, r0
 8009148:	bf38      	it	cc
 800914a:	2304      	movcc	r3, #4
 800914c:	50ca      	str	r2, [r1, r3]
 800914e:	b10a      	cbz	r2, 8009154 <__lshift+0xa4>
 8009150:	f108 0602 	add.w	r6, r8, #2
 8009154:	3e01      	subs	r6, #1
 8009156:	4638      	mov	r0, r7
 8009158:	4621      	mov	r1, r4
 800915a:	612e      	str	r6, [r5, #16]
 800915c:	f7ff fd92 	bl	8008c84 <_Bfree>
 8009160:	4628      	mov	r0, r5
 8009162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009166:	f842 0f04 	str.w	r0, [r2, #4]!
 800916a:	3301      	adds	r3, #1
 800916c:	e7c5      	b.n	80090fa <__lshift+0x4a>
 800916e:	3904      	subs	r1, #4
 8009170:	f853 2b04 	ldr.w	r2, [r3], #4
 8009174:	459c      	cmp	ip, r3
 8009176:	f841 2f04 	str.w	r2, [r1, #4]!
 800917a:	d8f9      	bhi.n	8009170 <__lshift+0xc0>
 800917c:	e7ea      	b.n	8009154 <__lshift+0xa4>
 800917e:	bf00      	nop
 8009180:	0800bd43 	.word	0x0800bd43
 8009184:	0800bd54 	.word	0x0800bd54

08009188 <__mcmp>:
 8009188:	4603      	mov	r3, r0
 800918a:	690a      	ldr	r2, [r1, #16]
 800918c:	6900      	ldr	r0, [r0, #16]
 800918e:	b530      	push	{r4, r5, lr}
 8009190:	1a80      	subs	r0, r0, r2
 8009192:	d10e      	bne.n	80091b2 <__mcmp+0x2a>
 8009194:	3314      	adds	r3, #20
 8009196:	3114      	adds	r1, #20
 8009198:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800919c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091a8:	4295      	cmp	r5, r2
 80091aa:	d003      	beq.n	80091b4 <__mcmp+0x2c>
 80091ac:	d205      	bcs.n	80091ba <__mcmp+0x32>
 80091ae:	f04f 30ff 	mov.w	r0, #4294967295
 80091b2:	bd30      	pop	{r4, r5, pc}
 80091b4:	42a3      	cmp	r3, r4
 80091b6:	d3f3      	bcc.n	80091a0 <__mcmp+0x18>
 80091b8:	e7fb      	b.n	80091b2 <__mcmp+0x2a>
 80091ba:	2001      	movs	r0, #1
 80091bc:	e7f9      	b.n	80091b2 <__mcmp+0x2a>
	...

080091c0 <__mdiff>:
 80091c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	4689      	mov	r9, r1
 80091c6:	4606      	mov	r6, r0
 80091c8:	4611      	mov	r1, r2
 80091ca:	4648      	mov	r0, r9
 80091cc:	4614      	mov	r4, r2
 80091ce:	f7ff ffdb 	bl	8009188 <__mcmp>
 80091d2:	1e05      	subs	r5, r0, #0
 80091d4:	d112      	bne.n	80091fc <__mdiff+0x3c>
 80091d6:	4629      	mov	r1, r5
 80091d8:	4630      	mov	r0, r6
 80091da:	f7ff fd13 	bl	8008c04 <_Balloc>
 80091de:	4602      	mov	r2, r0
 80091e0:	b928      	cbnz	r0, 80091ee <__mdiff+0x2e>
 80091e2:	f240 2137 	movw	r1, #567	@ 0x237
 80091e6:	4b3e      	ldr	r3, [pc, #248]	@ (80092e0 <__mdiff+0x120>)
 80091e8:	483e      	ldr	r0, [pc, #248]	@ (80092e4 <__mdiff+0x124>)
 80091ea:	f001 fc2b 	bl	800aa44 <__assert_func>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091f4:	4610      	mov	r0, r2
 80091f6:	b003      	add	sp, #12
 80091f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fc:	bfbc      	itt	lt
 80091fe:	464b      	movlt	r3, r9
 8009200:	46a1      	movlt	r9, r4
 8009202:	4630      	mov	r0, r6
 8009204:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009208:	bfba      	itte	lt
 800920a:	461c      	movlt	r4, r3
 800920c:	2501      	movlt	r5, #1
 800920e:	2500      	movge	r5, #0
 8009210:	f7ff fcf8 	bl	8008c04 <_Balloc>
 8009214:	4602      	mov	r2, r0
 8009216:	b918      	cbnz	r0, 8009220 <__mdiff+0x60>
 8009218:	f240 2145 	movw	r1, #581	@ 0x245
 800921c:	4b30      	ldr	r3, [pc, #192]	@ (80092e0 <__mdiff+0x120>)
 800921e:	e7e3      	b.n	80091e8 <__mdiff+0x28>
 8009220:	f100 0b14 	add.w	fp, r0, #20
 8009224:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009228:	f109 0310 	add.w	r3, r9, #16
 800922c:	60c5      	str	r5, [r0, #12]
 800922e:	f04f 0c00 	mov.w	ip, #0
 8009232:	f109 0514 	add.w	r5, r9, #20
 8009236:	46d9      	mov	r9, fp
 8009238:	6926      	ldr	r6, [r4, #16]
 800923a:	f104 0e14 	add.w	lr, r4, #20
 800923e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009242:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	9b01      	ldr	r3, [sp, #4]
 800924a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800924e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009252:	b281      	uxth	r1, r0
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	fa1f f38a 	uxth.w	r3, sl
 800925a:	1a5b      	subs	r3, r3, r1
 800925c:	0c00      	lsrs	r0, r0, #16
 800925e:	4463      	add	r3, ip
 8009260:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009264:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009268:	b29b      	uxth	r3, r3
 800926a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800926e:	4576      	cmp	r6, lr
 8009270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009274:	f849 3b04 	str.w	r3, [r9], #4
 8009278:	d8e6      	bhi.n	8009248 <__mdiff+0x88>
 800927a:	1b33      	subs	r3, r6, r4
 800927c:	3b15      	subs	r3, #21
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	3415      	adds	r4, #21
 8009284:	3304      	adds	r3, #4
 8009286:	42a6      	cmp	r6, r4
 8009288:	bf38      	it	cc
 800928a:	2304      	movcc	r3, #4
 800928c:	441d      	add	r5, r3
 800928e:	445b      	add	r3, fp
 8009290:	461e      	mov	r6, r3
 8009292:	462c      	mov	r4, r5
 8009294:	4544      	cmp	r4, r8
 8009296:	d30e      	bcc.n	80092b6 <__mdiff+0xf6>
 8009298:	f108 0103 	add.w	r1, r8, #3
 800929c:	1b49      	subs	r1, r1, r5
 800929e:	f021 0103 	bic.w	r1, r1, #3
 80092a2:	3d03      	subs	r5, #3
 80092a4:	45a8      	cmp	r8, r5
 80092a6:	bf38      	it	cc
 80092a8:	2100      	movcc	r1, #0
 80092aa:	440b      	add	r3, r1
 80092ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092b0:	b199      	cbz	r1, 80092da <__mdiff+0x11a>
 80092b2:	6117      	str	r7, [r2, #16]
 80092b4:	e79e      	b.n	80091f4 <__mdiff+0x34>
 80092b6:	46e6      	mov	lr, ip
 80092b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80092bc:	fa1f fc81 	uxth.w	ip, r1
 80092c0:	44f4      	add	ip, lr
 80092c2:	0c08      	lsrs	r0, r1, #16
 80092c4:	4471      	add	r1, lr
 80092c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80092ca:	b289      	uxth	r1, r1
 80092cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092d4:	f846 1b04 	str.w	r1, [r6], #4
 80092d8:	e7dc      	b.n	8009294 <__mdiff+0xd4>
 80092da:	3f01      	subs	r7, #1
 80092dc:	e7e6      	b.n	80092ac <__mdiff+0xec>
 80092de:	bf00      	nop
 80092e0:	0800bd43 	.word	0x0800bd43
 80092e4:	0800bd54 	.word	0x0800bd54

080092e8 <__ulp>:
 80092e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009324 <__ulp+0x3c>)
 80092ea:	400b      	ands	r3, r1
 80092ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dc08      	bgt.n	8009306 <__ulp+0x1e>
 80092f4:	425b      	negs	r3, r3
 80092f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80092fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092fe:	da04      	bge.n	800930a <__ulp+0x22>
 8009300:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009304:	4113      	asrs	r3, r2
 8009306:	2200      	movs	r2, #0
 8009308:	e008      	b.n	800931c <__ulp+0x34>
 800930a:	f1a2 0314 	sub.w	r3, r2, #20
 800930e:	2b1e      	cmp	r3, #30
 8009310:	bfd6      	itet	le
 8009312:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009316:	2201      	movgt	r2, #1
 8009318:	40da      	lsrle	r2, r3
 800931a:	2300      	movs	r3, #0
 800931c:	4619      	mov	r1, r3
 800931e:	4610      	mov	r0, r2
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	7ff00000 	.word	0x7ff00000

08009328 <__b2d>:
 8009328:	6902      	ldr	r2, [r0, #16]
 800932a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932c:	f100 0614 	add.w	r6, r0, #20
 8009330:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009334:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009338:	4f1e      	ldr	r7, [pc, #120]	@ (80093b4 <__b2d+0x8c>)
 800933a:	4620      	mov	r0, r4
 800933c:	f7ff fd54 	bl	8008de8 <__hi0bits>
 8009340:	4603      	mov	r3, r0
 8009342:	f1c0 0020 	rsb	r0, r0, #32
 8009346:	2b0a      	cmp	r3, #10
 8009348:	f1a2 0504 	sub.w	r5, r2, #4
 800934c:	6008      	str	r0, [r1, #0]
 800934e:	dc12      	bgt.n	8009376 <__b2d+0x4e>
 8009350:	42ae      	cmp	r6, r5
 8009352:	bf2c      	ite	cs
 8009354:	2200      	movcs	r2, #0
 8009356:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800935a:	f1c3 0c0b 	rsb	ip, r3, #11
 800935e:	3315      	adds	r3, #21
 8009360:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009364:	fa04 f303 	lsl.w	r3, r4, r3
 8009368:	fa22 f20c 	lsr.w	r2, r2, ip
 800936c:	ea4e 0107 	orr.w	r1, lr, r7
 8009370:	431a      	orrs	r2, r3
 8009372:	4610      	mov	r0, r2
 8009374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009376:	42ae      	cmp	r6, r5
 8009378:	bf36      	itet	cc
 800937a:	f1a2 0508 	subcc.w	r5, r2, #8
 800937e:	2200      	movcs	r2, #0
 8009380:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009384:	3b0b      	subs	r3, #11
 8009386:	d012      	beq.n	80093ae <__b2d+0x86>
 8009388:	f1c3 0720 	rsb	r7, r3, #32
 800938c:	fa22 f107 	lsr.w	r1, r2, r7
 8009390:	409c      	lsls	r4, r3
 8009392:	430c      	orrs	r4, r1
 8009394:	42b5      	cmp	r5, r6
 8009396:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800939a:	bf94      	ite	ls
 800939c:	2400      	movls	r4, #0
 800939e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80093a2:	409a      	lsls	r2, r3
 80093a4:	40fc      	lsrs	r4, r7
 80093a6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80093aa:	4322      	orrs	r2, r4
 80093ac:	e7e1      	b.n	8009372 <__b2d+0x4a>
 80093ae:	ea44 0107 	orr.w	r1, r4, r7
 80093b2:	e7de      	b.n	8009372 <__b2d+0x4a>
 80093b4:	3ff00000 	.word	0x3ff00000

080093b8 <__d2b>:
 80093b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80093bc:	2101      	movs	r1, #1
 80093be:	4690      	mov	r8, r2
 80093c0:	4699      	mov	r9, r3
 80093c2:	9e08      	ldr	r6, [sp, #32]
 80093c4:	f7ff fc1e 	bl	8008c04 <_Balloc>
 80093c8:	4604      	mov	r4, r0
 80093ca:	b930      	cbnz	r0, 80093da <__d2b+0x22>
 80093cc:	4602      	mov	r2, r0
 80093ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80093d2:	4b23      	ldr	r3, [pc, #140]	@ (8009460 <__d2b+0xa8>)
 80093d4:	4823      	ldr	r0, [pc, #140]	@ (8009464 <__d2b+0xac>)
 80093d6:	f001 fb35 	bl	800aa44 <__assert_func>
 80093da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093e2:	b10d      	cbz	r5, 80093e8 <__d2b+0x30>
 80093e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	f1b8 0300 	subs.w	r3, r8, #0
 80093ee:	d024      	beq.n	800943a <__d2b+0x82>
 80093f0:	4668      	mov	r0, sp
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	f7ff fd17 	bl	8008e26 <__lo0bits>
 80093f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093fc:	b1d8      	cbz	r0, 8009436 <__d2b+0x7e>
 80093fe:	f1c0 0320 	rsb	r3, r0, #32
 8009402:	fa02 f303 	lsl.w	r3, r2, r3
 8009406:	430b      	orrs	r3, r1
 8009408:	40c2      	lsrs	r2, r0
 800940a:	6163      	str	r3, [r4, #20]
 800940c:	9201      	str	r2, [sp, #4]
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	bf0c      	ite	eq
 8009414:	2201      	moveq	r2, #1
 8009416:	2202      	movne	r2, #2
 8009418:	61a3      	str	r3, [r4, #24]
 800941a:	6122      	str	r2, [r4, #16]
 800941c:	b1ad      	cbz	r5, 800944a <__d2b+0x92>
 800941e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009422:	4405      	add	r5, r0
 8009424:	6035      	str	r5, [r6, #0]
 8009426:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800942a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800942c:	6018      	str	r0, [r3, #0]
 800942e:	4620      	mov	r0, r4
 8009430:	b002      	add	sp, #8
 8009432:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009436:	6161      	str	r1, [r4, #20]
 8009438:	e7e9      	b.n	800940e <__d2b+0x56>
 800943a:	a801      	add	r0, sp, #4
 800943c:	f7ff fcf3 	bl	8008e26 <__lo0bits>
 8009440:	9b01      	ldr	r3, [sp, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	6163      	str	r3, [r4, #20]
 8009446:	3020      	adds	r0, #32
 8009448:	e7e7      	b.n	800941a <__d2b+0x62>
 800944a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800944e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009452:	6030      	str	r0, [r6, #0]
 8009454:	6918      	ldr	r0, [r3, #16]
 8009456:	f7ff fcc7 	bl	8008de8 <__hi0bits>
 800945a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800945e:	e7e4      	b.n	800942a <__d2b+0x72>
 8009460:	0800bd43 	.word	0x0800bd43
 8009464:	0800bd54 	.word	0x0800bd54

08009468 <__ratio>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	b085      	sub	sp, #20
 800946e:	e9cd 1000 	strd	r1, r0, [sp]
 8009472:	a902      	add	r1, sp, #8
 8009474:	f7ff ff58 	bl	8009328 <__b2d>
 8009478:	468b      	mov	fp, r1
 800947a:	4606      	mov	r6, r0
 800947c:	460f      	mov	r7, r1
 800947e:	9800      	ldr	r0, [sp, #0]
 8009480:	a903      	add	r1, sp, #12
 8009482:	f7ff ff51 	bl	8009328 <__b2d>
 8009486:	460d      	mov	r5, r1
 8009488:	9b01      	ldr	r3, [sp, #4]
 800948a:	4689      	mov	r9, r1
 800948c:	6919      	ldr	r1, [r3, #16]
 800948e:	9b00      	ldr	r3, [sp, #0]
 8009490:	4604      	mov	r4, r0
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	4630      	mov	r0, r6
 8009496:	1ac9      	subs	r1, r1, r3
 8009498:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bfcd      	iteet	gt
 80094a6:	463a      	movgt	r2, r7
 80094a8:	462a      	movle	r2, r5
 80094aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094ae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80094b2:	bfd8      	it	le
 80094b4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80094b8:	464b      	mov	r3, r9
 80094ba:	4622      	mov	r2, r4
 80094bc:	4659      	mov	r1, fp
 80094be:	f7f7 f935 	bl	800072c <__aeabi_ddiv>
 80094c2:	b005      	add	sp, #20
 80094c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094c8 <__copybits>:
 80094c8:	3901      	subs	r1, #1
 80094ca:	b570      	push	{r4, r5, r6, lr}
 80094cc:	1149      	asrs	r1, r1, #5
 80094ce:	6914      	ldr	r4, [r2, #16]
 80094d0:	3101      	adds	r1, #1
 80094d2:	f102 0314 	add.w	r3, r2, #20
 80094d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094de:	1f05      	subs	r5, r0, #4
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	d30c      	bcc.n	80094fe <__copybits+0x36>
 80094e4:	1aa3      	subs	r3, r4, r2
 80094e6:	3b11      	subs	r3, #17
 80094e8:	f023 0303 	bic.w	r3, r3, #3
 80094ec:	3211      	adds	r2, #17
 80094ee:	42a2      	cmp	r2, r4
 80094f0:	bf88      	it	hi
 80094f2:	2300      	movhi	r3, #0
 80094f4:	4418      	add	r0, r3
 80094f6:	2300      	movs	r3, #0
 80094f8:	4288      	cmp	r0, r1
 80094fa:	d305      	bcc.n	8009508 <__copybits+0x40>
 80094fc:	bd70      	pop	{r4, r5, r6, pc}
 80094fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8009502:	f845 6f04 	str.w	r6, [r5, #4]!
 8009506:	e7eb      	b.n	80094e0 <__copybits+0x18>
 8009508:	f840 3b04 	str.w	r3, [r0], #4
 800950c:	e7f4      	b.n	80094f8 <__copybits+0x30>

0800950e <__any_on>:
 800950e:	f100 0214 	add.w	r2, r0, #20
 8009512:	6900      	ldr	r0, [r0, #16]
 8009514:	114b      	asrs	r3, r1, #5
 8009516:	4298      	cmp	r0, r3
 8009518:	b510      	push	{r4, lr}
 800951a:	db11      	blt.n	8009540 <__any_on+0x32>
 800951c:	dd0a      	ble.n	8009534 <__any_on+0x26>
 800951e:	f011 011f 	ands.w	r1, r1, #31
 8009522:	d007      	beq.n	8009534 <__any_on+0x26>
 8009524:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009528:	fa24 f001 	lsr.w	r0, r4, r1
 800952c:	fa00 f101 	lsl.w	r1, r0, r1
 8009530:	428c      	cmp	r4, r1
 8009532:	d10b      	bne.n	800954c <__any_on+0x3e>
 8009534:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009538:	4293      	cmp	r3, r2
 800953a:	d803      	bhi.n	8009544 <__any_on+0x36>
 800953c:	2000      	movs	r0, #0
 800953e:	bd10      	pop	{r4, pc}
 8009540:	4603      	mov	r3, r0
 8009542:	e7f7      	b.n	8009534 <__any_on+0x26>
 8009544:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009548:	2900      	cmp	r1, #0
 800954a:	d0f5      	beq.n	8009538 <__any_on+0x2a>
 800954c:	2001      	movs	r0, #1
 800954e:	e7f6      	b.n	800953e <__any_on+0x30>

08009550 <sulp>:
 8009550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009554:	460f      	mov	r7, r1
 8009556:	4690      	mov	r8, r2
 8009558:	f7ff fec6 	bl	80092e8 <__ulp>
 800955c:	4604      	mov	r4, r0
 800955e:	460d      	mov	r5, r1
 8009560:	f1b8 0f00 	cmp.w	r8, #0
 8009564:	d011      	beq.n	800958a <sulp+0x3a>
 8009566:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800956a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800956e:	2b00      	cmp	r3, #0
 8009570:	dd0b      	ble.n	800958a <sulp+0x3a>
 8009572:	2400      	movs	r4, #0
 8009574:	051b      	lsls	r3, r3, #20
 8009576:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800957a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800957e:	4622      	mov	r2, r4
 8009580:	462b      	mov	r3, r5
 8009582:	f7f6 ffa9 	bl	80004d8 <__aeabi_dmul>
 8009586:	4604      	mov	r4, r0
 8009588:	460d      	mov	r5, r1
 800958a:	4620      	mov	r0, r4
 800958c:	4629      	mov	r1, r5
 800958e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009592:	0000      	movs	r0, r0
 8009594:	0000      	movs	r0, r0
	...

08009598 <_strtod_l>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	b09f      	sub	sp, #124	@ 0x7c
 800959e:	9217      	str	r2, [sp, #92]	@ 0x5c
 80095a0:	2200      	movs	r2, #0
 80095a2:	460c      	mov	r4, r1
 80095a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80095a6:	f04f 0a00 	mov.w	sl, #0
 80095aa:	f04f 0b00 	mov.w	fp, #0
 80095ae:	460a      	mov	r2, r1
 80095b0:	9005      	str	r0, [sp, #20]
 80095b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80095b4:	7811      	ldrb	r1, [r2, #0]
 80095b6:	292b      	cmp	r1, #43	@ 0x2b
 80095b8:	d048      	beq.n	800964c <_strtod_l+0xb4>
 80095ba:	d836      	bhi.n	800962a <_strtod_l+0x92>
 80095bc:	290d      	cmp	r1, #13
 80095be:	d830      	bhi.n	8009622 <_strtod_l+0x8a>
 80095c0:	2908      	cmp	r1, #8
 80095c2:	d830      	bhi.n	8009626 <_strtod_l+0x8e>
 80095c4:	2900      	cmp	r1, #0
 80095c6:	d039      	beq.n	800963c <_strtod_l+0xa4>
 80095c8:	2200      	movs	r2, #0
 80095ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80095cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80095ce:	782a      	ldrb	r2, [r5, #0]
 80095d0:	2a30      	cmp	r2, #48	@ 0x30
 80095d2:	f040 80b1 	bne.w	8009738 <_strtod_l+0x1a0>
 80095d6:	786a      	ldrb	r2, [r5, #1]
 80095d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095dc:	2a58      	cmp	r2, #88	@ 0x58
 80095de:	d16c      	bne.n	80096ba <_strtod_l+0x122>
 80095e0:	9302      	str	r3, [sp, #8]
 80095e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095e4:	4a8e      	ldr	r2, [pc, #568]	@ (8009820 <_strtod_l+0x288>)
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	ab1a      	add	r3, sp, #104	@ 0x68
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	9805      	ldr	r0, [sp, #20]
 80095ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095f0:	a919      	add	r1, sp, #100	@ 0x64
 80095f2:	f001 fac1 	bl	800ab78 <__gethex>
 80095f6:	f010 060f 	ands.w	r6, r0, #15
 80095fa:	4604      	mov	r4, r0
 80095fc:	d005      	beq.n	800960a <_strtod_l+0x72>
 80095fe:	2e06      	cmp	r6, #6
 8009600:	d126      	bne.n	8009650 <_strtod_l+0xb8>
 8009602:	2300      	movs	r3, #0
 8009604:	3501      	adds	r5, #1
 8009606:	9519      	str	r5, [sp, #100]	@ 0x64
 8009608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800960a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800960c:	2b00      	cmp	r3, #0
 800960e:	f040 8584 	bne.w	800a11a <_strtod_l+0xb82>
 8009612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009614:	b1bb      	cbz	r3, 8009646 <_strtod_l+0xae>
 8009616:	4650      	mov	r0, sl
 8009618:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800961c:	b01f      	add	sp, #124	@ 0x7c
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	2920      	cmp	r1, #32
 8009624:	d1d0      	bne.n	80095c8 <_strtod_l+0x30>
 8009626:	3201      	adds	r2, #1
 8009628:	e7c3      	b.n	80095b2 <_strtod_l+0x1a>
 800962a:	292d      	cmp	r1, #45	@ 0x2d
 800962c:	d1cc      	bne.n	80095c8 <_strtod_l+0x30>
 800962e:	2101      	movs	r1, #1
 8009630:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009632:	1c51      	adds	r1, r2, #1
 8009634:	9119      	str	r1, [sp, #100]	@ 0x64
 8009636:	7852      	ldrb	r2, [r2, #1]
 8009638:	2a00      	cmp	r2, #0
 800963a:	d1c7      	bne.n	80095cc <_strtod_l+0x34>
 800963c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800963e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 8568 	bne.w	800a116 <_strtod_l+0xb7e>
 8009646:	4650      	mov	r0, sl
 8009648:	4659      	mov	r1, fp
 800964a:	e7e7      	b.n	800961c <_strtod_l+0x84>
 800964c:	2100      	movs	r1, #0
 800964e:	e7ef      	b.n	8009630 <_strtod_l+0x98>
 8009650:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009652:	b13a      	cbz	r2, 8009664 <_strtod_l+0xcc>
 8009654:	2135      	movs	r1, #53	@ 0x35
 8009656:	a81c      	add	r0, sp, #112	@ 0x70
 8009658:	f7ff ff36 	bl	80094c8 <__copybits>
 800965c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800965e:	9805      	ldr	r0, [sp, #20]
 8009660:	f7ff fb10 	bl	8008c84 <_Bfree>
 8009664:	3e01      	subs	r6, #1
 8009666:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009668:	2e04      	cmp	r6, #4
 800966a:	d806      	bhi.n	800967a <_strtod_l+0xe2>
 800966c:	e8df f006 	tbb	[pc, r6]
 8009670:	201d0314 	.word	0x201d0314
 8009674:	14          	.byte	0x14
 8009675:	00          	.byte	0x00
 8009676:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800967a:	05e1      	lsls	r1, r4, #23
 800967c:	bf48      	it	mi
 800967e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009682:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009686:	0d1b      	lsrs	r3, r3, #20
 8009688:	051b      	lsls	r3, r3, #20
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1bd      	bne.n	800960a <_strtod_l+0x72>
 800968e:	f7fe fb1b 	bl	8007cc8 <__errno>
 8009692:	2322      	movs	r3, #34	@ 0x22
 8009694:	6003      	str	r3, [r0, #0]
 8009696:	e7b8      	b.n	800960a <_strtod_l+0x72>
 8009698:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800969c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80096a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80096a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096a8:	e7e7      	b.n	800967a <_strtod_l+0xe2>
 80096aa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009824 <_strtod_l+0x28c>
 80096ae:	e7e4      	b.n	800967a <_strtod_l+0xe2>
 80096b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80096b4:	f04f 3aff 	mov.w	sl, #4294967295
 80096b8:	e7df      	b.n	800967a <_strtod_l+0xe2>
 80096ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	9219      	str	r2, [sp, #100]	@ 0x64
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	2b30      	cmp	r3, #48	@ 0x30
 80096c4:	d0f9      	beq.n	80096ba <_strtod_l+0x122>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d09f      	beq.n	800960a <_strtod_l+0x72>
 80096ca:	2301      	movs	r3, #1
 80096cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096d0:	220a      	movs	r2, #10
 80096d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80096d4:	2300      	movs	r3, #0
 80096d6:	461f      	mov	r7, r3
 80096d8:	9308      	str	r3, [sp, #32]
 80096da:	930a      	str	r3, [sp, #40]	@ 0x28
 80096dc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80096de:	7805      	ldrb	r5, [r0, #0]
 80096e0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80096e4:	b2d9      	uxtb	r1, r3
 80096e6:	2909      	cmp	r1, #9
 80096e8:	d928      	bls.n	800973c <_strtod_l+0x1a4>
 80096ea:	2201      	movs	r2, #1
 80096ec:	494e      	ldr	r1, [pc, #312]	@ (8009828 <_strtod_l+0x290>)
 80096ee:	f001 f981 	bl	800a9f4 <strncmp>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d032      	beq.n	800975c <_strtod_l+0x1c4>
 80096f6:	2000      	movs	r0, #0
 80096f8:	462a      	mov	r2, r5
 80096fa:	4681      	mov	r9, r0
 80096fc:	463d      	mov	r5, r7
 80096fe:	4603      	mov	r3, r0
 8009700:	2a65      	cmp	r2, #101	@ 0x65
 8009702:	d001      	beq.n	8009708 <_strtod_l+0x170>
 8009704:	2a45      	cmp	r2, #69	@ 0x45
 8009706:	d114      	bne.n	8009732 <_strtod_l+0x19a>
 8009708:	b91d      	cbnz	r5, 8009712 <_strtod_l+0x17a>
 800970a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800970c:	4302      	orrs	r2, r0
 800970e:	d095      	beq.n	800963c <_strtod_l+0xa4>
 8009710:	2500      	movs	r5, #0
 8009712:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009714:	1c62      	adds	r2, r4, #1
 8009716:	9219      	str	r2, [sp, #100]	@ 0x64
 8009718:	7862      	ldrb	r2, [r4, #1]
 800971a:	2a2b      	cmp	r2, #43	@ 0x2b
 800971c:	d077      	beq.n	800980e <_strtod_l+0x276>
 800971e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009720:	d07b      	beq.n	800981a <_strtod_l+0x282>
 8009722:	f04f 0c00 	mov.w	ip, #0
 8009726:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800972a:	2909      	cmp	r1, #9
 800972c:	f240 8082 	bls.w	8009834 <_strtod_l+0x29c>
 8009730:	9419      	str	r4, [sp, #100]	@ 0x64
 8009732:	f04f 0800 	mov.w	r8, #0
 8009736:	e0a2      	b.n	800987e <_strtod_l+0x2e6>
 8009738:	2300      	movs	r3, #0
 800973a:	e7c7      	b.n	80096cc <_strtod_l+0x134>
 800973c:	2f08      	cmp	r7, #8
 800973e:	bfd5      	itete	le
 8009740:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009742:	9908      	ldrgt	r1, [sp, #32]
 8009744:	fb02 3301 	mlale	r3, r2, r1, r3
 8009748:	fb02 3301 	mlagt	r3, r2, r1, r3
 800974c:	f100 0001 	add.w	r0, r0, #1
 8009750:	bfd4      	ite	le
 8009752:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009754:	9308      	strgt	r3, [sp, #32]
 8009756:	3701      	adds	r7, #1
 8009758:	9019      	str	r0, [sp, #100]	@ 0x64
 800975a:	e7bf      	b.n	80096dc <_strtod_l+0x144>
 800975c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	9219      	str	r2, [sp, #100]	@ 0x64
 8009762:	785a      	ldrb	r2, [r3, #1]
 8009764:	b37f      	cbz	r7, 80097c6 <_strtod_l+0x22e>
 8009766:	4681      	mov	r9, r0
 8009768:	463d      	mov	r5, r7
 800976a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800976e:	2b09      	cmp	r3, #9
 8009770:	d912      	bls.n	8009798 <_strtod_l+0x200>
 8009772:	2301      	movs	r3, #1
 8009774:	e7c4      	b.n	8009700 <_strtod_l+0x168>
 8009776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009778:	3001      	adds	r0, #1
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	9219      	str	r2, [sp, #100]	@ 0x64
 800977e:	785a      	ldrb	r2, [r3, #1]
 8009780:	2a30      	cmp	r2, #48	@ 0x30
 8009782:	d0f8      	beq.n	8009776 <_strtod_l+0x1de>
 8009784:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009788:	2b08      	cmp	r3, #8
 800978a:	f200 84cb 	bhi.w	800a124 <_strtod_l+0xb8c>
 800978e:	4681      	mov	r9, r0
 8009790:	2000      	movs	r0, #0
 8009792:	4605      	mov	r5, r0
 8009794:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009796:	930c      	str	r3, [sp, #48]	@ 0x30
 8009798:	3a30      	subs	r2, #48	@ 0x30
 800979a:	f100 0301 	add.w	r3, r0, #1
 800979e:	d02a      	beq.n	80097f6 <_strtod_l+0x25e>
 80097a0:	4499      	add	r9, r3
 80097a2:	210a      	movs	r1, #10
 80097a4:	462b      	mov	r3, r5
 80097a6:	eb00 0c05 	add.w	ip, r0, r5
 80097aa:	4563      	cmp	r3, ip
 80097ac:	d10d      	bne.n	80097ca <_strtod_l+0x232>
 80097ae:	1c69      	adds	r1, r5, #1
 80097b0:	4401      	add	r1, r0
 80097b2:	4428      	add	r0, r5
 80097b4:	2808      	cmp	r0, #8
 80097b6:	dc16      	bgt.n	80097e6 <_strtod_l+0x24e>
 80097b8:	230a      	movs	r3, #10
 80097ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80097bc:	fb03 2300 	mla	r3, r3, r0, r2
 80097c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097c2:	2300      	movs	r3, #0
 80097c4:	e018      	b.n	80097f8 <_strtod_l+0x260>
 80097c6:	4638      	mov	r0, r7
 80097c8:	e7da      	b.n	8009780 <_strtod_l+0x1e8>
 80097ca:	2b08      	cmp	r3, #8
 80097cc:	f103 0301 	add.w	r3, r3, #1
 80097d0:	dc03      	bgt.n	80097da <_strtod_l+0x242>
 80097d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80097d4:	434e      	muls	r6, r1
 80097d6:	960a      	str	r6, [sp, #40]	@ 0x28
 80097d8:	e7e7      	b.n	80097aa <_strtod_l+0x212>
 80097da:	2b10      	cmp	r3, #16
 80097dc:	bfde      	ittt	le
 80097de:	9e08      	ldrle	r6, [sp, #32]
 80097e0:	434e      	mulle	r6, r1
 80097e2:	9608      	strle	r6, [sp, #32]
 80097e4:	e7e1      	b.n	80097aa <_strtod_l+0x212>
 80097e6:	280f      	cmp	r0, #15
 80097e8:	dceb      	bgt.n	80097c2 <_strtod_l+0x22a>
 80097ea:	230a      	movs	r3, #10
 80097ec:	9808      	ldr	r0, [sp, #32]
 80097ee:	fb03 2300 	mla	r3, r3, r0, r2
 80097f2:	9308      	str	r3, [sp, #32]
 80097f4:	e7e5      	b.n	80097c2 <_strtod_l+0x22a>
 80097f6:	4629      	mov	r1, r5
 80097f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097fa:	460d      	mov	r5, r1
 80097fc:	1c50      	adds	r0, r2, #1
 80097fe:	9019      	str	r0, [sp, #100]	@ 0x64
 8009800:	7852      	ldrb	r2, [r2, #1]
 8009802:	4618      	mov	r0, r3
 8009804:	e7b1      	b.n	800976a <_strtod_l+0x1d2>
 8009806:	f04f 0900 	mov.w	r9, #0
 800980a:	2301      	movs	r3, #1
 800980c:	e77d      	b.n	800970a <_strtod_l+0x172>
 800980e:	f04f 0c00 	mov.w	ip, #0
 8009812:	1ca2      	adds	r2, r4, #2
 8009814:	9219      	str	r2, [sp, #100]	@ 0x64
 8009816:	78a2      	ldrb	r2, [r4, #2]
 8009818:	e785      	b.n	8009726 <_strtod_l+0x18e>
 800981a:	f04f 0c01 	mov.w	ip, #1
 800981e:	e7f8      	b.n	8009812 <_strtod_l+0x27a>
 8009820:	0800bec8 	.word	0x0800bec8
 8009824:	7ff00000 	.word	0x7ff00000
 8009828:	0800beb0 	.word	0x0800beb0
 800982c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800982e:	1c51      	adds	r1, r2, #1
 8009830:	9119      	str	r1, [sp, #100]	@ 0x64
 8009832:	7852      	ldrb	r2, [r2, #1]
 8009834:	2a30      	cmp	r2, #48	@ 0x30
 8009836:	d0f9      	beq.n	800982c <_strtod_l+0x294>
 8009838:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800983c:	2908      	cmp	r1, #8
 800983e:	f63f af78 	bhi.w	8009732 <_strtod_l+0x19a>
 8009842:	f04f 080a 	mov.w	r8, #10
 8009846:	3a30      	subs	r2, #48	@ 0x30
 8009848:	920e      	str	r2, [sp, #56]	@ 0x38
 800984a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800984c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800984e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009850:	1c56      	adds	r6, r2, #1
 8009852:	9619      	str	r6, [sp, #100]	@ 0x64
 8009854:	7852      	ldrb	r2, [r2, #1]
 8009856:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800985a:	f1be 0f09 	cmp.w	lr, #9
 800985e:	d939      	bls.n	80098d4 <_strtod_l+0x33c>
 8009860:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009862:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009866:	1a76      	subs	r6, r6, r1
 8009868:	2e08      	cmp	r6, #8
 800986a:	dc03      	bgt.n	8009874 <_strtod_l+0x2dc>
 800986c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800986e:	4588      	cmp	r8, r1
 8009870:	bfa8      	it	ge
 8009872:	4688      	movge	r8, r1
 8009874:	f1bc 0f00 	cmp.w	ip, #0
 8009878:	d001      	beq.n	800987e <_strtod_l+0x2e6>
 800987a:	f1c8 0800 	rsb	r8, r8, #0
 800987e:	2d00      	cmp	r5, #0
 8009880:	d14e      	bne.n	8009920 <_strtod_l+0x388>
 8009882:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009884:	4308      	orrs	r0, r1
 8009886:	f47f aec0 	bne.w	800960a <_strtod_l+0x72>
 800988a:	2b00      	cmp	r3, #0
 800988c:	f47f aed6 	bne.w	800963c <_strtod_l+0xa4>
 8009890:	2a69      	cmp	r2, #105	@ 0x69
 8009892:	d028      	beq.n	80098e6 <_strtod_l+0x34e>
 8009894:	dc25      	bgt.n	80098e2 <_strtod_l+0x34a>
 8009896:	2a49      	cmp	r2, #73	@ 0x49
 8009898:	d025      	beq.n	80098e6 <_strtod_l+0x34e>
 800989a:	2a4e      	cmp	r2, #78	@ 0x4e
 800989c:	f47f aece 	bne.w	800963c <_strtod_l+0xa4>
 80098a0:	499a      	ldr	r1, [pc, #616]	@ (8009b0c <_strtod_l+0x574>)
 80098a2:	a819      	add	r0, sp, #100	@ 0x64
 80098a4:	f001 fb8a 	bl	800afbc <__match>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	f43f aec7 	beq.w	800963c <_strtod_l+0xa4>
 80098ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b28      	cmp	r3, #40	@ 0x28
 80098b4:	d12e      	bne.n	8009914 <_strtod_l+0x37c>
 80098b6:	4996      	ldr	r1, [pc, #600]	@ (8009b10 <_strtod_l+0x578>)
 80098b8:	aa1c      	add	r2, sp, #112	@ 0x70
 80098ba:	a819      	add	r0, sp, #100	@ 0x64
 80098bc:	f001 fb92 	bl	800afe4 <__hexnan>
 80098c0:	2805      	cmp	r0, #5
 80098c2:	d127      	bne.n	8009914 <_strtod_l+0x37c>
 80098c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80098ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80098ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80098d2:	e69a      	b.n	800960a <_strtod_l+0x72>
 80098d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80098d6:	fb08 2101 	mla	r1, r8, r1, r2
 80098da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80098de:	920e      	str	r2, [sp, #56]	@ 0x38
 80098e0:	e7b5      	b.n	800984e <_strtod_l+0x2b6>
 80098e2:	2a6e      	cmp	r2, #110	@ 0x6e
 80098e4:	e7da      	b.n	800989c <_strtod_l+0x304>
 80098e6:	498b      	ldr	r1, [pc, #556]	@ (8009b14 <_strtod_l+0x57c>)
 80098e8:	a819      	add	r0, sp, #100	@ 0x64
 80098ea:	f001 fb67 	bl	800afbc <__match>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f aea4 	beq.w	800963c <_strtod_l+0xa4>
 80098f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098f6:	4988      	ldr	r1, [pc, #544]	@ (8009b18 <_strtod_l+0x580>)
 80098f8:	3b01      	subs	r3, #1
 80098fa:	a819      	add	r0, sp, #100	@ 0x64
 80098fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80098fe:	f001 fb5d 	bl	800afbc <__match>
 8009902:	b910      	cbnz	r0, 800990a <_strtod_l+0x372>
 8009904:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009906:	3301      	adds	r3, #1
 8009908:	9319      	str	r3, [sp, #100]	@ 0x64
 800990a:	f04f 0a00 	mov.w	sl, #0
 800990e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009b1c <_strtod_l+0x584>
 8009912:	e67a      	b.n	800960a <_strtod_l+0x72>
 8009914:	4882      	ldr	r0, [pc, #520]	@ (8009b20 <_strtod_l+0x588>)
 8009916:	f001 f88f 	bl	800aa38 <nan>
 800991a:	4682      	mov	sl, r0
 800991c:	468b      	mov	fp, r1
 800991e:	e674      	b.n	800960a <_strtod_l+0x72>
 8009920:	eba8 0309 	sub.w	r3, r8, r9
 8009924:	2f00      	cmp	r7, #0
 8009926:	bf08      	it	eq
 8009928:	462f      	moveq	r7, r5
 800992a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800992c:	2d10      	cmp	r5, #16
 800992e:	462c      	mov	r4, r5
 8009930:	9309      	str	r3, [sp, #36]	@ 0x24
 8009932:	bfa8      	it	ge
 8009934:	2410      	movge	r4, #16
 8009936:	f7f6 fd55 	bl	80003e4 <__aeabi_ui2d>
 800993a:	2d09      	cmp	r5, #9
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	dc11      	bgt.n	8009966 <_strtod_l+0x3ce>
 8009942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009944:	2b00      	cmp	r3, #0
 8009946:	f43f ae60 	beq.w	800960a <_strtod_l+0x72>
 800994a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800994c:	dd76      	ble.n	8009a3c <_strtod_l+0x4a4>
 800994e:	2b16      	cmp	r3, #22
 8009950:	dc5d      	bgt.n	8009a0e <_strtod_l+0x476>
 8009952:	4974      	ldr	r1, [pc, #464]	@ (8009b24 <_strtod_l+0x58c>)
 8009954:	4652      	mov	r2, sl
 8009956:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800995a:	465b      	mov	r3, fp
 800995c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009960:	f7f6 fdba 	bl	80004d8 <__aeabi_dmul>
 8009964:	e7d9      	b.n	800991a <_strtod_l+0x382>
 8009966:	4b6f      	ldr	r3, [pc, #444]	@ (8009b24 <_strtod_l+0x58c>)
 8009968:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800996c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009970:	f7f6 fdb2 	bl	80004d8 <__aeabi_dmul>
 8009974:	4682      	mov	sl, r0
 8009976:	9808      	ldr	r0, [sp, #32]
 8009978:	468b      	mov	fp, r1
 800997a:	f7f6 fd33 	bl	80003e4 <__aeabi_ui2d>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4650      	mov	r0, sl
 8009984:	4659      	mov	r1, fp
 8009986:	f7f6 fbf1 	bl	800016c <__adddf3>
 800998a:	2d0f      	cmp	r5, #15
 800998c:	4682      	mov	sl, r0
 800998e:	468b      	mov	fp, r1
 8009990:	ddd7      	ble.n	8009942 <_strtod_l+0x3aa>
 8009992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009994:	1b2c      	subs	r4, r5, r4
 8009996:	441c      	add	r4, r3
 8009998:	2c00      	cmp	r4, #0
 800999a:	f340 8096 	ble.w	8009aca <_strtod_l+0x532>
 800999e:	f014 030f 	ands.w	r3, r4, #15
 80099a2:	d00a      	beq.n	80099ba <_strtod_l+0x422>
 80099a4:	495f      	ldr	r1, [pc, #380]	@ (8009b24 <_strtod_l+0x58c>)
 80099a6:	4652      	mov	r2, sl
 80099a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b0:	465b      	mov	r3, fp
 80099b2:	f7f6 fd91 	bl	80004d8 <__aeabi_dmul>
 80099b6:	4682      	mov	sl, r0
 80099b8:	468b      	mov	fp, r1
 80099ba:	f034 040f 	bics.w	r4, r4, #15
 80099be:	d073      	beq.n	8009aa8 <_strtod_l+0x510>
 80099c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80099c4:	dd48      	ble.n	8009a58 <_strtod_l+0x4c0>
 80099c6:	2400      	movs	r4, #0
 80099c8:	46a0      	mov	r8, r4
 80099ca:	46a1      	mov	r9, r4
 80099cc:	940a      	str	r4, [sp, #40]	@ 0x28
 80099ce:	2322      	movs	r3, #34	@ 0x22
 80099d0:	f04f 0a00 	mov.w	sl, #0
 80099d4:	9a05      	ldr	r2, [sp, #20]
 80099d6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009b1c <_strtod_l+0x584>
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f43f ae13 	beq.w	800960a <_strtod_l+0x72>
 80099e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099e6:	9805      	ldr	r0, [sp, #20]
 80099e8:	f7ff f94c 	bl	8008c84 <_Bfree>
 80099ec:	4649      	mov	r1, r9
 80099ee:	9805      	ldr	r0, [sp, #20]
 80099f0:	f7ff f948 	bl	8008c84 <_Bfree>
 80099f4:	4641      	mov	r1, r8
 80099f6:	9805      	ldr	r0, [sp, #20]
 80099f8:	f7ff f944 	bl	8008c84 <_Bfree>
 80099fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099fe:	9805      	ldr	r0, [sp, #20]
 8009a00:	f7ff f940 	bl	8008c84 <_Bfree>
 8009a04:	4621      	mov	r1, r4
 8009a06:	9805      	ldr	r0, [sp, #20]
 8009a08:	f7ff f93c 	bl	8008c84 <_Bfree>
 8009a0c:	e5fd      	b.n	800960a <_strtod_l+0x72>
 8009a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009a14:	4293      	cmp	r3, r2
 8009a16:	dbbc      	blt.n	8009992 <_strtod_l+0x3fa>
 8009a18:	4c42      	ldr	r4, [pc, #264]	@ (8009b24 <_strtod_l+0x58c>)
 8009a1a:	f1c5 050f 	rsb	r5, r5, #15
 8009a1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a22:	4652      	mov	r2, sl
 8009a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a28:	465b      	mov	r3, fp
 8009a2a:	f7f6 fd55 	bl	80004d8 <__aeabi_dmul>
 8009a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a30:	1b5d      	subs	r5, r3, r5
 8009a32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a3a:	e791      	b.n	8009960 <_strtod_l+0x3c8>
 8009a3c:	3316      	adds	r3, #22
 8009a3e:	dba8      	blt.n	8009992 <_strtod_l+0x3fa>
 8009a40:	4b38      	ldr	r3, [pc, #224]	@ (8009b24 <_strtod_l+0x58c>)
 8009a42:	eba9 0808 	sub.w	r8, r9, r8
 8009a46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009a50:	4659      	mov	r1, fp
 8009a52:	f7f6 fe6b 	bl	800072c <__aeabi_ddiv>
 8009a56:	e760      	b.n	800991a <_strtod_l+0x382>
 8009a58:	4b33      	ldr	r3, [pc, #204]	@ (8009b28 <_strtod_l+0x590>)
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	9308      	str	r3, [sp, #32]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	4659      	mov	r1, fp
 8009a62:	461e      	mov	r6, r3
 8009a64:	1124      	asrs	r4, r4, #4
 8009a66:	2c01      	cmp	r4, #1
 8009a68:	dc21      	bgt.n	8009aae <_strtod_l+0x516>
 8009a6a:	b10b      	cbz	r3, 8009a70 <_strtod_l+0x4d8>
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	468b      	mov	fp, r1
 8009a70:	492d      	ldr	r1, [pc, #180]	@ (8009b28 <_strtod_l+0x590>)
 8009a72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a80:	465b      	mov	r3, fp
 8009a82:	f7f6 fd29 	bl	80004d8 <__aeabi_dmul>
 8009a86:	4b25      	ldr	r3, [pc, #148]	@ (8009b1c <_strtod_l+0x584>)
 8009a88:	460a      	mov	r2, r1
 8009a8a:	400b      	ands	r3, r1
 8009a8c:	4927      	ldr	r1, [pc, #156]	@ (8009b2c <_strtod_l+0x594>)
 8009a8e:	4682      	mov	sl, r0
 8009a90:	428b      	cmp	r3, r1
 8009a92:	d898      	bhi.n	80099c6 <_strtod_l+0x42e>
 8009a94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a98:	428b      	cmp	r3, r1
 8009a9a:	bf86      	itte	hi
 8009a9c:	f04f 3aff 	movhi.w	sl, #4294967295
 8009aa0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009b30 <_strtod_l+0x598>
 8009aa4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9308      	str	r3, [sp, #32]
 8009aac:	e07a      	b.n	8009ba4 <_strtod_l+0x60c>
 8009aae:	07e2      	lsls	r2, r4, #31
 8009ab0:	d505      	bpl.n	8009abe <_strtod_l+0x526>
 8009ab2:	9b08      	ldr	r3, [sp, #32]
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f7f6 fd0e 	bl	80004d8 <__aeabi_dmul>
 8009abc:	2301      	movs	r3, #1
 8009abe:	9a08      	ldr	r2, [sp, #32]
 8009ac0:	3601      	adds	r6, #1
 8009ac2:	3208      	adds	r2, #8
 8009ac4:	1064      	asrs	r4, r4, #1
 8009ac6:	9208      	str	r2, [sp, #32]
 8009ac8:	e7cd      	b.n	8009a66 <_strtod_l+0x4ce>
 8009aca:	d0ed      	beq.n	8009aa8 <_strtod_l+0x510>
 8009acc:	4264      	negs	r4, r4
 8009ace:	f014 020f 	ands.w	r2, r4, #15
 8009ad2:	d00a      	beq.n	8009aea <_strtod_l+0x552>
 8009ad4:	4b13      	ldr	r3, [pc, #76]	@ (8009b24 <_strtod_l+0x58c>)
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009adc:	4659      	mov	r1, fp
 8009ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae2:	f7f6 fe23 	bl	800072c <__aeabi_ddiv>
 8009ae6:	4682      	mov	sl, r0
 8009ae8:	468b      	mov	fp, r1
 8009aea:	1124      	asrs	r4, r4, #4
 8009aec:	d0dc      	beq.n	8009aa8 <_strtod_l+0x510>
 8009aee:	2c1f      	cmp	r4, #31
 8009af0:	dd20      	ble.n	8009b34 <_strtod_l+0x59c>
 8009af2:	2400      	movs	r4, #0
 8009af4:	46a0      	mov	r8, r4
 8009af6:	46a1      	mov	r9, r4
 8009af8:	940a      	str	r4, [sp, #40]	@ 0x28
 8009afa:	2322      	movs	r3, #34	@ 0x22
 8009afc:	9a05      	ldr	r2, [sp, #20]
 8009afe:	f04f 0a00 	mov.w	sl, #0
 8009b02:	f04f 0b00 	mov.w	fp, #0
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	e768      	b.n	80099dc <_strtod_l+0x444>
 8009b0a:	bf00      	nop
 8009b0c:	0800bc9b 	.word	0x0800bc9b
 8009b10:	0800beb4 	.word	0x0800beb4
 8009b14:	0800bc93 	.word	0x0800bc93
 8009b18:	0800bcca 	.word	0x0800bcca
 8009b1c:	7ff00000 	.word	0x7ff00000
 8009b20:	0800c05d 	.word	0x0800c05d
 8009b24:	0800bde8 	.word	0x0800bde8
 8009b28:	0800bdc0 	.word	0x0800bdc0
 8009b2c:	7ca00000 	.word	0x7ca00000
 8009b30:	7fefffff 	.word	0x7fefffff
 8009b34:	f014 0310 	ands.w	r3, r4, #16
 8009b38:	bf18      	it	ne
 8009b3a:	236a      	movne	r3, #106	@ 0x6a
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	9308      	str	r3, [sp, #32]
 8009b40:	4659      	mov	r1, fp
 8009b42:	2300      	movs	r3, #0
 8009b44:	4ea9      	ldr	r6, [pc, #676]	@ (8009dec <_strtod_l+0x854>)
 8009b46:	07e2      	lsls	r2, r4, #31
 8009b48:	d504      	bpl.n	8009b54 <_strtod_l+0x5bc>
 8009b4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b4e:	f7f6 fcc3 	bl	80004d8 <__aeabi_dmul>
 8009b52:	2301      	movs	r3, #1
 8009b54:	1064      	asrs	r4, r4, #1
 8009b56:	f106 0608 	add.w	r6, r6, #8
 8009b5a:	d1f4      	bne.n	8009b46 <_strtod_l+0x5ae>
 8009b5c:	b10b      	cbz	r3, 8009b62 <_strtod_l+0x5ca>
 8009b5e:	4682      	mov	sl, r0
 8009b60:	468b      	mov	fp, r1
 8009b62:	9b08      	ldr	r3, [sp, #32]
 8009b64:	b1b3      	cbz	r3, 8009b94 <_strtod_l+0x5fc>
 8009b66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	4659      	mov	r1, fp
 8009b72:	dd0f      	ble.n	8009b94 <_strtod_l+0x5fc>
 8009b74:	2b1f      	cmp	r3, #31
 8009b76:	dd57      	ble.n	8009c28 <_strtod_l+0x690>
 8009b78:	2b34      	cmp	r3, #52	@ 0x34
 8009b7a:	bfd8      	it	le
 8009b7c:	f04f 33ff 	movle.w	r3, #4294967295
 8009b80:	f04f 0a00 	mov.w	sl, #0
 8009b84:	bfcf      	iteee	gt
 8009b86:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b8a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b8e:	4093      	lslle	r3, r2
 8009b90:	ea03 0b01 	andle.w	fp, r3, r1
 8009b94:	2200      	movs	r2, #0
 8009b96:	2300      	movs	r3, #0
 8009b98:	4650      	mov	r0, sl
 8009b9a:	4659      	mov	r1, fp
 8009b9c:	f7f6 ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d1a6      	bne.n	8009af2 <_strtod_l+0x55a>
 8009ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009bac:	462b      	mov	r3, r5
 8009bae:	9805      	ldr	r0, [sp, #20]
 8009bb0:	f7ff f8d0 	bl	8008d54 <__s2b>
 8009bb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f43f af05 	beq.w	80099c6 <_strtod_l+0x42e>
 8009bbc:	2400      	movs	r4, #0
 8009bbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc0:	eba9 0308 	sub.w	r3, r9, r8
 8009bc4:	2a00      	cmp	r2, #0
 8009bc6:	bfa8      	it	ge
 8009bc8:	2300      	movge	r3, #0
 8009bca:	46a0      	mov	r8, r4
 8009bcc:	9312      	str	r3, [sp, #72]	@ 0x48
 8009bce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009bd2:	9316      	str	r3, [sp, #88]	@ 0x58
 8009bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bd6:	9805      	ldr	r0, [sp, #20]
 8009bd8:	6859      	ldr	r1, [r3, #4]
 8009bda:	f7ff f813 	bl	8008c04 <_Balloc>
 8009bde:	4681      	mov	r9, r0
 8009be0:	2800      	cmp	r0, #0
 8009be2:	f43f aef4 	beq.w	80099ce <_strtod_l+0x436>
 8009be6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009be8:	300c      	adds	r0, #12
 8009bea:	691a      	ldr	r2, [r3, #16]
 8009bec:	f103 010c 	add.w	r1, r3, #12
 8009bf0:	3202      	adds	r2, #2
 8009bf2:	0092      	lsls	r2, r2, #2
 8009bf4:	f7fe f8a3 	bl	8007d3e <memcpy>
 8009bf8:	ab1c      	add	r3, sp, #112	@ 0x70
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	4652      	mov	r2, sl
 8009c02:	465b      	mov	r3, fp
 8009c04:	9805      	ldr	r0, [sp, #20]
 8009c06:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009c0a:	f7ff fbd5 	bl	80093b8 <__d2b>
 8009c0e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f43f aedc 	beq.w	80099ce <_strtod_l+0x436>
 8009c16:	2101      	movs	r1, #1
 8009c18:	9805      	ldr	r0, [sp, #20]
 8009c1a:	f7ff f931 	bl	8008e80 <__i2b>
 8009c1e:	4680      	mov	r8, r0
 8009c20:	b948      	cbnz	r0, 8009c36 <_strtod_l+0x69e>
 8009c22:	f04f 0800 	mov.w	r8, #0
 8009c26:	e6d2      	b.n	80099ce <_strtod_l+0x436>
 8009c28:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c30:	ea03 0a0a 	and.w	sl, r3, sl
 8009c34:	e7ae      	b.n	8009b94 <_strtod_l+0x5fc>
 8009c36:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009c38:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009c3a:	2d00      	cmp	r5, #0
 8009c3c:	bfab      	itete	ge
 8009c3e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009c40:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009c42:	18ef      	addge	r7, r5, r3
 8009c44:	1b5e      	sublt	r6, r3, r5
 8009c46:	9b08      	ldr	r3, [sp, #32]
 8009c48:	bfa8      	it	ge
 8009c4a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009c4c:	eba5 0503 	sub.w	r5, r5, r3
 8009c50:	4415      	add	r5, r2
 8009c52:	4b67      	ldr	r3, [pc, #412]	@ (8009df0 <_strtod_l+0x858>)
 8009c54:	f105 35ff 	add.w	r5, r5, #4294967295
 8009c58:	bfb8      	it	lt
 8009c5a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009c5c:	429d      	cmp	r5, r3
 8009c5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c62:	da50      	bge.n	8009d06 <_strtod_l+0x76e>
 8009c64:	1b5b      	subs	r3, r3, r5
 8009c66:	2b1f      	cmp	r3, #31
 8009c68:	f04f 0101 	mov.w	r1, #1
 8009c6c:	eba2 0203 	sub.w	r2, r2, r3
 8009c70:	dc3d      	bgt.n	8009cee <_strtod_l+0x756>
 8009c72:	fa01 f303 	lsl.w	r3, r1, r3
 8009c76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c7c:	18bd      	adds	r5, r7, r2
 8009c7e:	9b08      	ldr	r3, [sp, #32]
 8009c80:	42af      	cmp	r7, r5
 8009c82:	4416      	add	r6, r2
 8009c84:	441e      	add	r6, r3
 8009c86:	463b      	mov	r3, r7
 8009c88:	bfa8      	it	ge
 8009c8a:	462b      	movge	r3, r5
 8009c8c:	42b3      	cmp	r3, r6
 8009c8e:	bfa8      	it	ge
 8009c90:	4633      	movge	r3, r6
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bfc2      	ittt	gt
 8009c96:	1aed      	subgt	r5, r5, r3
 8009c98:	1af6      	subgt	r6, r6, r3
 8009c9a:	1aff      	subgt	r7, r7, r3
 8009c9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	dd16      	ble.n	8009cd0 <_strtod_l+0x738>
 8009ca2:	4641      	mov	r1, r8
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	9805      	ldr	r0, [sp, #20]
 8009ca8:	f7ff f9a8 	bl	8008ffc <__pow5mult>
 8009cac:	4680      	mov	r8, r0
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d0b7      	beq.n	8009c22 <_strtod_l+0x68a>
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009cb6:	9805      	ldr	r0, [sp, #20]
 8009cb8:	f7ff f8f8 	bl	8008eac <__multiply>
 8009cbc:	900e      	str	r0, [sp, #56]	@ 0x38
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f43f ae85 	beq.w	80099ce <_strtod_l+0x436>
 8009cc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cc6:	9805      	ldr	r0, [sp, #20]
 8009cc8:	f7fe ffdc 	bl	8008c84 <_Bfree>
 8009ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cce:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cd0:	2d00      	cmp	r5, #0
 8009cd2:	dc1d      	bgt.n	8009d10 <_strtod_l+0x778>
 8009cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	dd23      	ble.n	8009d22 <_strtod_l+0x78a>
 8009cda:	4649      	mov	r1, r9
 8009cdc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009cde:	9805      	ldr	r0, [sp, #20]
 8009ce0:	f7ff f98c 	bl	8008ffc <__pow5mult>
 8009ce4:	4681      	mov	r9, r0
 8009ce6:	b9e0      	cbnz	r0, 8009d22 <_strtod_l+0x78a>
 8009ce8:	f04f 0900 	mov.w	r9, #0
 8009cec:	e66f      	b.n	80099ce <_strtod_l+0x436>
 8009cee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009cf2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009cf6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009cfa:	35e2      	adds	r5, #226	@ 0xe2
 8009cfc:	fa01 f305 	lsl.w	r3, r1, r5
 8009d00:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d02:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009d04:	e7ba      	b.n	8009c7c <_strtod_l+0x6e4>
 8009d06:	2300      	movs	r3, #0
 8009d08:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d0e:	e7b5      	b.n	8009c7c <_strtod_l+0x6e4>
 8009d10:	462a      	mov	r2, r5
 8009d12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d14:	9805      	ldr	r0, [sp, #20]
 8009d16:	f7ff f9cb 	bl	80090b0 <__lshift>
 8009d1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d1d9      	bne.n	8009cd4 <_strtod_l+0x73c>
 8009d20:	e655      	b.n	80099ce <_strtod_l+0x436>
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	dd07      	ble.n	8009d36 <_strtod_l+0x79e>
 8009d26:	4649      	mov	r1, r9
 8009d28:	4632      	mov	r2, r6
 8009d2a:	9805      	ldr	r0, [sp, #20]
 8009d2c:	f7ff f9c0 	bl	80090b0 <__lshift>
 8009d30:	4681      	mov	r9, r0
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d0d8      	beq.n	8009ce8 <_strtod_l+0x750>
 8009d36:	2f00      	cmp	r7, #0
 8009d38:	dd08      	ble.n	8009d4c <_strtod_l+0x7b4>
 8009d3a:	4641      	mov	r1, r8
 8009d3c:	463a      	mov	r2, r7
 8009d3e:	9805      	ldr	r0, [sp, #20]
 8009d40:	f7ff f9b6 	bl	80090b0 <__lshift>
 8009d44:	4680      	mov	r8, r0
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f43f ae41 	beq.w	80099ce <_strtod_l+0x436>
 8009d4c:	464a      	mov	r2, r9
 8009d4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d50:	9805      	ldr	r0, [sp, #20]
 8009d52:	f7ff fa35 	bl	80091c0 <__mdiff>
 8009d56:	4604      	mov	r4, r0
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	f43f ae38 	beq.w	80099ce <_strtod_l+0x436>
 8009d5e:	68c3      	ldr	r3, [r0, #12]
 8009d60:	4641      	mov	r1, r8
 8009d62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d64:	2300      	movs	r3, #0
 8009d66:	60c3      	str	r3, [r0, #12]
 8009d68:	f7ff fa0e 	bl	8009188 <__mcmp>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	da45      	bge.n	8009dfc <_strtod_l+0x864>
 8009d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d72:	ea53 030a 	orrs.w	r3, r3, sl
 8009d76:	d16b      	bne.n	8009e50 <_strtod_l+0x8b8>
 8009d78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d167      	bne.n	8009e50 <_strtod_l+0x8b8>
 8009d80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d84:	0d1b      	lsrs	r3, r3, #20
 8009d86:	051b      	lsls	r3, r3, #20
 8009d88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d8c:	d960      	bls.n	8009e50 <_strtod_l+0x8b8>
 8009d8e:	6963      	ldr	r3, [r4, #20]
 8009d90:	b913      	cbnz	r3, 8009d98 <_strtod_l+0x800>
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	dd5b      	ble.n	8009e50 <_strtod_l+0x8b8>
 8009d98:	4621      	mov	r1, r4
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	9805      	ldr	r0, [sp, #20]
 8009d9e:	f7ff f987 	bl	80090b0 <__lshift>
 8009da2:	4641      	mov	r1, r8
 8009da4:	4604      	mov	r4, r0
 8009da6:	f7ff f9ef 	bl	8009188 <__mcmp>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	dd50      	ble.n	8009e50 <_strtod_l+0x8b8>
 8009dae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009db2:	9a08      	ldr	r2, [sp, #32]
 8009db4:	0d1b      	lsrs	r3, r3, #20
 8009db6:	051b      	lsls	r3, r3, #20
 8009db8:	2a00      	cmp	r2, #0
 8009dba:	d06a      	beq.n	8009e92 <_strtod_l+0x8fa>
 8009dbc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009dc0:	d867      	bhi.n	8009e92 <_strtod_l+0x8fa>
 8009dc2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009dc6:	f67f ae98 	bls.w	8009afa <_strtod_l+0x562>
 8009dca:	4650      	mov	r0, sl
 8009dcc:	4659      	mov	r1, fp
 8009dce:	4b09      	ldr	r3, [pc, #36]	@ (8009df4 <_strtod_l+0x85c>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f7f6 fb81 	bl	80004d8 <__aeabi_dmul>
 8009dd6:	4b08      	ldr	r3, [pc, #32]	@ (8009df8 <_strtod_l+0x860>)
 8009dd8:	4682      	mov	sl, r0
 8009dda:	400b      	ands	r3, r1
 8009ddc:	468b      	mov	fp, r1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f47f ae00 	bne.w	80099e4 <_strtod_l+0x44c>
 8009de4:	2322      	movs	r3, #34	@ 0x22
 8009de6:	9a05      	ldr	r2, [sp, #20]
 8009de8:	6013      	str	r3, [r2, #0]
 8009dea:	e5fb      	b.n	80099e4 <_strtod_l+0x44c>
 8009dec:	0800bee0 	.word	0x0800bee0
 8009df0:	fffffc02 	.word	0xfffffc02
 8009df4:	39500000 	.word	0x39500000
 8009df8:	7ff00000 	.word	0x7ff00000
 8009dfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e00:	d165      	bne.n	8009ece <_strtod_l+0x936>
 8009e02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e08:	b35a      	cbz	r2, 8009e62 <_strtod_l+0x8ca>
 8009e0a:	4a99      	ldr	r2, [pc, #612]	@ (800a070 <_strtod_l+0xad8>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d12b      	bne.n	8009e68 <_strtod_l+0x8d0>
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	4651      	mov	r1, sl
 8009e14:	b303      	cbz	r3, 8009e58 <_strtod_l+0x8c0>
 8009e16:	465a      	mov	r2, fp
 8009e18:	4b96      	ldr	r3, [pc, #600]	@ (800a074 <_strtod_l+0xadc>)
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	d81b      	bhi.n	8009e5e <_strtod_l+0x8c6>
 8009e26:	0d1b      	lsrs	r3, r3, #20
 8009e28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	4299      	cmp	r1, r3
 8009e32:	d119      	bne.n	8009e68 <_strtod_l+0x8d0>
 8009e34:	4b90      	ldr	r3, [pc, #576]	@ (800a078 <_strtod_l+0xae0>)
 8009e36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d102      	bne.n	8009e42 <_strtod_l+0x8aa>
 8009e3c:	3101      	adds	r1, #1
 8009e3e:	f43f adc6 	beq.w	80099ce <_strtod_l+0x436>
 8009e42:	f04f 0a00 	mov.w	sl, #0
 8009e46:	4b8b      	ldr	r3, [pc, #556]	@ (800a074 <_strtod_l+0xadc>)
 8009e48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e4a:	401a      	ands	r2, r3
 8009e4c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009e50:	9b08      	ldr	r3, [sp, #32]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1b9      	bne.n	8009dca <_strtod_l+0x832>
 8009e56:	e5c5      	b.n	80099e4 <_strtod_l+0x44c>
 8009e58:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5c:	e7e8      	b.n	8009e30 <_strtod_l+0x898>
 8009e5e:	4613      	mov	r3, r2
 8009e60:	e7e6      	b.n	8009e30 <_strtod_l+0x898>
 8009e62:	ea53 030a 	orrs.w	r3, r3, sl
 8009e66:	d0a2      	beq.n	8009dae <_strtod_l+0x816>
 8009e68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e6a:	b1db      	cbz	r3, 8009ea4 <_strtod_l+0x90c>
 8009e6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e6e:	4213      	tst	r3, r2
 8009e70:	d0ee      	beq.n	8009e50 <_strtod_l+0x8b8>
 8009e72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e74:	4650      	mov	r0, sl
 8009e76:	4659      	mov	r1, fp
 8009e78:	9a08      	ldr	r2, [sp, #32]
 8009e7a:	b1bb      	cbz	r3, 8009eac <_strtod_l+0x914>
 8009e7c:	f7ff fb68 	bl	8009550 <sulp>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e88:	f7f6 f970 	bl	800016c <__adddf3>
 8009e8c:	4682      	mov	sl, r0
 8009e8e:	468b      	mov	fp, r1
 8009e90:	e7de      	b.n	8009e50 <_strtod_l+0x8b8>
 8009e92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e9a:	f04f 3aff 	mov.w	sl, #4294967295
 8009e9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ea2:	e7d5      	b.n	8009e50 <_strtod_l+0x8b8>
 8009ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ea6:	ea13 0f0a 	tst.w	r3, sl
 8009eaa:	e7e1      	b.n	8009e70 <_strtod_l+0x8d8>
 8009eac:	f7ff fb50 	bl	8009550 <sulp>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eb8:	f7f6 f956 	bl	8000168 <__aeabi_dsub>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4682      	mov	sl, r0
 8009ec2:	468b      	mov	fp, r1
 8009ec4:	f7f6 fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d0c1      	beq.n	8009e50 <_strtod_l+0x8b8>
 8009ecc:	e615      	b.n	8009afa <_strtod_l+0x562>
 8009ece:	4641      	mov	r1, r8
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f7ff fac9 	bl	8009468 <__ratio>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009edc:	4606      	mov	r6, r0
 8009ede:	460f      	mov	r7, r1
 8009ee0:	f7f6 fd76 	bl	80009d0 <__aeabi_dcmple>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d06d      	beq.n	8009fc4 <_strtod_l+0xa2c>
 8009ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d178      	bne.n	8009fe0 <_strtod_l+0xa48>
 8009eee:	f1ba 0f00 	cmp.w	sl, #0
 8009ef2:	d156      	bne.n	8009fa2 <_strtod_l+0xa0a>
 8009ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ef6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d158      	bne.n	8009fb0 <_strtod_l+0xa18>
 8009efe:	2200      	movs	r2, #0
 8009f00:	4630      	mov	r0, r6
 8009f02:	4639      	mov	r1, r7
 8009f04:	4b5d      	ldr	r3, [pc, #372]	@ (800a07c <_strtod_l+0xae4>)
 8009f06:	f7f6 fd59 	bl	80009bc <__aeabi_dcmplt>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d157      	bne.n	8009fbe <_strtod_l+0xa26>
 8009f0e:	4630      	mov	r0, r6
 8009f10:	4639      	mov	r1, r7
 8009f12:	2200      	movs	r2, #0
 8009f14:	4b5a      	ldr	r3, [pc, #360]	@ (800a080 <_strtod_l+0xae8>)
 8009f16:	f7f6 fadf 	bl	80004d8 <__aeabi_dmul>
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009f22:	9606      	str	r6, [sp, #24]
 8009f24:	9307      	str	r3, [sp, #28]
 8009f26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f2a:	4d52      	ldr	r5, [pc, #328]	@ (800a074 <_strtod_l+0xadc>)
 8009f2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f32:	401d      	ands	r5, r3
 8009f34:	4b53      	ldr	r3, [pc, #332]	@ (800a084 <_strtod_l+0xaec>)
 8009f36:	429d      	cmp	r5, r3
 8009f38:	f040 80aa 	bne.w	800a090 <_strtod_l+0xaf8>
 8009f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f3e:	4650      	mov	r0, sl
 8009f40:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009f44:	4659      	mov	r1, fp
 8009f46:	f7ff f9cf 	bl	80092e8 <__ulp>
 8009f4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f4e:	f7f6 fac3 	bl	80004d8 <__aeabi_dmul>
 8009f52:	4652      	mov	r2, sl
 8009f54:	465b      	mov	r3, fp
 8009f56:	f7f6 f909 	bl	800016c <__adddf3>
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4945      	ldr	r1, [pc, #276]	@ (800a074 <_strtod_l+0xadc>)
 8009f5e:	4a4a      	ldr	r2, [pc, #296]	@ (800a088 <_strtod_l+0xaf0>)
 8009f60:	4019      	ands	r1, r3
 8009f62:	4291      	cmp	r1, r2
 8009f64:	4682      	mov	sl, r0
 8009f66:	d942      	bls.n	8009fee <_strtod_l+0xa56>
 8009f68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f6a:	4b43      	ldr	r3, [pc, #268]	@ (800a078 <_strtod_l+0xae0>)
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d103      	bne.n	8009f78 <_strtod_l+0x9e0>
 8009f70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f72:	3301      	adds	r3, #1
 8009f74:	f43f ad2b 	beq.w	80099ce <_strtod_l+0x436>
 8009f78:	f04f 3aff 	mov.w	sl, #4294967295
 8009f7c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a078 <_strtod_l+0xae0>
 8009f80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f82:	9805      	ldr	r0, [sp, #20]
 8009f84:	f7fe fe7e 	bl	8008c84 <_Bfree>
 8009f88:	4649      	mov	r1, r9
 8009f8a:	9805      	ldr	r0, [sp, #20]
 8009f8c:	f7fe fe7a 	bl	8008c84 <_Bfree>
 8009f90:	4641      	mov	r1, r8
 8009f92:	9805      	ldr	r0, [sp, #20]
 8009f94:	f7fe fe76 	bl	8008c84 <_Bfree>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	9805      	ldr	r0, [sp, #20]
 8009f9c:	f7fe fe72 	bl	8008c84 <_Bfree>
 8009fa0:	e618      	b.n	8009bd4 <_strtod_l+0x63c>
 8009fa2:	f1ba 0f01 	cmp.w	sl, #1
 8009fa6:	d103      	bne.n	8009fb0 <_strtod_l+0xa18>
 8009fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f43f ada5 	beq.w	8009afa <_strtod_l+0x562>
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4b36      	ldr	r3, [pc, #216]	@ (800a08c <_strtod_l+0xaf4>)
 8009fb4:	2600      	movs	r6, #0
 8009fb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009fba:	4f30      	ldr	r7, [pc, #192]	@ (800a07c <_strtod_l+0xae4>)
 8009fbc:	e7b3      	b.n	8009f26 <_strtod_l+0x98e>
 8009fbe:	2600      	movs	r6, #0
 8009fc0:	4f2f      	ldr	r7, [pc, #188]	@ (800a080 <_strtod_l+0xae8>)
 8009fc2:	e7ac      	b.n	8009f1e <_strtod_l+0x986>
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	4b2d      	ldr	r3, [pc, #180]	@ (800a080 <_strtod_l+0xae8>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f7f6 fa84 	bl	80004d8 <__aeabi_dmul>
 8009fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460f      	mov	r7, r1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0a1      	beq.n	8009f1e <_strtod_l+0x986>
 8009fda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009fde:	e7a2      	b.n	8009f26 <_strtod_l+0x98e>
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4b26      	ldr	r3, [pc, #152]	@ (800a07c <_strtod_l+0xae4>)
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	461f      	mov	r7, r3
 8009fe8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009fec:	e79b      	b.n	8009f26 <_strtod_l+0x98e>
 8009fee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1c1      	bne.n	8009f80 <_strtod_l+0x9e8>
 8009ffc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a000:	0d1b      	lsrs	r3, r3, #20
 800a002:	051b      	lsls	r3, r3, #20
 800a004:	429d      	cmp	r5, r3
 800a006:	d1bb      	bne.n	8009f80 <_strtod_l+0x9e8>
 800a008:	4630      	mov	r0, r6
 800a00a:	4639      	mov	r1, r7
 800a00c:	f7f6 ff98 	bl	8000f40 <__aeabi_d2lz>
 800a010:	f7f6 fa34 	bl	800047c <__aeabi_l2d>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4630      	mov	r0, r6
 800a01a:	4639      	mov	r1, r7
 800a01c:	f7f6 f8a4 	bl	8000168 <__aeabi_dsub>
 800a020:	460b      	mov	r3, r1
 800a022:	4602      	mov	r2, r0
 800a024:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a028:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a02e:	ea46 060a 	orr.w	r6, r6, sl
 800a032:	431e      	orrs	r6, r3
 800a034:	d069      	beq.n	800a10a <_strtod_l+0xb72>
 800a036:	a30a      	add	r3, pc, #40	@ (adr r3, 800a060 <_strtod_l+0xac8>)
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	f7f6 fcbe 	bl	80009bc <__aeabi_dcmplt>
 800a040:	2800      	cmp	r0, #0
 800a042:	f47f accf 	bne.w	80099e4 <_strtod_l+0x44c>
 800a046:	a308      	add	r3, pc, #32	@ (adr r3, 800a068 <_strtod_l+0xad0>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a050:	f7f6 fcd2 	bl	80009f8 <__aeabi_dcmpgt>
 800a054:	2800      	cmp	r0, #0
 800a056:	d093      	beq.n	8009f80 <_strtod_l+0x9e8>
 800a058:	e4c4      	b.n	80099e4 <_strtod_l+0x44c>
 800a05a:	bf00      	nop
 800a05c:	f3af 8000 	nop.w
 800a060:	94a03595 	.word	0x94a03595
 800a064:	3fdfffff 	.word	0x3fdfffff
 800a068:	35afe535 	.word	0x35afe535
 800a06c:	3fe00000 	.word	0x3fe00000
 800a070:	000fffff 	.word	0x000fffff
 800a074:	7ff00000 	.word	0x7ff00000
 800a078:	7fefffff 	.word	0x7fefffff
 800a07c:	3ff00000 	.word	0x3ff00000
 800a080:	3fe00000 	.word	0x3fe00000
 800a084:	7fe00000 	.word	0x7fe00000
 800a088:	7c9fffff 	.word	0x7c9fffff
 800a08c:	bff00000 	.word	0xbff00000
 800a090:	9b08      	ldr	r3, [sp, #32]
 800a092:	b323      	cbz	r3, 800a0de <_strtod_l+0xb46>
 800a094:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a098:	d821      	bhi.n	800a0de <_strtod_l+0xb46>
 800a09a:	a327      	add	r3, pc, #156	@ (adr r3, 800a138 <_strtod_l+0xba0>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 fc94 	bl	80009d0 <__aeabi_dcmple>
 800a0a8:	b1a0      	cbz	r0, 800a0d4 <_strtod_l+0xb3c>
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7f6 fceb 	bl	8000a88 <__aeabi_d2uiz>
 800a0b2:	2801      	cmp	r0, #1
 800a0b4:	bf38      	it	cc
 800a0b6:	2001      	movcc	r0, #1
 800a0b8:	f7f6 f994 	bl	80003e4 <__aeabi_ui2d>
 800a0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	b9fb      	cbnz	r3, 800a104 <_strtod_l+0xb6c>
 800a0c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0c8:	9014      	str	r0, [sp, #80]	@ 0x50
 800a0ca:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a0d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0d6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a0da:	1b5b      	subs	r3, r3, r5
 800a0dc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0e2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a0e6:	f7ff f8ff 	bl	80092e8 <__ulp>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	4659      	mov	r1, fp
 800a0f2:	f7f6 f9f1 	bl	80004d8 <__aeabi_dmul>
 800a0f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0fa:	f7f6 f837 	bl	800016c <__adddf3>
 800a0fe:	4682      	mov	sl, r0
 800a100:	468b      	mov	fp, r1
 800a102:	e776      	b.n	8009ff2 <_strtod_l+0xa5a>
 800a104:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a108:	e7e0      	b.n	800a0cc <_strtod_l+0xb34>
 800a10a:	a30d      	add	r3, pc, #52	@ (adr r3, 800a140 <_strtod_l+0xba8>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	f7f6 fc54 	bl	80009bc <__aeabi_dcmplt>
 800a114:	e79e      	b.n	800a054 <_strtod_l+0xabc>
 800a116:	2300      	movs	r3, #0
 800a118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a11a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a11c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	f7ff ba77 	b.w	8009612 <_strtod_l+0x7a>
 800a124:	2a65      	cmp	r2, #101	@ 0x65
 800a126:	f43f ab6e 	beq.w	8009806 <_strtod_l+0x26e>
 800a12a:	2a45      	cmp	r2, #69	@ 0x45
 800a12c:	f43f ab6b 	beq.w	8009806 <_strtod_l+0x26e>
 800a130:	2301      	movs	r3, #1
 800a132:	f7ff bba6 	b.w	8009882 <_strtod_l+0x2ea>
 800a136:	bf00      	nop
 800a138:	ffc00000 	.word	0xffc00000
 800a13c:	41dfffff 	.word	0x41dfffff
 800a140:	94a03595 	.word	0x94a03595
 800a144:	3fcfffff 	.word	0x3fcfffff

0800a148 <_strtod_r>:
 800a148:	4b01      	ldr	r3, [pc, #4]	@ (800a150 <_strtod_r+0x8>)
 800a14a:	f7ff ba25 	b.w	8009598 <_strtod_l>
 800a14e:	bf00      	nop
 800a150:	20000080 	.word	0x20000080

0800a154 <_strtol_l.constprop.0>:
 800a154:	2b24      	cmp	r3, #36	@ 0x24
 800a156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15a:	4686      	mov	lr, r0
 800a15c:	4690      	mov	r8, r2
 800a15e:	d801      	bhi.n	800a164 <_strtol_l.constprop.0+0x10>
 800a160:	2b01      	cmp	r3, #1
 800a162:	d106      	bne.n	800a172 <_strtol_l.constprop.0+0x1e>
 800a164:	f7fd fdb0 	bl	8007cc8 <__errno>
 800a168:	2316      	movs	r3, #22
 800a16a:	6003      	str	r3, [r0, #0]
 800a16c:	2000      	movs	r0, #0
 800a16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a172:	460d      	mov	r5, r1
 800a174:	4833      	ldr	r0, [pc, #204]	@ (800a244 <_strtol_l.constprop.0+0xf0>)
 800a176:	462a      	mov	r2, r5
 800a178:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a17c:	5d06      	ldrb	r6, [r0, r4]
 800a17e:	f016 0608 	ands.w	r6, r6, #8
 800a182:	d1f8      	bne.n	800a176 <_strtol_l.constprop.0+0x22>
 800a184:	2c2d      	cmp	r4, #45	@ 0x2d
 800a186:	d12d      	bne.n	800a1e4 <_strtol_l.constprop.0+0x90>
 800a188:	2601      	movs	r6, #1
 800a18a:	782c      	ldrb	r4, [r5, #0]
 800a18c:	1c95      	adds	r5, r2, #2
 800a18e:	f033 0210 	bics.w	r2, r3, #16
 800a192:	d109      	bne.n	800a1a8 <_strtol_l.constprop.0+0x54>
 800a194:	2c30      	cmp	r4, #48	@ 0x30
 800a196:	d12a      	bne.n	800a1ee <_strtol_l.constprop.0+0x9a>
 800a198:	782a      	ldrb	r2, [r5, #0]
 800a19a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a19e:	2a58      	cmp	r2, #88	@ 0x58
 800a1a0:	d125      	bne.n	800a1ee <_strtol_l.constprop.0+0x9a>
 800a1a2:	2310      	movs	r3, #16
 800a1a4:	786c      	ldrb	r4, [r5, #1]
 800a1a6:	3502      	adds	r5, #2
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a1ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a1b2:	fbbc f9f3 	udiv	r9, ip, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a1bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a1c0:	2f09      	cmp	r7, #9
 800a1c2:	d81b      	bhi.n	800a1fc <_strtol_l.constprop.0+0xa8>
 800a1c4:	463c      	mov	r4, r7
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	dd27      	ble.n	800a21a <_strtol_l.constprop.0+0xc6>
 800a1ca:	1c57      	adds	r7, r2, #1
 800a1cc:	d007      	beq.n	800a1de <_strtol_l.constprop.0+0x8a>
 800a1ce:	4581      	cmp	r9, r0
 800a1d0:	d320      	bcc.n	800a214 <_strtol_l.constprop.0+0xc0>
 800a1d2:	d101      	bne.n	800a1d8 <_strtol_l.constprop.0+0x84>
 800a1d4:	45a2      	cmp	sl, r4
 800a1d6:	db1d      	blt.n	800a214 <_strtol_l.constprop.0+0xc0>
 800a1d8:	2201      	movs	r2, #1
 800a1da:	fb00 4003 	mla	r0, r0, r3, r4
 800a1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1e2:	e7eb      	b.n	800a1bc <_strtol_l.constprop.0+0x68>
 800a1e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a1e6:	bf04      	itt	eq
 800a1e8:	782c      	ldrbeq	r4, [r5, #0]
 800a1ea:	1c95      	addeq	r5, r2, #2
 800a1ec:	e7cf      	b.n	800a18e <_strtol_l.constprop.0+0x3a>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1da      	bne.n	800a1a8 <_strtol_l.constprop.0+0x54>
 800a1f2:	2c30      	cmp	r4, #48	@ 0x30
 800a1f4:	bf0c      	ite	eq
 800a1f6:	2308      	moveq	r3, #8
 800a1f8:	230a      	movne	r3, #10
 800a1fa:	e7d5      	b.n	800a1a8 <_strtol_l.constprop.0+0x54>
 800a1fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a200:	2f19      	cmp	r7, #25
 800a202:	d801      	bhi.n	800a208 <_strtol_l.constprop.0+0xb4>
 800a204:	3c37      	subs	r4, #55	@ 0x37
 800a206:	e7de      	b.n	800a1c6 <_strtol_l.constprop.0+0x72>
 800a208:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a20c:	2f19      	cmp	r7, #25
 800a20e:	d804      	bhi.n	800a21a <_strtol_l.constprop.0+0xc6>
 800a210:	3c57      	subs	r4, #87	@ 0x57
 800a212:	e7d8      	b.n	800a1c6 <_strtol_l.constprop.0+0x72>
 800a214:	f04f 32ff 	mov.w	r2, #4294967295
 800a218:	e7e1      	b.n	800a1de <_strtol_l.constprop.0+0x8a>
 800a21a:	1c53      	adds	r3, r2, #1
 800a21c:	d108      	bne.n	800a230 <_strtol_l.constprop.0+0xdc>
 800a21e:	2322      	movs	r3, #34	@ 0x22
 800a220:	4660      	mov	r0, ip
 800a222:	f8ce 3000 	str.w	r3, [lr]
 800a226:	f1b8 0f00 	cmp.w	r8, #0
 800a22a:	d0a0      	beq.n	800a16e <_strtol_l.constprop.0+0x1a>
 800a22c:	1e69      	subs	r1, r5, #1
 800a22e:	e006      	b.n	800a23e <_strtol_l.constprop.0+0xea>
 800a230:	b106      	cbz	r6, 800a234 <_strtol_l.constprop.0+0xe0>
 800a232:	4240      	negs	r0, r0
 800a234:	f1b8 0f00 	cmp.w	r8, #0
 800a238:	d099      	beq.n	800a16e <_strtol_l.constprop.0+0x1a>
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	d1f6      	bne.n	800a22c <_strtol_l.constprop.0+0xd8>
 800a23e:	f8c8 1000 	str.w	r1, [r8]
 800a242:	e794      	b.n	800a16e <_strtol_l.constprop.0+0x1a>
 800a244:	0800bf09 	.word	0x0800bf09

0800a248 <_strtol_r>:
 800a248:	f7ff bf84 	b.w	800a154 <_strtol_l.constprop.0>

0800a24c <__ssputs_r>:
 800a24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	461f      	mov	r7, r3
 800a252:	688e      	ldr	r6, [r1, #8]
 800a254:	4682      	mov	sl, r0
 800a256:	42be      	cmp	r6, r7
 800a258:	460c      	mov	r4, r1
 800a25a:	4690      	mov	r8, r2
 800a25c:	680b      	ldr	r3, [r1, #0]
 800a25e:	d82d      	bhi.n	800a2bc <__ssputs_r+0x70>
 800a260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a268:	d026      	beq.n	800a2b8 <__ssputs_r+0x6c>
 800a26a:	6965      	ldr	r5, [r4, #20]
 800a26c:	6909      	ldr	r1, [r1, #16]
 800a26e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a272:	eba3 0901 	sub.w	r9, r3, r1
 800a276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a27a:	1c7b      	adds	r3, r7, #1
 800a27c:	444b      	add	r3, r9
 800a27e:	106d      	asrs	r5, r5, #1
 800a280:	429d      	cmp	r5, r3
 800a282:	bf38      	it	cc
 800a284:	461d      	movcc	r5, r3
 800a286:	0553      	lsls	r3, r2, #21
 800a288:	d527      	bpl.n	800a2da <__ssputs_r+0x8e>
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7fe fc2e 	bl	8008aec <_malloc_r>
 800a290:	4606      	mov	r6, r0
 800a292:	b360      	cbz	r0, 800a2ee <__ssputs_r+0xa2>
 800a294:	464a      	mov	r2, r9
 800a296:	6921      	ldr	r1, [r4, #16]
 800a298:	f7fd fd51 	bl	8007d3e <memcpy>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	6126      	str	r6, [r4, #16]
 800a2aa:	444e      	add	r6, r9
 800a2ac:	6026      	str	r6, [r4, #0]
 800a2ae:	463e      	mov	r6, r7
 800a2b0:	6165      	str	r5, [r4, #20]
 800a2b2:	eba5 0509 	sub.w	r5, r5, r9
 800a2b6:	60a5      	str	r5, [r4, #8]
 800a2b8:	42be      	cmp	r6, r7
 800a2ba:	d900      	bls.n	800a2be <__ssputs_r+0x72>
 800a2bc:	463e      	mov	r6, r7
 800a2be:	4632      	mov	r2, r6
 800a2c0:	4641      	mov	r1, r8
 800a2c2:	6820      	ldr	r0, [r4, #0]
 800a2c4:	f7fd fc93 	bl	8007bee <memmove>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	68a3      	ldr	r3, [r4, #8]
 800a2cc:	1b9b      	subs	r3, r3, r6
 800a2ce:	60a3      	str	r3, [r4, #8]
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	4433      	add	r3, r6
 800a2d4:	6023      	str	r3, [r4, #0]
 800a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2da:	462a      	mov	r2, r5
 800a2dc:	f000 ff2f 	bl	800b13e <_realloc_r>
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d1e0      	bne.n	800a2a8 <__ssputs_r+0x5c>
 800a2e6:	4650      	mov	r0, sl
 800a2e8:	6921      	ldr	r1, [r4, #16]
 800a2ea:	f7fe fb8d 	bl	8008a08 <_free_r>
 800a2ee:	230c      	movs	r3, #12
 800a2f0:	f8ca 3000 	str.w	r3, [sl]
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2fe:	81a3      	strh	r3, [r4, #12]
 800a300:	e7e9      	b.n	800a2d6 <__ssputs_r+0x8a>
	...

0800a304 <_svfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	4698      	mov	r8, r3
 800a30a:	898b      	ldrh	r3, [r1, #12]
 800a30c:	4607      	mov	r7, r0
 800a30e:	061b      	lsls	r3, r3, #24
 800a310:	460d      	mov	r5, r1
 800a312:	4614      	mov	r4, r2
 800a314:	b09d      	sub	sp, #116	@ 0x74
 800a316:	d510      	bpl.n	800a33a <_svfiprintf_r+0x36>
 800a318:	690b      	ldr	r3, [r1, #16]
 800a31a:	b973      	cbnz	r3, 800a33a <_svfiprintf_r+0x36>
 800a31c:	2140      	movs	r1, #64	@ 0x40
 800a31e:	f7fe fbe5 	bl	8008aec <_malloc_r>
 800a322:	6028      	str	r0, [r5, #0]
 800a324:	6128      	str	r0, [r5, #16]
 800a326:	b930      	cbnz	r0, 800a336 <_svfiprintf_r+0x32>
 800a328:	230c      	movs	r3, #12
 800a32a:	603b      	str	r3, [r7, #0]
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b01d      	add	sp, #116	@ 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	2340      	movs	r3, #64	@ 0x40
 800a338:	616b      	str	r3, [r5, #20]
 800a33a:	2300      	movs	r3, #0
 800a33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a33e:	2320      	movs	r3, #32
 800a340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a344:	2330      	movs	r3, #48	@ 0x30
 800a346:	f04f 0901 	mov.w	r9, #1
 800a34a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a34e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a4e8 <_svfiprintf_r+0x1e4>
 800a352:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a356:	4623      	mov	r3, r4
 800a358:	469a      	mov	sl, r3
 800a35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a35e:	b10a      	cbz	r2, 800a364 <_svfiprintf_r+0x60>
 800a360:	2a25      	cmp	r2, #37	@ 0x25
 800a362:	d1f9      	bne.n	800a358 <_svfiprintf_r+0x54>
 800a364:	ebba 0b04 	subs.w	fp, sl, r4
 800a368:	d00b      	beq.n	800a382 <_svfiprintf_r+0x7e>
 800a36a:	465b      	mov	r3, fp
 800a36c:	4622      	mov	r2, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff ff6b 	bl	800a24c <__ssputs_r>
 800a376:	3001      	adds	r0, #1
 800a378:	f000 80a7 	beq.w	800a4ca <_svfiprintf_r+0x1c6>
 800a37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a37e:	445a      	add	r2, fp
 800a380:	9209      	str	r2, [sp, #36]	@ 0x24
 800a382:	f89a 3000 	ldrb.w	r3, [sl]
 800a386:	2b00      	cmp	r3, #0
 800a388:	f000 809f 	beq.w	800a4ca <_svfiprintf_r+0x1c6>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295
 800a392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a396:	f10a 0a01 	add.w	sl, sl, #1
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	9307      	str	r3, [sp, #28]
 800a39e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3a4:	4654      	mov	r4, sl
 800a3a6:	2205      	movs	r2, #5
 800a3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ac:	484e      	ldr	r0, [pc, #312]	@ (800a4e8 <_svfiprintf_r+0x1e4>)
 800a3ae:	f7fd fcb8 	bl	8007d22 <memchr>
 800a3b2:	9a04      	ldr	r2, [sp, #16]
 800a3b4:	b9d8      	cbnz	r0, 800a3ee <_svfiprintf_r+0xea>
 800a3b6:	06d0      	lsls	r0, r2, #27
 800a3b8:	bf44      	itt	mi
 800a3ba:	2320      	movmi	r3, #32
 800a3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3c0:	0711      	lsls	r1, r2, #28
 800a3c2:	bf44      	itt	mi
 800a3c4:	232b      	movmi	r3, #43	@ 0x2b
 800a3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3d0:	d015      	beq.n	800a3fe <_svfiprintf_r+0xfa>
 800a3d2:	4654      	mov	r4, sl
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	f04f 0c0a 	mov.w	ip, #10
 800a3da:	9a07      	ldr	r2, [sp, #28]
 800a3dc:	4621      	mov	r1, r4
 800a3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3e2:	3b30      	subs	r3, #48	@ 0x30
 800a3e4:	2b09      	cmp	r3, #9
 800a3e6:	d94b      	bls.n	800a480 <_svfiprintf_r+0x17c>
 800a3e8:	b1b0      	cbz	r0, 800a418 <_svfiprintf_r+0x114>
 800a3ea:	9207      	str	r2, [sp, #28]
 800a3ec:	e014      	b.n	800a418 <_svfiprintf_r+0x114>
 800a3ee:	eba0 0308 	sub.w	r3, r0, r8
 800a3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	46a2      	mov	sl, r4
 800a3fa:	9304      	str	r3, [sp, #16]
 800a3fc:	e7d2      	b.n	800a3a4 <_svfiprintf_r+0xa0>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	1d19      	adds	r1, r3, #4
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	9103      	str	r1, [sp, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfbb      	ittet	lt
 800a40a:	425b      	neglt	r3, r3
 800a40c:	f042 0202 	orrlt.w	r2, r2, #2
 800a410:	9307      	strge	r3, [sp, #28]
 800a412:	9307      	strlt	r3, [sp, #28]
 800a414:	bfb8      	it	lt
 800a416:	9204      	strlt	r2, [sp, #16]
 800a418:	7823      	ldrb	r3, [r4, #0]
 800a41a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a41c:	d10a      	bne.n	800a434 <_svfiprintf_r+0x130>
 800a41e:	7863      	ldrb	r3, [r4, #1]
 800a420:	2b2a      	cmp	r3, #42	@ 0x2a
 800a422:	d132      	bne.n	800a48a <_svfiprintf_r+0x186>
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	3402      	adds	r4, #2
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	9203      	str	r2, [sp, #12]
 800a42e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a432:	9305      	str	r3, [sp, #20]
 800a434:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a4ec <_svfiprintf_r+0x1e8>
 800a438:	2203      	movs	r2, #3
 800a43a:	4650      	mov	r0, sl
 800a43c:	7821      	ldrb	r1, [r4, #0]
 800a43e:	f7fd fc70 	bl	8007d22 <memchr>
 800a442:	b138      	cbz	r0, 800a454 <_svfiprintf_r+0x150>
 800a444:	2240      	movs	r2, #64	@ 0x40
 800a446:	9b04      	ldr	r3, [sp, #16]
 800a448:	eba0 000a 	sub.w	r0, r0, sl
 800a44c:	4082      	lsls	r2, r0
 800a44e:	4313      	orrs	r3, r2
 800a450:	3401      	adds	r4, #1
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a458:	2206      	movs	r2, #6
 800a45a:	4825      	ldr	r0, [pc, #148]	@ (800a4f0 <_svfiprintf_r+0x1ec>)
 800a45c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a460:	f7fd fc5f 	bl	8007d22 <memchr>
 800a464:	2800      	cmp	r0, #0
 800a466:	d036      	beq.n	800a4d6 <_svfiprintf_r+0x1d2>
 800a468:	4b22      	ldr	r3, [pc, #136]	@ (800a4f4 <_svfiprintf_r+0x1f0>)
 800a46a:	bb1b      	cbnz	r3, 800a4b4 <_svfiprintf_r+0x1b0>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	3307      	adds	r3, #7
 800a470:	f023 0307 	bic.w	r3, r3, #7
 800a474:	3308      	adds	r3, #8
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a47a:	4433      	add	r3, r6
 800a47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a47e:	e76a      	b.n	800a356 <_svfiprintf_r+0x52>
 800a480:	460c      	mov	r4, r1
 800a482:	2001      	movs	r0, #1
 800a484:	fb0c 3202 	mla	r2, ip, r2, r3
 800a488:	e7a8      	b.n	800a3dc <_svfiprintf_r+0xd8>
 800a48a:	2300      	movs	r3, #0
 800a48c:	f04f 0c0a 	mov.w	ip, #10
 800a490:	4619      	mov	r1, r3
 800a492:	3401      	adds	r4, #1
 800a494:	9305      	str	r3, [sp, #20]
 800a496:	4620      	mov	r0, r4
 800a498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a49c:	3a30      	subs	r2, #48	@ 0x30
 800a49e:	2a09      	cmp	r2, #9
 800a4a0:	d903      	bls.n	800a4aa <_svfiprintf_r+0x1a6>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0c6      	beq.n	800a434 <_svfiprintf_r+0x130>
 800a4a6:	9105      	str	r1, [sp, #20]
 800a4a8:	e7c4      	b.n	800a434 <_svfiprintf_r+0x130>
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4b2:	e7f0      	b.n	800a496 <_svfiprintf_r+0x192>
 800a4b4:	ab03      	add	r3, sp, #12
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f8 <_svfiprintf_r+0x1f4>)
 800a4be:	a904      	add	r1, sp, #16
 800a4c0:	f7fc fc90 	bl	8006de4 <_printf_float>
 800a4c4:	1c42      	adds	r2, r0, #1
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	d1d6      	bne.n	800a478 <_svfiprintf_r+0x174>
 800a4ca:	89ab      	ldrh	r3, [r5, #12]
 800a4cc:	065b      	lsls	r3, r3, #25
 800a4ce:	f53f af2d 	bmi.w	800a32c <_svfiprintf_r+0x28>
 800a4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d4:	e72c      	b.n	800a330 <_svfiprintf_r+0x2c>
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	462a      	mov	r2, r5
 800a4dc:	4638      	mov	r0, r7
 800a4de:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <_svfiprintf_r+0x1f4>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	f7fc ff1d 	bl	8007320 <_printf_i>
 800a4e6:	e7ed      	b.n	800a4c4 <_svfiprintf_r+0x1c0>
 800a4e8:	0800c009 	.word	0x0800c009
 800a4ec:	0800c00f 	.word	0x0800c00f
 800a4f0:	0800c013 	.word	0x0800c013
 800a4f4:	08006de5 	.word	0x08006de5
 800a4f8:	0800a24d 	.word	0x0800a24d

0800a4fc <__sfputc_r>:
 800a4fc:	6893      	ldr	r3, [r2, #8]
 800a4fe:	b410      	push	{r4}
 800a500:	3b01      	subs	r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	6093      	str	r3, [r2, #8]
 800a506:	da07      	bge.n	800a518 <__sfputc_r+0x1c>
 800a508:	6994      	ldr	r4, [r2, #24]
 800a50a:	42a3      	cmp	r3, r4
 800a50c:	db01      	blt.n	800a512 <__sfputc_r+0x16>
 800a50e:	290a      	cmp	r1, #10
 800a510:	d102      	bne.n	800a518 <__sfputc_r+0x1c>
 800a512:	bc10      	pop	{r4}
 800a514:	f000 b9da 	b.w	800a8cc <__swbuf_r>
 800a518:	6813      	ldr	r3, [r2, #0]
 800a51a:	1c58      	adds	r0, r3, #1
 800a51c:	6010      	str	r0, [r2, #0]
 800a51e:	7019      	strb	r1, [r3, #0]
 800a520:	4608      	mov	r0, r1
 800a522:	bc10      	pop	{r4}
 800a524:	4770      	bx	lr

0800a526 <__sfputs_r>:
 800a526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a528:	4606      	mov	r6, r0
 800a52a:	460f      	mov	r7, r1
 800a52c:	4614      	mov	r4, r2
 800a52e:	18d5      	adds	r5, r2, r3
 800a530:	42ac      	cmp	r4, r5
 800a532:	d101      	bne.n	800a538 <__sfputs_r+0x12>
 800a534:	2000      	movs	r0, #0
 800a536:	e007      	b.n	800a548 <__sfputs_r+0x22>
 800a538:	463a      	mov	r2, r7
 800a53a:	4630      	mov	r0, r6
 800a53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a540:	f7ff ffdc 	bl	800a4fc <__sfputc_r>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d1f3      	bne.n	800a530 <__sfputs_r+0xa>
 800a548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a54c <_vfiprintf_r>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	460d      	mov	r5, r1
 800a552:	4614      	mov	r4, r2
 800a554:	4698      	mov	r8, r3
 800a556:	4606      	mov	r6, r0
 800a558:	b09d      	sub	sp, #116	@ 0x74
 800a55a:	b118      	cbz	r0, 800a564 <_vfiprintf_r+0x18>
 800a55c:	6a03      	ldr	r3, [r0, #32]
 800a55e:	b90b      	cbnz	r3, 800a564 <_vfiprintf_r+0x18>
 800a560:	f7fd fa9a 	bl	8007a98 <__sinit>
 800a564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a566:	07d9      	lsls	r1, r3, #31
 800a568:	d405      	bmi.n	800a576 <_vfiprintf_r+0x2a>
 800a56a:	89ab      	ldrh	r3, [r5, #12]
 800a56c:	059a      	lsls	r2, r3, #22
 800a56e:	d402      	bmi.n	800a576 <_vfiprintf_r+0x2a>
 800a570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a572:	f7fd fbd4 	bl	8007d1e <__retarget_lock_acquire_recursive>
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	071b      	lsls	r3, r3, #28
 800a57a:	d501      	bpl.n	800a580 <_vfiprintf_r+0x34>
 800a57c:	692b      	ldr	r3, [r5, #16]
 800a57e:	b99b      	cbnz	r3, 800a5a8 <_vfiprintf_r+0x5c>
 800a580:	4629      	mov	r1, r5
 800a582:	4630      	mov	r0, r6
 800a584:	f000 f9e0 	bl	800a948 <__swsetup_r>
 800a588:	b170      	cbz	r0, 800a5a8 <_vfiprintf_r+0x5c>
 800a58a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a58c:	07dc      	lsls	r4, r3, #31
 800a58e:	d504      	bpl.n	800a59a <_vfiprintf_r+0x4e>
 800a590:	f04f 30ff 	mov.w	r0, #4294967295
 800a594:	b01d      	add	sp, #116	@ 0x74
 800a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59a:	89ab      	ldrh	r3, [r5, #12]
 800a59c:	0598      	lsls	r0, r3, #22
 800a59e:	d4f7      	bmi.n	800a590 <_vfiprintf_r+0x44>
 800a5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5a2:	f7fd fbbd 	bl	8007d20 <__retarget_lock_release_recursive>
 800a5a6:	e7f3      	b.n	800a590 <_vfiprintf_r+0x44>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ac:	2320      	movs	r3, #32
 800a5ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5b2:	2330      	movs	r3, #48	@ 0x30
 800a5b4:	f04f 0901 	mov.w	r9, #1
 800a5b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a768 <_vfiprintf_r+0x21c>
 800a5c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5c4:	4623      	mov	r3, r4
 800a5c6:	469a      	mov	sl, r3
 800a5c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5cc:	b10a      	cbz	r2, 800a5d2 <_vfiprintf_r+0x86>
 800a5ce:	2a25      	cmp	r2, #37	@ 0x25
 800a5d0:	d1f9      	bne.n	800a5c6 <_vfiprintf_r+0x7a>
 800a5d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a5d6:	d00b      	beq.n	800a5f0 <_vfiprintf_r+0xa4>
 800a5d8:	465b      	mov	r3, fp
 800a5da:	4622      	mov	r2, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7ff ffa1 	bl	800a526 <__sfputs_r>
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	f000 80a7 	beq.w	800a738 <_vfiprintf_r+0x1ec>
 800a5ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ec:	445a      	add	r2, fp
 800a5ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 809f 	beq.w	800a738 <_vfiprintf_r+0x1ec>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a604:	f10a 0a01 	add.w	sl, sl, #1
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	9307      	str	r3, [sp, #28]
 800a60c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a610:	931a      	str	r3, [sp, #104]	@ 0x68
 800a612:	4654      	mov	r4, sl
 800a614:	2205      	movs	r2, #5
 800a616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61a:	4853      	ldr	r0, [pc, #332]	@ (800a768 <_vfiprintf_r+0x21c>)
 800a61c:	f7fd fb81 	bl	8007d22 <memchr>
 800a620:	9a04      	ldr	r2, [sp, #16]
 800a622:	b9d8      	cbnz	r0, 800a65c <_vfiprintf_r+0x110>
 800a624:	06d1      	lsls	r1, r2, #27
 800a626:	bf44      	itt	mi
 800a628:	2320      	movmi	r3, #32
 800a62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a62e:	0713      	lsls	r3, r2, #28
 800a630:	bf44      	itt	mi
 800a632:	232b      	movmi	r3, #43	@ 0x2b
 800a634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a638:	f89a 3000 	ldrb.w	r3, [sl]
 800a63c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a63e:	d015      	beq.n	800a66c <_vfiprintf_r+0x120>
 800a640:	4654      	mov	r4, sl
 800a642:	2000      	movs	r0, #0
 800a644:	f04f 0c0a 	mov.w	ip, #10
 800a648:	9a07      	ldr	r2, [sp, #28]
 800a64a:	4621      	mov	r1, r4
 800a64c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a650:	3b30      	subs	r3, #48	@ 0x30
 800a652:	2b09      	cmp	r3, #9
 800a654:	d94b      	bls.n	800a6ee <_vfiprintf_r+0x1a2>
 800a656:	b1b0      	cbz	r0, 800a686 <_vfiprintf_r+0x13a>
 800a658:	9207      	str	r2, [sp, #28]
 800a65a:	e014      	b.n	800a686 <_vfiprintf_r+0x13a>
 800a65c:	eba0 0308 	sub.w	r3, r0, r8
 800a660:	fa09 f303 	lsl.w	r3, r9, r3
 800a664:	4313      	orrs	r3, r2
 800a666:	46a2      	mov	sl, r4
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	e7d2      	b.n	800a612 <_vfiprintf_r+0xc6>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	1d19      	adds	r1, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	9103      	str	r1, [sp, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	bfbb      	ittet	lt
 800a678:	425b      	neglt	r3, r3
 800a67a:	f042 0202 	orrlt.w	r2, r2, #2
 800a67e:	9307      	strge	r3, [sp, #28]
 800a680:	9307      	strlt	r3, [sp, #28]
 800a682:	bfb8      	it	lt
 800a684:	9204      	strlt	r2, [sp, #16]
 800a686:	7823      	ldrb	r3, [r4, #0]
 800a688:	2b2e      	cmp	r3, #46	@ 0x2e
 800a68a:	d10a      	bne.n	800a6a2 <_vfiprintf_r+0x156>
 800a68c:	7863      	ldrb	r3, [r4, #1]
 800a68e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a690:	d132      	bne.n	800a6f8 <_vfiprintf_r+0x1ac>
 800a692:	9b03      	ldr	r3, [sp, #12]
 800a694:	3402      	adds	r4, #2
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	9203      	str	r2, [sp, #12]
 800a69c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6a0:	9305      	str	r3, [sp, #20]
 800a6a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a76c <_vfiprintf_r+0x220>
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	4650      	mov	r0, sl
 800a6aa:	7821      	ldrb	r1, [r4, #0]
 800a6ac:	f7fd fb39 	bl	8007d22 <memchr>
 800a6b0:	b138      	cbz	r0, 800a6c2 <_vfiprintf_r+0x176>
 800a6b2:	2240      	movs	r2, #64	@ 0x40
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	eba0 000a 	sub.w	r0, r0, sl
 800a6ba:	4082      	lsls	r2, r0
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	3401      	adds	r4, #1
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c6:	2206      	movs	r2, #6
 800a6c8:	4829      	ldr	r0, [pc, #164]	@ (800a770 <_vfiprintf_r+0x224>)
 800a6ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6ce:	f7fd fb28 	bl	8007d22 <memchr>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d03f      	beq.n	800a756 <_vfiprintf_r+0x20a>
 800a6d6:	4b27      	ldr	r3, [pc, #156]	@ (800a774 <_vfiprintf_r+0x228>)
 800a6d8:	bb1b      	cbnz	r3, 800a722 <_vfiprintf_r+0x1d6>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	3307      	adds	r3, #7
 800a6de:	f023 0307 	bic.w	r3, r3, #7
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	9303      	str	r3, [sp, #12]
 800a6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6e8:	443b      	add	r3, r7
 800a6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ec:	e76a      	b.n	800a5c4 <_vfiprintf_r+0x78>
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6f6:	e7a8      	b.n	800a64a <_vfiprintf_r+0xfe>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f04f 0c0a 	mov.w	ip, #10
 800a6fe:	4619      	mov	r1, r3
 800a700:	3401      	adds	r4, #1
 800a702:	9305      	str	r3, [sp, #20]
 800a704:	4620      	mov	r0, r4
 800a706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a70a:	3a30      	subs	r2, #48	@ 0x30
 800a70c:	2a09      	cmp	r2, #9
 800a70e:	d903      	bls.n	800a718 <_vfiprintf_r+0x1cc>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0c6      	beq.n	800a6a2 <_vfiprintf_r+0x156>
 800a714:	9105      	str	r1, [sp, #20]
 800a716:	e7c4      	b.n	800a6a2 <_vfiprintf_r+0x156>
 800a718:	4604      	mov	r4, r0
 800a71a:	2301      	movs	r3, #1
 800a71c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a720:	e7f0      	b.n	800a704 <_vfiprintf_r+0x1b8>
 800a722:	ab03      	add	r3, sp, #12
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	462a      	mov	r2, r5
 800a728:	4630      	mov	r0, r6
 800a72a:	4b13      	ldr	r3, [pc, #76]	@ (800a778 <_vfiprintf_r+0x22c>)
 800a72c:	a904      	add	r1, sp, #16
 800a72e:	f7fc fb59 	bl	8006de4 <_printf_float>
 800a732:	4607      	mov	r7, r0
 800a734:	1c78      	adds	r0, r7, #1
 800a736:	d1d6      	bne.n	800a6e6 <_vfiprintf_r+0x19a>
 800a738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a73a:	07d9      	lsls	r1, r3, #31
 800a73c:	d405      	bmi.n	800a74a <_vfiprintf_r+0x1fe>
 800a73e:	89ab      	ldrh	r3, [r5, #12]
 800a740:	059a      	lsls	r2, r3, #22
 800a742:	d402      	bmi.n	800a74a <_vfiprintf_r+0x1fe>
 800a744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a746:	f7fd faeb 	bl	8007d20 <__retarget_lock_release_recursive>
 800a74a:	89ab      	ldrh	r3, [r5, #12]
 800a74c:	065b      	lsls	r3, r3, #25
 800a74e:	f53f af1f 	bmi.w	800a590 <_vfiprintf_r+0x44>
 800a752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a754:	e71e      	b.n	800a594 <_vfiprintf_r+0x48>
 800a756:	ab03      	add	r3, sp, #12
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	462a      	mov	r2, r5
 800a75c:	4630      	mov	r0, r6
 800a75e:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <_vfiprintf_r+0x22c>)
 800a760:	a904      	add	r1, sp, #16
 800a762:	f7fc fddd 	bl	8007320 <_printf_i>
 800a766:	e7e4      	b.n	800a732 <_vfiprintf_r+0x1e6>
 800a768:	0800c009 	.word	0x0800c009
 800a76c:	0800c00f 	.word	0x0800c00f
 800a770:	0800c013 	.word	0x0800c013
 800a774:	08006de5 	.word	0x08006de5
 800a778:	0800a527 	.word	0x0800a527

0800a77c <__sflush_r>:
 800a77c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	0716      	lsls	r6, r2, #28
 800a784:	4605      	mov	r5, r0
 800a786:	460c      	mov	r4, r1
 800a788:	d454      	bmi.n	800a834 <__sflush_r+0xb8>
 800a78a:	684b      	ldr	r3, [r1, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dc02      	bgt.n	800a796 <__sflush_r+0x1a>
 800a790:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	dd48      	ble.n	800a828 <__sflush_r+0xac>
 800a796:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a798:	2e00      	cmp	r6, #0
 800a79a:	d045      	beq.n	800a828 <__sflush_r+0xac>
 800a79c:	2300      	movs	r3, #0
 800a79e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7a2:	682f      	ldr	r7, [r5, #0]
 800a7a4:	6a21      	ldr	r1, [r4, #32]
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	d030      	beq.n	800a80c <__sflush_r+0x90>
 800a7aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	0759      	lsls	r1, r3, #29
 800a7b0:	d505      	bpl.n	800a7be <__sflush_r+0x42>
 800a7b2:	6863      	ldr	r3, [r4, #4]
 800a7b4:	1ad2      	subs	r2, r2, r3
 800a7b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7b8:	b10b      	cbz	r3, 800a7be <__sflush_r+0x42>
 800a7ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7bc:	1ad2      	subs	r2, r2, r3
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7c4:	6a21      	ldr	r1, [r4, #32]
 800a7c6:	47b0      	blx	r6
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	d106      	bne.n	800a7dc <__sflush_r+0x60>
 800a7ce:	6829      	ldr	r1, [r5, #0]
 800a7d0:	291d      	cmp	r1, #29
 800a7d2:	d82b      	bhi.n	800a82c <__sflush_r+0xb0>
 800a7d4:	4a28      	ldr	r2, [pc, #160]	@ (800a878 <__sflush_r+0xfc>)
 800a7d6:	410a      	asrs	r2, r1
 800a7d8:	07d6      	lsls	r6, r2, #31
 800a7da:	d427      	bmi.n	800a82c <__sflush_r+0xb0>
 800a7dc:	2200      	movs	r2, #0
 800a7de:	6062      	str	r2, [r4, #4]
 800a7e0:	6922      	ldr	r2, [r4, #16]
 800a7e2:	04d9      	lsls	r1, r3, #19
 800a7e4:	6022      	str	r2, [r4, #0]
 800a7e6:	d504      	bpl.n	800a7f2 <__sflush_r+0x76>
 800a7e8:	1c42      	adds	r2, r0, #1
 800a7ea:	d101      	bne.n	800a7f0 <__sflush_r+0x74>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b903      	cbnz	r3, 800a7f2 <__sflush_r+0x76>
 800a7f0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7f4:	602f      	str	r7, [r5, #0]
 800a7f6:	b1b9      	cbz	r1, 800a828 <__sflush_r+0xac>
 800a7f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7fc:	4299      	cmp	r1, r3
 800a7fe:	d002      	beq.n	800a806 <__sflush_r+0x8a>
 800a800:	4628      	mov	r0, r5
 800a802:	f7fe f901 	bl	8008a08 <_free_r>
 800a806:	2300      	movs	r3, #0
 800a808:	6363      	str	r3, [r4, #52]	@ 0x34
 800a80a:	e00d      	b.n	800a828 <__sflush_r+0xac>
 800a80c:	2301      	movs	r3, #1
 800a80e:	4628      	mov	r0, r5
 800a810:	47b0      	blx	r6
 800a812:	4602      	mov	r2, r0
 800a814:	1c50      	adds	r0, r2, #1
 800a816:	d1c9      	bne.n	800a7ac <__sflush_r+0x30>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0c6      	beq.n	800a7ac <__sflush_r+0x30>
 800a81e:	2b1d      	cmp	r3, #29
 800a820:	d001      	beq.n	800a826 <__sflush_r+0xaa>
 800a822:	2b16      	cmp	r3, #22
 800a824:	d11d      	bne.n	800a862 <__sflush_r+0xe6>
 800a826:	602f      	str	r7, [r5, #0]
 800a828:	2000      	movs	r0, #0
 800a82a:	e021      	b.n	800a870 <__sflush_r+0xf4>
 800a82c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a830:	b21b      	sxth	r3, r3
 800a832:	e01a      	b.n	800a86a <__sflush_r+0xee>
 800a834:	690f      	ldr	r7, [r1, #16]
 800a836:	2f00      	cmp	r7, #0
 800a838:	d0f6      	beq.n	800a828 <__sflush_r+0xac>
 800a83a:	0793      	lsls	r3, r2, #30
 800a83c:	bf18      	it	ne
 800a83e:	2300      	movne	r3, #0
 800a840:	680e      	ldr	r6, [r1, #0]
 800a842:	bf08      	it	eq
 800a844:	694b      	ldreq	r3, [r1, #20]
 800a846:	1bf6      	subs	r6, r6, r7
 800a848:	600f      	str	r7, [r1, #0]
 800a84a:	608b      	str	r3, [r1, #8]
 800a84c:	2e00      	cmp	r6, #0
 800a84e:	ddeb      	ble.n	800a828 <__sflush_r+0xac>
 800a850:	4633      	mov	r3, r6
 800a852:	463a      	mov	r2, r7
 800a854:	4628      	mov	r0, r5
 800a856:	6a21      	ldr	r1, [r4, #32]
 800a858:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a85c:	47e0      	blx	ip
 800a85e:	2800      	cmp	r0, #0
 800a860:	dc07      	bgt.n	800a872 <__sflush_r+0xf6>
 800a862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a86a:	f04f 30ff 	mov.w	r0, #4294967295
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a872:	4407      	add	r7, r0
 800a874:	1a36      	subs	r6, r6, r0
 800a876:	e7e9      	b.n	800a84c <__sflush_r+0xd0>
 800a878:	dfbffffe 	.word	0xdfbffffe

0800a87c <_fflush_r>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	690b      	ldr	r3, [r1, #16]
 800a880:	4605      	mov	r5, r0
 800a882:	460c      	mov	r4, r1
 800a884:	b913      	cbnz	r3, 800a88c <_fflush_r+0x10>
 800a886:	2500      	movs	r5, #0
 800a888:	4628      	mov	r0, r5
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	b118      	cbz	r0, 800a896 <_fflush_r+0x1a>
 800a88e:	6a03      	ldr	r3, [r0, #32]
 800a890:	b90b      	cbnz	r3, 800a896 <_fflush_r+0x1a>
 800a892:	f7fd f901 	bl	8007a98 <__sinit>
 800a896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d0f3      	beq.n	800a886 <_fflush_r+0xa>
 800a89e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8a0:	07d0      	lsls	r0, r2, #31
 800a8a2:	d404      	bmi.n	800a8ae <_fflush_r+0x32>
 800a8a4:	0599      	lsls	r1, r3, #22
 800a8a6:	d402      	bmi.n	800a8ae <_fflush_r+0x32>
 800a8a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8aa:	f7fd fa38 	bl	8007d1e <__retarget_lock_acquire_recursive>
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	f7ff ff63 	bl	800a77c <__sflush_r>
 800a8b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	07da      	lsls	r2, r3, #31
 800a8bc:	d4e4      	bmi.n	800a888 <_fflush_r+0xc>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	059b      	lsls	r3, r3, #22
 800a8c2:	d4e1      	bmi.n	800a888 <_fflush_r+0xc>
 800a8c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8c6:	f7fd fa2b 	bl	8007d20 <__retarget_lock_release_recursive>
 800a8ca:	e7dd      	b.n	800a888 <_fflush_r+0xc>

0800a8cc <__swbuf_r>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	460e      	mov	r6, r1
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	b118      	cbz	r0, 800a8de <__swbuf_r+0x12>
 800a8d6:	6a03      	ldr	r3, [r0, #32]
 800a8d8:	b90b      	cbnz	r3, 800a8de <__swbuf_r+0x12>
 800a8da:	f7fd f8dd 	bl	8007a98 <__sinit>
 800a8de:	69a3      	ldr	r3, [r4, #24]
 800a8e0:	60a3      	str	r3, [r4, #8]
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	071a      	lsls	r2, r3, #28
 800a8e6:	d501      	bpl.n	800a8ec <__swbuf_r+0x20>
 800a8e8:	6923      	ldr	r3, [r4, #16]
 800a8ea:	b943      	cbnz	r3, 800a8fe <__swbuf_r+0x32>
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f000 f82a 	bl	800a948 <__swsetup_r>
 800a8f4:	b118      	cbz	r0, 800a8fe <__swbuf_r+0x32>
 800a8f6:	f04f 37ff 	mov.w	r7, #4294967295
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	6922      	ldr	r2, [r4, #16]
 800a902:	b2f6      	uxtb	r6, r6
 800a904:	1a98      	subs	r0, r3, r2
 800a906:	6963      	ldr	r3, [r4, #20]
 800a908:	4637      	mov	r7, r6
 800a90a:	4283      	cmp	r3, r0
 800a90c:	dc05      	bgt.n	800a91a <__swbuf_r+0x4e>
 800a90e:	4621      	mov	r1, r4
 800a910:	4628      	mov	r0, r5
 800a912:	f7ff ffb3 	bl	800a87c <_fflush_r>
 800a916:	2800      	cmp	r0, #0
 800a918:	d1ed      	bne.n	800a8f6 <__swbuf_r+0x2a>
 800a91a:	68a3      	ldr	r3, [r4, #8]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	60a3      	str	r3, [r4, #8]
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	1c5a      	adds	r2, r3, #1
 800a924:	6022      	str	r2, [r4, #0]
 800a926:	701e      	strb	r6, [r3, #0]
 800a928:	6962      	ldr	r2, [r4, #20]
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d004      	beq.n	800a93a <__swbuf_r+0x6e>
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	07db      	lsls	r3, r3, #31
 800a934:	d5e1      	bpl.n	800a8fa <__swbuf_r+0x2e>
 800a936:	2e0a      	cmp	r6, #10
 800a938:	d1df      	bne.n	800a8fa <__swbuf_r+0x2e>
 800a93a:	4621      	mov	r1, r4
 800a93c:	4628      	mov	r0, r5
 800a93e:	f7ff ff9d 	bl	800a87c <_fflush_r>
 800a942:	2800      	cmp	r0, #0
 800a944:	d0d9      	beq.n	800a8fa <__swbuf_r+0x2e>
 800a946:	e7d6      	b.n	800a8f6 <__swbuf_r+0x2a>

0800a948 <__swsetup_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4b29      	ldr	r3, [pc, #164]	@ (800a9f0 <__swsetup_r+0xa8>)
 800a94c:	4605      	mov	r5, r0
 800a94e:	6818      	ldr	r0, [r3, #0]
 800a950:	460c      	mov	r4, r1
 800a952:	b118      	cbz	r0, 800a95c <__swsetup_r+0x14>
 800a954:	6a03      	ldr	r3, [r0, #32]
 800a956:	b90b      	cbnz	r3, 800a95c <__swsetup_r+0x14>
 800a958:	f7fd f89e 	bl	8007a98 <__sinit>
 800a95c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a960:	0719      	lsls	r1, r3, #28
 800a962:	d422      	bmi.n	800a9aa <__swsetup_r+0x62>
 800a964:	06da      	lsls	r2, r3, #27
 800a966:	d407      	bmi.n	800a978 <__swsetup_r+0x30>
 800a968:	2209      	movs	r2, #9
 800a96a:	602a      	str	r2, [r5, #0]
 800a96c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a970:	f04f 30ff 	mov.w	r0, #4294967295
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	e033      	b.n	800a9e0 <__swsetup_r+0x98>
 800a978:	0758      	lsls	r0, r3, #29
 800a97a:	d512      	bpl.n	800a9a2 <__swsetup_r+0x5a>
 800a97c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a97e:	b141      	cbz	r1, 800a992 <__swsetup_r+0x4a>
 800a980:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a984:	4299      	cmp	r1, r3
 800a986:	d002      	beq.n	800a98e <__swsetup_r+0x46>
 800a988:	4628      	mov	r0, r5
 800a98a:	f7fe f83d 	bl	8008a08 <_free_r>
 800a98e:	2300      	movs	r3, #0
 800a990:	6363      	str	r3, [r4, #52]	@ 0x34
 800a992:	89a3      	ldrh	r3, [r4, #12]
 800a994:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	2300      	movs	r3, #0
 800a99c:	6063      	str	r3, [r4, #4]
 800a99e:	6923      	ldr	r3, [r4, #16]
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	f043 0308 	orr.w	r3, r3, #8
 800a9a8:	81a3      	strh	r3, [r4, #12]
 800a9aa:	6923      	ldr	r3, [r4, #16]
 800a9ac:	b94b      	cbnz	r3, 800a9c2 <__swsetup_r+0x7a>
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9b8:	d003      	beq.n	800a9c2 <__swsetup_r+0x7a>
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4628      	mov	r0, r5
 800a9be:	f000 fc30 	bl	800b222 <__smakebuf_r>
 800a9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c6:	f013 0201 	ands.w	r2, r3, #1
 800a9ca:	d00a      	beq.n	800a9e2 <__swsetup_r+0x9a>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	60a2      	str	r2, [r4, #8]
 800a9d0:	6962      	ldr	r2, [r4, #20]
 800a9d2:	4252      	negs	r2, r2
 800a9d4:	61a2      	str	r2, [r4, #24]
 800a9d6:	6922      	ldr	r2, [r4, #16]
 800a9d8:	b942      	cbnz	r2, 800a9ec <__swsetup_r+0xa4>
 800a9da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9de:	d1c5      	bne.n	800a96c <__swsetup_r+0x24>
 800a9e0:	bd38      	pop	{r3, r4, r5, pc}
 800a9e2:	0799      	lsls	r1, r3, #30
 800a9e4:	bf58      	it	pl
 800a9e6:	6962      	ldrpl	r2, [r4, #20]
 800a9e8:	60a2      	str	r2, [r4, #8]
 800a9ea:	e7f4      	b.n	800a9d6 <__swsetup_r+0x8e>
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	e7f7      	b.n	800a9e0 <__swsetup_r+0x98>
 800a9f0:	20000030 	.word	0x20000030

0800a9f4 <strncmp>:
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	b16a      	cbz	r2, 800aa14 <strncmp+0x20>
 800a9f8:	3901      	subs	r1, #1
 800a9fa:	1884      	adds	r4, r0, r2
 800a9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d103      	bne.n	800aa10 <strncmp+0x1c>
 800aa08:	42a0      	cmp	r0, r4
 800aa0a:	d001      	beq.n	800aa10 <strncmp+0x1c>
 800aa0c:	2a00      	cmp	r2, #0
 800aa0e:	d1f5      	bne.n	800a9fc <strncmp+0x8>
 800aa10:	1ad0      	subs	r0, r2, r3
 800aa12:	bd10      	pop	{r4, pc}
 800aa14:	4610      	mov	r0, r2
 800aa16:	e7fc      	b.n	800aa12 <strncmp+0x1e>

0800aa18 <_sbrk_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4d05      	ldr	r5, [pc, #20]	@ (800aa34 <_sbrk_r+0x1c>)
 800aa1e:	4604      	mov	r4, r0
 800aa20:	4608      	mov	r0, r1
 800aa22:	602b      	str	r3, [r5, #0]
 800aa24:	f7f7 ff0c 	bl	8002840 <_sbrk>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_sbrk_r+0x1a>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_sbrk_r+0x1a>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	200008c8 	.word	0x200008c8

0800aa38 <nan>:
 800aa38:	2000      	movs	r0, #0
 800aa3a:	4901      	ldr	r1, [pc, #4]	@ (800aa40 <nan+0x8>)
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	7ff80000 	.word	0x7ff80000

0800aa44 <__assert_func>:
 800aa44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa46:	4614      	mov	r4, r2
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b09      	ldr	r3, [pc, #36]	@ (800aa70 <__assert_func+0x2c>)
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68d8      	ldr	r0, [r3, #12]
 800aa52:	b954      	cbnz	r4, 800aa6a <__assert_func+0x26>
 800aa54:	4b07      	ldr	r3, [pc, #28]	@ (800aa74 <__assert_func+0x30>)
 800aa56:	461c      	mov	r4, r3
 800aa58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa5c:	9100      	str	r1, [sp, #0]
 800aa5e:	462b      	mov	r3, r5
 800aa60:	4905      	ldr	r1, [pc, #20]	@ (800aa78 <__assert_func+0x34>)
 800aa62:	f000 fba7 	bl	800b1b4 <fiprintf>
 800aa66:	f000 fc3b 	bl	800b2e0 <abort>
 800aa6a:	4b04      	ldr	r3, [pc, #16]	@ (800aa7c <__assert_func+0x38>)
 800aa6c:	e7f4      	b.n	800aa58 <__assert_func+0x14>
 800aa6e:	bf00      	nop
 800aa70:	20000030 	.word	0x20000030
 800aa74:	0800c05d 	.word	0x0800c05d
 800aa78:	0800c02f 	.word	0x0800c02f
 800aa7c:	0800c022 	.word	0x0800c022

0800aa80 <_calloc_r>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	fba1 5402 	umull	r5, r4, r1, r2
 800aa86:	b93c      	cbnz	r4, 800aa98 <_calloc_r+0x18>
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7fe f82f 	bl	8008aec <_malloc_r>
 800aa8e:	4606      	mov	r6, r0
 800aa90:	b928      	cbnz	r0, 800aa9e <_calloc_r+0x1e>
 800aa92:	2600      	movs	r6, #0
 800aa94:	4630      	mov	r0, r6
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	220c      	movs	r2, #12
 800aa9a:	6002      	str	r2, [r0, #0]
 800aa9c:	e7f9      	b.n	800aa92 <_calloc_r+0x12>
 800aa9e:	462a      	mov	r2, r5
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	f7fd f8be 	bl	8007c22 <memset>
 800aaa6:	e7f5      	b.n	800aa94 <_calloc_r+0x14>

0800aaa8 <rshift>:
 800aaa8:	6903      	ldr	r3, [r0, #16]
 800aaaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aab2:	f100 0414 	add.w	r4, r0, #20
 800aab6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaba:	dd46      	ble.n	800ab4a <rshift+0xa2>
 800aabc:	f011 011f 	ands.w	r1, r1, #31
 800aac0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aac4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aac8:	d10c      	bne.n	800aae4 <rshift+0x3c>
 800aaca:	4629      	mov	r1, r5
 800aacc:	f100 0710 	add.w	r7, r0, #16
 800aad0:	42b1      	cmp	r1, r6
 800aad2:	d335      	bcc.n	800ab40 <rshift+0x98>
 800aad4:	1a9b      	subs	r3, r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	1eea      	subs	r2, r5, #3
 800aada:	4296      	cmp	r6, r2
 800aadc:	bf38      	it	cc
 800aade:	2300      	movcc	r3, #0
 800aae0:	4423      	add	r3, r4
 800aae2:	e015      	b.n	800ab10 <rshift+0x68>
 800aae4:	46a1      	mov	r9, r4
 800aae6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aaea:	f1c1 0820 	rsb	r8, r1, #32
 800aaee:	40cf      	lsrs	r7, r1
 800aaf0:	f105 0e04 	add.w	lr, r5, #4
 800aaf4:	4576      	cmp	r6, lr
 800aaf6:	46f4      	mov	ip, lr
 800aaf8:	d816      	bhi.n	800ab28 <rshift+0x80>
 800aafa:	1a9a      	subs	r2, r3, r2
 800aafc:	0092      	lsls	r2, r2, #2
 800aafe:	3a04      	subs	r2, #4
 800ab00:	3501      	adds	r5, #1
 800ab02:	42ae      	cmp	r6, r5
 800ab04:	bf38      	it	cc
 800ab06:	2200      	movcc	r2, #0
 800ab08:	18a3      	adds	r3, r4, r2
 800ab0a:	50a7      	str	r7, [r4, r2]
 800ab0c:	b107      	cbz	r7, 800ab10 <rshift+0x68>
 800ab0e:	3304      	adds	r3, #4
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	eba3 0204 	sub.w	r2, r3, r4
 800ab16:	bf08      	it	eq
 800ab18:	2300      	moveq	r3, #0
 800ab1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab1e:	6102      	str	r2, [r0, #16]
 800ab20:	bf08      	it	eq
 800ab22:	6143      	streq	r3, [r0, #20]
 800ab24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab28:	f8dc c000 	ldr.w	ip, [ip]
 800ab2c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab30:	ea4c 0707 	orr.w	r7, ip, r7
 800ab34:	f849 7b04 	str.w	r7, [r9], #4
 800ab38:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab3c:	40cf      	lsrs	r7, r1
 800ab3e:	e7d9      	b.n	800aaf4 <rshift+0x4c>
 800ab40:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab44:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab48:	e7c2      	b.n	800aad0 <rshift+0x28>
 800ab4a:	4623      	mov	r3, r4
 800ab4c:	e7e0      	b.n	800ab10 <rshift+0x68>

0800ab4e <__hexdig_fun>:
 800ab4e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ab52:	2b09      	cmp	r3, #9
 800ab54:	d802      	bhi.n	800ab5c <__hexdig_fun+0xe>
 800ab56:	3820      	subs	r0, #32
 800ab58:	b2c0      	uxtb	r0, r0
 800ab5a:	4770      	bx	lr
 800ab5c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ab60:	2b05      	cmp	r3, #5
 800ab62:	d801      	bhi.n	800ab68 <__hexdig_fun+0x1a>
 800ab64:	3847      	subs	r0, #71	@ 0x47
 800ab66:	e7f7      	b.n	800ab58 <__hexdig_fun+0xa>
 800ab68:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ab6c:	2b05      	cmp	r3, #5
 800ab6e:	d801      	bhi.n	800ab74 <__hexdig_fun+0x26>
 800ab70:	3827      	subs	r0, #39	@ 0x27
 800ab72:	e7f1      	b.n	800ab58 <__hexdig_fun+0xa>
 800ab74:	2000      	movs	r0, #0
 800ab76:	4770      	bx	lr

0800ab78 <__gethex>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	468a      	mov	sl, r1
 800ab7e:	4690      	mov	r8, r2
 800ab80:	b085      	sub	sp, #20
 800ab82:	9302      	str	r3, [sp, #8]
 800ab84:	680b      	ldr	r3, [r1, #0]
 800ab86:	9001      	str	r0, [sp, #4]
 800ab88:	1c9c      	adds	r4, r3, #2
 800ab8a:	46a1      	mov	r9, r4
 800ab8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ab90:	2830      	cmp	r0, #48	@ 0x30
 800ab92:	d0fa      	beq.n	800ab8a <__gethex+0x12>
 800ab94:	eba9 0303 	sub.w	r3, r9, r3
 800ab98:	f1a3 0b02 	sub.w	fp, r3, #2
 800ab9c:	f7ff ffd7 	bl	800ab4e <__hexdig_fun>
 800aba0:	4605      	mov	r5, r0
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d168      	bne.n	800ac78 <__gethex+0x100>
 800aba6:	2201      	movs	r2, #1
 800aba8:	4648      	mov	r0, r9
 800abaa:	499f      	ldr	r1, [pc, #636]	@ (800ae28 <__gethex+0x2b0>)
 800abac:	f7ff ff22 	bl	800a9f4 <strncmp>
 800abb0:	4607      	mov	r7, r0
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d167      	bne.n	800ac86 <__gethex+0x10e>
 800abb6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800abba:	4626      	mov	r6, r4
 800abbc:	f7ff ffc7 	bl	800ab4e <__hexdig_fun>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d062      	beq.n	800ac8a <__gethex+0x112>
 800abc4:	4623      	mov	r3, r4
 800abc6:	7818      	ldrb	r0, [r3, #0]
 800abc8:	4699      	mov	r9, r3
 800abca:	2830      	cmp	r0, #48	@ 0x30
 800abcc:	f103 0301 	add.w	r3, r3, #1
 800abd0:	d0f9      	beq.n	800abc6 <__gethex+0x4e>
 800abd2:	f7ff ffbc 	bl	800ab4e <__hexdig_fun>
 800abd6:	fab0 f580 	clz	r5, r0
 800abda:	f04f 0b01 	mov.w	fp, #1
 800abde:	096d      	lsrs	r5, r5, #5
 800abe0:	464a      	mov	r2, r9
 800abe2:	4616      	mov	r6, r2
 800abe4:	7830      	ldrb	r0, [r6, #0]
 800abe6:	3201      	adds	r2, #1
 800abe8:	f7ff ffb1 	bl	800ab4e <__hexdig_fun>
 800abec:	2800      	cmp	r0, #0
 800abee:	d1f8      	bne.n	800abe2 <__gethex+0x6a>
 800abf0:	2201      	movs	r2, #1
 800abf2:	4630      	mov	r0, r6
 800abf4:	498c      	ldr	r1, [pc, #560]	@ (800ae28 <__gethex+0x2b0>)
 800abf6:	f7ff fefd 	bl	800a9f4 <strncmp>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d13f      	bne.n	800ac7e <__gethex+0x106>
 800abfe:	b944      	cbnz	r4, 800ac12 <__gethex+0x9a>
 800ac00:	1c74      	adds	r4, r6, #1
 800ac02:	4622      	mov	r2, r4
 800ac04:	4616      	mov	r6, r2
 800ac06:	7830      	ldrb	r0, [r6, #0]
 800ac08:	3201      	adds	r2, #1
 800ac0a:	f7ff ffa0 	bl	800ab4e <__hexdig_fun>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d1f8      	bne.n	800ac04 <__gethex+0x8c>
 800ac12:	1ba4      	subs	r4, r4, r6
 800ac14:	00a7      	lsls	r7, r4, #2
 800ac16:	7833      	ldrb	r3, [r6, #0]
 800ac18:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ac1c:	2b50      	cmp	r3, #80	@ 0x50
 800ac1e:	d13e      	bne.n	800ac9e <__gethex+0x126>
 800ac20:	7873      	ldrb	r3, [r6, #1]
 800ac22:	2b2b      	cmp	r3, #43	@ 0x2b
 800ac24:	d033      	beq.n	800ac8e <__gethex+0x116>
 800ac26:	2b2d      	cmp	r3, #45	@ 0x2d
 800ac28:	d034      	beq.n	800ac94 <__gethex+0x11c>
 800ac2a:	2400      	movs	r4, #0
 800ac2c:	1c71      	adds	r1, r6, #1
 800ac2e:	7808      	ldrb	r0, [r1, #0]
 800ac30:	f7ff ff8d 	bl	800ab4e <__hexdig_fun>
 800ac34:	1e43      	subs	r3, r0, #1
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b18      	cmp	r3, #24
 800ac3a:	d830      	bhi.n	800ac9e <__gethex+0x126>
 800ac3c:	f1a0 0210 	sub.w	r2, r0, #16
 800ac40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac44:	f7ff ff83 	bl	800ab4e <__hexdig_fun>
 800ac48:	f100 3cff 	add.w	ip, r0, #4294967295
 800ac4c:	fa5f fc8c 	uxtb.w	ip, ip
 800ac50:	f1bc 0f18 	cmp.w	ip, #24
 800ac54:	f04f 030a 	mov.w	r3, #10
 800ac58:	d91e      	bls.n	800ac98 <__gethex+0x120>
 800ac5a:	b104      	cbz	r4, 800ac5e <__gethex+0xe6>
 800ac5c:	4252      	negs	r2, r2
 800ac5e:	4417      	add	r7, r2
 800ac60:	f8ca 1000 	str.w	r1, [sl]
 800ac64:	b1ed      	cbz	r5, 800aca2 <__gethex+0x12a>
 800ac66:	f1bb 0f00 	cmp.w	fp, #0
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2506      	moveq	r5, #6
 800ac6e:	2500      	movne	r5, #0
 800ac70:	4628      	mov	r0, r5
 800ac72:	b005      	add	sp, #20
 800ac74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac78:	2500      	movs	r5, #0
 800ac7a:	462c      	mov	r4, r5
 800ac7c:	e7b0      	b.n	800abe0 <__gethex+0x68>
 800ac7e:	2c00      	cmp	r4, #0
 800ac80:	d1c7      	bne.n	800ac12 <__gethex+0x9a>
 800ac82:	4627      	mov	r7, r4
 800ac84:	e7c7      	b.n	800ac16 <__gethex+0x9e>
 800ac86:	464e      	mov	r6, r9
 800ac88:	462f      	mov	r7, r5
 800ac8a:	2501      	movs	r5, #1
 800ac8c:	e7c3      	b.n	800ac16 <__gethex+0x9e>
 800ac8e:	2400      	movs	r4, #0
 800ac90:	1cb1      	adds	r1, r6, #2
 800ac92:	e7cc      	b.n	800ac2e <__gethex+0xb6>
 800ac94:	2401      	movs	r4, #1
 800ac96:	e7fb      	b.n	800ac90 <__gethex+0x118>
 800ac98:	fb03 0002 	mla	r0, r3, r2, r0
 800ac9c:	e7ce      	b.n	800ac3c <__gethex+0xc4>
 800ac9e:	4631      	mov	r1, r6
 800aca0:	e7de      	b.n	800ac60 <__gethex+0xe8>
 800aca2:	4629      	mov	r1, r5
 800aca4:	eba6 0309 	sub.w	r3, r6, r9
 800aca8:	3b01      	subs	r3, #1
 800acaa:	2b07      	cmp	r3, #7
 800acac:	dc0a      	bgt.n	800acc4 <__gethex+0x14c>
 800acae:	9801      	ldr	r0, [sp, #4]
 800acb0:	f7fd ffa8 	bl	8008c04 <_Balloc>
 800acb4:	4604      	mov	r4, r0
 800acb6:	b940      	cbnz	r0, 800acca <__gethex+0x152>
 800acb8:	4602      	mov	r2, r0
 800acba:	21e4      	movs	r1, #228	@ 0xe4
 800acbc:	4b5b      	ldr	r3, [pc, #364]	@ (800ae2c <__gethex+0x2b4>)
 800acbe:	485c      	ldr	r0, [pc, #368]	@ (800ae30 <__gethex+0x2b8>)
 800acc0:	f7ff fec0 	bl	800aa44 <__assert_func>
 800acc4:	3101      	adds	r1, #1
 800acc6:	105b      	asrs	r3, r3, #1
 800acc8:	e7ef      	b.n	800acaa <__gethex+0x132>
 800acca:	2300      	movs	r3, #0
 800accc:	f100 0a14 	add.w	sl, r0, #20
 800acd0:	4655      	mov	r5, sl
 800acd2:	469b      	mov	fp, r3
 800acd4:	45b1      	cmp	r9, r6
 800acd6:	d337      	bcc.n	800ad48 <__gethex+0x1d0>
 800acd8:	f845 bb04 	str.w	fp, [r5], #4
 800acdc:	eba5 050a 	sub.w	r5, r5, sl
 800ace0:	10ad      	asrs	r5, r5, #2
 800ace2:	6125      	str	r5, [r4, #16]
 800ace4:	4658      	mov	r0, fp
 800ace6:	f7fe f87f 	bl	8008de8 <__hi0bits>
 800acea:	016d      	lsls	r5, r5, #5
 800acec:	f8d8 6000 	ldr.w	r6, [r8]
 800acf0:	1a2d      	subs	r5, r5, r0
 800acf2:	42b5      	cmp	r5, r6
 800acf4:	dd54      	ble.n	800ada0 <__gethex+0x228>
 800acf6:	1bad      	subs	r5, r5, r6
 800acf8:	4629      	mov	r1, r5
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7fe fc07 	bl	800950e <__any_on>
 800ad00:	4681      	mov	r9, r0
 800ad02:	b178      	cbz	r0, 800ad24 <__gethex+0x1ac>
 800ad04:	f04f 0901 	mov.w	r9, #1
 800ad08:	1e6b      	subs	r3, r5, #1
 800ad0a:	1159      	asrs	r1, r3, #5
 800ad0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad10:	f003 021f 	and.w	r2, r3, #31
 800ad14:	fa09 f202 	lsl.w	r2, r9, r2
 800ad18:	420a      	tst	r2, r1
 800ad1a:	d003      	beq.n	800ad24 <__gethex+0x1ac>
 800ad1c:	454b      	cmp	r3, r9
 800ad1e:	dc36      	bgt.n	800ad8e <__gethex+0x216>
 800ad20:	f04f 0902 	mov.w	r9, #2
 800ad24:	4629      	mov	r1, r5
 800ad26:	4620      	mov	r0, r4
 800ad28:	f7ff febe 	bl	800aaa8 <rshift>
 800ad2c:	442f      	add	r7, r5
 800ad2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad32:	42bb      	cmp	r3, r7
 800ad34:	da42      	bge.n	800adbc <__gethex+0x244>
 800ad36:	4621      	mov	r1, r4
 800ad38:	9801      	ldr	r0, [sp, #4]
 800ad3a:	f7fd ffa3 	bl	8008c84 <_Bfree>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad42:	25a3      	movs	r5, #163	@ 0xa3
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	e793      	b.n	800ac70 <__gethex+0xf8>
 800ad48:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ad4c:	2a2e      	cmp	r2, #46	@ 0x2e
 800ad4e:	d012      	beq.n	800ad76 <__gethex+0x1fe>
 800ad50:	2b20      	cmp	r3, #32
 800ad52:	d104      	bne.n	800ad5e <__gethex+0x1e6>
 800ad54:	f845 bb04 	str.w	fp, [r5], #4
 800ad58:	f04f 0b00 	mov.w	fp, #0
 800ad5c:	465b      	mov	r3, fp
 800ad5e:	7830      	ldrb	r0, [r6, #0]
 800ad60:	9303      	str	r3, [sp, #12]
 800ad62:	f7ff fef4 	bl	800ab4e <__hexdig_fun>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	f000 000f 	and.w	r0, r0, #15
 800ad6c:	4098      	lsls	r0, r3
 800ad6e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ad72:	3304      	adds	r3, #4
 800ad74:	e7ae      	b.n	800acd4 <__gethex+0x15c>
 800ad76:	45b1      	cmp	r9, r6
 800ad78:	d8ea      	bhi.n	800ad50 <__gethex+0x1d8>
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	492a      	ldr	r1, [pc, #168]	@ (800ae28 <__gethex+0x2b0>)
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	f7ff fe37 	bl	800a9f4 <strncmp>
 800ad86:	9b03      	ldr	r3, [sp, #12]
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d1e1      	bne.n	800ad50 <__gethex+0x1d8>
 800ad8c:	e7a2      	b.n	800acd4 <__gethex+0x15c>
 800ad8e:	4620      	mov	r0, r4
 800ad90:	1ea9      	subs	r1, r5, #2
 800ad92:	f7fe fbbc 	bl	800950e <__any_on>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d0c2      	beq.n	800ad20 <__gethex+0x1a8>
 800ad9a:	f04f 0903 	mov.w	r9, #3
 800ad9e:	e7c1      	b.n	800ad24 <__gethex+0x1ac>
 800ada0:	da09      	bge.n	800adb6 <__gethex+0x23e>
 800ada2:	1b75      	subs	r5, r6, r5
 800ada4:	4621      	mov	r1, r4
 800ada6:	462a      	mov	r2, r5
 800ada8:	9801      	ldr	r0, [sp, #4]
 800adaa:	f7fe f981 	bl	80090b0 <__lshift>
 800adae:	4604      	mov	r4, r0
 800adb0:	1b7f      	subs	r7, r7, r5
 800adb2:	f100 0a14 	add.w	sl, r0, #20
 800adb6:	f04f 0900 	mov.w	r9, #0
 800adba:	e7b8      	b.n	800ad2e <__gethex+0x1b6>
 800adbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800adc0:	42bd      	cmp	r5, r7
 800adc2:	dd6f      	ble.n	800aea4 <__gethex+0x32c>
 800adc4:	1bed      	subs	r5, r5, r7
 800adc6:	42ae      	cmp	r6, r5
 800adc8:	dc34      	bgt.n	800ae34 <__gethex+0x2bc>
 800adca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adce:	2b02      	cmp	r3, #2
 800add0:	d022      	beq.n	800ae18 <__gethex+0x2a0>
 800add2:	2b03      	cmp	r3, #3
 800add4:	d024      	beq.n	800ae20 <__gethex+0x2a8>
 800add6:	2b01      	cmp	r3, #1
 800add8:	d115      	bne.n	800ae06 <__gethex+0x28e>
 800adda:	42ae      	cmp	r6, r5
 800addc:	d113      	bne.n	800ae06 <__gethex+0x28e>
 800adde:	2e01      	cmp	r6, #1
 800ade0:	d10b      	bne.n	800adfa <__gethex+0x282>
 800ade2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ade6:	9a02      	ldr	r2, [sp, #8]
 800ade8:	2562      	movs	r5, #98	@ 0x62
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	2301      	movs	r3, #1
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	f8ca 3000 	str.w	r3, [sl]
 800adf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adf6:	601c      	str	r4, [r3, #0]
 800adf8:	e73a      	b.n	800ac70 <__gethex+0xf8>
 800adfa:	4620      	mov	r0, r4
 800adfc:	1e71      	subs	r1, r6, #1
 800adfe:	f7fe fb86 	bl	800950e <__any_on>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d1ed      	bne.n	800ade2 <__gethex+0x26a>
 800ae06:	4621      	mov	r1, r4
 800ae08:	9801      	ldr	r0, [sp, #4]
 800ae0a:	f7fd ff3b 	bl	8008c84 <_Bfree>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae12:	2550      	movs	r5, #80	@ 0x50
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	e72b      	b.n	800ac70 <__gethex+0xf8>
 800ae18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1f3      	bne.n	800ae06 <__gethex+0x28e>
 800ae1e:	e7e0      	b.n	800ade2 <__gethex+0x26a>
 800ae20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1dd      	bne.n	800ade2 <__gethex+0x26a>
 800ae26:	e7ee      	b.n	800ae06 <__gethex+0x28e>
 800ae28:	0800beb0 	.word	0x0800beb0
 800ae2c:	0800bd43 	.word	0x0800bd43
 800ae30:	0800c05e 	.word	0x0800c05e
 800ae34:	1e6f      	subs	r7, r5, #1
 800ae36:	f1b9 0f00 	cmp.w	r9, #0
 800ae3a:	d130      	bne.n	800ae9e <__gethex+0x326>
 800ae3c:	b127      	cbz	r7, 800ae48 <__gethex+0x2d0>
 800ae3e:	4639      	mov	r1, r7
 800ae40:	4620      	mov	r0, r4
 800ae42:	f7fe fb64 	bl	800950e <__any_on>
 800ae46:	4681      	mov	r9, r0
 800ae48:	2301      	movs	r3, #1
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	1b76      	subs	r6, r6, r5
 800ae4e:	2502      	movs	r5, #2
 800ae50:	117a      	asrs	r2, r7, #5
 800ae52:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ae56:	f007 071f 	and.w	r7, r7, #31
 800ae5a:	40bb      	lsls	r3, r7
 800ae5c:	4213      	tst	r3, r2
 800ae5e:	4620      	mov	r0, r4
 800ae60:	bf18      	it	ne
 800ae62:	f049 0902 	orrne.w	r9, r9, #2
 800ae66:	f7ff fe1f 	bl	800aaa8 <rshift>
 800ae6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ae6e:	f1b9 0f00 	cmp.w	r9, #0
 800ae72:	d047      	beq.n	800af04 <__gethex+0x38c>
 800ae74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d015      	beq.n	800aea8 <__gethex+0x330>
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d017      	beq.n	800aeb0 <__gethex+0x338>
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d109      	bne.n	800ae98 <__gethex+0x320>
 800ae84:	f019 0f02 	tst.w	r9, #2
 800ae88:	d006      	beq.n	800ae98 <__gethex+0x320>
 800ae8a:	f8da 3000 	ldr.w	r3, [sl]
 800ae8e:	ea49 0903 	orr.w	r9, r9, r3
 800ae92:	f019 0f01 	tst.w	r9, #1
 800ae96:	d10e      	bne.n	800aeb6 <__gethex+0x33e>
 800ae98:	f045 0510 	orr.w	r5, r5, #16
 800ae9c:	e032      	b.n	800af04 <__gethex+0x38c>
 800ae9e:	f04f 0901 	mov.w	r9, #1
 800aea2:	e7d1      	b.n	800ae48 <__gethex+0x2d0>
 800aea4:	2501      	movs	r5, #1
 800aea6:	e7e2      	b.n	800ae6e <__gethex+0x2f6>
 800aea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeaa:	f1c3 0301 	rsb	r3, r3, #1
 800aeae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aeb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0f0      	beq.n	800ae98 <__gethex+0x320>
 800aeb6:	f04f 0c00 	mov.w	ip, #0
 800aeba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aebe:	f104 0314 	add.w	r3, r4, #20
 800aec2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aec6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aeca:	4618      	mov	r0, r3
 800aecc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aed4:	d01b      	beq.n	800af0e <__gethex+0x396>
 800aed6:	3201      	adds	r2, #1
 800aed8:	6002      	str	r2, [r0, #0]
 800aeda:	2d02      	cmp	r5, #2
 800aedc:	f104 0314 	add.w	r3, r4, #20
 800aee0:	d13c      	bne.n	800af5c <__gethex+0x3e4>
 800aee2:	f8d8 2000 	ldr.w	r2, [r8]
 800aee6:	3a01      	subs	r2, #1
 800aee8:	42b2      	cmp	r2, r6
 800aeea:	d109      	bne.n	800af00 <__gethex+0x388>
 800aeec:	2201      	movs	r2, #1
 800aeee:	1171      	asrs	r1, r6, #5
 800aef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aef4:	f006 061f 	and.w	r6, r6, #31
 800aef8:	fa02 f606 	lsl.w	r6, r2, r6
 800aefc:	421e      	tst	r6, r3
 800aefe:	d13a      	bne.n	800af76 <__gethex+0x3fe>
 800af00:	f045 0520 	orr.w	r5, r5, #32
 800af04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af06:	601c      	str	r4, [r3, #0]
 800af08:	9b02      	ldr	r3, [sp, #8]
 800af0a:	601f      	str	r7, [r3, #0]
 800af0c:	e6b0      	b.n	800ac70 <__gethex+0xf8>
 800af0e:	4299      	cmp	r1, r3
 800af10:	f843 cc04 	str.w	ip, [r3, #-4]
 800af14:	d8d9      	bhi.n	800aeca <__gethex+0x352>
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	459b      	cmp	fp, r3
 800af1a:	db17      	blt.n	800af4c <__gethex+0x3d4>
 800af1c:	6861      	ldr	r1, [r4, #4]
 800af1e:	9801      	ldr	r0, [sp, #4]
 800af20:	3101      	adds	r1, #1
 800af22:	f7fd fe6f 	bl	8008c04 <_Balloc>
 800af26:	4681      	mov	r9, r0
 800af28:	b918      	cbnz	r0, 800af32 <__gethex+0x3ba>
 800af2a:	4602      	mov	r2, r0
 800af2c:	2184      	movs	r1, #132	@ 0x84
 800af2e:	4b19      	ldr	r3, [pc, #100]	@ (800af94 <__gethex+0x41c>)
 800af30:	e6c5      	b.n	800acbe <__gethex+0x146>
 800af32:	6922      	ldr	r2, [r4, #16]
 800af34:	f104 010c 	add.w	r1, r4, #12
 800af38:	3202      	adds	r2, #2
 800af3a:	0092      	lsls	r2, r2, #2
 800af3c:	300c      	adds	r0, #12
 800af3e:	f7fc fefe 	bl	8007d3e <memcpy>
 800af42:	4621      	mov	r1, r4
 800af44:	9801      	ldr	r0, [sp, #4]
 800af46:	f7fd fe9d 	bl	8008c84 <_Bfree>
 800af4a:	464c      	mov	r4, r9
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	6122      	str	r2, [r4, #16]
 800af52:	2201      	movs	r2, #1
 800af54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af58:	615a      	str	r2, [r3, #20]
 800af5a:	e7be      	b.n	800aeda <__gethex+0x362>
 800af5c:	6922      	ldr	r2, [r4, #16]
 800af5e:	455a      	cmp	r2, fp
 800af60:	dd0b      	ble.n	800af7a <__gethex+0x402>
 800af62:	2101      	movs	r1, #1
 800af64:	4620      	mov	r0, r4
 800af66:	f7ff fd9f 	bl	800aaa8 <rshift>
 800af6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af6e:	3701      	adds	r7, #1
 800af70:	42bb      	cmp	r3, r7
 800af72:	f6ff aee0 	blt.w	800ad36 <__gethex+0x1be>
 800af76:	2501      	movs	r5, #1
 800af78:	e7c2      	b.n	800af00 <__gethex+0x388>
 800af7a:	f016 061f 	ands.w	r6, r6, #31
 800af7e:	d0fa      	beq.n	800af76 <__gethex+0x3fe>
 800af80:	4453      	add	r3, sl
 800af82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800af86:	f7fd ff2f 	bl	8008de8 <__hi0bits>
 800af8a:	f1c6 0620 	rsb	r6, r6, #32
 800af8e:	42b0      	cmp	r0, r6
 800af90:	dbe7      	blt.n	800af62 <__gethex+0x3ea>
 800af92:	e7f0      	b.n	800af76 <__gethex+0x3fe>
 800af94:	0800bd43 	.word	0x0800bd43

0800af98 <L_shift>:
 800af98:	f1c2 0208 	rsb	r2, r2, #8
 800af9c:	0092      	lsls	r2, r2, #2
 800af9e:	b570      	push	{r4, r5, r6, lr}
 800afa0:	f1c2 0620 	rsb	r6, r2, #32
 800afa4:	6843      	ldr	r3, [r0, #4]
 800afa6:	6804      	ldr	r4, [r0, #0]
 800afa8:	fa03 f506 	lsl.w	r5, r3, r6
 800afac:	432c      	orrs	r4, r5
 800afae:	40d3      	lsrs	r3, r2
 800afb0:	6004      	str	r4, [r0, #0]
 800afb2:	f840 3f04 	str.w	r3, [r0, #4]!
 800afb6:	4288      	cmp	r0, r1
 800afb8:	d3f4      	bcc.n	800afa4 <L_shift+0xc>
 800afba:	bd70      	pop	{r4, r5, r6, pc}

0800afbc <__match>:
 800afbc:	b530      	push	{r4, r5, lr}
 800afbe:	6803      	ldr	r3, [r0, #0]
 800afc0:	3301      	adds	r3, #1
 800afc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afc6:	b914      	cbnz	r4, 800afce <__match+0x12>
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	2001      	movs	r0, #1
 800afcc:	bd30      	pop	{r4, r5, pc}
 800afce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afd2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800afd6:	2d19      	cmp	r5, #25
 800afd8:	bf98      	it	ls
 800afda:	3220      	addls	r2, #32
 800afdc:	42a2      	cmp	r2, r4
 800afde:	d0f0      	beq.n	800afc2 <__match+0x6>
 800afe0:	2000      	movs	r0, #0
 800afe2:	e7f3      	b.n	800afcc <__match+0x10>

0800afe4 <__hexnan>:
 800afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	2500      	movs	r5, #0
 800afea:	680b      	ldr	r3, [r1, #0]
 800afec:	4682      	mov	sl, r0
 800afee:	115e      	asrs	r6, r3, #5
 800aff0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aff4:	f013 031f 	ands.w	r3, r3, #31
 800aff8:	bf18      	it	ne
 800affa:	3604      	addne	r6, #4
 800affc:	1f37      	subs	r7, r6, #4
 800affe:	4690      	mov	r8, r2
 800b000:	46b9      	mov	r9, r7
 800b002:	463c      	mov	r4, r7
 800b004:	46ab      	mov	fp, r5
 800b006:	b087      	sub	sp, #28
 800b008:	6801      	ldr	r1, [r0, #0]
 800b00a:	9301      	str	r3, [sp, #4]
 800b00c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b010:	9502      	str	r5, [sp, #8]
 800b012:	784a      	ldrb	r2, [r1, #1]
 800b014:	1c4b      	adds	r3, r1, #1
 800b016:	9303      	str	r3, [sp, #12]
 800b018:	b342      	cbz	r2, 800b06c <__hexnan+0x88>
 800b01a:	4610      	mov	r0, r2
 800b01c:	9105      	str	r1, [sp, #20]
 800b01e:	9204      	str	r2, [sp, #16]
 800b020:	f7ff fd95 	bl	800ab4e <__hexdig_fun>
 800b024:	2800      	cmp	r0, #0
 800b026:	d151      	bne.n	800b0cc <__hexnan+0xe8>
 800b028:	9a04      	ldr	r2, [sp, #16]
 800b02a:	9905      	ldr	r1, [sp, #20]
 800b02c:	2a20      	cmp	r2, #32
 800b02e:	d818      	bhi.n	800b062 <__hexnan+0x7e>
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	459b      	cmp	fp, r3
 800b034:	dd13      	ble.n	800b05e <__hexnan+0x7a>
 800b036:	454c      	cmp	r4, r9
 800b038:	d206      	bcs.n	800b048 <__hexnan+0x64>
 800b03a:	2d07      	cmp	r5, #7
 800b03c:	dc04      	bgt.n	800b048 <__hexnan+0x64>
 800b03e:	462a      	mov	r2, r5
 800b040:	4649      	mov	r1, r9
 800b042:	4620      	mov	r0, r4
 800b044:	f7ff ffa8 	bl	800af98 <L_shift>
 800b048:	4544      	cmp	r4, r8
 800b04a:	d952      	bls.n	800b0f2 <__hexnan+0x10e>
 800b04c:	2300      	movs	r3, #0
 800b04e:	f1a4 0904 	sub.w	r9, r4, #4
 800b052:	f844 3c04 	str.w	r3, [r4, #-4]
 800b056:	461d      	mov	r5, r3
 800b058:	464c      	mov	r4, r9
 800b05a:	f8cd b008 	str.w	fp, [sp, #8]
 800b05e:	9903      	ldr	r1, [sp, #12]
 800b060:	e7d7      	b.n	800b012 <__hexnan+0x2e>
 800b062:	2a29      	cmp	r2, #41	@ 0x29
 800b064:	d157      	bne.n	800b116 <__hexnan+0x132>
 800b066:	3102      	adds	r1, #2
 800b068:	f8ca 1000 	str.w	r1, [sl]
 800b06c:	f1bb 0f00 	cmp.w	fp, #0
 800b070:	d051      	beq.n	800b116 <__hexnan+0x132>
 800b072:	454c      	cmp	r4, r9
 800b074:	d206      	bcs.n	800b084 <__hexnan+0xa0>
 800b076:	2d07      	cmp	r5, #7
 800b078:	dc04      	bgt.n	800b084 <__hexnan+0xa0>
 800b07a:	462a      	mov	r2, r5
 800b07c:	4649      	mov	r1, r9
 800b07e:	4620      	mov	r0, r4
 800b080:	f7ff ff8a 	bl	800af98 <L_shift>
 800b084:	4544      	cmp	r4, r8
 800b086:	d936      	bls.n	800b0f6 <__hexnan+0x112>
 800b088:	4623      	mov	r3, r4
 800b08a:	f1a8 0204 	sub.w	r2, r8, #4
 800b08e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b092:	429f      	cmp	r7, r3
 800b094:	f842 1f04 	str.w	r1, [r2, #4]!
 800b098:	d2f9      	bcs.n	800b08e <__hexnan+0xaa>
 800b09a:	1b3b      	subs	r3, r7, r4
 800b09c:	f023 0303 	bic.w	r3, r3, #3
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	3401      	adds	r4, #1
 800b0a4:	3e03      	subs	r6, #3
 800b0a6:	42b4      	cmp	r4, r6
 800b0a8:	bf88      	it	hi
 800b0aa:	2304      	movhi	r3, #4
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4443      	add	r3, r8
 800b0b0:	f843 2b04 	str.w	r2, [r3], #4
 800b0b4:	429f      	cmp	r7, r3
 800b0b6:	d2fb      	bcs.n	800b0b0 <__hexnan+0xcc>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	b91b      	cbnz	r3, 800b0c4 <__hexnan+0xe0>
 800b0bc:	4547      	cmp	r7, r8
 800b0be:	d128      	bne.n	800b112 <__hexnan+0x12e>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	603b      	str	r3, [r7, #0]
 800b0c4:	2005      	movs	r0, #5
 800b0c6:	b007      	add	sp, #28
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	3501      	adds	r5, #1
 800b0ce:	2d08      	cmp	r5, #8
 800b0d0:	f10b 0b01 	add.w	fp, fp, #1
 800b0d4:	dd06      	ble.n	800b0e4 <__hexnan+0x100>
 800b0d6:	4544      	cmp	r4, r8
 800b0d8:	d9c1      	bls.n	800b05e <__hexnan+0x7a>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	2501      	movs	r5, #1
 800b0de:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0e2:	3c04      	subs	r4, #4
 800b0e4:	6822      	ldr	r2, [r4, #0]
 800b0e6:	f000 000f 	and.w	r0, r0, #15
 800b0ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b0ee:	6020      	str	r0, [r4, #0]
 800b0f0:	e7b5      	b.n	800b05e <__hexnan+0x7a>
 800b0f2:	2508      	movs	r5, #8
 800b0f4:	e7b3      	b.n	800b05e <__hexnan+0x7a>
 800b0f6:	9b01      	ldr	r3, [sp, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0dd      	beq.n	800b0b8 <__hexnan+0xd4>
 800b0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b100:	f1c3 0320 	rsb	r3, r3, #32
 800b104:	40da      	lsrs	r2, r3
 800b106:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b10a:	4013      	ands	r3, r2
 800b10c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b110:	e7d2      	b.n	800b0b8 <__hexnan+0xd4>
 800b112:	3f04      	subs	r7, #4
 800b114:	e7d0      	b.n	800b0b8 <__hexnan+0xd4>
 800b116:	2004      	movs	r0, #4
 800b118:	e7d5      	b.n	800b0c6 <__hexnan+0xe2>

0800b11a <__ascii_mbtowc>:
 800b11a:	b082      	sub	sp, #8
 800b11c:	b901      	cbnz	r1, 800b120 <__ascii_mbtowc+0x6>
 800b11e:	a901      	add	r1, sp, #4
 800b120:	b142      	cbz	r2, 800b134 <__ascii_mbtowc+0x1a>
 800b122:	b14b      	cbz	r3, 800b138 <__ascii_mbtowc+0x1e>
 800b124:	7813      	ldrb	r3, [r2, #0]
 800b126:	600b      	str	r3, [r1, #0]
 800b128:	7812      	ldrb	r2, [r2, #0]
 800b12a:	1e10      	subs	r0, r2, #0
 800b12c:	bf18      	it	ne
 800b12e:	2001      	movne	r0, #1
 800b130:	b002      	add	sp, #8
 800b132:	4770      	bx	lr
 800b134:	4610      	mov	r0, r2
 800b136:	e7fb      	b.n	800b130 <__ascii_mbtowc+0x16>
 800b138:	f06f 0001 	mvn.w	r0, #1
 800b13c:	e7f8      	b.n	800b130 <__ascii_mbtowc+0x16>

0800b13e <_realloc_r>:
 800b13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b142:	4680      	mov	r8, r0
 800b144:	4615      	mov	r5, r2
 800b146:	460c      	mov	r4, r1
 800b148:	b921      	cbnz	r1, 800b154 <_realloc_r+0x16>
 800b14a:	4611      	mov	r1, r2
 800b14c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b150:	f7fd bccc 	b.w	8008aec <_malloc_r>
 800b154:	b92a      	cbnz	r2, 800b162 <_realloc_r+0x24>
 800b156:	f7fd fc57 	bl	8008a08 <_free_r>
 800b15a:	2400      	movs	r4, #0
 800b15c:	4620      	mov	r0, r4
 800b15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b162:	f000 f8c4 	bl	800b2ee <_malloc_usable_size_r>
 800b166:	4285      	cmp	r5, r0
 800b168:	4606      	mov	r6, r0
 800b16a:	d802      	bhi.n	800b172 <_realloc_r+0x34>
 800b16c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b170:	d8f4      	bhi.n	800b15c <_realloc_r+0x1e>
 800b172:	4629      	mov	r1, r5
 800b174:	4640      	mov	r0, r8
 800b176:	f7fd fcb9 	bl	8008aec <_malloc_r>
 800b17a:	4607      	mov	r7, r0
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d0ec      	beq.n	800b15a <_realloc_r+0x1c>
 800b180:	42b5      	cmp	r5, r6
 800b182:	462a      	mov	r2, r5
 800b184:	4621      	mov	r1, r4
 800b186:	bf28      	it	cs
 800b188:	4632      	movcs	r2, r6
 800b18a:	f7fc fdd8 	bl	8007d3e <memcpy>
 800b18e:	4621      	mov	r1, r4
 800b190:	4640      	mov	r0, r8
 800b192:	f7fd fc39 	bl	8008a08 <_free_r>
 800b196:	463c      	mov	r4, r7
 800b198:	e7e0      	b.n	800b15c <_realloc_r+0x1e>

0800b19a <__ascii_wctomb>:
 800b19a:	4603      	mov	r3, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	b141      	cbz	r1, 800b1b2 <__ascii_wctomb+0x18>
 800b1a0:	2aff      	cmp	r2, #255	@ 0xff
 800b1a2:	d904      	bls.n	800b1ae <__ascii_wctomb+0x14>
 800b1a4:	228a      	movs	r2, #138	@ 0x8a
 800b1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	4770      	bx	lr
 800b1ae:	2001      	movs	r0, #1
 800b1b0:	700a      	strb	r2, [r1, #0]
 800b1b2:	4770      	bx	lr

0800b1b4 <fiprintf>:
 800b1b4:	b40e      	push	{r1, r2, r3}
 800b1b6:	b503      	push	{r0, r1, lr}
 800b1b8:	4601      	mov	r1, r0
 800b1ba:	ab03      	add	r3, sp, #12
 800b1bc:	4805      	ldr	r0, [pc, #20]	@ (800b1d4 <fiprintf+0x20>)
 800b1be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c2:	6800      	ldr	r0, [r0, #0]
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	f7ff f9c1 	bl	800a54c <_vfiprintf_r>
 800b1ca:	b002      	add	sp, #8
 800b1cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1d0:	b003      	add	sp, #12
 800b1d2:	4770      	bx	lr
 800b1d4:	20000030 	.word	0x20000030

0800b1d8 <__swhatbuf_r>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	2900      	cmp	r1, #0
 800b1e4:	461e      	mov	r6, r3
 800b1e6:	b096      	sub	sp, #88	@ 0x58
 800b1e8:	da0c      	bge.n	800b204 <__swhatbuf_r+0x2c>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1f2:	bf14      	ite	ne
 800b1f4:	2340      	movne	r3, #64	@ 0x40
 800b1f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	6031      	str	r1, [r6, #0]
 800b1fe:	602b      	str	r3, [r5, #0]
 800b200:	b016      	add	sp, #88	@ 0x58
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	466a      	mov	r2, sp
 800b206:	f000 f849 	bl	800b29c <_fstat_r>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	dbed      	blt.n	800b1ea <__swhatbuf_r+0x12>
 800b20e:	9901      	ldr	r1, [sp, #4]
 800b210:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b214:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b218:	4259      	negs	r1, r3
 800b21a:	4159      	adcs	r1, r3
 800b21c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b220:	e7eb      	b.n	800b1fa <__swhatbuf_r+0x22>

0800b222 <__smakebuf_r>:
 800b222:	898b      	ldrh	r3, [r1, #12]
 800b224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b226:	079d      	lsls	r5, r3, #30
 800b228:	4606      	mov	r6, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	d507      	bpl.n	800b23e <__smakebuf_r+0x1c>
 800b22e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b232:	6023      	str	r3, [r4, #0]
 800b234:	6123      	str	r3, [r4, #16]
 800b236:	2301      	movs	r3, #1
 800b238:	6163      	str	r3, [r4, #20]
 800b23a:	b003      	add	sp, #12
 800b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23e:	466a      	mov	r2, sp
 800b240:	ab01      	add	r3, sp, #4
 800b242:	f7ff ffc9 	bl	800b1d8 <__swhatbuf_r>
 800b246:	9f00      	ldr	r7, [sp, #0]
 800b248:	4605      	mov	r5, r0
 800b24a:	4639      	mov	r1, r7
 800b24c:	4630      	mov	r0, r6
 800b24e:	f7fd fc4d 	bl	8008aec <_malloc_r>
 800b252:	b948      	cbnz	r0, 800b268 <__smakebuf_r+0x46>
 800b254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b258:	059a      	lsls	r2, r3, #22
 800b25a:	d4ee      	bmi.n	800b23a <__smakebuf_r+0x18>
 800b25c:	f023 0303 	bic.w	r3, r3, #3
 800b260:	f043 0302 	orr.w	r3, r3, #2
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	e7e2      	b.n	800b22e <__smakebuf_r+0xc>
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b272:	81a3      	strh	r3, [r4, #12]
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	6020      	str	r0, [r4, #0]
 800b278:	b15b      	cbz	r3, 800b292 <__smakebuf_r+0x70>
 800b27a:	4630      	mov	r0, r6
 800b27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b280:	f000 f81e 	bl	800b2c0 <_isatty_r>
 800b284:	b128      	cbz	r0, 800b292 <__smakebuf_r+0x70>
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f023 0303 	bic.w	r3, r3, #3
 800b28c:	f043 0301 	orr.w	r3, r3, #1
 800b290:	81a3      	strh	r3, [r4, #12]
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	431d      	orrs	r5, r3
 800b296:	81a5      	strh	r5, [r4, #12]
 800b298:	e7cf      	b.n	800b23a <__smakebuf_r+0x18>
	...

0800b29c <_fstat_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4d06      	ldr	r5, [pc, #24]	@ (800b2bc <_fstat_r+0x20>)
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	f7f7 faa3 	bl	80027f4 <_fstat>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	d102      	bne.n	800b2b8 <_fstat_r+0x1c>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	b103      	cbz	r3, 800b2b8 <_fstat_r+0x1c>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200008c8 	.word	0x200008c8

0800b2c0 <_isatty_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	4d05      	ldr	r5, [pc, #20]	@ (800b2dc <_isatty_r+0x1c>)
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	602b      	str	r3, [r5, #0]
 800b2cc:	f7f7 faa1 	bl	8002812 <_isatty>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_isatty_r+0x1a>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_isatty_r+0x1a>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	200008c8 	.word	0x200008c8

0800b2e0 <abort>:
 800b2e0:	2006      	movs	r0, #6
 800b2e2:	b508      	push	{r3, lr}
 800b2e4:	f000 f834 	bl	800b350 <raise>
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	f7f7 fa34 	bl	8002756 <_exit>

0800b2ee <_malloc_usable_size_r>:
 800b2ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f2:	1f18      	subs	r0, r3, #4
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	bfbc      	itt	lt
 800b2f8:	580b      	ldrlt	r3, [r1, r0]
 800b2fa:	18c0      	addlt	r0, r0, r3
 800b2fc:	4770      	bx	lr

0800b2fe <_raise_r>:
 800b2fe:	291f      	cmp	r1, #31
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4605      	mov	r5, r0
 800b304:	460c      	mov	r4, r1
 800b306:	d904      	bls.n	800b312 <_raise_r+0x14>
 800b308:	2316      	movs	r3, #22
 800b30a:	6003      	str	r3, [r0, #0]
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	bd38      	pop	{r3, r4, r5, pc}
 800b312:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b314:	b112      	cbz	r2, 800b31c <_raise_r+0x1e>
 800b316:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b31a:	b94b      	cbnz	r3, 800b330 <_raise_r+0x32>
 800b31c:	4628      	mov	r0, r5
 800b31e:	f000 f831 	bl	800b384 <_getpid_r>
 800b322:	4622      	mov	r2, r4
 800b324:	4601      	mov	r1, r0
 800b326:	4628      	mov	r0, r5
 800b328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b32c:	f000 b818 	b.w	800b360 <_kill_r>
 800b330:	2b01      	cmp	r3, #1
 800b332:	d00a      	beq.n	800b34a <_raise_r+0x4c>
 800b334:	1c59      	adds	r1, r3, #1
 800b336:	d103      	bne.n	800b340 <_raise_r+0x42>
 800b338:	2316      	movs	r3, #22
 800b33a:	6003      	str	r3, [r0, #0]
 800b33c:	2001      	movs	r0, #1
 800b33e:	e7e7      	b.n	800b310 <_raise_r+0x12>
 800b340:	2100      	movs	r1, #0
 800b342:	4620      	mov	r0, r4
 800b344:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b348:	4798      	blx	r3
 800b34a:	2000      	movs	r0, #0
 800b34c:	e7e0      	b.n	800b310 <_raise_r+0x12>
	...

0800b350 <raise>:
 800b350:	4b02      	ldr	r3, [pc, #8]	@ (800b35c <raise+0xc>)
 800b352:	4601      	mov	r1, r0
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	f7ff bfd2 	b.w	800b2fe <_raise_r>
 800b35a:	bf00      	nop
 800b35c:	20000030 	.word	0x20000030

0800b360 <_kill_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	2300      	movs	r3, #0
 800b364:	4d06      	ldr	r5, [pc, #24]	@ (800b380 <_kill_r+0x20>)
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	4611      	mov	r1, r2
 800b36c:	602b      	str	r3, [r5, #0]
 800b36e:	f7f7 f9e2 	bl	8002736 <_kill>
 800b372:	1c43      	adds	r3, r0, #1
 800b374:	d102      	bne.n	800b37c <_kill_r+0x1c>
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	b103      	cbz	r3, 800b37c <_kill_r+0x1c>
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	bd38      	pop	{r3, r4, r5, pc}
 800b37e:	bf00      	nop
 800b380:	200008c8 	.word	0x200008c8

0800b384 <_getpid_r>:
 800b384:	f7f7 b9d0 	b.w	8002728 <_getpid>

0800b388 <_init>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	bf00      	nop
 800b38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38e:	bc08      	pop	{r3}
 800b390:	469e      	mov	lr, r3
 800b392:	4770      	bx	lr

0800b394 <_fini>:
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b396:	bf00      	nop
 800b398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b39a:	bc08      	pop	{r3}
 800b39c:	469e      	mov	lr, r3
 800b39e:	4770      	bx	lr
